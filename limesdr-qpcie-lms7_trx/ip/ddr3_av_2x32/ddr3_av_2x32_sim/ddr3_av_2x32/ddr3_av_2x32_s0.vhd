-- ddr3_av_2x32_s0.vhd

-- This file was auto-generated from qsys_sequencer_110_hw.tcl.  If you edit it your changes
-- will probably be lost.
-- 
-- Generated using ACDS version 18.0 614

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity ddr3_av_2x32_s0 is
	port (
		avl_clk                 : in  std_logic                     := '0';             --          avl_clk.clk
		avl_reset_n             : in  std_logic                     := '0';             --    sequencer_rst.reset
		avl_address             : out std_logic_vector(15 downto 0);                    --              avl.address
		avl_read                : out std_logic;                                        --                 .read
		avl_readdata            : in  std_logic_vector(31 downto 0) := (others => '0'); --                 .readdata
		avl_write               : out std_logic;                                        --                 .write
		avl_writedata           : out std_logic_vector(31 downto 0);                    --                 .writedata
		avl_waitrequest         : in  std_logic                     := '0';             --                 .waitrequest
		scc_data                : out std_logic_vector(0 downto 0);                     --              scc.scc_data
		scc_dqs_ena             : out std_logic_vector(3 downto 0);                     --                 .scc_dqs_ena
		scc_dqs_io_ena          : out std_logic_vector(3 downto 0);                     --                 .scc_dqs_io_ena
		scc_dq_ena              : out std_logic_vector(31 downto 0);                    --                 .scc_dq_ena
		scc_dm_ena              : out std_logic_vector(3 downto 0);                     --                 .scc_dm_ena
		capture_strobe_tracking : in  std_logic_vector(3 downto 0)  := (others => '0'); --                 .capture_strobe_tracking
		scc_upd                 : out std_logic_vector(0 downto 0);                     --                 .scc_upd
		afi_init_req            : in  std_logic                     := '0';             -- afi_init_cal_req.afi_init_req
		afi_cal_req             : in  std_logic                     := '0';             --                 .afi_cal_req
		scc_clk                 : in  std_logic                     := '0';             --          scc_clk.clk
		reset_n_scc_clk         : in  std_logic                     := '0'              --        scc_reset.reset_n
	);
end entity ddr3_av_2x32_s0;

architecture rtl of ddr3_av_2x32_s0 is
	component altera_mem_if_sequencer_rst is
		generic (
			DEPTH            : integer := 8;
			CLKEN_LAGS_RESET : integer := 0
		);
		port (
			clk       : in  std_logic := 'X'; -- clk
			rst       : in  std_logic := 'X'; -- reset
			reset_out : out std_logic;        -- reset
			clken_out : out std_logic         -- clken
		);
	end component altera_mem_if_sequencer_rst;

	component altera_mem_if_sequencer_cpu_cv_sim_cpu_inst is
		generic (
			DEVICE_FAMILY : string := "STRATIXIV"
		);
		port (
			clk           : in  std_logic                     := 'X';             -- clk
			reset_n       : in  std_logic                     := 'X';             -- reset_n
			d_address     : out std_logic_vector(19 downto 0);                    -- address
			d_byteenable  : out std_logic_vector(3 downto 0);                     -- byteenable
			d_read        : out std_logic;                                        -- read
			d_readdata    : in  std_logic_vector(31 downto 0) := (others => 'X'); -- readdata
			d_waitrequest : in  std_logic                     := 'X';             -- waitrequest
			d_write       : out std_logic;                                        -- write
			d_writedata   : out std_logic_vector(31 downto 0);                    -- writedata
			i_address     : out std_logic_vector(16 downto 0);                    -- address
			i_read        : out std_logic;                                        -- read
			i_readdata    : in  std_logic_vector(31 downto 0) := (others => 'X'); -- readdata
			i_waitrequest : in  std_logic                     := 'X';             -- waitrequest
			d_irq         : in  std_logic_vector(31 downto 0) := (others => 'X'); -- irq
			no_ci_readra  : out std_logic                                         -- readra
		);
	end component altera_mem_if_sequencer_cpu_cv_sim_cpu_inst;

	component sequencer_scc_mgr is
		generic (
			AVL_DATA_WIDTH         : integer := 32;
			AVL_ADDR_WIDTH         : integer := 13;
			MEM_IF_READ_DQS_WIDTH  : integer := 8;
			MEM_IF_WRITE_DQS_WIDTH : integer := 8;
			MEM_IF_DQ_WIDTH        : integer := 64;
			MEM_IF_DM_WIDTH        : integer := 8;
			MEM_NUMBER_OF_RANKS    : integer := 1;
			DLL_DELAY_CHAIN_LENGTH : integer := 6;
			FAMILY                 : string  := "STRATIXIII";
			USE_2X_DLL             : string  := "false";
			USE_SHADOW_REGS        : boolean := false;
			USE_DQS_TRACKING       : integer := 0;
			DUAL_WRITE_CLOCK       : integer := 0;
			SCC_DATA_WIDTH         : integer := 8;
			TRK_PARALLEL_SCC_LOAD  : boolean := false
		);
		port (
			avl_clk                      : in  std_logic                     := 'X';             -- clk
			avl_reset_n                  : in  std_logic                     := 'X';             -- reset_n
			avl_address                  : in  std_logic_vector(12 downto 0) := (others => 'X'); -- address
			avl_write                    : in  std_logic                     := 'X';             -- write
			avl_writedata                : in  std_logic_vector(31 downto 0) := (others => 'X'); -- writedata
			avl_read                     : in  std_logic                     := 'X';             -- read
			avl_readdata                 : out std_logic_vector(31 downto 0);                    -- readdata
			avl_waitrequest              : out std_logic;                                        -- waitrequest
			scc_clk                      : in  std_logic                     := 'X';             -- clk
			scc_reset_n                  : in  std_logic                     := 'X';             -- reset_n
			scc_data                     : out std_logic_vector(0 downto 0);                     -- scc_data
			scc_dqs_ena                  : out std_logic_vector(3 downto 0);                     -- scc_dqs_ena
			scc_dqs_io_ena               : out std_logic_vector(3 downto 0);                     -- scc_dqs_io_ena
			scc_dq_ena                   : out std_logic_vector(31 downto 0);                    -- scc_dq_ena
			scc_dm_ena                   : out std_logic_vector(3 downto 0);                     -- scc_dm_ena
			capture_strobe_tracking      : in  std_logic_vector(3 downto 0)  := (others => 'X'); -- capture_strobe_tracking
			scc_upd                      : out std_logic_vector(0 downto 0);                     -- scc_upd
			afi_init_req                 : in  std_logic                     := 'X';             -- afi_init_req
			afi_cal_req                  : in  std_logic                     := 'X';             -- afi_cal_req
			scc_sr_dqsenable_delayctrl   : out std_logic_vector(7 downto 0);                     -- scc_sr_dqsenable_delayctrl
			scc_sr_dqsdisablen_delayctrl : out std_logic_vector(7 downto 0);                     -- scc_sr_dqsdisablen_delayctrl
			scc_sr_multirank_delayctrl   : out std_logic_vector(7 downto 0)                      -- scc_sr_multirank_delayctrl
		);
	end component sequencer_scc_mgr;

	component sequencer_reg_file is
		generic (
			AVL_DATA_WIDTH    : integer := 32;
			AVL_ADDR_WIDTH    : integer := 13;
			AVL_NUM_SYMBOLS   : integer := 4;
			AVL_SYMBOL_WIDTH  : integer := 8;
			REGISTER_RDATA    : boolean := false;
			NUM_REGFILE_WORDS : integer := 8
		);
		port (
			avl_clk         : in  std_logic                     := 'X';             -- clk
			avl_reset_n     : in  std_logic                     := 'X';             -- reset_n
			avl_address     : in  std_logic_vector(3 downto 0)  := (others => 'X'); -- address
			avl_write       : in  std_logic                     := 'X';             -- write
			avl_writedata   : in  std_logic_vector(31 downto 0) := (others => 'X'); -- writedata
			avl_read        : in  std_logic                     := 'X';             -- read
			avl_readdata    : out std_logic_vector(31 downto 0);                    -- readdata
			avl_waitrequest : out std_logic;                                        -- waitrequest
			avl_be          : in  std_logic_vector(3 downto 0)  := (others => 'X')  -- byteenable
		);
	end component sequencer_reg_file;

	component altera_mem_if_simple_avalon_mm_bridge is
		generic (
			DATA_WIDTH                : integer := 32;
			SLAVE_DATA_WIDTH          : integer := 32;
			MASTER_DATA_WIDTH         : integer := 32;
			SYMBOL_WIDTH              : integer := 8;
			ADDRESS_WIDTH             : integer := 10;
			MASTER_ADDRESS_WIDTH      : integer := 10;
			SLAVE_ADDRESS_WIDTH       : integer := 10;
			BURSTCOUNT_WIDTH          : integer := 3;
			WORKAROUND_HARD_PHY_ISSUE : integer := 0
		);
		port (
			clk                   : in  std_logic                     := 'X';             -- clk
			reset_n               : in  std_logic                     := 'X';             -- reset_n
			s0_address            : in  std_logic_vector(15 downto 0) := (others => 'X'); -- address
			s0_read               : in  std_logic                     := 'X';             -- read
			s0_readdata           : out std_logic_vector(31 downto 0);                    -- readdata
			s0_write              : in  std_logic                     := 'X';             -- write
			s0_writedata          : in  std_logic_vector(31 downto 0) := (others => 'X'); -- writedata
			s0_waitrequest        : out std_logic;                                        -- waitrequest
			m0_address            : out std_logic_vector(15 downto 0);                    -- address
			m0_read               : out std_logic;                                        -- read
			m0_readdata           : in  std_logic_vector(31 downto 0) := (others => 'X'); -- readdata
			m0_write              : out std_logic;                                        -- write
			m0_writedata          : out std_logic_vector(31 downto 0);                    -- writedata
			m0_waitrequest        : in  std_logic                     := 'X';             -- waitrequest
			s0_waitrequest_n      : out std_logic;                                        -- waitrequest_n
			s0_beginbursttransfer : in  std_logic                     := 'X';             -- beginbursttransfer
			s0_burstcount         : in  std_logic_vector(2 downto 0)  := (others => 'X'); -- burstcount
			s0_byteenable         : in  std_logic_vector(3 downto 0)  := (others => 'X'); -- byteenable
			s0_readdatavalid      : out std_logic;                                        -- readdatavalid
			m0_beginbursttransfer : out std_logic;                                        -- beginbursttransfer
			m0_burstcount         : out std_logic_vector(2 downto 0);                     -- burstcount
			m0_byteenable         : out std_logic_vector(3 downto 0);                     -- byteenable
			m0_readdatavalid      : in  std_logic                     := 'X'              -- readdatavalid
		);
	end component altera_mem_if_simple_avalon_mm_bridge;

	component altera_mem_if_sequencer_mem_no_ifdef_params is
		generic (
			AVL_DATA_WIDTH   : integer := 32;
			AVL_ADDR_WIDTH   : integer := 13;
			AVL_NUM_SYMBOLS  : integer := 4;
			AVL_SYMBOL_WIDTH : integer := 8;
			MEM_SIZE         : integer := 1024;
			INIT_FILE        : string  := "";
			RAM_BLOCK_TYPE   : string  := "AUTO"
		);
		port (
			clk1          : in  std_logic                     := 'X';             -- clk
			reset1        : in  std_logic                     := 'X';             -- reset
			clken1        : in  std_logic                     := 'X';             -- clken
			s1_address    : in  std_logic_vector(11 downto 0) := (others => 'X'); -- address
			s1_write      : in  std_logic                     := 'X';             -- write
			s1_writedata  : in  std_logic_vector(31 downto 0) := (others => 'X'); -- writedata
			s1_readdata   : out std_logic_vector(31 downto 0);                    -- readdata
			s1_be         : in  std_logic_vector(3 downto 0)  := (others => 'X'); -- byteenable
			s1_chipselect : in  std_logic                     := 'X'              -- chipselect
		);
	end component altera_mem_if_sequencer_mem_no_ifdef_params;

	component ddr3_av_2x32_s0_mm_interconnect_0 is
		port (
			avl_clk_out_clk_clk                          : in  std_logic                     := 'X';             -- clk
			cpu_inst_reset_n_reset_bridge_in_reset_reset : in  std_logic                     := 'X';             -- reset
			cpu_inst_data_master_address                 : in  std_logic_vector(19 downto 0) := (others => 'X'); -- address
			cpu_inst_data_master_waitrequest             : out std_logic;                                        -- waitrequest
			cpu_inst_data_master_byteenable              : in  std_logic_vector(3 downto 0)  := (others => 'X'); -- byteenable
			cpu_inst_data_master_read                    : in  std_logic                     := 'X';             -- read
			cpu_inst_data_master_readdata                : out std_logic_vector(31 downto 0);                    -- readdata
			cpu_inst_data_master_write                   : in  std_logic                     := 'X';             -- write
			cpu_inst_data_master_writedata               : in  std_logic_vector(31 downto 0) := (others => 'X'); -- writedata
			cpu_inst_instruction_master_address          : in  std_logic_vector(16 downto 0) := (others => 'X'); -- address
			cpu_inst_instruction_master_waitrequest      : out std_logic;                                        -- waitrequest
			cpu_inst_instruction_master_read             : in  std_logic                     := 'X';             -- read
			cpu_inst_instruction_master_readdata         : out std_logic_vector(31 downto 0);                    -- readdata
			hphy_bridge_s0_address                       : out std_logic_vector(15 downto 0);                    -- address
			hphy_bridge_s0_write                         : out std_logic;                                        -- write
			hphy_bridge_s0_read                          : out std_logic;                                        -- read
			hphy_bridge_s0_readdata                      : in  std_logic_vector(31 downto 0) := (others => 'X'); -- readdata
			hphy_bridge_s0_writedata                     : out std_logic_vector(31 downto 0);                    -- writedata
			hphy_bridge_s0_waitrequest                   : in  std_logic                     := 'X';             -- waitrequest
			sequencer_mem_s1_address                     : out std_logic_vector(11 downto 0);                    -- address
			sequencer_mem_s1_write                       : out std_logic;                                        -- write
			sequencer_mem_s1_readdata                    : in  std_logic_vector(31 downto 0) := (others => 'X'); -- readdata
			sequencer_mem_s1_writedata                   : out std_logic_vector(31 downto 0);                    -- writedata
			sequencer_mem_s1_byteenable                  : out std_logic_vector(3 downto 0);                     -- byteenable
			sequencer_mem_s1_chipselect                  : out std_logic;                                        -- chipselect
			sequencer_reg_file_inst_avl_address          : out std_logic_vector(3 downto 0);                     -- address
			sequencer_reg_file_inst_avl_write            : out std_logic;                                        -- write
			sequencer_reg_file_inst_avl_read             : out std_logic;                                        -- read
			sequencer_reg_file_inst_avl_readdata         : in  std_logic_vector(31 downto 0) := (others => 'X'); -- readdata
			sequencer_reg_file_inst_avl_writedata        : out std_logic_vector(31 downto 0);                    -- writedata
			sequencer_reg_file_inst_avl_byteenable       : out std_logic_vector(3 downto 0);                     -- byteenable
			sequencer_reg_file_inst_avl_waitrequest      : in  std_logic                     := 'X';             -- waitrequest
			sequencer_scc_mgr_inst_avl_address           : out std_logic_vector(12 downto 0);                    -- address
			sequencer_scc_mgr_inst_avl_write             : out std_logic;                                        -- write
			sequencer_scc_mgr_inst_avl_read              : out std_logic;                                        -- read
			sequencer_scc_mgr_inst_avl_readdata          : in  std_logic_vector(31 downto 0) := (others => 'X'); -- readdata
			sequencer_scc_mgr_inst_avl_writedata         : out std_logic_vector(31 downto 0);                    -- writedata
			sequencer_scc_mgr_inst_avl_waitrequest       : in  std_logic                     := 'X'              -- waitrequest
		);
	end component ddr3_av_2x32_s0_mm_interconnect_0;

	component ddr3_av_2x32_s0_irq_mapper is
		port (
			clk        : in  std_logic                     := 'X'; -- clk
			reset      : in  std_logic                     := 'X'; -- reset
			sender_irq : out std_logic_vector(31 downto 0)         -- irq
		);
	end component ddr3_av_2x32_s0_irq_mapper;

	signal sequencer_rst_reset_out_reset                             : std_logic;                     -- sequencer_rst:reset_out -> [irq_mapper:reset, mm_interconnect_0:cpu_inst_reset_n_reset_bridge_in_reset_reset, sequencer_mem:reset1, sequencer_rst_reset_out_reset:in]
	signal sequencer_rst_clken_out_clken                             : std_logic;                     -- sequencer_rst:clken_out -> sequencer_mem:clken1
	signal cpu_inst_data_master_readdata                             : std_logic_vector(31 downto 0); -- mm_interconnect_0:cpu_inst_data_master_readdata -> cpu_inst:d_readdata
	signal cpu_inst_data_master_waitrequest                          : std_logic;                     -- mm_interconnect_0:cpu_inst_data_master_waitrequest -> cpu_inst:d_waitrequest
	signal cpu_inst_data_master_address                              : std_logic_vector(19 downto 0); -- cpu_inst:d_address -> mm_interconnect_0:cpu_inst_data_master_address
	signal cpu_inst_data_master_byteenable                           : std_logic_vector(3 downto 0);  -- cpu_inst:d_byteenable -> mm_interconnect_0:cpu_inst_data_master_byteenable
	signal cpu_inst_data_master_read                                 : std_logic;                     -- cpu_inst:d_read -> mm_interconnect_0:cpu_inst_data_master_read
	signal cpu_inst_data_master_write                                : std_logic;                     -- cpu_inst:d_write -> mm_interconnect_0:cpu_inst_data_master_write
	signal cpu_inst_data_master_writedata                            : std_logic_vector(31 downto 0); -- cpu_inst:d_writedata -> mm_interconnect_0:cpu_inst_data_master_writedata
	signal cpu_inst_instruction_master_readdata                      : std_logic_vector(31 downto 0); -- mm_interconnect_0:cpu_inst_instruction_master_readdata -> cpu_inst:i_readdata
	signal cpu_inst_instruction_master_waitrequest                   : std_logic;                     -- mm_interconnect_0:cpu_inst_instruction_master_waitrequest -> cpu_inst:i_waitrequest
	signal cpu_inst_instruction_master_address                       : std_logic_vector(16 downto 0); -- cpu_inst:i_address -> mm_interconnect_0:cpu_inst_instruction_master_address
	signal cpu_inst_instruction_master_read                          : std_logic;                     -- cpu_inst:i_read -> mm_interconnect_0:cpu_inst_instruction_master_read
	signal mm_interconnect_0_hphy_bridge_s0_readdata                 : std_logic_vector(31 downto 0); -- hphy_bridge:s0_readdata -> mm_interconnect_0:hphy_bridge_s0_readdata
	signal mm_interconnect_0_hphy_bridge_s0_waitrequest              : std_logic;                     -- hphy_bridge:s0_waitrequest -> mm_interconnect_0:hphy_bridge_s0_waitrequest
	signal mm_interconnect_0_hphy_bridge_s0_address                  : std_logic_vector(15 downto 0); -- mm_interconnect_0:hphy_bridge_s0_address -> hphy_bridge:s0_address
	signal mm_interconnect_0_hphy_bridge_s0_read                     : std_logic;                     -- mm_interconnect_0:hphy_bridge_s0_read -> hphy_bridge:s0_read
	signal mm_interconnect_0_hphy_bridge_s0_write                    : std_logic;                     -- mm_interconnect_0:hphy_bridge_s0_write -> hphy_bridge:s0_write
	signal mm_interconnect_0_hphy_bridge_s0_writedata                : std_logic_vector(31 downto 0); -- mm_interconnect_0:hphy_bridge_s0_writedata -> hphy_bridge:s0_writedata
	signal mm_interconnect_0_sequencer_mem_s1_chipselect             : std_logic;                     -- mm_interconnect_0:sequencer_mem_s1_chipselect -> sequencer_mem:s1_chipselect
	signal mm_interconnect_0_sequencer_mem_s1_readdata               : std_logic_vector(31 downto 0); -- sequencer_mem:s1_readdata -> mm_interconnect_0:sequencer_mem_s1_readdata
	signal mm_interconnect_0_sequencer_mem_s1_address                : std_logic_vector(11 downto 0); -- mm_interconnect_0:sequencer_mem_s1_address -> sequencer_mem:s1_address
	signal mm_interconnect_0_sequencer_mem_s1_byteenable             : std_logic_vector(3 downto 0);  -- mm_interconnect_0:sequencer_mem_s1_byteenable -> sequencer_mem:s1_be
	signal mm_interconnect_0_sequencer_mem_s1_write                  : std_logic;                     -- mm_interconnect_0:sequencer_mem_s1_write -> sequencer_mem:s1_write
	signal mm_interconnect_0_sequencer_mem_s1_writedata              : std_logic_vector(31 downto 0); -- mm_interconnect_0:sequencer_mem_s1_writedata -> sequencer_mem:s1_writedata
	signal mm_interconnect_0_sequencer_scc_mgr_inst_avl_readdata     : std_logic_vector(31 downto 0); -- sequencer_scc_mgr_inst:avl_readdata -> mm_interconnect_0:sequencer_scc_mgr_inst_avl_readdata
	signal mm_interconnect_0_sequencer_scc_mgr_inst_avl_waitrequest  : std_logic;                     -- sequencer_scc_mgr_inst:avl_waitrequest -> mm_interconnect_0:sequencer_scc_mgr_inst_avl_waitrequest
	signal mm_interconnect_0_sequencer_scc_mgr_inst_avl_address      : std_logic_vector(12 downto 0); -- mm_interconnect_0:sequencer_scc_mgr_inst_avl_address -> sequencer_scc_mgr_inst:avl_address
	signal mm_interconnect_0_sequencer_scc_mgr_inst_avl_read         : std_logic;                     -- mm_interconnect_0:sequencer_scc_mgr_inst_avl_read -> sequencer_scc_mgr_inst:avl_read
	signal mm_interconnect_0_sequencer_scc_mgr_inst_avl_write        : std_logic;                     -- mm_interconnect_0:sequencer_scc_mgr_inst_avl_write -> sequencer_scc_mgr_inst:avl_write
	signal mm_interconnect_0_sequencer_scc_mgr_inst_avl_writedata    : std_logic_vector(31 downto 0); -- mm_interconnect_0:sequencer_scc_mgr_inst_avl_writedata -> sequencer_scc_mgr_inst:avl_writedata
	signal mm_interconnect_0_sequencer_reg_file_inst_avl_readdata    : std_logic_vector(31 downto 0); -- sequencer_reg_file_inst:avl_readdata -> mm_interconnect_0:sequencer_reg_file_inst_avl_readdata
	signal mm_interconnect_0_sequencer_reg_file_inst_avl_waitrequest : std_logic;                     -- sequencer_reg_file_inst:avl_waitrequest -> mm_interconnect_0:sequencer_reg_file_inst_avl_waitrequest
	signal mm_interconnect_0_sequencer_reg_file_inst_avl_address     : std_logic_vector(3 downto 0);  -- mm_interconnect_0:sequencer_reg_file_inst_avl_address -> sequencer_reg_file_inst:avl_address
	signal mm_interconnect_0_sequencer_reg_file_inst_avl_read        : std_logic;                     -- mm_interconnect_0:sequencer_reg_file_inst_avl_read -> sequencer_reg_file_inst:avl_read
	signal mm_interconnect_0_sequencer_reg_file_inst_avl_byteenable  : std_logic_vector(3 downto 0);  -- mm_interconnect_0:sequencer_reg_file_inst_avl_byteenable -> sequencer_reg_file_inst:avl_be
	signal mm_interconnect_0_sequencer_reg_file_inst_avl_write       : std_logic;                     -- mm_interconnect_0:sequencer_reg_file_inst_avl_write -> sequencer_reg_file_inst:avl_write
	signal mm_interconnect_0_sequencer_reg_file_inst_avl_writedata   : std_logic_vector(31 downto 0); -- mm_interconnect_0:sequencer_reg_file_inst_avl_writedata -> sequencer_reg_file_inst:avl_writedata
	signal cpu_inst_d_irq_irq                                        : std_logic_vector(31 downto 0); -- irq_mapper:sender_irq -> cpu_inst:d_irq
	signal sequencer_rst_reset_out_reset_ports_inv                   : std_logic;                     -- sequencer_rst_reset_out_reset:inv -> [cpu_inst:reset_n, hphy_bridge:reset_n, sequencer_reg_file_inst:avl_reset_n, sequencer_scc_mgr_inst:avl_reset_n]

begin

	sequencer_rst : component altera_mem_if_sequencer_rst
		generic map (
			DEPTH            => 10,
			CLKEN_LAGS_RESET => 0
		)
		port map (
			clk       => avl_clk,                       --       clk.clk
			rst       => avl_reset_n,                   --       rst.reset
			reset_out => sequencer_rst_reset_out_reset, -- reset_out.reset
			clken_out => sequencer_rst_clken_out_clken  -- clken_out.clken
		);

	cpu_inst : component altera_mem_if_sequencer_cpu_cv_sim_cpu_inst
		generic map (
			DEVICE_FAMILY => "CYCLONEV"
		)
		port map (
			clk           => avl_clk,                                 --                       clk.clk
			reset_n       => sequencer_rst_reset_out_reset_ports_inv, --                   reset_n.reset_n
			d_address     => cpu_inst_data_master_address,            --               data_master.address
			d_byteenable  => cpu_inst_data_master_byteenable,         --                          .byteenable
			d_read        => cpu_inst_data_master_read,               --                          .read
			d_readdata    => cpu_inst_data_master_readdata,           --                          .readdata
			d_waitrequest => cpu_inst_data_master_waitrequest,        --                          .waitrequest
			d_write       => cpu_inst_data_master_write,              --                          .write
			d_writedata   => cpu_inst_data_master_writedata,          --                          .writedata
			i_address     => cpu_inst_instruction_master_address,     --        instruction_master.address
			i_read        => cpu_inst_instruction_master_read,        --                          .read
			i_readdata    => cpu_inst_instruction_master_readdata,    --                          .readdata
			i_waitrequest => cpu_inst_instruction_master_waitrequest, --                          .waitrequest
			d_irq         => cpu_inst_d_irq_irq,                      --                     d_irq.irq
			no_ci_readra  => open                                     -- custom_instruction_master.readra
		);

	sequencer_scc_mgr_inst : component sequencer_scc_mgr
		generic map (
			AVL_DATA_WIDTH         => 32,
			AVL_ADDR_WIDTH         => 13,
			MEM_IF_READ_DQS_WIDTH  => 4,
			MEM_IF_WRITE_DQS_WIDTH => 4,
			MEM_IF_DQ_WIDTH        => 32,
			MEM_IF_DM_WIDTH        => 4,
			MEM_NUMBER_OF_RANKS    => 1,
			DLL_DELAY_CHAIN_LENGTH => 8,
			FAMILY                 => "CYCLONEV",
			USE_2X_DLL             => "false",
			USE_SHADOW_REGS        => false,
			USE_DQS_TRACKING       => 0,
			DUAL_WRITE_CLOCK       => 0,
			SCC_DATA_WIDTH         => 1,
			TRK_PARALLEL_SCC_LOAD  => false
		)
		port map (
			avl_clk                      => avl_clk,                                                  --          avl_clk.clk
			avl_reset_n                  => sequencer_rst_reset_out_reset_ports_inv,                  --        avl_reset.reset_n
			avl_address                  => mm_interconnect_0_sequencer_scc_mgr_inst_avl_address,     --              avl.address
			avl_write                    => mm_interconnect_0_sequencer_scc_mgr_inst_avl_write,       --                 .write
			avl_writedata                => mm_interconnect_0_sequencer_scc_mgr_inst_avl_writedata,   --                 .writedata
			avl_read                     => mm_interconnect_0_sequencer_scc_mgr_inst_avl_read,        --                 .read
			avl_readdata                 => mm_interconnect_0_sequencer_scc_mgr_inst_avl_readdata,    --                 .readdata
			avl_waitrequest              => mm_interconnect_0_sequencer_scc_mgr_inst_avl_waitrequest, --                 .waitrequest
			scc_clk                      => scc_clk,                                                  --          scc_clk.clk
			scc_reset_n                  => reset_n_scc_clk,                                          --        scc_reset.reset_n
			scc_data                     => scc_data,                                                 --              scc.scc_data
			scc_dqs_ena                  => scc_dqs_ena,                                              --                 .scc_dqs_ena
			scc_dqs_io_ena               => scc_dqs_io_ena,                                           --                 .scc_dqs_io_ena
			scc_dq_ena                   => scc_dq_ena,                                               --                 .scc_dq_ena
			scc_dm_ena                   => scc_dm_ena,                                               --                 .scc_dm_ena
			capture_strobe_tracking      => capture_strobe_tracking,                                  --                 .capture_strobe_tracking
			scc_upd                      => scc_upd,                                                  --                 .scc_upd
			afi_init_req                 => afi_init_req,                                             -- afi_init_cal_req.afi_init_req
			afi_cal_req                  => afi_cal_req,                                              --                 .afi_cal_req
			scc_sr_dqsenable_delayctrl   => open,                                                     --      (terminated)
			scc_sr_dqsdisablen_delayctrl => open,                                                     --      (terminated)
			scc_sr_multirank_delayctrl   => open                                                      --      (terminated)
		);

	sequencer_reg_file_inst : component sequencer_reg_file
		generic map (
			AVL_DATA_WIDTH    => 32,
			AVL_ADDR_WIDTH    => 4,
			AVL_NUM_SYMBOLS   => 4,
			AVL_SYMBOL_WIDTH  => 8,
			REGISTER_RDATA    => false,
			NUM_REGFILE_WORDS => 16
		)
		port map (
			avl_clk         => avl_clk,                                                   --   avl_clk.clk
			avl_reset_n     => sequencer_rst_reset_out_reset_ports_inv,                   -- avl_reset.reset_n
			avl_address     => mm_interconnect_0_sequencer_reg_file_inst_avl_address,     --       avl.address
			avl_write       => mm_interconnect_0_sequencer_reg_file_inst_avl_write,       --          .write
			avl_writedata   => mm_interconnect_0_sequencer_reg_file_inst_avl_writedata,   --          .writedata
			avl_read        => mm_interconnect_0_sequencer_reg_file_inst_avl_read,        --          .read
			avl_readdata    => mm_interconnect_0_sequencer_reg_file_inst_avl_readdata,    --          .readdata
			avl_waitrequest => mm_interconnect_0_sequencer_reg_file_inst_avl_waitrequest, --          .waitrequest
			avl_be          => mm_interconnect_0_sequencer_reg_file_inst_avl_byteenable   --          .byteenable
		);

	hphy_bridge : component altera_mem_if_simple_avalon_mm_bridge
		generic map (
			DATA_WIDTH                => 32,
			SLAVE_DATA_WIDTH          => 32,
			MASTER_DATA_WIDTH         => 32,
			SYMBOL_WIDTH              => 8,
			ADDRESS_WIDTH             => 16,
			MASTER_ADDRESS_WIDTH      => 10,
			SLAVE_ADDRESS_WIDTH       => 10,
			BURSTCOUNT_WIDTH          => 3,
			WORKAROUND_HARD_PHY_ISSUE => 1
		)
		port map (
			clk                   => avl_clk,                                      --   clk.clk
			reset_n               => sequencer_rst_reset_out_reset_ports_inv,      -- reset.reset_n
			s0_address            => mm_interconnect_0_hphy_bridge_s0_address,     --    s0.address
			s0_read               => mm_interconnect_0_hphy_bridge_s0_read,        --      .read
			s0_readdata           => mm_interconnect_0_hphy_bridge_s0_readdata,    --      .readdata
			s0_write              => mm_interconnect_0_hphy_bridge_s0_write,       --      .write
			s0_writedata          => mm_interconnect_0_hphy_bridge_s0_writedata,   --      .writedata
			s0_waitrequest        => mm_interconnect_0_hphy_bridge_s0_waitrequest, --      .waitrequest
			m0_address            => avl_address,                                  --    m0.address
			m0_read               => avl_read,                                     --      .read
			m0_readdata           => avl_readdata,                                 --      .readdata
			m0_write              => avl_write,                                    --      .write
			m0_writedata          => avl_writedata,                                --      .writedata
			m0_waitrequest        => avl_waitrequest,                              --      .waitrequest
			s0_waitrequest_n      => open,                                         -- (terminated)
			s0_beginbursttransfer => '0',                                          -- (terminated)
			s0_burstcount         => "000",                                        -- (terminated)
			s0_byteenable         => "1111",                                       -- (terminated)
			s0_readdatavalid      => open,                                         -- (terminated)
			m0_beginbursttransfer => open,                                         -- (terminated)
			m0_burstcount         => open,                                         -- (terminated)
			m0_byteenable         => open,                                         -- (terminated)
			m0_readdatavalid      => '0'                                           -- (terminated)
		);

	sequencer_mem : component altera_mem_if_sequencer_mem_no_ifdef_params
		generic map (
			AVL_DATA_WIDTH   => 32,
			AVL_ADDR_WIDTH   => 12,
			AVL_NUM_SYMBOLS  => 4,
			AVL_SYMBOL_WIDTH => 8,
			MEM_SIZE         => 12288,
			INIT_FILE        => "ddr3_av_2x32_s0_sequencer_mem.hex",
			RAM_BLOCK_TYPE   => "AUTO"
		)
		port map (
			clk1          => avl_clk,                                       --   clk1.clk
			reset1        => sequencer_rst_reset_out_reset,                 -- reset1.reset
			clken1        => sequencer_rst_clken_out_clken,                 -- clken1.clken
			s1_address    => mm_interconnect_0_sequencer_mem_s1_address,    --     s1.address
			s1_write      => mm_interconnect_0_sequencer_mem_s1_write,      --       .write
			s1_writedata  => mm_interconnect_0_sequencer_mem_s1_writedata,  --       .writedata
			s1_readdata   => mm_interconnect_0_sequencer_mem_s1_readdata,   --       .readdata
			s1_be         => mm_interconnect_0_sequencer_mem_s1_byteenable, --       .byteenable
			s1_chipselect => mm_interconnect_0_sequencer_mem_s1_chipselect  --       .chipselect
		);

	mm_interconnect_0 : component ddr3_av_2x32_s0_mm_interconnect_0
		port map (
			avl_clk_out_clk_clk                          => avl_clk,                                                   --                        avl_clk_out_clk.clk
			cpu_inst_reset_n_reset_bridge_in_reset_reset => sequencer_rst_reset_out_reset,                             -- cpu_inst_reset_n_reset_bridge_in_reset.reset
			cpu_inst_data_master_address                 => cpu_inst_data_master_address,                              --                   cpu_inst_data_master.address
			cpu_inst_data_master_waitrequest             => cpu_inst_data_master_waitrequest,                          --                                       .waitrequest
			cpu_inst_data_master_byteenable              => cpu_inst_data_master_byteenable,                           --                                       .byteenable
			cpu_inst_data_master_read                    => cpu_inst_data_master_read,                                 --                                       .read
			cpu_inst_data_master_readdata                => cpu_inst_data_master_readdata,                             --                                       .readdata
			cpu_inst_data_master_write                   => cpu_inst_data_master_write,                                --                                       .write
			cpu_inst_data_master_writedata               => cpu_inst_data_master_writedata,                            --                                       .writedata
			cpu_inst_instruction_master_address          => cpu_inst_instruction_master_address,                       --            cpu_inst_instruction_master.address
			cpu_inst_instruction_master_waitrequest      => cpu_inst_instruction_master_waitrequest,                   --                                       .waitrequest
			cpu_inst_instruction_master_read             => cpu_inst_instruction_master_read,                          --                                       .read
			cpu_inst_instruction_master_readdata         => cpu_inst_instruction_master_readdata,                      --                                       .readdata
			hphy_bridge_s0_address                       => mm_interconnect_0_hphy_bridge_s0_address,                  --                         hphy_bridge_s0.address
			hphy_bridge_s0_write                         => mm_interconnect_0_hphy_bridge_s0_write,                    --                                       .write
			hphy_bridge_s0_read                          => mm_interconnect_0_hphy_bridge_s0_read,                     --                                       .read
			hphy_bridge_s0_readdata                      => mm_interconnect_0_hphy_bridge_s0_readdata,                 --                                       .readdata
			hphy_bridge_s0_writedata                     => mm_interconnect_0_hphy_bridge_s0_writedata,                --                                       .writedata
			hphy_bridge_s0_waitrequest                   => mm_interconnect_0_hphy_bridge_s0_waitrequest,              --                                       .waitrequest
			sequencer_mem_s1_address                     => mm_interconnect_0_sequencer_mem_s1_address,                --                       sequencer_mem_s1.address
			sequencer_mem_s1_write                       => mm_interconnect_0_sequencer_mem_s1_write,                  --                                       .write
			sequencer_mem_s1_readdata                    => mm_interconnect_0_sequencer_mem_s1_readdata,               --                                       .readdata
			sequencer_mem_s1_writedata                   => mm_interconnect_0_sequencer_mem_s1_writedata,              --                                       .writedata
			sequencer_mem_s1_byteenable                  => mm_interconnect_0_sequencer_mem_s1_byteenable,             --                                       .byteenable
			sequencer_mem_s1_chipselect                  => mm_interconnect_0_sequencer_mem_s1_chipselect,             --                                       .chipselect
			sequencer_reg_file_inst_avl_address          => mm_interconnect_0_sequencer_reg_file_inst_avl_address,     --            sequencer_reg_file_inst_avl.address
			sequencer_reg_file_inst_avl_write            => mm_interconnect_0_sequencer_reg_file_inst_avl_write,       --                                       .write
			sequencer_reg_file_inst_avl_read             => mm_interconnect_0_sequencer_reg_file_inst_avl_read,        --                                       .read
			sequencer_reg_file_inst_avl_readdata         => mm_interconnect_0_sequencer_reg_file_inst_avl_readdata,    --                                       .readdata
			sequencer_reg_file_inst_avl_writedata        => mm_interconnect_0_sequencer_reg_file_inst_avl_writedata,   --                                       .writedata
			sequencer_reg_file_inst_avl_byteenable       => mm_interconnect_0_sequencer_reg_file_inst_avl_byteenable,  --                                       .byteenable
			sequencer_reg_file_inst_avl_waitrequest      => mm_interconnect_0_sequencer_reg_file_inst_avl_waitrequest, --                                       .waitrequest
			sequencer_scc_mgr_inst_avl_address           => mm_interconnect_0_sequencer_scc_mgr_inst_avl_address,      --             sequencer_scc_mgr_inst_avl.address
			sequencer_scc_mgr_inst_avl_write             => mm_interconnect_0_sequencer_scc_mgr_inst_avl_write,        --                                       .write
			sequencer_scc_mgr_inst_avl_read              => mm_interconnect_0_sequencer_scc_mgr_inst_avl_read,         --                                       .read
			sequencer_scc_mgr_inst_avl_readdata          => mm_interconnect_0_sequencer_scc_mgr_inst_avl_readdata,     --                                       .readdata
			sequencer_scc_mgr_inst_avl_writedata         => mm_interconnect_0_sequencer_scc_mgr_inst_avl_writedata,    --                                       .writedata
			sequencer_scc_mgr_inst_avl_waitrequest       => mm_interconnect_0_sequencer_scc_mgr_inst_avl_waitrequest   --                                       .waitrequest
		);

	irq_mapper : component ddr3_av_2x32_s0_irq_mapper
		port map (
			clk        => avl_clk,                       --       clk.clk
			reset      => sequencer_rst_reset_out_reset, -- clk_reset.reset
			sender_irq => cpu_inst_d_irq_irq             --    sender.irq
		);

	sequencer_rst_reset_out_reset_ports_inv <= not sequencer_rst_reset_out_reset;

end architecture rtl; -- of ddr3_av_2x32_s0
