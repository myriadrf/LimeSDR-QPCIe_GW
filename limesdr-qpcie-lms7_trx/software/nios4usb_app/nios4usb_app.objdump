
nios4usb_app.elf:     file format elf32-littlenios2
nios4usb_app.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010020

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00010020 paddr 0x00010020 align 2**12
         filesz 0x00007504 memsz 0x00007504 flags r-x
    LOAD off    0x00008524 vaddr 0x00017524 paddr 0x00017808 align 2**12
         filesz 0x000002e4 memsz 0x000002e4 flags rw-
    LOAD off    0x00008aec vaddr 0x00017aec paddr 0x00017aec align 2**12
         filesz 0x00000000 memsz 0x00000094 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00010000  00010000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00010020  00010020  00008808  2**0
                  CONTENTS
  2 .text         000073d0  00010020  00010020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000134  000173f0  000173f0  000083f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000002e4  00017524  00017808  00008524  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000094  00017aec  00017aec  00008aec  2**2
                  ALLOC, SMALL_DATA
  6 .oc_mem       00000000  00017b80  00017b80  00008808  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00008808  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 000005e8  00000000  00000000  00008830  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00007761  00000000  00000000  00008e18  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002a48  00000000  00000000  00010579  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000038a6  00000000  00000000  00012fc1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000f00  00000000  00000000  00016868  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0000233c  00000000  00000000  00017768  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000069a7  00000000  00000000  00019aa4  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  0002044c  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000948  00000000  00000000  00020460  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00022ac2  2**0
                  CONTENTS, READONLY
 18 .cpu          00000009  00000000  00000000  00022ac5  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00022ace  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00022acf  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  00022ad0  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  00022ad4  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  00022ad8  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   0000000b  00000000  00000000  00022adc  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    0000000b  00000000  00000000  00022ae7  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   0000000b  00000000  00000000  00022af2  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000008  00000000  00000000  00022afd  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000056  00000000  00000000  00022b05  2**0
                  CONTENTS, READONLY
 29 .jdi          00005d15  00000000  00000000  00022b5b  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     000a952a  00000000  00000000  00028870  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00010000 l    d  .entry	00000000 .entry
00010020 l    d  .exceptions	00000000 .exceptions
00010020 l    d  .text	00000000 .text
000173f0 l    d  .rodata	00000000 .rodata
00017524 l    d  .rwdata	00000000 .rwdata
00017aec l    d  .bss	00000000 .bss
00017b80 l    d  .oc_mem	00000000 .oc_mem
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../nios4usb_bsp//obj/HAL/src/crt0.o
00010058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 pll_rcfg.c
00000000 l    df *ABS*	00000000 vctcxo_tamer.c
00000000 l    df *ABS*	00000000 s_round.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 divsf3.c
00000000 l    df *ABS*	00000000 mulsf3.c
00000000 l    df *ABS*	00000000 floatsisf.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 extendsfdf2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 alt_load.c
00015f60 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
000160b8 l     F .text	00000034 alt_dev_reg
00017524 l     O .rwdata	0000002c jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_spi.c
00000000 l    df *ABS*	00000000 i2c_opencores.c
00000000 l    df *ABS*	00000000 alt_close.c
00016878 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
000169ac l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
000169d8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00016ad8 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
00016c38 l     F .text	0000003c alt_get_errno
00016c74 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 impure.c
000176f8 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 alt_exit.c
0001604c g     F .text	0000006c alt_main
000100d0 g     F .text	00000058 Check_Periph_ID
00017808 g       *ABS*	00000000 __flash_rwdata_start
00017aec g     O .bss	00000001 block
00013414 g     F .text	00000100 round
00017b00 g     O .bss	00000040 glEp0Buffer_Tx
00013764 g     F .text	00000440 .hidden __divsf3
000177da g     O .rwdata	00000002 converted_val
00015374 g     F .text	000000dc .hidden __gtdf2
00016f40 g     F .text	00000024 altera_nios2_gen2_irq_init
00010000 g     F .entry	0000000c __reset
00010800 g     F .text	0000011c Control_TCXO_ADF
00010020 g       *ABS*	00000000 __flash_exceptions_start
00017afc g     O .bss	00000004 errno
00017af4 g     O .bss	00000004 alt_argv
0001f7d8 g       *ABS*	00000000 _gp
00017578 g     O .rwdata	00000180 alt_fd_list
00016f64 g     F .text	00000090 alt_find_dev
00016bbc g     F .text	0000007c alt_io_redirect
00016660 g     F .text	000000c0 I2C_start
00011088 g     F .text	000001c0 Modify_BRDSPI16_Reg_bits
0001622c g     F .text	000000ec altera_avalon_jtag_uart_read
00013680 g     F .text	00000064 .hidden __udivsi3
00012fe8 g     F .text	0000006c vctcxo_tamer_enable_isr
00013514 g     F .text	00000074 .hidden __fixunsdfsi
000109c4 g     F .text	00000090 GetPLLCFG_Base
000177f8 g     O .rwdata	00000004 alt_max_fd
00015dcc g     F .text	00000110 .hidden __extendsfdf2
00017aef g     O .bss	00000001 vctcxo_tamer_ctrl_reg
000140f8 g     F .text	000008ac .hidden __adddf3
00010fe4 g     F .text	000000a4 ResetPLL
00010a54 g     F .text	00000460 UpdatePLLCFG
00017800 g     O .rwdata	00000004 _global_impure_ptr
00017b80 g       *ABS*	00000000 __bss_end
00013054 g     F .text	00000040 vctcxo_tamer_clear_isr
00017550 g     O .rwdata	00000028 alt_dev_null
00013158 g     F .text	000000f0 vctcxo_tamer_read_count
00012d54 g     F .text	00000088 set_pll_config
0001698c g     F .text	00000020 alt_dcache_flush_all
00010eb4 g     F .text	00000130 UpdatePHCFG
00015d4c g     F .text	00000080 .hidden __fixdfsi
00010000 g       *ABS*	00000000 __alt_mem_oc_mem
00017808 g       *ABS*	00000000 __ram_rwdata_end
00012f08 g     F .text	00000034 vctcxo_tamer_read
000177f0 g     O .rwdata	00000008 alt_dev_list
00017524 g       *ABS*	00000000 __ram_rodata_end
000136e4 g     F .text	00000058 .hidden __umodsi3
00017b80 g       *ABS*	00000000 end
00018000 g       *ABS*	00000000 __alt_stack_pointer
00015edc g     F .text	00000064 .hidden __clzsi2
00016318 g     F .text	00000094 altera_avalon_jtag_uart_write
00012ddc g     F .text	0000003c set_CxCnt
0001722c g     F .text	00000190 __call_exitprocs
00017aed g     O .bss	00000001 test
00010020 g     F .text	0000003c _start
000163ac g     F .text	000001fc alt_avalon_spi_command
00016124 g     F .text	00000048 alt_sys_init
00013fd4 g     F .text	00000124 .hidden __floatsisf
000177e4 g     O .rwdata	00000002 vctcxo_trim_dac_value
0001373c g     F .text	00000028 .hidden __mulsi3
00017524 g       *ABS*	00000000 __ram_rwdata_start
000173f0 g       *ABS*	00000000 __ram_rodata_start
00012f7c g     F .text	0000006c vctcxo_tamer_reset_counters
0001616c g     F .text	00000060 altera_avalon_jtag_uart_read_fd
000170fc g     F .text	000000c4 alt_get_fd
000132b4 g     F .text	000000e8 vctcxo_tamer_isr
00010730 g     F .text	000000d0 Control_TCXO_DAC
0001091c g     F .text	000000a8 change_ADC_tpat
000102b0 g     F .text	00000480 init_ADC
000171e0 g     F .text	00000030 memcmp
00017b80 g       *ABS*	00000000 __alt_stack_base
00013094 g     F .text	000000c4 vctcxo_tamer_set_tune_mode
000149a4 g     F .text	000009d0 .hidden __divdf3
00016ff4 g     F .text	00000108 alt_find_file
00016a14 g     F .text	000000a4 alt_dev_llist_insert
00012c84 g     F .text	000000d0 get_pll_config
00017aec g       *ABS*	00000000 __bss_start
00015f40 g     F .text	00000020 memset
00011248 g     F .text	00001a3c main
00017af8 g     O .bss	00000004 alt_envp
000161cc g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00010128 g     F .text	00000084 getFifoData
00012e94 g     F .text	00000074 start_Reconfig
000101ac g     F .text	00000104 Configure_LM75
000177fc g     O .rwdata	00000004 alt_errno
00013588 g     F .text	00000084 .hidden __divsi3
00013ba4 g     F .text	00000430 .hidden __mulsf3
00016720 g     F .text	00000094 I2C_read
000173f0 g       *ABS*	00000000 __flash_rodata_start
000160ec g     F .text	00000038 alt_irq_init
00016ebc g     F .text	00000084 alt_release_fd
000173f0 g     O .rodata	00000100 .hidden __clz_tab
0001339c g     F .text	0000003c vctcxo_tamer_init
000177e0 g     O .rwdata	00000004 LMS_Ctrl_Packet_Rx
00017804 g     O .rwdata	00000004 _impure_ptr
00017af0 g     O .bss	00000004 alt_argc
00012f3c g     F .text	00000040 vctcxo_tamer_write
000177e8 g     O .rwdata	00000008 alt_fs_list
000177d8 g     O .rwdata	00000002 dac_val
000165a8 g     F .text	000000b8 I2C_init
00010020 g       *ABS*	00000000 __ram_exceptions_start
00012e18 g     F .text	0000007c set_Phase
00017808 g       *ABS*	00000000 _edata
00017b80 g       *ABS*	00000000 _end
00010020 g       *ABS*	00000000 __ram_exceptions_end
00017aee g     O .bss	00000001 cmd_errors
000171c0 g     F .text	00000020 exit
0001360c g     F .text	00000074 .hidden __modsi3
00018000 g       *ABS*	00000000 __alt_data_end
000173bc g     F .text	00000034 _exit
0001005c g     F .text	00000074 Check_many_blocks
00017210 g     F .text	0000001c strlen
00016d60 g     F .text	0000015c open
00015374 g     F .text	000000dc .hidden __gedf2
000177dc g     O .rwdata	00000004 LMS_Ctrl_Packet_Tx
000133d8 g     F .text	0000003c vctcxo_tamer_dis
00016ab8 g     F .text	00000020 alt_icache_flush_all
00013248 g     F .text	0000006c vctcxo_trim_dac_write
00015450 g     F .text	000008fc .hidden __subdf3
000168b4 g     F .text	000000d8 close
00015fc8 g     F .text	00000084 alt_load
000167b4 g     F .text	000000c4 I2C_write
00017b40 g     O .bss	00000040 glEp0Buffer_Rx



Disassembly of section .entry:

00010000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   10000:	00400074 	movhi	at,1
    ori r1, r1, %lo(_start)
   10004:	08400814 	ori	at,at,32
    jmp r1
   10008:	0800683a 	jmp	at
	...

Disassembly of section .text:

00010020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   10020:	06c00074 	movhi	sp,1
    ori sp, sp, %lo(__alt_stack_pointer)
   10024:	dee00014 	ori	sp,sp,32768
    movhi gp, %hi(_gp)
   10028:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
   1002c:	d6bdf614 	ori	gp,gp,63448
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   10030:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
   10034:	109ebb14 	ori	r2,r2,31468

    movhi r3, %hi(__bss_end)
   10038:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
   1003c:	18dee014 	ori	r3,r3,31616

    beq r2, r3, 1f
   10040:	10c00326 	beq	r2,r3,10050 <_start+0x30>

0:
    stw zero, (r2)
   10044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   10048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   1004c:	10fffd36 	bltu	r2,r3,10044 <_gp+0xffff086c>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   10050:	0015fc80 	call	15fc8 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   10054:	001604c0 	call	1604c <alt_main>

00010058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   10058:	003fff06 	br	10058 <_gp+0xffff0880>

0001005c <Check_many_blocks>:


/**	This function checks if all blocks could fit in data field.
*	If blocks will not fit, function returns TRUE. */
unsigned char Check_many_blocks (unsigned char block_size)
{
   1005c:	defffc04 	addi	sp,sp,-16
   10060:	dfc00315 	stw	ra,12(sp)
   10064:	df000215 	stw	fp,8(sp)
   10068:	dc000115 	stw	r16,4(sp)
   1006c:	df000204 	addi	fp,sp,8
   10070:	2005883a 	mov	r2,r4
   10074:	e0bffe05 	stb	r2,-8(fp)
	if (LMS_Ctrl_Packet_Rx->Header.Data_blocks > (sizeof(LMS_Ctrl_Packet_Tx->Data_field)/block_size))
   10078:	d0a00217 	ldw	r2,-32760(gp)
   1007c:	14000083 	ldbu	r16,2(r2)
   10080:	e0bffe03 	ldbu	r2,-8(fp)
   10084:	100b883a 	mov	r5,r2
   10088:	01000e04 	movi	r4,56
   1008c:	00136800 	call	13680 <__udivsi3>
   10090:	1007883a 	mov	r3,r2
   10094:	80803fcc 	andi	r2,r16,255
   10098:	18c03fcc 	andi	r3,r3,255
   1009c:	1880052e 	bgeu	r3,r2,100b4 <Check_many_blocks+0x58>
	{
		LMS_Ctrl_Packet_Tx->Header.Status = STATUS_BLOCKS_ERROR_CMD;
   100a0:	d0a00117 	ldw	r2,-32764(gp)
   100a4:	00c00104 	movi	r3,4
   100a8:	10c00045 	stb	r3,1(r2)
		return 1;
   100ac:	00800044 	movi	r2,1
   100b0:	00000106 	br	100b8 <Check_many_blocks+0x5c>
	}
	else return 0;
   100b4:	0005883a 	mov	r2,zero
	return 1;
}
   100b8:	e6ffff04 	addi	sp,fp,-4
   100bc:	dfc00217 	ldw	ra,8(sp)
   100c0:	df000117 	ldw	fp,4(sp)
   100c4:	dc000017 	ldw	r16,0(sp)
   100c8:	dec00304 	addi	sp,sp,12
   100cc:	f800283a 	ret

000100d0 <Check_Periph_ID>:

/** Cchecks if peripheral ID is valid.
 Returns 1 if valid, else 0. */
unsigned char Check_Periph_ID (unsigned char max_periph_id, unsigned char Periph_ID)
{
   100d0:	defffd04 	addi	sp,sp,-12
   100d4:	df000215 	stw	fp,8(sp)
   100d8:	df000204 	addi	fp,sp,8
   100dc:	2007883a 	mov	r3,r4
   100e0:	2805883a 	mov	r2,r5
   100e4:	e0fffe05 	stb	r3,-8(fp)
   100e8:	e0bfff05 	stb	r2,-4(fp)
		if (LMS_Ctrl_Packet_Rx->Header.Periph_ID > max_periph_id)
   100ec:	d0a00217 	ldw	r2,-32760(gp)
   100f0:	108000c3 	ldbu	r2,3(r2)
   100f4:	10803fcc 	andi	r2,r2,255
   100f8:	e0fffe03 	ldbu	r3,-8(fp)
   100fc:	1880052e 	bgeu	r3,r2,10114 <Check_Periph_ID+0x44>
		{
		LMS_Ctrl_Packet_Tx->Header.Status = STATUS_INVALID_PERIPH_ID_CMD;
   10100:	d0a00117 	ldw	r2,-32764(gp)
   10104:	00c00204 	movi	r3,8
   10108:	10c00045 	stb	r3,1(r2)
		return 0;
   1010c:	0005883a 	mov	r2,zero
   10110:	00000106 	br	10118 <Check_Periph_ID+0x48>
		}
	else return 1;
   10114:	00800044 	movi	r2,1
}
   10118:	e037883a 	mov	sp,fp
   1011c:	df000017 	ldw	fp,0(sp)
   10120:	dec00104 	addi	sp,sp,4
   10124:	f800283a 	ret

00010128 <getFifoData>:

/**
 * Gets 64 bytes packet from FIFO.
 */
void getFifoData(uint8_t *buf, uint8_t k)
{
   10128:	defffb04 	addi	sp,sp,-20
   1012c:	df000415 	stw	fp,16(sp)
   10130:	df000404 	addi	fp,sp,16
   10134:	e13ffe15 	stw	r4,-8(fp)
   10138:	2805883a 	mov	r2,r5
   1013c:	e0bfff05 	stb	r2,-4(fp)
	uint8_t cnt = 0;
   10140:	e03ffc05 	stb	zero,-16(fp)
	uint32_t* dest = (uint32_t*)buf;
   10144:	e0bffe17 	ldw	r2,-8(fp)
   10148:	e0bffd15 	stw	r2,-12(fp)
	for(cnt=0; cnt<k/sizeof(uint32_t); ++cnt)
   1014c:	e03ffc05 	stb	zero,-16(fp)
   10150:	00000c06 	br	10184 <getFifoData+0x5c>
	{
		dest[cnt] = IORD(AV_FIFO_INT_0_BASE, 1);	// Read Data from FIFO
   10154:	e0bffc03 	ldbu	r2,-16(fp)
   10158:	1085883a 	add	r2,r2,r2
   1015c:	1085883a 	add	r2,r2,r2
   10160:	1007883a 	mov	r3,r2
   10164:	e0bffd17 	ldw	r2,-12(fp)
   10168:	10c5883a 	add	r2,r2,r3
   1016c:	00c1f904 	movi	r3,2020
   10170:	18c00037 	ldwio	r3,0(r3)
   10174:	10c00015 	stw	r3,0(r2)
 */
void getFifoData(uint8_t *buf, uint8_t k)
{
	uint8_t cnt = 0;
	uint32_t* dest = (uint32_t*)buf;
	for(cnt=0; cnt<k/sizeof(uint32_t); ++cnt)
   10178:	e0bffc03 	ldbu	r2,-16(fp)
   1017c:	10800044 	addi	r2,r2,1
   10180:	e0bffc05 	stb	r2,-16(fp)
   10184:	e0bfff03 	ldbu	r2,-4(fp)
   10188:	1004d0ba 	srli	r2,r2,2
   1018c:	10803fcc 	andi	r2,r2,255
   10190:	e0fffc03 	ldbu	r3,-16(fp)
   10194:	18bfef36 	bltu	r3,r2,10154 <_gp+0xffff097c>
	{
		dest[cnt] = IORD(AV_FIFO_INT_0_BASE, 1);	// Read Data from FIFO
	};
}
   10198:	0001883a 	nop
   1019c:	e037883a 	mov	sp,fp
   101a0:	df000017 	ldw	fp,0(sp)
   101a4:	dec00104 	addi	sp,sp,4
   101a8:	f800283a 	ret

000101ac <Configure_LM75>:
/**
 * Configures LM75
 */

void Configure_LM75(void)
{
   101ac:	defffd04 	addi	sp,sp,-12
   101b0:	dfc00215 	stw	ra,8(sp)
   101b4:	df000115 	stw	fp,4(sp)
   101b8:	df000104 	addi	fp,sp,4
	int spirez;

	// OS polarity configuration
	spirez = I2C_start(I2C_OPENCORES_0_BASE, LM75_I2C_ADDR, 0);
   101bc:	000d883a 	mov	r6,zero
   101c0:	01401204 	movi	r5,72
   101c4:	0101d804 	movi	r4,1888
   101c8:	00166600 	call	16660 <I2C_start>
   101cc:	e0bfff15 	stw	r2,-4(fp)
	spirez = I2C_write(I2C_OPENCORES_0_BASE, 0x01, 0);				// Pointer = configuration register
   101d0:	000d883a 	mov	r6,zero
   101d4:	01400044 	movi	r5,1
   101d8:	0101d804 	movi	r4,1888
   101dc:	00167b40 	call	167b4 <I2C_write>
   101e0:	e0bfff15 	stw	r2,-4(fp)
	//spirez = I2C_start(I2C_OPENCORES_0_BASE, LM75_I2C_ADDR, 1);
	spirez = I2C_write(I2C_OPENCORES_0_BASE, 0x04, 1);				//Configuration value: OS polarity = 1, Comparator/int = 0, Shutdown = 0
   101e4:	01800044 	movi	r6,1
   101e8:	01400104 	movi	r5,4
   101ec:	0101d804 	movi	r4,1888
   101f0:	00167b40 	call	167b4 <I2C_write>
   101f4:	e0bfff15 	stw	r2,-4(fp)

	// THYST configuration
	spirez = I2C_start(I2C_OPENCORES_0_BASE, LM75_I2C_ADDR, 0);
   101f8:	000d883a 	mov	r6,zero
   101fc:	01401204 	movi	r5,72
   10200:	0101d804 	movi	r4,1888
   10204:	00166600 	call	16660 <I2C_start>
   10208:	e0bfff15 	stw	r2,-4(fp)
	spirez = I2C_write(I2C_OPENCORES_0_BASE, 0x02, 0);				// Pointer = THYST register
   1020c:	000d883a 	mov	r6,zero
   10210:	01400084 	movi	r5,2
   10214:	0101d804 	movi	r4,1888
   10218:	00167b40 	call	167b4 <I2C_write>
   1021c:	e0bfff15 	stw	r2,-4(fp)
	//spirez = I2C_start(I2C_OPENCORES_0_BASE, LM75_I2C_ADDR, 1);
	spirez = I2C_write(I2C_OPENCORES_0_BASE, 45, 0);				// Set THYST H
   10220:	000d883a 	mov	r6,zero
   10224:	01400b44 	movi	r5,45
   10228:	0101d804 	movi	r4,1888
   1022c:	00167b40 	call	167b4 <I2C_write>
   10230:	e0bfff15 	stw	r2,-4(fp)
	spirez = I2C_write(I2C_OPENCORES_0_BASE,  0, 1);				// Set THYST L
   10234:	01800044 	movi	r6,1
   10238:	000b883a 	mov	r5,zero
   1023c:	0101d804 	movi	r4,1888
   10240:	00167b40 	call	167b4 <I2C_write>
   10244:	e0bfff15 	stw	r2,-4(fp)

	// TOS configuration
	spirez = I2C_start(I2C_OPENCORES_0_BASE, LM75_I2C_ADDR, 0);
   10248:	000d883a 	mov	r6,zero
   1024c:	01401204 	movi	r5,72
   10250:	0101d804 	movi	r4,1888
   10254:	00166600 	call	16660 <I2C_start>
   10258:	e0bfff15 	stw	r2,-4(fp)
	spirez = I2C_write(I2C_OPENCORES_0_BASE, 0x03, 0);				// Pointer = TOS register
   1025c:	000d883a 	mov	r6,zero
   10260:	014000c4 	movi	r5,3
   10264:	0101d804 	movi	r4,1888
   10268:	00167b40 	call	167b4 <I2C_write>
   1026c:	e0bfff15 	stw	r2,-4(fp)
	//spirez = I2C_start(I2C_OPENCORES_0_BASE, LM75_I2C_ADDR, 1);
	spirez = I2C_write(I2C_OPENCORES_0_BASE, 55, 0);				// Set TOS H
   10270:	000d883a 	mov	r6,zero
   10274:	01400dc4 	movi	r5,55
   10278:	0101d804 	movi	r4,1888
   1027c:	00167b40 	call	167b4 <I2C_write>
   10280:	e0bfff15 	stw	r2,-4(fp)
	spirez = I2C_write(I2C_OPENCORES_0_BASE,  0, 1);				// Set TOS L
   10284:	01800044 	movi	r6,1
   10288:	000b883a 	mov	r5,zero
   1028c:	0101d804 	movi	r4,1888
   10290:	00167b40 	call	167b4 <I2C_write>
   10294:	e0bfff15 	stw	r2,-4(fp)
}
   10298:	0001883a 	nop
   1029c:	e037883a 	mov	sp,fp
   102a0:	dfc00117 	ldw	ra,4(sp)
   102a4:	df000017 	ldw	fp,0(sp)
   102a8:	dec00204 	addi	sp,sp,8
   102ac:	f800283a 	ret

000102b0 <init_ADC>:

void init_ADC()
{
   102b0:	defff904 	addi	sp,sp,-28
   102b4:	dfc00615 	stw	ra,24(sp)
   102b8:	df000515 	stw	fp,20(sp)
   102bc:	df000504 	addi	fp,sp,20
    //asm("nop"); asm("nop"); asm("nop");
    //IOWR(GPIO_0_BASE, 0x00, ui32_tmp & 0xFFFFFFFE);	//Set to 0


	// Disable ADC readout and reset
	wr_buf[0] = 0x00;	//Address
   102c0:	e03fff05 	stb	zero,-4(fp)
	wr_buf[1] = 0x02;	//Data
   102c4:	00800084 	movi	r2,2
   102c8:	e0bfff45 	stb	r2,-3(fp)
	//wr_buf[1] = 0x00;	//Data
	spirez = alt_avalon_spi_command(FPGA_SPI0_BASE, SPI_NR_EXTADC, 2, wr_buf, 0, NULL, 0);
   102cc:	e0bfff04 	addi	r2,fp,-4
   102d0:	d8000215 	stw	zero,8(sp)
   102d4:	d8000115 	stw	zero,4(sp)
   102d8:	d8000015 	stw	zero,0(sp)
   102dc:	100f883a 	mov	r7,r2
   102e0:	01800084 	movi	r6,2
   102e4:	01400144 	movi	r5,5
   102e8:	0101d004 	movi	r4,1856
   102ec:	00163ac0 	call	163ac <alt_avalon_spi_command>
   102f0:	e0bffe15 	stw	r2,-8(fp)

	// 0x01
	wr_buf[0] = 0x01;	//Address
   102f4:	00800044 	movi	r2,1
   102f8:	e0bfff05 	stb	r2,-4(fp)
	wr_buf[1] = 0x00;	//Data
   102fc:	e03fff45 	stb	zero,-3(fp)
	spirez = alt_avalon_spi_command(FPGA_SPI0_BASE, SPI_NR_EXTADC, 2, wr_buf, 0, NULL, 0);
   10300:	e0bfff04 	addi	r2,fp,-4
   10304:	d8000215 	stw	zero,8(sp)
   10308:	d8000115 	stw	zero,4(sp)
   1030c:	d8000015 	stw	zero,0(sp)
   10310:	100f883a 	mov	r7,r2
   10314:	01800084 	movi	r6,2
   10318:	01400144 	movi	r5,5
   1031c:	0101d004 	movi	r4,1856
   10320:	00163ac0 	call	163ac <alt_avalon_spi_command>
   10324:	e0bffe15 	stw	r2,-8(fp)

	// 0x03
	wr_buf[0] = 0x03;	//Address
   10328:	008000c4 	movi	r2,3
   1032c:	e0bfff05 	stb	r2,-4(fp)
	//wr_buf[1] = 0x53;	//Data
	wr_buf[1] = 0x00;	//Data
   10330:	e03fff45 	stb	zero,-3(fp)
	spirez = alt_avalon_spi_command(FPGA_SPI0_BASE, SPI_NR_EXTADC, 2, wr_buf, 0, NULL, 0);
   10334:	e0bfff04 	addi	r2,fp,-4
   10338:	d8000215 	stw	zero,8(sp)
   1033c:	d8000115 	stw	zero,4(sp)
   10340:	d8000015 	stw	zero,0(sp)
   10344:	100f883a 	mov	r7,r2
   10348:	01800084 	movi	r6,2
   1034c:	01400144 	movi	r5,5
   10350:	0101d004 	movi	r4,1856
   10354:	00163ac0 	call	163ac <alt_avalon_spi_command>
   10358:	e0bffe15 	stw	r2,-8(fp)

	// 0x25
	wr_buf[0] = 0x25;	//Address
   1035c:	00800944 	movi	r2,37
   10360:	e0bfff05 	stb	r2,-4(fp)
	wr_buf[1] = 0x04;	//Data
   10364:	00800104 	movi	r2,4
   10368:	e0bfff45 	stb	r2,-3(fp)
	spirez = alt_avalon_spi_command(FPGA_SPI0_BASE, SPI_NR_EXTADC, 2, wr_buf, 0, NULL, 0);
   1036c:	e0bfff04 	addi	r2,fp,-4
   10370:	d8000215 	stw	zero,8(sp)
   10374:	d8000115 	stw	zero,4(sp)
   10378:	d8000015 	stw	zero,0(sp)
   1037c:	100f883a 	mov	r7,r2
   10380:	01800084 	movi	r6,2
   10384:	01400144 	movi	r5,5
   10388:	0101d004 	movi	r4,1856
   1038c:	00163ac0 	call	163ac <alt_avalon_spi_command>
   10390:	e0bffe15 	stw	r2,-8(fp)

	// 0x29
	wr_buf[0] = 0x29;	//Address
   10394:	00800a44 	movi	r2,41
   10398:	e0bfff05 	stb	r2,-4(fp)
	wr_buf[1] = 0x00;	//Data
   1039c:	e03fff45 	stb	zero,-3(fp)
	spirez = alt_avalon_spi_command(FPGA_SPI0_BASE, SPI_NR_EXTADC, 2, wr_buf, 0, NULL, 0);
   103a0:	e0bfff04 	addi	r2,fp,-4
   103a4:	d8000215 	stw	zero,8(sp)
   103a8:	d8000115 	stw	zero,4(sp)
   103ac:	d8000015 	stw	zero,0(sp)
   103b0:	100f883a 	mov	r7,r2
   103b4:	01800084 	movi	r6,2
   103b8:	01400144 	movi	r5,5
   103bc:	0101d004 	movi	r4,1856
   103c0:	00163ac0 	call	163ac <alt_avalon_spi_command>
   103c4:	e0bffe15 	stw	r2,-8(fp)

	// 0x2B
	wr_buf[0] = 0x2B;	//Address
   103c8:	00800ac4 	movi	r2,43
   103cc:	e0bfff05 	stb	r2,-4(fp)
	wr_buf[1] = 0x04;	//Data
   103d0:	00800104 	movi	r2,4
   103d4:	e0bfff45 	stb	r2,-3(fp)
	spirez = alt_avalon_spi_command(FPGA_SPI0_BASE, SPI_NR_EXTADC, 2, wr_buf, 0, NULL, 0);
   103d8:	e0bfff04 	addi	r2,fp,-4
   103dc:	d8000215 	stw	zero,8(sp)
   103e0:	d8000115 	stw	zero,4(sp)
   103e4:	d8000015 	stw	zero,0(sp)
   103e8:	100f883a 	mov	r7,r2
   103ec:	01800084 	movi	r6,2
   103f0:	01400144 	movi	r5,5
   103f4:	0101d004 	movi	r4,1856
   103f8:	00163ac0 	call	163ac <alt_avalon_spi_command>
   103fc:	e0bffe15 	stw	r2,-8(fp)

	// 0x3D
	wr_buf[0] = 0x3D;	//Address
   10400:	00800f44 	movi	r2,61
   10404:	e0bfff05 	stb	r2,-4(fp)
	wr_buf[1] = 0x00;	//Data
   10408:	e03fff45 	stb	zero,-3(fp)
	spirez = alt_avalon_spi_command(FPGA_SPI0_BASE, SPI_NR_EXTADC, 2, wr_buf, 0, NULL, 0);
   1040c:	e0bfff04 	addi	r2,fp,-4
   10410:	d8000215 	stw	zero,8(sp)
   10414:	d8000115 	stw	zero,4(sp)
   10418:	d8000015 	stw	zero,0(sp)
   1041c:	100f883a 	mov	r7,r2
   10420:	01800084 	movi	r6,2
   10424:	01400144 	movi	r5,5
   10428:	0101d004 	movi	r4,1856
   1042c:	00163ac0 	call	163ac <alt_avalon_spi_command>
   10430:	e0bffe15 	stw	r2,-8(fp)

	// 0x3F
	wr_buf[0] = 0x3F;	//Address
   10434:	00800fc4 	movi	r2,63
   10438:	e0bfff05 	stb	r2,-4(fp)
	wr_buf[1] = 0x00;	//Data
   1043c:	e03fff45 	stb	zero,-3(fp)
	spirez = alt_avalon_spi_command(FPGA_SPI0_BASE, SPI_NR_EXTADC, 2, wr_buf, 0, NULL, 0);
   10440:	e0bfff04 	addi	r2,fp,-4
   10444:	d8000215 	stw	zero,8(sp)
   10448:	d8000115 	stw	zero,4(sp)
   1044c:	d8000015 	stw	zero,0(sp)
   10450:	100f883a 	mov	r7,r2
   10454:	01800084 	movi	r6,2
   10458:	01400144 	movi	r5,5
   1045c:	0101d004 	movi	r4,1856
   10460:	00163ac0 	call	163ac <alt_avalon_spi_command>
   10464:	e0bffe15 	stw	r2,-8(fp)

	// 0x40
	wr_buf[0] = 0x40;	//Address
   10468:	00801004 	movi	r2,64
   1046c:	e0bfff05 	stb	r2,-4(fp)
	wr_buf[1] = 0x00;	//Data
   10470:	e03fff45 	stb	zero,-3(fp)
	spirez = alt_avalon_spi_command(FPGA_SPI0_BASE, SPI_NR_EXTADC, 2, wr_buf, 0, NULL, 0);
   10474:	e0bfff04 	addi	r2,fp,-4
   10478:	d8000215 	stw	zero,8(sp)
   1047c:	d8000115 	stw	zero,4(sp)
   10480:	d8000015 	stw	zero,0(sp)
   10484:	100f883a 	mov	r7,r2
   10488:	01800084 	movi	r6,2
   1048c:	01400144 	movi	r5,5
   10490:	0101d004 	movi	r4,1856
   10494:	00163ac0 	call	163ac <alt_avalon_spi_command>
   10498:	e0bffe15 	stw	r2,-8(fp)

	// 0x41
	wr_buf[0] = 0x41;	//Address
   1049c:	00801044 	movi	r2,65
   104a0:	e0bfff05 	stb	r2,-4(fp)
	wr_buf[1] = 0x00;	//Data
   104a4:	e03fff45 	stb	zero,-3(fp)
	spirez = alt_avalon_spi_command(FPGA_SPI0_BASE, SPI_NR_EXTADC, 2, wr_buf, 0, NULL, 0);
   104a8:	e0bfff04 	addi	r2,fp,-4
   104ac:	d8000215 	stw	zero,8(sp)
   104b0:	d8000115 	stw	zero,4(sp)
   104b4:	d8000015 	stw	zero,0(sp)
   104b8:	100f883a 	mov	r7,r2
   104bc:	01800084 	movi	r6,2
   104c0:	01400144 	movi	r5,5
   104c4:	0101d004 	movi	r4,1856
   104c8:	00163ac0 	call	163ac <alt_avalon_spi_command>
   104cc:	e0bffe15 	stw	r2,-8(fp)

	// 0x42
	wr_buf[0] = 0x42;	//Address
   104d0:	00801084 	movi	r2,66
   104d4:	e0bfff05 	stb	r2,-4(fp)
	//wr_buf[1] = 0x08;	//Data
	wr_buf[1] = 0x00;	//Data
   104d8:	e03fff45 	stb	zero,-3(fp)
	spirez = alt_avalon_spi_command(FPGA_SPI0_BASE, SPI_NR_EXTADC, 2, wr_buf, 0, NULL, 0);
   104dc:	e0bfff04 	addi	r2,fp,-4
   104e0:	d8000215 	stw	zero,8(sp)
   104e4:	d8000115 	stw	zero,4(sp)
   104e8:	d8000015 	stw	zero,0(sp)
   104ec:	100f883a 	mov	r7,r2
   104f0:	01800084 	movi	r6,2
   104f4:	01400144 	movi	r5,5
   104f8:	0101d004 	movi	r4,1856
   104fc:	00163ac0 	call	163ac <alt_avalon_spi_command>
   10500:	e0bffe15 	stw	r2,-8(fp)

	// 0x45
	wr_buf[0] = 0x45;	//Address
   10504:	00801144 	movi	r2,69
   10508:	e0bfff05 	stb	r2,-4(fp)
	wr_buf[1] = 0x00;	//Data
   1050c:	e03fff45 	stb	zero,-3(fp)
	spirez = alt_avalon_spi_command(FPGA_SPI0_BASE, SPI_NR_EXTADC, 2, wr_buf, 0, NULL, 0);
   10510:	e0bfff04 	addi	r2,fp,-4
   10514:	d8000215 	stw	zero,8(sp)
   10518:	d8000115 	stw	zero,4(sp)
   1051c:	d8000015 	stw	zero,0(sp)
   10520:	100f883a 	mov	r7,r2
   10524:	01800084 	movi	r6,2
   10528:	01400144 	movi	r5,5
   1052c:	0101d004 	movi	r4,1856
   10530:	00163ac0 	call	163ac <alt_avalon_spi_command>
   10534:	e0bffe15 	stw	r2,-8(fp)

	// 0x4A
	wr_buf[0] = 0x4A;	//Address
   10538:	00801284 	movi	r2,74
   1053c:	e0bfff05 	stb	r2,-4(fp)
	wr_buf[1] = 0x00;	//Data
   10540:	e03fff45 	stb	zero,-3(fp)
	spirez = alt_avalon_spi_command(FPGA_SPI0_BASE, SPI_NR_EXTADC, 2, wr_buf, 0, NULL, 0);
   10544:	e0bfff04 	addi	r2,fp,-4
   10548:	d8000215 	stw	zero,8(sp)
   1054c:	d8000115 	stw	zero,4(sp)
   10550:	d8000015 	stw	zero,0(sp)
   10554:	100f883a 	mov	r7,r2
   10558:	01800084 	movi	r6,2
   1055c:	01400144 	movi	r5,5
   10560:	0101d004 	movi	r4,1856
   10564:	00163ac0 	call	163ac <alt_avalon_spi_command>
   10568:	e0bffe15 	stw	r2,-8(fp)

	// 0x58
	wr_buf[0] = 0x58;	//Address
   1056c:	00801604 	movi	r2,88
   10570:	e0bfff05 	stb	r2,-4(fp)
	wr_buf[1] = 0x00;	//Data
   10574:	e03fff45 	stb	zero,-3(fp)
	spirez = alt_avalon_spi_command(FPGA_SPI0_BASE, SPI_NR_EXTADC, 2, wr_buf, 0, NULL, 0);
   10578:	e0bfff04 	addi	r2,fp,-4
   1057c:	d8000215 	stw	zero,8(sp)
   10580:	d8000115 	stw	zero,4(sp)
   10584:	d8000015 	stw	zero,0(sp)
   10588:	100f883a 	mov	r7,r2
   1058c:	01800084 	movi	r6,2
   10590:	01400144 	movi	r5,5
   10594:	0101d004 	movi	r4,1856
   10598:	00163ac0 	call	163ac <alt_avalon_spi_command>
   1059c:	e0bffe15 	stw	r2,-8(fp)

	// 0xBF
	wr_buf[0] = 0xBF;	//Address
   105a0:	00bfefc4 	movi	r2,-65
   105a4:	e0bfff05 	stb	r2,-4(fp)
	wr_buf[1] = 0x00;	//Data
   105a8:	e03fff45 	stb	zero,-3(fp)
	spirez = alt_avalon_spi_command(FPGA_SPI0_BASE, SPI_NR_EXTADC, 2, wr_buf, 0, NULL, 0);
   105ac:	e0bfff04 	addi	r2,fp,-4
   105b0:	d8000215 	stw	zero,8(sp)
   105b4:	d8000115 	stw	zero,4(sp)
   105b8:	d8000015 	stw	zero,0(sp)
   105bc:	100f883a 	mov	r7,r2
   105c0:	01800084 	movi	r6,2
   105c4:	01400144 	movi	r5,5
   105c8:	0101d004 	movi	r4,1856
   105cc:	00163ac0 	call	163ac <alt_avalon_spi_command>
   105d0:	e0bffe15 	stw	r2,-8(fp)

	// 0xC1
	wr_buf[0] = 0xC1;	//Address
   105d4:	00bff044 	movi	r2,-63
   105d8:	e0bfff05 	stb	r2,-4(fp)
	wr_buf[1] = 0x00;	//Data
   105dc:	e03fff45 	stb	zero,-3(fp)
	spirez = alt_avalon_spi_command(FPGA_SPI0_BASE, SPI_NR_EXTADC, 2, wr_buf, 0, NULL, 0);
   105e0:	e0bfff04 	addi	r2,fp,-4
   105e4:	d8000215 	stw	zero,8(sp)
   105e8:	d8000115 	stw	zero,4(sp)
   105ec:	d8000015 	stw	zero,0(sp)
   105f0:	100f883a 	mov	r7,r2
   105f4:	01800084 	movi	r6,2
   105f8:	01400144 	movi	r5,5
   105fc:	0101d004 	movi	r4,1856
   10600:	00163ac0 	call	163ac <alt_avalon_spi_command>
   10604:	e0bffe15 	stw	r2,-8(fp)

	// 0xCF
	wr_buf[0] = 0xCF;	//Address
   10608:	00bff3c4 	movi	r2,-49
   1060c:	e0bfff05 	stb	r2,-4(fp)
	wr_buf[1] = 0x00;	//Data
   10610:	e03fff45 	stb	zero,-3(fp)
	spirez = alt_avalon_spi_command(FPGA_SPI0_BASE, SPI_NR_EXTADC, 2, wr_buf, 0, NULL, 0);
   10614:	e0bfff04 	addi	r2,fp,-4
   10618:	d8000215 	stw	zero,8(sp)
   1061c:	d8000115 	stw	zero,4(sp)
   10620:	d8000015 	stw	zero,0(sp)
   10624:	100f883a 	mov	r7,r2
   10628:	01800084 	movi	r6,2
   1062c:	01400144 	movi	r5,5
   10630:	0101d004 	movi	r4,1856
   10634:	00163ac0 	call	163ac <alt_avalon_spi_command>
   10638:	e0bffe15 	stw	r2,-8(fp)

	// 0xDB
	wr_buf[0] = 0xDB;	//Address
   1063c:	00bff6c4 	movi	r2,-37
   10640:	e0bfff05 	stb	r2,-4(fp)
	wr_buf[1] = 0x01;	//Data (0x01 - Low Speed MODE CH B enabled, 0x00 - Low Speed MODE CH B disabled)
   10644:	00800044 	movi	r2,1
   10648:	e0bfff45 	stb	r2,-3(fp)
	spirez = alt_avalon_spi_command(FPGA_SPI0_BASE, SPI_NR_EXTADC, 2, wr_buf, 0, NULL, 0);
   1064c:	e0bfff04 	addi	r2,fp,-4
   10650:	d8000215 	stw	zero,8(sp)
   10654:	d8000115 	stw	zero,4(sp)
   10658:	d8000015 	stw	zero,0(sp)
   1065c:	100f883a 	mov	r7,r2
   10660:	01800084 	movi	r6,2
   10664:	01400144 	movi	r5,5
   10668:	0101d004 	movi	r4,1856
   1066c:	00163ac0 	call	163ac <alt_avalon_spi_command>
   10670:	e0bffe15 	stw	r2,-8(fp)

	// 0xEF
	wr_buf[0] = 0xEF;	//Address
   10674:	00bffbc4 	movi	r2,-17
   10678:	e0bfff05 	stb	r2,-4(fp)
	wr_buf[1] = 0x10;	//Data (0x10 - Low Speed MODE enabled, 0x00 - Low Speed MODE disabled)
   1067c:	00800404 	movi	r2,16
   10680:	e0bfff45 	stb	r2,-3(fp)
	spirez = alt_avalon_spi_command(FPGA_SPI0_BASE, SPI_NR_EXTADC, 2, wr_buf, 0, NULL, 0);
   10684:	e0bfff04 	addi	r2,fp,-4
   10688:	d8000215 	stw	zero,8(sp)
   1068c:	d8000115 	stw	zero,4(sp)
   10690:	d8000015 	stw	zero,0(sp)
   10694:	100f883a 	mov	r7,r2
   10698:	01800084 	movi	r6,2
   1069c:	01400144 	movi	r5,5
   106a0:	0101d004 	movi	r4,1856
   106a4:	00163ac0 	call	163ac <alt_avalon_spi_command>
   106a8:	e0bffe15 	stw	r2,-8(fp)

	// 0xF1
	wr_buf[0] = 0xF1;	//Address
   106ac:	00bffc44 	movi	r2,-15
   106b0:	e0bfff05 	stb	r2,-4(fp)
	wr_buf[1] = 0x00;	//Data
   106b4:	e03fff45 	stb	zero,-3(fp)
	spirez = alt_avalon_spi_command(FPGA_SPI0_BASE, SPI_NR_EXTADC, 2, wr_buf, 0, NULL, 0);
   106b8:	e0bfff04 	addi	r2,fp,-4
   106bc:	d8000215 	stw	zero,8(sp)
   106c0:	d8000115 	stw	zero,4(sp)
   106c4:	d8000015 	stw	zero,0(sp)
   106c8:	100f883a 	mov	r7,r2
   106cc:	01800084 	movi	r6,2
   106d0:	01400144 	movi	r5,5
   106d4:	0101d004 	movi	r4,1856
   106d8:	00163ac0 	call	163ac <alt_avalon_spi_command>
   106dc:	e0bffe15 	stw	r2,-8(fp)

	// 0xF2
	wr_buf[0] = 0xF2;	//Address
   106e0:	00bffc84 	movi	r2,-14
   106e4:	e0bfff05 	stb	r2,-4(fp)
	wr_buf[1] = 0x08;	//Data (0x08 - Low Speed MODE CH A enabled, 0x00 - Low Speed MODE CH A disabled)
   106e8:	00800204 	movi	r2,8
   106ec:	e0bfff45 	stb	r2,-3(fp)
	spirez = alt_avalon_spi_command(FPGA_SPI0_BASE, SPI_NR_EXTADC, 2, wr_buf, 0, NULL, 0);
   106f0:	e0bfff04 	addi	r2,fp,-4
   106f4:	d8000215 	stw	zero,8(sp)
   106f8:	d8000115 	stw	zero,4(sp)
   106fc:	d8000015 	stw	zero,0(sp)
   10700:	100f883a 	mov	r7,r2
   10704:	01800084 	movi	r6,2
   10708:	01400144 	movi	r5,5
   1070c:	0101d004 	movi	r4,1856
   10710:	00163ac0 	call	163ac <alt_avalon_spi_command>
   10714:	e0bffe15 	stw	r2,-8(fp)

}
   10718:	0001883a 	nop
   1071c:	e037883a 	mov	sp,fp
   10720:	dfc00117 	ldw	ra,4(sp)
   10724:	df000017 	ldw	fp,0(sp)
   10728:	dec00204 	addi	sp,sp,8
   1072c:	f800283a 	ret

00010730 <Control_TCXO_DAC>:
 *	@brief Function to control DAC for TCXO frequency control
 *	@param oe output enable control: 0 - output disabled, 1 - output enabled
 *	@param data pointer to DAC value (1 byte)
 */
void Control_TCXO_DAC (unsigned char oe, unsigned short int *data) //controls DAC (AD5601)
{
   10730:	defff704 	addi	sp,sp,-36
   10734:	dfc00815 	stw	ra,32(sp)
   10738:	df000715 	stw	fp,28(sp)
   1073c:	df000704 	addi	fp,sp,28
   10740:	2005883a 	mov	r2,r4
   10744:	e17fff15 	stw	r5,-4(fp)
   10748:	e0bffe05 	stb	r2,-8(fp)
	volatile int spirez;
	unsigned char DAC_data[3];

	if (oe == 0) //set DAC out to three-state
   1074c:	e0bffe03 	ldbu	r2,-8(fp)
   10750:	10000f1e 	bne	r2,zero,10790 <Control_TCXO_DAC+0x60>
	{
		DAC_data[0] = 0x03; //POWER-DOWN MODE = THREE-STATE (PD[1:0]([17:16]) = 11)
   10754:	008000c4 	movi	r2,3
   10758:	e0bffd05 	stb	r2,-12(fp)
		DAC_data[1] = 0x00;
   1075c:	e03ffd45 	stb	zero,-11(fp)
		DAC_data[2] = 0x00; //LSB data
   10760:	e03ffd85 	stb	zero,-10(fp)

		spirez = alt_avalon_spi_command(DAC_SPI1_BASE, SPI_NR_TCXO_DAC, 3, DAC_data, 0, NULL, 0);
   10764:	e0bffd04 	addi	r2,fp,-12
   10768:	d8000215 	stw	zero,8(sp)
   1076c:	d8000115 	stw	zero,4(sp)
   10770:	d8000015 	stw	zero,0(sp)
   10774:	100f883a 	mov	r7,r2
   10778:	018000c4 	movi	r6,3
   1077c:	000b883a 	mov	r5,zero
   10780:	0101c004 	movi	r4,1792
   10784:	00163ac0 	call	163ac <alt_avalon_spi_command>
   10788:	e0bffc15 	stw	r2,-16(fp)

	    /* Update cached value of trim DAC setting */
	    vctcxo_trim_dac_value = (uint16_t) *data;
		spirez = alt_avalon_spi_command(DAC_SPI1_BASE, SPI_NR_TCXO_DAC, 3, DAC_data, 0, NULL, 0);
	}
}
   1078c:	00001606 	br	107e8 <Control_TCXO_DAC+0xb8>

		spirez = alt_avalon_spi_command(DAC_SPI1_BASE, SPI_NR_TCXO_DAC, 3, DAC_data, 0, NULL, 0);
	}
	else //enable DAC output, set new val
	{
		DAC_data[0] = 0; //POWER-DOWN MODE = NORMAL OPERATION PD[1:0]([17:16]) = 00)
   10790:	e03ffd05 	stb	zero,-12(fp)
		DAC_data[1] = ((*data) >>8) & 0xFF;
   10794:	e0bfff17 	ldw	r2,-4(fp)
   10798:	1080000b 	ldhu	r2,0(r2)
   1079c:	10bfffcc 	andi	r2,r2,65535
   107a0:	1004d23a 	srli	r2,r2,8
   107a4:	e0bffd45 	stb	r2,-11(fp)
		DAC_data[2] = ((*data) >>0) & 0xFF;
   107a8:	e0bfff17 	ldw	r2,-4(fp)
   107ac:	1080000b 	ldhu	r2,0(r2)
   107b0:	e0bffd85 	stb	r2,-10(fp)

	    /* Update cached value of trim DAC setting */
	    vctcxo_trim_dac_value = (uint16_t) *data;
   107b4:	e0bfff17 	ldw	r2,-4(fp)
   107b8:	1080000b 	ldhu	r2,0(r2)
   107bc:	d0a0030d 	sth	r2,-32756(gp)
		spirez = alt_avalon_spi_command(DAC_SPI1_BASE, SPI_NR_TCXO_DAC, 3, DAC_data, 0, NULL, 0);
   107c0:	e0bffd04 	addi	r2,fp,-12
   107c4:	d8000215 	stw	zero,8(sp)
   107c8:	d8000115 	stw	zero,4(sp)
   107cc:	d8000015 	stw	zero,0(sp)
   107d0:	100f883a 	mov	r7,r2
   107d4:	018000c4 	movi	r6,3
   107d8:	000b883a 	mov	r5,zero
   107dc:	0101c004 	movi	r4,1792
   107e0:	00163ac0 	call	163ac <alt_avalon_spi_command>
   107e4:	e0bffc15 	stw	r2,-16(fp)
	}
}
   107e8:	0001883a 	nop
   107ec:	e037883a 	mov	sp,fp
   107f0:	dfc00117 	ldw	ra,4(sp)
   107f4:	df000017 	ldw	fp,0(sp)
   107f8:	dec00204 	addi	sp,sp,8
   107fc:	f800283a 	ret

00010800 <Control_TCXO_ADF>:
 *	@brief Function to control ADF for TCXO frequency control
 *	@param oe output enable control: 0 - output disabled, 1 - output enabled
 *	@param data pointer to ADF data block (3 bytes)
 */
void Control_TCXO_ADF (unsigned char oe, unsigned char *data) //controls ADF4002
{
   10800:	defff404 	addi	sp,sp,-48
   10804:	dfc00b15 	stw	ra,44(sp)
   10808:	df000a15 	stw	fp,40(sp)
   1080c:	df000a04 	addi	fp,sp,40
   10810:	2005883a 	mov	r2,r4
   10814:	e17fff15 	stw	r5,-4(fp)
   10818:	e0bffe05 	stb	r2,-8(fp)
	volatile int spirez;
	unsigned char ADF_data[12], ADF_block;

	if (oe == 0) //set ADF4002 CP to three-state and MUX_OUT to DGND
   1081c:	e0bffe03 	ldbu	r2,-8(fp)
   10820:	10002f1e 	bne	r2,zero,108e0 <Control_TCXO_ADF+0xe0>
	{
		ADF_data[0] = 0x1f;
   10824:	008007c4 	movi	r2,31
   10828:	e0bffb05 	stb	r2,-20(fp)
		ADF_data[1] = 0x81;
   1082c:	00bfe044 	movi	r2,-127
   10830:	e0bffb45 	stb	r2,-19(fp)
		ADF_data[2] = 0xf3;
   10834:	00bffcc4 	movi	r2,-13
   10838:	e0bffb85 	stb	r2,-18(fp)
		ADF_data[3] = 0x1f;
   1083c:	008007c4 	movi	r2,31
   10840:	e0bffbc5 	stb	r2,-17(fp)
		ADF_data[4] = 0x81;
   10844:	00bfe044 	movi	r2,-127
   10848:	e0bffc05 	stb	r2,-16(fp)
		ADF_data[5] = 0xf2;
   1084c:	00bffc84 	movi	r2,-14
   10850:	e0bffc45 	stb	r2,-15(fp)
		ADF_data[6] = 0x00;
   10854:	e03ffc85 	stb	zero,-14(fp)
		ADF_data[7] = 0x01;
   10858:	00800044 	movi	r2,1
   1085c:	e0bffcc5 	stb	r2,-13(fp)
		ADF_data[8] = 0xf4;
   10860:	00bffd04 	movi	r2,-12
   10864:	e0bffd05 	stb	r2,-12(fp)
		ADF_data[9] = 0x01;
   10868:	00800044 	movi	r2,1
   1086c:	e0bffd45 	stb	r2,-11(fp)
		ADF_data[10] = 0x80;
   10870:	00bfe004 	movi	r2,-128
   10874:	e0bffd85 	stb	r2,-10(fp)
		ADF_data[11] = 0x01;
   10878:	00800044 	movi	r2,1
   1087c:	e0bffdc5 	stb	r2,-9(fp)

		//Reconfigure_SPI_for_LMS();

		//write data to ADF
		for(ADF_block = 0; ADF_block < 4; ADF_block++)
   10880:	e03ff905 	stb	zero,-28(fp)
   10884:	00001206 	br	108d0 <Control_TCXO_ADF+0xd0>
		{
			spirez = alt_avalon_spi_command(FPGA_SPI0_BASE, SPI_NR_TCXO_ADF4002, 3, &ADF_data[ADF_block*3], 0, NULL, 0);
   10888:	e0fff903 	ldbu	r3,-28(fp)
   1088c:	1805883a 	mov	r2,r3
   10890:	1085883a 	add	r2,r2,r2
   10894:	10c5883a 	add	r2,r2,r3
   10898:	e0fffb04 	addi	r3,fp,-20
   1089c:	1885883a 	add	r2,r3,r2
   108a0:	d8000215 	stw	zero,8(sp)
   108a4:	d8000115 	stw	zero,4(sp)
   108a8:	d8000015 	stw	zero,0(sp)
   108ac:	100f883a 	mov	r7,r2
   108b0:	018000c4 	movi	r6,3
   108b4:	01400084 	movi	r5,2
   108b8:	0101d004 	movi	r4,1856
   108bc:	00163ac0 	call	163ac <alt_avalon_spi_command>
   108c0:	e0bffa15 	stw	r2,-24(fp)
		ADF_data[11] = 0x01;

		//Reconfigure_SPI_for_LMS();

		//write data to ADF
		for(ADF_block = 0; ADF_block < 4; ADF_block++)
   108c4:	e0bff903 	ldbu	r2,-28(fp)
   108c8:	10800044 	addi	r2,r2,1
   108cc:	e0bff905 	stb	r2,-28(fp)
   108d0:	e0bff903 	ldbu	r2,-28(fp)
   108d4:	10800130 	cmpltui	r2,r2,4
   108d8:	103feb1e 	bne	r2,zero,10888 <_gp+0xffff10b0>
	}
	else //set PLL parameters, 4 blocks must be written
	{
		spirez = alt_avalon_spi_command(FPGA_SPI0_BASE, SPI_NR_TCXO_ADF4002, 3, data, 0, NULL, 0);
	}
}
   108dc:	00000906 	br	10904 <Control_TCXO_ADF+0x104>
			spirez = alt_avalon_spi_command(FPGA_SPI0_BASE, SPI_NR_TCXO_ADF4002, 3, &ADF_data[ADF_block*3], 0, NULL, 0);
		}
	}
	else //set PLL parameters, 4 blocks must be written
	{
		spirez = alt_avalon_spi_command(FPGA_SPI0_BASE, SPI_NR_TCXO_ADF4002, 3, data, 0, NULL, 0);
   108e0:	d8000215 	stw	zero,8(sp)
   108e4:	d8000115 	stw	zero,4(sp)
   108e8:	d8000015 	stw	zero,0(sp)
   108ec:	e1ffff17 	ldw	r7,-4(fp)
   108f0:	018000c4 	movi	r6,3
   108f4:	01400084 	movi	r5,2
   108f8:	0101d004 	movi	r4,1856
   108fc:	00163ac0 	call	163ac <alt_avalon_spi_command>
   10900:	e0bffa15 	stw	r2,-24(fp)
	}
}
   10904:	0001883a 	nop
   10908:	e037883a 	mov	sp,fp
   1090c:	dfc00117 	ldw	ra,4(sp)
   10910:	df000017 	ldw	fp,0(sp)
   10914:	dec00204 	addi	sp,sp,8
   10918:	f800283a 	ret

0001091c <change_ADC_tpat>:

void change_ADC_tpat(uint8_t mode)
{
   1091c:	defff804 	addi	sp,sp,-32
   10920:	dfc00715 	stw	ra,28(sp)
   10924:	df000615 	stw	fp,24(sp)
   10928:	df000604 	addi	fp,sp,24
   1092c:	2005883a 	mov	r2,r4
   10930:	e0bfff05 	stb	r2,-4(fp)
	uint8_t wr_buf[2];
	int spirez;

	if(mode)
   10934:	e0bfff03 	ldbu	r2,-4(fp)
   10938:	10000f26 	beq	r2,zero,10978 <change_ADC_tpat+0x5c>
		wr_buf[1] = 0x55;	//Data
		spirez = alt_avalon_spi_command(FPGA_SPI0_BASE, SPI_NR_EXTADC, 2, wr_buf, 0, NULL, 0);
		*/

		// 0x42 Enable Digital functions
		wr_buf[0] = 0x42;	//Address
   1093c:	00801084 	movi	r2,66
   10940:	e0bffe05 	stb	r2,-8(fp)
		wr_buf[1] = 0x08;	//Data
   10944:	00800204 	movi	r2,8
   10948:	e0bffe45 	stb	r2,-7(fp)
		spirez = alt_avalon_spi_command(FPGA_SPI0_BASE, SPI_NR_EXTADC, 2, wr_buf, 0, NULL, 0);
   1094c:	e0bffe04 	addi	r2,fp,-8
   10950:	d8000215 	stw	zero,8(sp)
   10954:	d8000115 	stw	zero,4(sp)
   10958:	d8000015 	stw	zero,0(sp)
   1095c:	100f883a 	mov	r7,r2
   10960:	01800084 	movi	r6,2
   10964:	01400144 	movi	r5,5
   10968:	0101d004 	movi	r4,1856
   1096c:	00163ac0 	call	163ac <alt_avalon_spi_command>
   10970:	e0bffd15 	stw	r2,-12(fp)
		wr_buf[0] = 0x42;	//Address
		wr_buf[1] = 0x00;	//Data
		spirez = alt_avalon_spi_command(FPGA_SPI0_BASE, SPI_NR_EXTADC, 2, wr_buf, 0, NULL, 0);

	};
}
   10974:	00000d06 	br	109ac <change_ADC_tpat+0x90>
		wr_buf[1] = 0x00;	//Data
		spirez = alt_avalon_spi_command(FPGA_SPI0_BASE, SPI_NR_EXTADC, 2, wr_buf, 0, NULL, 0);

		*/
		// 0x42 Disable Digital functions
		wr_buf[0] = 0x42;	//Address
   10978:	00801084 	movi	r2,66
   1097c:	e0bffe05 	stb	r2,-8(fp)
		wr_buf[1] = 0x00;	//Data
   10980:	e03ffe45 	stb	zero,-7(fp)
		spirez = alt_avalon_spi_command(FPGA_SPI0_BASE, SPI_NR_EXTADC, 2, wr_buf, 0, NULL, 0);
   10984:	e0bffe04 	addi	r2,fp,-8
   10988:	d8000215 	stw	zero,8(sp)
   1098c:	d8000115 	stw	zero,4(sp)
   10990:	d8000015 	stw	zero,0(sp)
   10994:	100f883a 	mov	r7,r2
   10998:	01800084 	movi	r6,2
   1099c:	01400144 	movi	r5,5
   109a0:	0101d004 	movi	r4,1856
   109a4:	00163ac0 	call	163ac <alt_avalon_spi_command>
   109a8:	e0bffd15 	stw	r2,-12(fp)

	};
}
   109ac:	0001883a 	nop
   109b0:	e037883a 	mov	sp,fp
   109b4:	dfc00117 	ldw	ra,4(sp)
   109b8:	df000017 	ldw	fp,0(sp)
   109bc:	dec00204 	addi	sp,sp,8
   109c0:	f800283a 	ret

000109c4 <GetPLLCFG_Base>:

// Return PLL base address acoording to the PLL index
uint32_t GetPLLCFG_Base(uint8_t ind)
{
   109c4:	defffd04 	addi	sp,sp,-12
   109c8:	df000215 	stw	fp,8(sp)
   109cc:	df000204 	addi	fp,sp,8
   109d0:	2005883a 	mov	r2,r4
   109d4:	e0bfff05 	stb	r2,-4(fp)
	uint32_t PLL_BASE;

	switch ( ind )
   109d8:	e0bfff03 	ldbu	r2,-4(fp)
   109dc:	10c000a0 	cmpeqi	r3,r2,2
   109e0:	18000d1e 	bne	r3,zero,10a18 <GetPLLCFG_Base+0x54>
   109e4:	10c000c8 	cmpgei	r3,r2,3
   109e8:	1800031e 	bne	r3,zero,109f8 <GetPLLCFG_Base+0x34>
   109ec:	10800060 	cmpeqi	r2,r2,1
   109f0:	1000061e 	bne	r2,zero,10a0c <GetPLLCFG_Base+0x48>
   109f4:	00001106 	br	10a3c <GetPLLCFG_Base+0x78>
   109f8:	10c000e0 	cmpeqi	r3,r2,3
   109fc:	1800091e 	bne	r3,zero,10a24 <GetPLLCFG_Base+0x60>
   10a00:	10800120 	cmpeqi	r2,r2,4
   10a04:	10000a1e 	bne	r2,zero,10a30 <GetPLLCFG_Base+0x6c>
   10a08:	00000c06 	br	10a3c <GetPLLCFG_Base+0x78>
	{
		case 1:
			PLL_BASE = PLL_RECONFIG_1_BASE;
   10a0c:	00804004 	movi	r2,256
   10a10:	e0bffe15 	stw	r2,-8(fp)
	    break;
   10a14:	00000a06 	br	10a40 <GetPLLCFG_Base+0x7c>

		case 2:
			PLL_BASE = PLL_RECONFIG_2_BASE;
   10a18:	00808004 	movi	r2,512
   10a1c:	e0bffe15 	stw	r2,-8(fp)
		break;
   10a20:	00000706 	br	10a40 <GetPLLCFG_Base+0x7c>

		case 3:
			PLL_BASE = PLL_RECONFIG_3_BASE;
   10a24:	0080c004 	movi	r2,768
   10a28:	e0bffe15 	stw	r2,-8(fp)
		break;
   10a2c:	00000406 	br	10a40 <GetPLLCFG_Base+0x7c>

		case 4:
			PLL_BASE = PLL_RECONFIG_4_BASE;
   10a30:	00810004 	movi	r2,1024
   10a34:	e0bffe15 	stw	r2,-8(fp)
	    break;
   10a38:	00000106 	br	10a40 <GetPLLCFG_Base+0x7c>

		default:
			PLL_BASE = PLL_RECONFIG_0_BASE;
   10a3c:	e03ffe15 	stw	zero,-8(fp)
	}

	return PLL_BASE;
   10a40:	e0bffe17 	ldw	r2,-8(fp)
}
   10a44:	e037883a 	mov	sp,fp
   10a48:	df000017 	ldw	fp,0(sp)
   10a4c:	dec00104 	addi	sp,sp,4
   10a50:	f800283a 	ret

00010a54 <UpdatePLLCFG>:

// Updates PLL configuration
uint8_t UpdatePLLCFG(void)
{
   10a54:	deffee04 	addi	sp,sp,-72
   10a58:	dfc01115 	stw	ra,68(sp)
   10a5c:	df001015 	stw	fp,64(sp)
   10a60:	df001004 	addi	fp,sp,64
	int spirez, i;
	tPLL_CFG pll_cfg = {0};
   10a64:	e03ff715 	stw	zero,-36(fp)
   10a68:	e03ff815 	stw	zero,-32(fp)
   10a6c:	e03ff915 	stw	zero,-28(fp)
   10a70:	e03ffa15 	stw	zero,-24(fp)
   10a74:	e03ffb15 	stw	zero,-20(fp)
   10a78:	e03ffc15 	stw	zero,-16(fp)
   10a7c:	e03ffd15 	stw	zero,-12(fp)
   10a80:	e03ffe15 	stw	zero,-8(fp)
	uint32_t PLL_BASE;
	uint16_t div_byp;
	uint8_t pllcfgrez;

	// Read
	wr_buf[0] = 0x00;	// Command and Address
   10a84:	e03fff05 	stb	zero,-4(fp)
	wr_buf[1] = 0x23;	// Command and Address
   10a88:	008008c4 	movi	r2,35
   10a8c:	e0bfff45 	stb	r2,-3(fp)
	spirez = alt_avalon_spi_command(PLLCFG_SPI_BASE, 0, 2, wr_buf, 2, rd_buf, 0);
   10a90:	e0ffff04 	addi	r3,fp,-4
   10a94:	d8000215 	stw	zero,8(sp)
   10a98:	e0bfff84 	addi	r2,fp,-2
   10a9c:	d8800115 	stw	r2,4(sp)
   10aa0:	00800084 	movi	r2,2
   10aa4:	d8800015 	stw	r2,0(sp)
   10aa8:	180f883a 	mov	r7,r3
   10aac:	01800084 	movi	r6,2
   10ab0:	000b883a 	mov	r5,zero
   10ab4:	0101c804 	movi	r4,1824
   10ab8:	00163ac0 	call	163ac <alt_avalon_spi_command>
   10abc:	e0bff415 	stw	r2,-48(fp)

	// Get PLL base address
	PLL_BASE = GetPLLCFG_Base( PLL_IND(rd_buf[1]) );
   10ac0:	e0bfffc3 	ldbu	r2,-1(fp)
   10ac4:	10803fcc 	andi	r2,r2,255
   10ac8:	1004d0fa 	srli	r2,r2,3
   10acc:	10803fcc 	andi	r2,r2,255
   10ad0:	1009883a 	mov	r4,r2
   10ad4:	00109c40 	call	109c4 <GetPLLCFG_Base>
   10ad8:	e0bff515 	stw	r2,-44(fp)

	//Write in Mode Register "0" for wait request mode, "1" for polling mode
	IOWR_32DIRECT(PLL_BASE, MODE, 0x01);
   10adc:	e0bff517 	ldw	r2,-44(fp)
   10ae0:	00c00044 	movi	r3,1
   10ae4:	10c00035 	stwio	r3,0(r2)


	// Set M_ODDDIV, M_BYP, N_ODDDIV, N_BYP
	wr_buf[0] = 0x00;	// Command and Address
   10ae8:	e03fff05 	stb	zero,-4(fp)
	wr_buf[1] = 0x26;	// Command and Address
   10aec:	00800984 	movi	r2,38
   10af0:	e0bfff45 	stb	r2,-3(fp)
	spirez = alt_avalon_spi_command(PLLCFG_SPI_BASE, 0, 2, wr_buf, 2, rd_buf, 0);
   10af4:	e0ffff04 	addi	r3,fp,-4
   10af8:	d8000215 	stw	zero,8(sp)
   10afc:	e0bfff84 	addi	r2,fp,-2
   10b00:	d8800115 	stw	r2,4(sp)
   10b04:	00800084 	movi	r2,2
   10b08:	d8800015 	stw	r2,0(sp)
   10b0c:	180f883a 	mov	r7,r3
   10b10:	01800084 	movi	r6,2
   10b14:	000b883a 	mov	r5,zero
   10b18:	0101c804 	movi	r4,1824
   10b1c:	00163ac0 	call	163ac <alt_avalon_spi_command>
   10b20:	e0bff415 	stw	r2,-48(fp)
	pll_cfg.N_cnt = N_CNT_DIVBYP(rd_buf[1]); //(rd_buf[0] & 0x03) << 16;
   10b24:	e0bfffc3 	ldbu	r2,-1(fp)
   10b28:	10803fcc 	andi	r2,r2,255
   10b2c:	108000cc 	andi	r2,r2,3
   10b30:	1004943a 	slli	r2,r2,16
   10b34:	e0bff915 	stw	r2,-28(fp)
	pll_cfg.M_cnt = M_CNT_DIVBYP(rd_buf[1]); //(rd_buf[0] & 0x0C) << 14;
   10b38:	e0bfffc3 	ldbu	r2,-1(fp)
   10b3c:	10803fcc 	andi	r2,r2,255
   10b40:	1080030c 	andi	r2,r2,12
   10b44:	100493ba 	slli	r2,r2,14
   10b48:	e0bff715 	stw	r2,-36(fp)

	// Set N_HCNT[15:8], N_LCNT[7:0]
	wr_buf[0] = 0x00;	// Command and Address
   10b4c:	e03fff05 	stb	zero,-4(fp)
	wr_buf[1] = 0x2A;	// Command and Address
   10b50:	00800a84 	movi	r2,42
   10b54:	e0bfff45 	stb	r2,-3(fp)
	spirez = alt_avalon_spi_command(PLLCFG_SPI_BASE, 0, 2, wr_buf, 2, rd_buf, 0);
   10b58:	e0ffff04 	addi	r3,fp,-4
   10b5c:	d8000215 	stw	zero,8(sp)
   10b60:	e0bfff84 	addi	r2,fp,-2
   10b64:	d8800115 	stw	r2,4(sp)
   10b68:	00800084 	movi	r2,2
   10b6c:	d8800015 	stw	r2,0(sp)
   10b70:	180f883a 	mov	r7,r3
   10b74:	01800084 	movi	r6,2
   10b78:	000b883a 	mov	r5,zero
   10b7c:	0101c804 	movi	r4,1824
   10b80:	00163ac0 	call	163ac <alt_avalon_spi_command>
   10b84:	e0bff415 	stw	r2,-48(fp)
	pll_cfg.N_cnt = pll_cfg.N_cnt | N_CNT(rd_buf[0], rd_buf[1]); //pll_cfg.N_cnt | (rd_buf[1] << 8) | rd_buf[0];
   10b88:	e0bff917 	ldw	r2,-28(fp)
   10b8c:	e0ffff83 	ldbu	r3,-2(fp)
   10b90:	18c03fcc 	andi	r3,r3,255
   10b94:	1808923a 	slli	r4,r3,8
   10b98:	e0ffffc3 	ldbu	r3,-1(fp)
   10b9c:	18c03fcc 	andi	r3,r3,255
   10ba0:	20c6b03a 	or	r3,r4,r3
   10ba4:	10c4b03a 	or	r2,r2,r3
   10ba8:	e0bff915 	stw	r2,-28(fp)

	// Set M_HCNT[15:8], M_LCNT[7:0]
	wr_buf[0] = 0x00;	// Command and Address
   10bac:	e03fff05 	stb	zero,-4(fp)
	wr_buf[1] = 0x2B;	// Command and Address
   10bb0:	00800ac4 	movi	r2,43
   10bb4:	e0bfff45 	stb	r2,-3(fp)
	spirez = alt_avalon_spi_command(PLLCFG_SPI_BASE, 0, 2, wr_buf, 2, rd_buf, 0);
   10bb8:	e0ffff04 	addi	r3,fp,-4
   10bbc:	d8000215 	stw	zero,8(sp)
   10bc0:	e0bfff84 	addi	r2,fp,-2
   10bc4:	d8800115 	stw	r2,4(sp)
   10bc8:	00800084 	movi	r2,2
   10bcc:	d8800015 	stw	r2,0(sp)
   10bd0:	180f883a 	mov	r7,r3
   10bd4:	01800084 	movi	r6,2
   10bd8:	000b883a 	mov	r5,zero
   10bdc:	0101c804 	movi	r4,1824
   10be0:	00163ac0 	call	163ac <alt_avalon_spi_command>
   10be4:	e0bff415 	stw	r2,-48(fp)
	pll_cfg.M_cnt = pll_cfg.M_cnt | M_CNT(rd_buf[0], rd_buf[1]); //pll_cfg.M_cnt | (rd_buf[1] << 8) | rd_buf[0];
   10be8:	e0bff717 	ldw	r2,-36(fp)
   10bec:	e0ffff83 	ldbu	r3,-2(fp)
   10bf0:	18c03fcc 	andi	r3,r3,255
   10bf4:	1808923a 	slli	r4,r3,8
   10bf8:	e0ffffc3 	ldbu	r3,-1(fp)
   10bfc:	18c03fcc 	andi	r3,r3,255
   10c00:	20c6b03a 	or	r3,r4,r3
   10c04:	10c4b03a 	or	r2,r2,r3
   10c08:	e0bff715 	stw	r2,-36(fp)

	// Set M_FRAC[15:0]
	wr_buf[0] = 0x00;	// Command and Address
   10c0c:	e03fff05 	stb	zero,-4(fp)
	wr_buf[1] = 0x2C;	// Command and Address
   10c10:	00800b04 	movi	r2,44
   10c14:	e0bfff45 	stb	r2,-3(fp)
	spirez = alt_avalon_spi_command(PLLCFG_SPI_BASE, 0, 2, wr_buf, 2, rd_buf, 0);
   10c18:	e0ffff04 	addi	r3,fp,-4
   10c1c:	d8000215 	stw	zero,8(sp)
   10c20:	e0bfff84 	addi	r2,fp,-2
   10c24:	d8800115 	stw	r2,4(sp)
   10c28:	00800084 	movi	r2,2
   10c2c:	d8800015 	stw	r2,0(sp)
   10c30:	180f883a 	mov	r7,r3
   10c34:	01800084 	movi	r6,2
   10c38:	000b883a 	mov	r5,zero
   10c3c:	0101c804 	movi	r4,1824
   10c40:	00163ac0 	call	163ac <alt_avalon_spi_command>
   10c44:	e0bff415 	stw	r2,-48(fp)
	pll_cfg.MFrac_cnt = MFRAC_CNT_LSB(rd_buf[0], rd_buf[1]); //(rd_buf[1] << 8) | rd_buf[0];
   10c48:	e0bfff83 	ldbu	r2,-2(fp)
   10c4c:	10803fcc 	andi	r2,r2,255
   10c50:	1006923a 	slli	r3,r2,8
   10c54:	e0bfffc3 	ldbu	r2,-1(fp)
   10c58:	10803fcc 	andi	r2,r2,255
   10c5c:	1884b03a 	or	r2,r3,r2
   10c60:	e0bff815 	stw	r2,-32(fp)

	// Set M_FRAC[31:16]
	wr_buf[0] = 0x00;	// Command and Address
   10c64:	e03fff05 	stb	zero,-4(fp)
	wr_buf[1] = 0x2D;	// Command and Address
   10c68:	00800b44 	movi	r2,45
   10c6c:	e0bfff45 	stb	r2,-3(fp)
	spirez = alt_avalon_spi_command(PLLCFG_SPI_BASE, 0, 2, wr_buf, 2, rd_buf, 0);
   10c70:	e0ffff04 	addi	r3,fp,-4
   10c74:	d8000215 	stw	zero,8(sp)
   10c78:	e0bfff84 	addi	r2,fp,-2
   10c7c:	d8800115 	stw	r2,4(sp)
   10c80:	00800084 	movi	r2,2
   10c84:	d8800015 	stw	r2,0(sp)
   10c88:	180f883a 	mov	r7,r3
   10c8c:	01800084 	movi	r6,2
   10c90:	000b883a 	mov	r5,zero
   10c94:	0101c804 	movi	r4,1824
   10c98:	00163ac0 	call	163ac <alt_avalon_spi_command>
   10c9c:	e0bff415 	stw	r2,-48(fp)
	pll_cfg.MFrac_cnt = pll_cfg.MFrac_cnt | MFRAC_CNT_MSB(rd_buf[0], rd_buf[1]); //pll_cfg.MFrac_cnt | ( ((rd_buf[1] << 8) | rd_buf[0]) << 16 );
   10ca0:	e0bff817 	ldw	r2,-32(fp)
   10ca4:	e0ffff83 	ldbu	r3,-2(fp)
   10ca8:	18c03fcc 	andi	r3,r3,255
   10cac:	1808923a 	slli	r4,r3,8
   10cb0:	e0ffffc3 	ldbu	r3,-1(fp)
   10cb4:	18c03fcc 	andi	r3,r3,255
   10cb8:	20c6b03a 	or	r3,r4,r3
   10cbc:	1806943a 	slli	r3,r3,16
   10cc0:	10c4b03a 	or	r2,r2,r3
   10cc4:	e0bff815 	stw	r2,-32(fp)

	// Set PLLCFG_BS[3:0] (for Cyclone V), CHP_CURR[2:0], PLLCFG_VCODIV
	wr_buf[0] = 0x00;	// Command and Address
   10cc8:	e03fff05 	stb	zero,-4(fp)
	wr_buf[1] = 0x25;	// Command and Address
   10ccc:	00800944 	movi	r2,37
   10cd0:	e0bfff45 	stb	r2,-3(fp)
	spirez = alt_avalon_spi_command(PLLCFG_SPI_BASE, 0, 2, wr_buf, 2, rd_buf, 0);
   10cd4:	e0ffff04 	addi	r3,fp,-4
   10cd8:	d8000215 	stw	zero,8(sp)
   10cdc:	e0bfff84 	addi	r2,fp,-2
   10ce0:	d8800115 	stw	r2,4(sp)
   10ce4:	00800084 	movi	r2,2
   10ce8:	d8800015 	stw	r2,0(sp)
   10cec:	180f883a 	mov	r7,r3
   10cf0:	01800084 	movi	r6,2
   10cf4:	000b883a 	mov	r5,zero
   10cf8:	0101c804 	movi	r4,1824
   10cfc:	00163ac0 	call	163ac <alt_avalon_spi_command>
   10d00:	e0bff415 	stw	r2,-48(fp)
	pll_cfg.BS_cnt = BS_CNT(rd_buf[0]); //(rd_buf[1] >> 3) & 0x0F;
   10d04:	e0bfff83 	ldbu	r2,-2(fp)
   10d08:	10803fcc 	andi	r2,r2,255
   10d0c:	1004d0fa 	srli	r2,r2,3
   10d10:	10803fcc 	andi	r2,r2,255
   10d14:	108003cc 	andi	r2,r2,15
   10d18:	e0bffc15 	stw	r2,-16(fp)
	pll_cfg.CPS_cnt = CPS_CNT(rd_buf[0]); //rd_buf[1] & 0x07;
   10d1c:	e0bfff83 	ldbu	r2,-2(fp)
   10d20:	10803fcc 	andi	r2,r2,255
   10d24:	108001cc 	andi	r2,r2,7
   10d28:	e0bffd15 	stw	r2,-12(fp)
	pll_cfg.VCO_div = VCO_DIVSEL(rd_buf[1]); //(rd_buf[0] >> 7) & 0x01;
   10d2c:	e0bfffc3 	ldbu	r2,-1(fp)
   10d30:	10803fcc 	andi	r2,r2,255
   10d34:	1004d1fa 	srli	r2,r2,7
   10d38:	10803fcc 	andi	r2,r2,255
   10d3c:	1080004c 	andi	r2,r2,1
   10d40:	e0bffe15 	stw	r2,-8(fp)


	// Update PLL configuration;
	pllcfgrez = set_pll_config(PLL_BASE, &pll_cfg);
   10d44:	e0bff704 	addi	r2,fp,-36
   10d48:	100b883a 	mov	r5,r2
   10d4c:	e13ff517 	ldw	r4,-44(fp)
   10d50:	0012d540 	call	12d54 <set_pll_config>
   10d54:	e0bff605 	stb	r2,-40(fp)
	if(pllcfgrez) return pllcfgrez;
   10d58:	e0bff603 	ldbu	r2,-40(fp)
   10d5c:	10000226 	beq	r2,zero,10d68 <UpdatePLLCFG+0x314>
   10d60:	e0bff603 	ldbu	r2,-40(fp)
   10d64:	00004e06 	br	10ea0 <UpdatePLLCFG+0x44c>


	//// Set Cx counters (first eight for now)

	// Read ODDDIV and BYP values for first 8 counters
	wr_buf[0] = 0x00;	// Command and Address
   10d68:	e03fff05 	stb	zero,-4(fp)
	wr_buf[1] = 0x27;	// Command and Address
   10d6c:	008009c4 	movi	r2,39
   10d70:	e0bfff45 	stb	r2,-3(fp)
	spirez = alt_avalon_spi_command(PLLCFG_SPI_BASE, 0, 2, wr_buf, 2, rd_buf, 0);
   10d74:	e0ffff04 	addi	r3,fp,-4
   10d78:	d8000215 	stw	zero,8(sp)
   10d7c:	e0bfff84 	addi	r2,fp,-2
   10d80:	d8800115 	stw	r2,4(sp)
   10d84:	00800084 	movi	r2,2
   10d88:	d8800015 	stw	r2,0(sp)
   10d8c:	180f883a 	mov	r7,r3
   10d90:	01800084 	movi	r6,2
   10d94:	000b883a 	mov	r5,zero
   10d98:	0101c804 	movi	r4,1824
   10d9c:	00163ac0 	call	163ac <alt_avalon_spi_command>
   10da0:	e0bff415 	stw	r2,-48(fp)
	div_byp = CX_DIVBYP(rd_buf[0], rd_buf[1]); //(rd_buf[1] << 8) | rd_buf[0];
   10da4:	e0bfff83 	ldbu	r2,-2(fp)
   10da8:	10803fcc 	andi	r2,r2,255
   10dac:	1004923a 	slli	r2,r2,8
   10db0:	1007883a 	mov	r3,r2
   10db4:	e0bfffc3 	ldbu	r2,-1(fp)
   10db8:	10803fcc 	andi	r2,r2,255
   10dbc:	1884b03a 	or	r2,r3,r2
   10dc0:	e0bff68d 	sth	r2,-38(fp)


	for(i=0; i<8; i++)
   10dc4:	e03ff315 	stw	zero,-52(fp)
   10dc8:	00002d06 	br	10e80 <UpdatePLLCFG+0x42c>
	{
		// Read Cx value
		wr_buf[0] = 0x00;	// Command and Address
   10dcc:	e03fff05 	stb	zero,-4(fp)
		wr_buf[1] = 0x2E + i;	// Command and Address
   10dd0:	e0bff317 	ldw	r2,-52(fp)
   10dd4:	10800b84 	addi	r2,r2,46
   10dd8:	e0bfff45 	stb	r2,-3(fp)
		spirez = alt_avalon_spi_command(PLLCFG_SPI_BASE, 0, 2, wr_buf, 2, rd_buf, 0);
   10ddc:	e0ffff04 	addi	r3,fp,-4
   10de0:	d8000215 	stw	zero,8(sp)
   10de4:	e0bfff84 	addi	r2,fp,-2
   10de8:	d8800115 	stw	r2,4(sp)
   10dec:	00800084 	movi	r2,2
   10df0:	d8800015 	stw	r2,0(sp)
   10df4:	180f883a 	mov	r7,r3
   10df8:	01800084 	movi	r6,2
   10dfc:	000b883a 	mov	r5,zero
   10e00:	0101c804 	movi	r4,1824
   10e04:	00163ac0 	call	163ac <alt_avalon_spi_command>
   10e08:	e0bff415 	stw	r2,-48(fp)
		pll_cfg.C_cnt = (i << 18) | ( ((div_byp >> 2*i) & 0x03) << 16 ) | C_CNT(rd_buf[0], rd_buf[1]); //(rd_buf[1] << 8) | rd_buf[0];
   10e0c:	e0bff317 	ldw	r2,-52(fp)
   10e10:	100694ba 	slli	r3,r2,18
   10e14:	e13ff68b 	ldhu	r4,-38(fp)
   10e18:	e0bff317 	ldw	r2,-52(fp)
   10e1c:	1085883a 	add	r2,r2,r2
   10e20:	2085d83a 	sra	r2,r4,r2
   10e24:	108000cc 	andi	r2,r2,3
   10e28:	1004943a 	slli	r2,r2,16
   10e2c:	1886b03a 	or	r3,r3,r2
   10e30:	e0bfff83 	ldbu	r2,-2(fp)
   10e34:	10803fcc 	andi	r2,r2,255
   10e38:	1008923a 	slli	r4,r2,8
   10e3c:	e0bfffc3 	ldbu	r2,-1(fp)
   10e40:	10803fcc 	andi	r2,r2,255
   10e44:	2084b03a 	or	r2,r4,r2
   10e48:	1884b03a 	or	r2,r3,r2
   10e4c:	e0bffa15 	stw	r2,-24(fp)

		// Set Cx register
		pllcfgrez = set_CxCnt(PLL_BASE, pll_cfg.C_cnt);
   10e50:	e0bffa17 	ldw	r2,-24(fp)
   10e54:	100b883a 	mov	r5,r2
   10e58:	e13ff517 	ldw	r4,-44(fp)
   10e5c:	0012ddc0 	call	12ddc <set_CxCnt>
   10e60:	e0bff605 	stb	r2,-40(fp)
		if(pllcfgrez) return pllcfgrez;
   10e64:	e0bff603 	ldbu	r2,-40(fp)
   10e68:	10000226 	beq	r2,zero,10e74 <UpdatePLLCFG+0x420>
   10e6c:	e0bff603 	ldbu	r2,-40(fp)
   10e70:	00000b06 	br	10ea0 <UpdatePLLCFG+0x44c>
	wr_buf[1] = 0x27;	// Command and Address
	spirez = alt_avalon_spi_command(PLLCFG_SPI_BASE, 0, 2, wr_buf, 2, rd_buf, 0);
	div_byp = CX_DIVBYP(rd_buf[0], rd_buf[1]); //(rd_buf[1] << 8) | rd_buf[0];


	for(i=0; i<8; i++)
   10e74:	e0bff317 	ldw	r2,-52(fp)
   10e78:	10800044 	addi	r2,r2,1
   10e7c:	e0bff315 	stw	r2,-52(fp)
   10e80:	e0bff317 	ldw	r2,-52(fp)
   10e84:	10800210 	cmplti	r2,r2,8
   10e88:	103fd01e 	bne	r2,zero,10dcc <_gp+0xffff15f4>
		//set_Phase(PLL_BASE, i, 0, 1);
		//if(pllcfgrez) return pllcfgrez;
	}

	// Apply PLL configuration
	pllcfgrez = start_Reconfig(PLL_BASE);
   10e8c:	e13ff517 	ldw	r4,-44(fp)
   10e90:	0012e940 	call	12e94 <start_Reconfig>
   10e94:	e0bff605 	stb	r2,-40(fp)

	ResetPLL();
   10e98:	0010fe40 	call	10fe4 <ResetPLL>

	return pllcfgrez;
   10e9c:	e0bff603 	ldbu	r2,-40(fp)

}
   10ea0:	e037883a 	mov	sp,fp
   10ea4:	dfc00117 	ldw	ra,4(sp)
   10ea8:	df000017 	ldw	fp,0(sp)
   10eac:	dec00204 	addi	sp,sp,8
   10eb0:	f800283a 	ret

00010eb4 <UpdatePHCFG>:

// Change PLL phase
uint8_t UpdatePHCFG(void)
{
   10eb4:	defff404 	addi	sp,sp,-48
   10eb8:	dfc00b15 	stw	ra,44(sp)
   10ebc:	df000a15 	stw	fp,40(sp)
   10ec0:	df000a04 	addi	fp,sp,40
	uint8_t rd_buf[2];
	int spirez;
	uint8_t pllcfgrez;

	// Read
	wr_buf[0] = 0x00;	// Command and Address
   10ec4:	e03ffe45 	stb	zero,-7(fp)
	wr_buf[1] = 0x23;	// Command and Address
   10ec8:	008008c4 	movi	r2,35
   10ecc:	e0bffe85 	stb	r2,-6(fp)
	spirez = alt_avalon_spi_command(PLLCFG_SPI_BASE, 0, 2, wr_buf, 2, rd_buf, 0);
   10ed0:	e0fffe44 	addi	r3,fp,-7
   10ed4:	d8000215 	stw	zero,8(sp)
   10ed8:	e0bffec4 	addi	r2,fp,-5
   10edc:	d8800115 	stw	r2,4(sp)
   10ee0:	00800084 	movi	r2,2
   10ee4:	d8800015 	stw	r2,0(sp)
   10ee8:	180f883a 	mov	r7,r3
   10eec:	01800084 	movi	r6,2
   10ef0:	000b883a 	mov	r5,zero
   10ef4:	0101c804 	movi	r4,1824
   10ef8:	00163ac0 	call	163ac <alt_avalon_spi_command>
   10efc:	e0bff915 	stw	r2,-28(fp)

	// Get PLL base address
	PLL_BASE = GetPLLCFG_Base( PLL_IND(rd_buf[1]) );
   10f00:	e0bfff03 	ldbu	r2,-4(fp)
   10f04:	10803fcc 	andi	r2,r2,255
   10f08:	1004d0fa 	srli	r2,r2,3
   10f0c:	10803fcc 	andi	r2,r2,255
   10f10:	1009883a 	mov	r4,r2
   10f14:	00109c40 	call	109c4 <GetPLLCFG_Base>
   10f18:	e0bffa15 	stw	r2,-24(fp)

	//Write in Mode Register "0" for waitrequest mode, "1" for polling mode
	IOWR_32DIRECT(PLL_BASE, MODE, 0x01);
   10f1c:	e0bffa17 	ldw	r2,-24(fp)
   10f20:	00c00044 	movi	r3,1
   10f24:	10c00035 	stwio	r3,0(r2)

	// Set Up/Down
	Dir = PH_DIR(rd_buf[0]); //(rd_buf[1] >> 5) & 0x01;
   10f28:	e0bffec3 	ldbu	r2,-5(fp)
   10f2c:	10803fcc 	andi	r2,r2,255
   10f30:	1004d17a 	srli	r2,r2,5
   10f34:	10803fcc 	andi	r2,r2,255
   10f38:	1080004c 	andi	r2,r2,1
   10f3c:	e0bffb15 	stw	r2,-20(fp)

	// Set Cx
	Cx = CX_IND(rd_buf[0]) - 2; //(rd_buf[1] & 0x1F);
   10f40:	e0bffec3 	ldbu	r2,-5(fp)
   10f44:	10803fcc 	andi	r2,r2,255
   10f48:	108007cc 	andi	r2,r2,31
   10f4c:	10bfff84 	addi	r2,r2,-2
   10f50:	e0bffc15 	stw	r2,-16(fp)

	// Set Phase Cnt
	wr_buf[0] = 0x00;	// Command and Address
   10f54:	e03ffe45 	stb	zero,-7(fp)
	wr_buf[1] = 0x24;	// Command and Address
   10f58:	00800904 	movi	r2,36
   10f5c:	e0bffe85 	stb	r2,-6(fp)
	spirez = alt_avalon_spi_command(PLLCFG_SPI_BASE, 0, 2, wr_buf, 2, rd_buf, 0);
   10f60:	e0fffe44 	addi	r3,fp,-7
   10f64:	d8000215 	stw	zero,8(sp)
   10f68:	e0bffec4 	addi	r2,fp,-5
   10f6c:	d8800115 	stw	r2,4(sp)
   10f70:	00800084 	movi	r2,2
   10f74:	d8800015 	stw	r2,0(sp)
   10f78:	180f883a 	mov	r7,r3
   10f7c:	01800084 	movi	r6,2
   10f80:	000b883a 	mov	r5,zero
   10f84:	0101c804 	movi	r4,1824
   10f88:	00163ac0 	call	163ac <alt_avalon_spi_command>
   10f8c:	e0bff915 	stw	r2,-28(fp)
	Val = CX_PHASE(rd_buf[0], rd_buf[1]); //(rd_buf[1] << 8) | rd_buf[0];
   10f90:	e0bffec3 	ldbu	r2,-5(fp)
   10f94:	10803fcc 	andi	r2,r2,255
   10f98:	1006923a 	slli	r3,r2,8
   10f9c:	e0bfff03 	ldbu	r2,-4(fp)
   10fa0:	10803fcc 	andi	r2,r2,255
   10fa4:	1884b03a 	or	r2,r3,r2
   10fa8:	e0bffd15 	stw	r2,-12(fp)

	// Set Phase shift register
	set_Phase(PLL_BASE, Cx, Val, Dir);
   10fac:	e1fffb17 	ldw	r7,-20(fp)
   10fb0:	e1bffd17 	ldw	r6,-12(fp)
   10fb4:	e17ffc17 	ldw	r5,-16(fp)
   10fb8:	e13ffa17 	ldw	r4,-24(fp)
   10fbc:	0012e180 	call	12e18 <set_Phase>
	// Apply PLL configuration
	pllcfgrez = start_Reconfig(PLL_BASE);
   10fc0:	e13ffa17 	ldw	r4,-24(fp)
   10fc4:	0012e940 	call	12e94 <start_Reconfig>
   10fc8:	e0bffe05 	stb	r2,-8(fp)
	return pllcfgrez;
   10fcc:	e0bffe03 	ldbu	r2,-8(fp)
}
   10fd0:	e037883a 	mov	sp,fp
   10fd4:	dfc00117 	ldw	ra,4(sp)
   10fd8:	df000017 	ldw	fp,0(sp)
   10fdc:	dec00204 	addi	sp,sp,8
   10fe0:	f800283a 	ret

00010fe4 <ResetPLL>:

//
void ResetPLL(void)
{
   10fe4:	defff804 	addi	sp,sp,-32
   10fe8:	dfc00715 	stw	ra,28(sp)
   10fec:	df000615 	stw	fp,24(sp)
   10ff0:	df000604 	addi	fp,sp,24
	uint8_t wr_buf[2];
	uint8_t rd_buf[2];
	int pll_ind, spirez;

	// Read
	wr_buf[0] = 0x00;	// Command and Address
   10ff4:	e03fff05 	stb	zero,-4(fp)
	wr_buf[1] = 0x23;	// Command and Address
   10ff8:	008008c4 	movi	r2,35
   10ffc:	e0bfff45 	stb	r2,-3(fp)
	spirez = alt_avalon_spi_command(PLLCFG_SPI_BASE, 0, 2, wr_buf, 2, rd_buf, 0);
   11000:	e0ffff04 	addi	r3,fp,-4
   11004:	d8000215 	stw	zero,8(sp)
   11008:	e0bfff84 	addi	r2,fp,-2
   1100c:	d8800115 	stw	r2,4(sp)
   11010:	00800084 	movi	r2,2
   11014:	d8800015 	stw	r2,0(sp)
   11018:	180f883a 	mov	r7,r3
   1101c:	01800084 	movi	r6,2
   11020:	000b883a 	mov	r5,zero
   11024:	0101c804 	movi	r4,1824
   11028:	00163ac0 	call	163ac <alt_avalon_spi_command>
   1102c:	e0bffd15 	stw	r2,-12(fp)

	// Get PLL index
	pll_ind = PLL_IND(rd_buf[1]); //(rd_buf[0] >> 3) & 0x3F;
   11030:	e0bfffc3 	ldbu	r2,-1(fp)
   11034:	10803fcc 	andi	r2,r2,255
   11038:	1004d0fa 	srli	r2,r2,3
   1103c:	10803fcc 	andi	r2,r2,255
   11040:	108007cc 	andi	r2,r2,31
   11044:	e0bffe15 	stw	r2,-8(fp)

	// Toggle reset line of appropriate PLL
    IOWR(PLL_RST_BASE, 0x00, 0x01 << pll_ind);	//Set to 1
   11048:	00c00044 	movi	r3,1
   1104c:	e0bffe17 	ldw	r2,-8(fp)
   11050:	1886983a 	sll	r3,r3,r2
   11054:	0081e404 	movi	r2,1936
   11058:	10c00035 	stwio	r3,0(r2)
    asm("nop"); asm("nop");
   1105c:	0001883a 	nop
   11060:	0001883a 	nop
    IOWR(PLL_RST_BASE, 0x00, 0x00);	//Set to 0
   11064:	0007883a 	mov	r3,zero
   11068:	0081e404 	movi	r2,1936
   1106c:	10c00035 	stwio	r3,0(r2)
}
   11070:	0001883a 	nop
   11074:	e037883a 	mov	sp,fp
   11078:	dfc00117 	ldw	ra,4(sp)
   1107c:	df000017 	ldw	fp,0(sp)
   11080:	dec00204 	addi	sp,sp,8
   11084:	f800283a 	ret

00011088 <Modify_BRDSPI16_Reg_bits>:
 *	@param SPI_reg_addr register address
 *	@param MSB_bit MSB bit of range that will be modified
 *	@param LSB_bit LSB bit of range that will be modified
 */
void Modify_BRDSPI16_Reg_bits (unsigned short int SPI_reg_addr, unsigned char MSB_bit, unsigned char LSB_bit, unsigned short int new_bits_data)
{
   11088:	defff304 	addi	sp,sp,-52
   1108c:	dfc00c15 	stw	ra,48(sp)
   11090:	df000b15 	stw	fp,44(sp)
   11094:	df000b04 	addi	fp,sp,44
   11098:	2011883a 	mov	r8,r4
   1109c:	2809883a 	mov	r4,r5
   110a0:	3007883a 	mov	r3,r6
   110a4:	3805883a 	mov	r2,r7
   110a8:	e23ffc0d 	sth	r8,-16(fp)
   110ac:	e13ffd05 	stb	r4,-12(fp)
   110b0:	e0fffe05 	stb	r3,-8(fp)
   110b4:	e0bfff0d 	sth	r2,-4(fp)
	unsigned char RdBuff[2];
	int spirez;

	//**Reconfigure_SPI_for_LMS();

	bits_number = MSB_bit - LSB_bit + 1;
   110b8:	e0fffd03 	ldbu	r3,-12(fp)
   110bc:	e0bffe03 	ldbu	r2,-8(fp)
   110c0:	1885c83a 	sub	r2,r3,r2
   110c4:	10800044 	addi	r2,r2,1
   110c8:	e0bff805 	stb	r2,-32(fp)

	mask = 0xFFFF;
   110cc:	00bfffc4 	movi	r2,-1
   110d0:	e0bff88d 	sth	r2,-30(fp)

	//removing unnecessary bits from mask
	mask = mask << (16 - bits_number);
   110d4:	e0fff88b 	ldhu	r3,-30(fp)
   110d8:	e0bff803 	ldbu	r2,-32(fp)
   110dc:	01000404 	movi	r4,16
   110e0:	2085c83a 	sub	r2,r4,r2
   110e4:	1884983a 	sll	r2,r3,r2
   110e8:	e0bff88d 	sth	r2,-30(fp)
	mask = mask >> (16 - bits_number);
   110ec:	e0fff88b 	ldhu	r3,-30(fp)
   110f0:	e0bff803 	ldbu	r2,-32(fp)
   110f4:	01000404 	movi	r4,16
   110f8:	2085c83a 	sub	r2,r4,r2
   110fc:	1885d83a 	sra	r2,r3,r2
   11100:	e0bff88d 	sth	r2,-30(fp)

	new_bits_data &= mask; //mask new data
   11104:	e0ffff0b 	ldhu	r3,-4(fp)
   11108:	e0bff88b 	ldhu	r2,-30(fp)
   1110c:	1884703a 	and	r2,r3,r2
   11110:	e0bfff0d 	sth	r2,-4(fp)

	new_bits_data = new_bits_data << LSB_bit; //shift new data
   11114:	e0ffff0b 	ldhu	r3,-4(fp)
   11118:	e0bffe03 	ldbu	r2,-8(fp)
   1111c:	1884983a 	sll	r2,r3,r2
   11120:	e0bfff0d 	sth	r2,-4(fp)

	mask = mask << LSB_bit; //shift mask
   11124:	e0fff88b 	ldhu	r3,-30(fp)
   11128:	e0bffe03 	ldbu	r2,-8(fp)
   1112c:	1884983a 	sll	r2,r3,r2
   11130:	e0bff88d 	sth	r2,-30(fp)
	mask =~ mask;//invert mask
   11134:	e0bff88b 	ldhu	r2,-30(fp)
   11138:	0084303a 	nor	r2,zero,r2
   1113c:	e0bff88d 	sth	r2,-30(fp)

	// Read original data
	WrBuff[0] = (SPI_reg_addr >> 8 ) & 0xFF; //MSB_byte
   11140:	e0bffc0b 	ldhu	r2,-16(fp)
   11144:	1004d23a 	srli	r2,r2,8
   11148:	e0bffa85 	stb	r2,-22(fp)
	WrBuff[1] = SPI_reg_addr & 0xFF; //LSB_byte
   1114c:	e0bffc0b 	ldhu	r2,-16(fp)
   11150:	e0bffac5 	stb	r2,-21(fp)
	cbi(WrBuff[0], 7);  //clear write bit
   11154:	e0bffa83 	ldbu	r2,-22(fp)
   11158:	10801fcc 	andi	r2,r2,127
   1115c:	e0bffa85 	stb	r2,-22(fp)
	spirez = alt_avalon_spi_command(FPGA_SPI0_BASE, SPI_NR_FPGA, 2, WrBuff, 2, RdBuff, 0);
   11160:	e0fffa84 	addi	r3,fp,-22
   11164:	d8000215 	stw	zero,8(sp)
   11168:	e0bffb84 	addi	r2,fp,-18
   1116c:	d8800115 	stw	r2,4(sp)
   11170:	00800084 	movi	r2,2
   11174:	d8800015 	stw	r2,0(sp)
   11178:	180f883a 	mov	r7,r3
   1117c:	01800084 	movi	r6,2
   11180:	01400184 	movi	r5,6
   11184:	0101d004 	movi	r4,1856
   11188:	00163ac0 	call	163ac <alt_avalon_spi_command>
   1118c:	e0bff915 	stw	r2,-28(fp)

	SPI_reg_data = (RdBuff[0] << 8) + RdBuff[1]; //read current SPI reg data
   11190:	e0bffb83 	ldbu	r2,-18(fp)
   11194:	10803fcc 	andi	r2,r2,255
   11198:	1004923a 	slli	r2,r2,8
   1119c:	1007883a 	mov	r3,r2
   111a0:	e0bffbc3 	ldbu	r2,-17(fp)
   111a4:	10803fcc 	andi	r2,r2,255
   111a8:	1885883a 	add	r2,r3,r2
   111ac:	e0bffa0d 	sth	r2,-24(fp)

	//modify reg data
	SPI_reg_data &= mask;//clear bits
   111b0:	e0fffa0b 	ldhu	r3,-24(fp)
   111b4:	e0bff88b 	ldhu	r2,-30(fp)
   111b8:	1884703a 	and	r2,r3,r2
   111bc:	e0bffa0d 	sth	r2,-24(fp)
	SPI_reg_data |= new_bits_data; //set bits with new data
   111c0:	e0fffa0b 	ldhu	r3,-24(fp)
   111c4:	e0bfff0b 	ldhu	r2,-4(fp)
   111c8:	1884b03a 	or	r2,r3,r2
   111cc:	e0bffa0d 	sth	r2,-24(fp)

	//write reg addr
	WrBuff[0] = (SPI_reg_addr >> 8 ) & 0xFF; //MSB_byte
   111d0:	e0bffc0b 	ldhu	r2,-16(fp)
   111d4:	1004d23a 	srli	r2,r2,8
   111d8:	e0bffa85 	stb	r2,-22(fp)
	WrBuff[1] = SPI_reg_addr & 0xFF; //LSB_byte
   111dc:	e0bffc0b 	ldhu	r2,-16(fp)
   111e0:	e0bffac5 	stb	r2,-21(fp)
	//modified data to be written to SPI reg
	WrBuff[2] = (SPI_reg_data >> 8 ) & 0xFF;
   111e4:	e0bffa0b 	ldhu	r2,-24(fp)
   111e8:	1004d23a 	srli	r2,r2,8
   111ec:	e0bffb05 	stb	r2,-20(fp)
	WrBuff[3] = SPI_reg_data & 0xFF;
   111f0:	e0bffa0b 	ldhu	r2,-24(fp)
   111f4:	e0bffb45 	stb	r2,-19(fp)
	sbi(WrBuff[0], 7); //set write bit
   111f8:	e0fffa83 	ldbu	r3,-22(fp)
   111fc:	00bfe004 	movi	r2,-128
   11200:	1884b03a 	or	r2,r3,r2
   11204:	e0bffa85 	stb	r2,-22(fp)
	spirez = alt_avalon_spi_command(FPGA_SPI0_BASE, SPI_NR_FPGA, 4, WrBuff, 0, NULL, 0);
   11208:	e0bffa84 	addi	r2,fp,-22
   1120c:	d8000215 	stw	zero,8(sp)
   11210:	d8000115 	stw	zero,4(sp)
   11214:	d8000015 	stw	zero,0(sp)
   11218:	100f883a 	mov	r7,r2
   1121c:	01800104 	movi	r6,4
   11220:	01400184 	movi	r5,6
   11224:	0101d004 	movi	r4,1856
   11228:	00163ac0 	call	163ac <alt_avalon_spi_command>
   1122c:	e0bff915 	stw	r2,-28(fp)
}
   11230:	0001883a 	nop
   11234:	e037883a 	mov	sp,fp
   11238:	dfc00117 	ldw	ra,4(sp)
   1123c:	df000017 	ldw	fp,0(sp)
   11240:	dec00204 	addi	sp,sp,8
   11244:	f800283a 	ret

00011248 <main>:


int main(void)
{
   11248:	deffe104 	addi	sp,sp,-124
   1124c:	dfc01e15 	stw	ra,120(sp)
   11250:	df001d15 	stw	fp,116(sp)
   11254:	dc401c15 	stw	r17,112(sp)
   11258:	dc001b15 	stw	r16,108(sp)
   1125c:	df001d04 	addi	fp,sp,116
	uint8_t pllcfgrez;

	uint8_t wr_buf[2];
	uint8_t rd_buf[2];
	int spirez;
	char cnt = 0;
   11260:	e03fe845 	stb	zero,-95(fp)
	uint32_t* dest = (uint32_t*)glEp0Buffer_Tx;
   11264:	00800074 	movhi	r2,1
   11268:	109ec004 	addi	r2,r2,31488
   1126c:	e0bfea15 	stw	r2,-88(fp)

	//MCP4261 wiper control
	unsigned char MCP_data[2];
	uint16_t wiper_pos[2];

    uint8_t vctcxo_tamer_irq = 0;
   11270:	e03feb05 	stb	zero,-84(fp)
    uint8_t vctcxo_tamer_en=0,	vctcxo_tamer_en_old = 0;
   11274:	e03fe885 	stb	zero,-94(fp)
   11278:	e03feb45 	stb	zero,-83(fp)

    // Trim DAC constants
    const uint16_t trimdac_min       = 0x1938;  // Decimal value  = 6456
   1127c:	00864e04 	movi	r2,6456
   11280:	e0bfeb8d 	sth	r2,-82(fp)
    const uint16_t trimdac_max       = 0xE2F3;	// Decimal value  = 58099
   11284:	00b8bcc4 	movi	r2,-7437
   11288:	e0bfec0d 	sth	r2,-80(fp)

    // Trim DAC calibration line
    line_t trimdac_cal_line;

    // VCTCXO Tune State machine
    state_t tune_state = COARSE_TUNE_MIN;
   1128c:	e03fe915 	stw	zero,-92(fp)

    // Set the known/default values of the trim DAC cal line
    trimdac_cal_line.point[0].x  = 0;
   11290:	e03ff115 	stw	zero,-60(fp)
    trimdac_cal_line.point[0].y  = trimdac_min;
   11294:	e0bfeb8b 	ldhu	r2,-82(fp)
   11298:	e0bff20d 	sth	r2,-56(fp)
    trimdac_cal_line.point[1].x  = 0;
   1129c:	e03ff315 	stw	zero,-52(fp)
    trimdac_cal_line.point[1].y  = trimdac_max;
   112a0:	e0bfec0b 	ldhu	r2,-80(fp)
   112a4:	e0bff40d 	sth	r2,-48(fp)
    trimdac_cal_line.slope       = 0;
   112a8:	e03ff515 	stw	zero,-44(fp)
    trimdac_cal_line.y_intercept = 0;
   112ac:	e03ff60d 	sth	zero,-40(fp)
    struct vctcxo_tamer_pkt_buf vctcxo_tamer_pkt;
	vctcxo_tamer_pkt.ready = false;
   112b0:	e03ff705 	stb	zero,-36(fp)

    // I2C initialiazation
    I2C_init(I2C_OPENCORES_0_BASE, ALT_CPU_FREQ, 100000);
   112b4:	018000b4 	movhi	r6,2
   112b8:	31a1a804 	addi	r6,r6,-31072
   112bc:	01407574 	movhi	r5,469
   112c0:	29700004 	addi	r5,r5,-16384
   112c4:	0101d804 	movi	r4,1888
   112c8:	00165a80 	call	165a8 <I2C_init>

    // Configure LM75
    Configure_LM75();
   112cc:	00101ac0 	call	101ac <Configure_LM75>


	// Initialize variables to detect PLL phase change and PLL config update request
	phcfg_start_old = 0; phcfg_start = 0;
   112d0:	e03fe685 	stb	zero,-102(fp)
   112d4:	e03fe6c5 	stb	zero,-101(fp)
	pllcfg_start_old = 0; pllcfg_start = 0;
   112d8:	e03fe705 	stb	zero,-100(fp)
   112dc:	e03fe745 	stb	zero,-99(fp)
	pllrst_start_old = 0; pllrst_start = 0;
   112e0:	e03fe785 	stb	zero,-98(fp)
   112e4:	e03fe7c5 	stb	zero,-97(fp)

	// Initialize PLL configuration status
	IOWR(PLLCFG_STATUS_BASE, 0x00, PLLCFG_DONE);
   112e8:	00c00044 	movi	r3,1
   112ec:	0081e804 	movi	r2,1952
   112f0:	10c00035 	stwio	r3,0(r2)

	// Initialize ADC
	init_ADC();
   112f4:	00102b00 	call	102b0 <init_ADC>

	//write default TCXO DAC value
	Control_TCXO_ADF (0, NULL); //set ADF4002 CP to three-state
   112f8:	000b883a 	mov	r5,zero
   112fc:	0009883a 	mov	r4,zero
   11300:	00108000 	call	10800 <Control_TCXO_ADF>
	dac_val = 30714;
   11304:	009dfe84 	movi	r2,30714
   11308:	d0a0000d 	sth	r2,-32768(gp)
	Control_TCXO_DAC (1, &dac_val); //enable DAC output, set new val
   1130c:	d1600004 	addi	r5,gp,-32768
   11310:	01000044 	movi	r4,1
   11314:	00107300 	call	10730 <Control_TCXO_DAC>

	//default dig pot wiper values
	wiper_pos[0] = wiper_pos[1] = 0x80;
   11318:	00802004 	movi	r2,128
   1131c:	e0bff00d 	sth	r2,-64(fp)
   11320:	e0bff00b 	ldhu	r2,-64(fp)
   11324:	e0bfef8d 	sth	r2,-66(fp)

	// Initialize switch for ADC test pattern change detection
	sw2 = IORD(GPI_0_BASE, 0x00) & 0x01;
   11328:	0081f004 	movi	r2,1984
   1132c:	10800037 	ldwio	r2,0(r2)
   11330:	1080004c 	andi	r2,r2,1
   11334:	e0bfe645 	stb	r2,-103(fp)
	sw2_old = 0x00;
   11338:	e03fe605 	stb	zero,-104(fp)

	//get_pll_config(PLL_RECONFIG_0_BASE, &pll_config);

    IOWR(AV_FIFO_INT_0_BASE, 3, 1);		// Toggle FIFO reset
   1133c:	00c00044 	movi	r3,1
   11340:	0081fb04 	movi	r2,2028
   11344:	10c00035 	stwio	r3,0(r2)
    IOWR(AV_FIFO_INT_0_BASE, 3, 0); // Toggle FIFO reset
   11348:	0007883a 	mov	r3,zero
   1134c:	0081fb04 	movi	r2,2028
   11350:	10c00035 	stwio	r3,0(r2)
	    IOWR(GPIO_0_BASE, 0x00, ui32_tmp & 0xFFFFFF7F);	//Set to 0
	    asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop");
	    asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop");
*/
	    // Check if ADC test pattern must be changed
	    if(sw2_old != sw2)
   11354:	e0ffe603 	ldbu	r3,-104(fp)
   11358:	e0bfe643 	ldbu	r2,-103(fp)
   1135c:	18800326 	beq	r3,r2,1136c <main+0x124>
	    {
	    	change_ADC_tpat(sw2);
   11360:	e0bfe643 	ldbu	r2,-103(fp)
   11364:	1009883a 	mov	r4,r2
   11368:	001091c0 	call	1091c <change_ADC_tpat>
	    }

	    // Update switch status for ADC test pattern change detection
	    sw2_old = sw2;
   1136c:	e0bfe643 	ldbu	r2,-103(fp)
   11370:	e0bfe605 	stb	r2,-104(fp)
	    sw2 = IORD(GPI_0_BASE, 0x00) & 0x01;
   11374:	0081f004 	movi	r2,1984
   11378:	10800037 	ldwio	r2,0(r2)
   1137c:	1080004c 	andi	r2,r2,1
   11380:	e0bfe645 	stb	r2,-103(fp)


	    // Check if there is a request for PLL phase update
	    if((phcfg_start_old == 0) && (phcfg_start != 0))
   11384:	e0bfe683 	ldbu	r2,-102(fp)
   11388:	1000141e 	bne	r2,zero,113dc <main+0x194>
   1138c:	e0bfe6c3 	ldbu	r2,-101(fp)
   11390:	10001226 	beq	r2,zero,113dc <main+0x194>
	    {
	    	IOWR(PLLCFG_STATUS_BASE, 0x00, PLLCFG_BUSY);
   11394:	00c00084 	movi	r3,2
   11398:	0081e804 	movi	r2,1952
   1139c:	10c00035 	stwio	r3,0(r2)
	    	phcfg_mode = (IORD(PLLCFG_COMMAND_BASE, 0x00) & 0x08) >> 3;
   113a0:	0081ec04 	movi	r2,1968
   113a4:	10800037 	ldwio	r2,0(r2)
   113a8:	1080020c 	andi	r2,r2,8
   113ac:	1005d0fa 	srai	r2,r2,3
   113b0:	e0bfec85 	stb	r2,-78(fp)
	    	if (phcfg_mode){
   113b4:	e0bfec83 	ldbu	r2,-78(fp)
   113b8:	1000021e 	bne	r2,zero,113c4 <main+0x17c>

	    	}
	    	else{
	    		pllcfgrez = UpdatePHCFG();
   113bc:	0010eb40 	call	10eb4 <UpdatePHCFG>
   113c0:	e0bfe805 	stb	r2,-96(fp)

	    	};

	    	IOWR(PLLCFG_STATUS_BASE, 0x00, (pllcfgrez << 2) | PLLCFG_DONE);
   113c4:	e0bfe803 	ldbu	r2,-96(fp)
   113c8:	1085883a 	add	r2,r2,r2
   113cc:	1085883a 	add	r2,r2,r2
   113d0:	10c00054 	ori	r3,r2,1
   113d4:	0081e804 	movi	r2,1952
   113d8:	10c00035 	stwio	r3,0(r2)
	    }

	    // Check if there is a request for PLL configuration update
	    if((pllcfg_start_old == 0) && (pllcfg_start != 0))
   113dc:	e0bfe703 	ldbu	r2,-100(fp)
   113e0:	10000d1e 	bne	r2,zero,11418 <main+0x1d0>
   113e4:	e0bfe743 	ldbu	r2,-99(fp)
   113e8:	10000b26 	beq	r2,zero,11418 <main+0x1d0>
	    {
	    	IOWR(PLLCFG_STATUS_BASE, 0x00, PLLCFG_BUSY);
   113ec:	00c00084 	movi	r3,2
   113f0:	0081e804 	movi	r2,1952
   113f4:	10c00035 	stwio	r3,0(r2)
	    	pllcfgrez = UpdatePLLCFG();
   113f8:	0010a540 	call	10a54 <UpdatePLLCFG>
   113fc:	e0bfe805 	stb	r2,-96(fp)
	    	IOWR(PLLCFG_STATUS_BASE, 0x00, (pllcfgrez << 2) | PLLCFG_DONE);
   11400:	e0bfe803 	ldbu	r2,-96(fp)
   11404:	1085883a 	add	r2,r2,r2
   11408:	1085883a 	add	r2,r2,r2
   1140c:	10c00054 	ori	r3,r2,1
   11410:	0081e804 	movi	r2,1952
   11414:	10c00035 	stwio	r3,0(r2)
	    }

	    // Check if there is a request for PLL configuration update
	    if((pllrst_start_old == 0) && (pllrst_start != 0))
   11418:	e0bfe783 	ldbu	r2,-98(fp)
   1141c:	1000091e 	bne	r2,zero,11444 <main+0x1fc>
   11420:	e0bfe7c3 	ldbu	r2,-97(fp)
   11424:	10000726 	beq	r2,zero,11444 <main+0x1fc>
	    {
	    	IOWR(PLLCFG_STATUS_BASE, 0x00, PLLCFG_BUSY);
   11428:	00c00084 	movi	r3,2
   1142c:	0081e804 	movi	r2,1952
   11430:	10c00035 	stwio	r3,0(r2)
	    	ResetPLL();
   11434:	0010fe40 	call	10fe4 <ResetPLL>
	    	IOWR(PLLCFG_STATUS_BASE, 0x00, PLLCFG_DONE);
   11438:	00c00044 	movi	r3,1
   1143c:	0081e804 	movi	r2,1952
   11440:	10c00035 	stwio	r3,0(r2)
	    }

	    // Update PLL configuration command status
	    pllrst_start_old = pllrst_start;
   11444:	e0bfe7c3 	ldbu	r2,-97(fp)
   11448:	e0bfe785 	stb	r2,-98(fp)
	    pllrst_start = (IORD(PLLCFG_COMMAND_BASE, 0x00) & 0x04) >> 2;
   1144c:	0081ec04 	movi	r2,1968
   11450:	10800037 	ldwio	r2,0(r2)
   11454:	1080010c 	andi	r2,r2,4
   11458:	1005d0ba 	srai	r2,r2,2
   1145c:	e0bfe7c5 	stb	r2,-97(fp)
	    phcfg_start_old = phcfg_start;
   11460:	e0bfe6c3 	ldbu	r2,-101(fp)
   11464:	e0bfe685 	stb	r2,-102(fp)
	    phcfg_start = (IORD(PLLCFG_COMMAND_BASE, 0x00) & 0x02) >> 1;
   11468:	0081ec04 	movi	r2,1968
   1146c:	10800037 	ldwio	r2,0(r2)
   11470:	1080008c 	andi	r2,r2,2
   11474:	1005d07a 	srai	r2,r2,1
   11478:	e0bfe6c5 	stb	r2,-101(fp)
	    pllcfg_start_old = pllcfg_start;
   1147c:	e0bfe743 	ldbu	r2,-99(fp)
   11480:	e0bfe705 	stb	r2,-100(fp)
	    pllcfg_start = IORD(PLLCFG_COMMAND_BASE, 0x00) & 0x01;
   11484:	0081ec04 	movi	r2,1968
   11488:	10800037 	ldwio	r2,0(r2)
   1148c:	1080004c 	andi	r2,r2,1
   11490:	e0bfe745 	stb	r2,-99(fp)


    	vctcxo_tamer_irq = (IORD_8DIRECT(VCTCXO_TAMER_0_CTRL_BASE, 0x00) & 0x02);
   11494:	0081e004 	movi	r2,1920
   11498:	10800023 	ldbuio	r2,0(r2)
   1149c:	10803fcc 	andi	r2,r2,255
   114a0:	1080008c 	andi	r2,r2,2
   114a4:	e0bfeb05 	stb	r2,-84(fp)
	    // Clear VCTCXO tamer interrupt
	    if(vctcxo_tamer_irq != 0)
   114a8:	e0bfeb03 	ldbu	r2,-84(fp)
   114ac:	10000326 	beq	r2,zero,114bc <main+0x274>
	    {	vctcxo_tamer_isr(&vctcxo_tamer_pkt);
   114b0:	e0bff704 	addi	r2,fp,-36
   114b4:	1009883a 	mov	r4,r2
   114b8:	00132b40 	call	132b4 <vctcxo_tamer_isr>
	    	//IOWR_8DIRECT(VCTCXO_TAMER_0_BASE, 0, 0x70);
	    }

    	//Get vctcxo tamer enable bit status
    	vctcxo_tamer_en_old = vctcxo_tamer_en;
   114bc:	e0bfe883 	ldbu	r2,-94(fp)
   114c0:	e0bfeb45 	stb	r2,-83(fp)
    	vctcxo_tamer_en = (IORD_8DIRECT(VCTCXO_TAMER_0_CTRL_BASE, 0x00) & 0x01);
   114c4:	0081e004 	movi	r2,1920
   114c8:	10800023 	ldbuio	r2,0(r2)
   114cc:	10803fcc 	andi	r2,r2,255
   114d0:	1080004c 	andi	r2,r2,1
   114d4:	e0bfe885 	stb	r2,-94(fp)

    	if (vctcxo_tamer_en_old != vctcxo_tamer_en){
   114d8:	e0ffeb43 	ldbu	r3,-83(fp)
   114dc:	e0bfe883 	ldbu	r2,-94(fp)
   114e0:	18800a26 	beq	r3,r2,1150c <main+0x2c4>
    		if (vctcxo_tamer_en == 0x01){
   114e4:	e0bfe883 	ldbu	r2,-94(fp)
   114e8:	10800058 	cmpnei	r2,r2,1
   114ec:	1000041e 	bne	r2,zero,11500 <main+0x2b8>
    			vctcxo_tamer_init();
   114f0:	001339c0 	call	1339c <vctcxo_tamer_init>
    			vctcxo_tamer_pkt.ready = true;
   114f4:	00800044 	movi	r2,1
   114f8:	e0bff705 	stb	r2,-36(fp)
   114fc:	00000306 	br	1150c <main+0x2c4>
    		}
    		else {
    			vctcxo_tamer_dis();
   11500:	00133d80 	call	133d8 <vctcxo_tamer_dis>
    			tune_state = COARSE_TUNE_MIN;
   11504:	e03fe915 	stw	zero,-92(fp)
    			vctcxo_tamer_pkt.ready = false;
   11508:	e03ff705 	stb	zero,-36(fp)
    		}
    	}

        /* Temporarily putting the VCTCXO Calibration stuff here. */
        if( vctcxo_tamer_pkt.ready ) {
   1150c:	e0bff703 	ldbu	r2,-36(fp)
   11510:	10803fcc 	andi	r2,r2,255
   11514:	1000ee26 	beq	r2,zero,118d0 <main+0x688>

            vctcxo_tamer_pkt.ready = false;
   11518:	e03ff705 	stb	zero,-36(fp)

            switch(tune_state) {
   1151c:	e0bfe917 	ldw	r2,-92(fp)
   11520:	10c00060 	cmpeqi	r3,r2,1
   11524:	1800121e 	bne	r3,zero,11570 <main+0x328>
   11528:	0080052e 	bgeu	zero,r2,11540 <main+0x2f8>
   1152c:	10c000a0 	cmpeqi	r3,r2,2
   11530:	18001d1e 	bne	r3,zero,115a8 <main+0x360>
   11534:	108000e0 	cmpeqi	r2,r2,3
   11538:	10005a1e 	bne	r2,zero,116a4 <main+0x45c>
                }

                break;

            default:
                break;
   1153c:	0000e006 	br	118c0 <main+0x678>
            switch(tune_state) {

            case COARSE_TUNE_MIN:

                /* Tune to the minimum DAC value */
                vctcxo_trim_dac_write( 0x08, trimdac_min );
   11540:	e0bfeb8b 	ldhu	r2,-82(fp)
   11544:	100b883a 	mov	r5,r2
   11548:	01000204 	movi	r4,8
   1154c:	00132480 	call	13248 <vctcxo_trim_dac_write>
                dac_val = (unsigned short int) trimdac_min;
   11550:	e0bfeb8b 	ldhu	r2,-82(fp)
   11554:	d0a0000d 	sth	r2,-32768(gp)
            	Control_TCXO_DAC (1, &dac_val); //enable DAC output, set new val
   11558:	d1600004 	addi	r5,gp,-32768
   1155c:	01000044 	movi	r4,1
   11560:	00107300 	call	10730 <Control_TCXO_DAC>

                /* State to enter upon the next interrupt */
                tune_state = COARSE_TUNE_MAX;
   11564:	00800044 	movi	r2,1
   11568:	e0bfe915 	stw	r2,-92(fp)

                break;
   1156c:	0000d406 	br	118c0 <main+0x678>

            case COARSE_TUNE_MAX:

                /* We have the error from the minimum DAC setting, store it
                 * as the 'x' coordinate for the first point */
                trimdac_cal_line.point[0].x = vctcxo_tamer_pkt.pps_1s_error;
   11570:	e0bff817 	ldw	r2,-32(fp)
   11574:	e0bff115 	stw	r2,-60(fp)

                /* Tune to the maximum DAC value */
                vctcxo_trim_dac_write( 0x08, trimdac_max );
   11578:	e0bfec0b 	ldhu	r2,-80(fp)
   1157c:	100b883a 	mov	r5,r2
   11580:	01000204 	movi	r4,8
   11584:	00132480 	call	13248 <vctcxo_trim_dac_write>
                dac_val = (unsigned short int) trimdac_max;
   11588:	e0bfec0b 	ldhu	r2,-80(fp)
   1158c:	d0a0000d 	sth	r2,-32768(gp)
            	Control_TCXO_DAC (1, &dac_val); //enable DAC output, set new val
   11590:	d1600004 	addi	r5,gp,-32768
   11594:	01000044 	movi	r4,1
   11598:	00107300 	call	10730 <Control_TCXO_DAC>

                /* State to enter upon the next interrupt */
                tune_state = COARSE_TUNE_DONE;
   1159c:	00800084 	movi	r2,2
   115a0:	e0bfe915 	stw	r2,-92(fp)

                break;
   115a4:	0000c606 	br	118c0 <main+0x678>

            case COARSE_TUNE_DONE:
            	/* Write status to to state register*/
            	vctcxo_tamer_write(VT_STATE_ADDR, 0x01);
   115a8:	01400044 	movi	r5,1
   115ac:	01000704 	movi	r4,28
   115b0:	0012f3c0 	call	12f3c <vctcxo_tamer_write>

                /* We have the error from the maximum DAC setting, store it
                 * as the 'x' coordinate for the second point */
                trimdac_cal_line.point[1].x = vctcxo_tamer_pkt.pps_1s_error;
   115b4:	e0bff817 	ldw	r2,-32(fp)
   115b8:	e0bff315 	stw	r2,-52(fp)

                /* We now have two points, so we can calculate the equation
                 * for a line plotted with DAC counts on the Y axis and
                 * error on the X axis. We want a PPM of zero, which ideally
                 * corresponds to the y-intercept of the line. */
                trimdac_cal_line.slope = ( (float) (trimdac_cal_line.point[1].y - trimdac_cal_line.point[0].y) / (float)
   115bc:	e0bff40b 	ldhu	r2,-48(fp)
   115c0:	10ffffcc 	andi	r3,r2,65535
   115c4:	e0bff20b 	ldhu	r2,-56(fp)
   115c8:	10bfffcc 	andi	r2,r2,65535
   115cc:	1885c83a 	sub	r2,r3,r2
   115d0:	1009883a 	mov	r4,r2
   115d4:	0013fd40 	call	13fd4 <__floatsisf>
   115d8:	1021883a 	mov	r16,r2
                                           (trimdac_cal_line.point[1].x - trimdac_cal_line.point[0].x) );
   115dc:	e0fff317 	ldw	r3,-52(fp)
   115e0:	e0bff117 	ldw	r2,-60(fp)
   115e4:	1885c83a 	sub	r2,r3,r2

                /* We now have two points, so we can calculate the equation
                 * for a line plotted with DAC counts on the Y axis and
                 * error on the X axis. We want a PPM of zero, which ideally
                 * corresponds to the y-intercept of the line. */
                trimdac_cal_line.slope = ( (float) (trimdac_cal_line.point[1].y - trimdac_cal_line.point[0].y) / (float)
   115e8:	1009883a 	mov	r4,r2
   115ec:	0013fd40 	call	13fd4 <__floatsisf>
   115f0:	1007883a 	mov	r3,r2
   115f4:	180b883a 	mov	r5,r3
   115f8:	8009883a 	mov	r4,r16
   115fc:	00137640 	call	13764 <__divsf3>
   11600:	1007883a 	mov	r3,r2
   11604:	1805883a 	mov	r2,r3
   11608:	e0bff515 	stw	r2,-44(fp)
                                           (trimdac_cal_line.point[1].x - trimdac_cal_line.point[0].x) );

                trimdac_cal_line.y_intercept = ( trimdac_cal_line.point[0].y -
   1160c:	e43ff20b 	ldhu	r16,-56(fp)
                                                 (uint16_t)(round(trimdac_cal_line.slope * (float) trimdac_cal_line.point[0].x)));
   11610:	e47ff517 	ldw	r17,-44(fp)
   11614:	e0bff117 	ldw	r2,-60(fp)
   11618:	1009883a 	mov	r4,r2
   1161c:	0013fd40 	call	13fd4 <__floatsisf>
   11620:	1007883a 	mov	r3,r2
   11624:	180b883a 	mov	r5,r3
   11628:	8809883a 	mov	r4,r17
   1162c:	0013ba40 	call	13ba4 <__mulsf3>
   11630:	1007883a 	mov	r3,r2
   11634:	1805883a 	mov	r2,r3
   11638:	1009883a 	mov	r4,r2
   1163c:	0015dcc0 	call	15dcc <__extendsfdf2>
   11640:	100b883a 	mov	r5,r2
   11644:	180d883a 	mov	r6,r3
   11648:	2809883a 	mov	r4,r5
   1164c:	300b883a 	mov	r5,r6
   11650:	00134140 	call	13414 <round>
   11654:	100b883a 	mov	r5,r2
   11658:	180d883a 	mov	r6,r3
   1165c:	2809883a 	mov	r4,r5
   11660:	300b883a 	mov	r5,r6
   11664:	00135140 	call	13514 <__fixunsdfsi>
                 * error on the X axis. We want a PPM of zero, which ideally
                 * corresponds to the y-intercept of the line. */
                trimdac_cal_line.slope = ( (float) (trimdac_cal_line.point[1].y - trimdac_cal_line.point[0].y) / (float)
                                           (trimdac_cal_line.point[1].x - trimdac_cal_line.point[0].x) );

                trimdac_cal_line.y_intercept = ( trimdac_cal_line.point[0].y -
   11668:	8085c83a 	sub	r2,r16,r2
   1166c:	e0bff60d 	sth	r2,-40(fp)
                                                 (uint16_t)(round(trimdac_cal_line.slope * (float) trimdac_cal_line.point[0].x)));

                /* Set the trim DAC count to the y-intercept */
                vctcxo_trim_dac_write( 0x08, trimdac_cal_line.y_intercept );
   11670:	e0bff60b 	ldhu	r2,-40(fp)
   11674:	10bfffcc 	andi	r2,r2,65535
   11678:	100b883a 	mov	r5,r2
   1167c:	01000204 	movi	r4,8
   11680:	00132480 	call	13248 <vctcxo_trim_dac_write>
                dac_val = (unsigned short int) trimdac_cal_line.y_intercept;
   11684:	e0bff60b 	ldhu	r2,-40(fp)
   11688:	d0a0000d 	sth	r2,-32768(gp)
            	Control_TCXO_DAC (1, &dac_val); //enable DAC output, set new val
   1168c:	d1600004 	addi	r5,gp,-32768
   11690:	01000044 	movi	r4,1
   11694:	00107300 	call	10730 <Control_TCXO_DAC>


                /* State to enter upon the next interrupt */
                tune_state = FINE_TUNE;
   11698:	008000c4 	movi	r2,3
   1169c:	e0bfe915 	stw	r2,-92(fp)

                break;
   116a0:	00008706 	br	118c0 <main+0x678>
                /* Check the magnitude of the errors starting with the
                 * one second count. If an error is greater than the maxium
                 * tolerated error, adjust the trim DAC by the error (Hz)
                 * multiplied by the slope (in counts/Hz) and scale the
                 * result by the precision interval (e.g. 1s, 10s, 100s). */
                if( vctcxo_tamer_pkt.pps_1s_error_flag ) {
   116a4:	e0bff903 	ldbu	r2,-28(fp)
   116a8:	10803fcc 	andi	r2,r2,255
   116ac:	10002426 	beq	r2,zero,11740 <main+0x4f8>
                	vctcxo_trim_dac_value = (vctcxo_trim_dac_value -
   116b0:	d420030b 	ldhu	r16,-32756(gp)
                	                    		(uint16_t) (round((float)vctcxo_tamer_pkt.pps_1s_error * trimdac_cal_line.slope)/1));
   116b4:	e0bff817 	ldw	r2,-32(fp)
   116b8:	1009883a 	mov	r4,r2
   116bc:	0013fd40 	call	13fd4 <__floatsisf>
   116c0:	1007883a 	mov	r3,r2
   116c4:	e0bff517 	ldw	r2,-44(fp)
   116c8:	100b883a 	mov	r5,r2
   116cc:	1809883a 	mov	r4,r3
   116d0:	0013ba40 	call	13ba4 <__mulsf3>
   116d4:	1007883a 	mov	r3,r2
   116d8:	1805883a 	mov	r2,r3
   116dc:	1009883a 	mov	r4,r2
   116e0:	0015dcc0 	call	15dcc <__extendsfdf2>
   116e4:	100b883a 	mov	r5,r2
   116e8:	180d883a 	mov	r6,r3
   116ec:	2809883a 	mov	r4,r5
   116f0:	300b883a 	mov	r5,r6
   116f4:	00134140 	call	13414 <round>
   116f8:	100b883a 	mov	r5,r2
   116fc:	180d883a 	mov	r6,r3
   11700:	2809883a 	mov	r4,r5
   11704:	300b883a 	mov	r5,r6
   11708:	00135140 	call	13514 <__fixunsdfsi>
                 * one second count. If an error is greater than the maxium
                 * tolerated error, adjust the trim DAC by the error (Hz)
                 * multiplied by the slope (in counts/Hz) and scale the
                 * result by the precision interval (e.g. 1s, 10s, 100s). */
                if( vctcxo_tamer_pkt.pps_1s_error_flag ) {
                	vctcxo_trim_dac_value = (vctcxo_trim_dac_value -
   1170c:	8085c83a 	sub	r2,r16,r2
   11710:	d0a0030d 	sth	r2,-32756(gp)
                	                    		(uint16_t) (round((float)vctcxo_tamer_pkt.pps_1s_error * trimdac_cal_line.slope)/1));
                	// Write tuned val to VCTCXO_tamer MM registers
                    vctcxo_trim_dac_write( 0x08, vctcxo_trim_dac_value);
   11714:	d0a0030b 	ldhu	r2,-32756(gp)
   11718:	10bfffcc 	andi	r2,r2,65535
   1171c:	100b883a 	mov	r5,r2
   11720:	01000204 	movi	r4,8
   11724:	00132480 	call	13248 <vctcxo_trim_dac_write>
                    // Change DAC value
                    dac_val = (unsigned short int) vctcxo_trim_dac_value;
   11728:	d0a0030b 	ldhu	r2,-32756(gp)
   1172c:	d0a0000d 	sth	r2,-32768(gp)
                	Control_TCXO_DAC (1, &dac_val); //enable DAC output, set new val
   11730:	d1600004 	addi	r5,gp,-32768
   11734:	01000044 	movi	r4,1
   11738:	00107300 	call	10730 <Control_TCXO_DAC>
                    // Change DAC value
                    dac_val = (unsigned short int) vctcxo_trim_dac_value;
                	Control_TCXO_DAC (1, &dac_val); //enable DAC output, set new val
                }

                break;
   1173c:	00005f06 	br	118bc <main+0x674>
                    vctcxo_trim_dac_write( 0x08, vctcxo_trim_dac_value);
                    // Change DAC value
                    dac_val = (unsigned short int) vctcxo_trim_dac_value;
                	Control_TCXO_DAC (1, &dac_val); //enable DAC output, set new val

                } else if( vctcxo_tamer_pkt.pps_10s_error_flag ) {
   11740:	e0bffb03 	ldbu	r2,-20(fp)
   11744:	10803fcc 	andi	r2,r2,255
   11748:	10002d26 	beq	r2,zero,11800 <main+0x5b8>
                	vctcxo_trim_dac_value = (vctcxo_trim_dac_value -
   1174c:	d420030b 	ldhu	r16,-32756(gp)
                    							(uint16_t)(round((float)vctcxo_tamer_pkt.pps_10s_error * trimdac_cal_line.slope)/10));
   11750:	e0bffa17 	ldw	r2,-24(fp)
   11754:	1009883a 	mov	r4,r2
   11758:	0013fd40 	call	13fd4 <__floatsisf>
   1175c:	1007883a 	mov	r3,r2
   11760:	e0bff517 	ldw	r2,-44(fp)
   11764:	100b883a 	mov	r5,r2
   11768:	1809883a 	mov	r4,r3
   1176c:	0013ba40 	call	13ba4 <__mulsf3>
   11770:	1007883a 	mov	r3,r2
   11774:	1805883a 	mov	r2,r3
   11778:	1009883a 	mov	r4,r2
   1177c:	0015dcc0 	call	15dcc <__extendsfdf2>
   11780:	100b883a 	mov	r5,r2
   11784:	180d883a 	mov	r6,r3
   11788:	2809883a 	mov	r4,r5
   1178c:	300b883a 	mov	r5,r6
   11790:	00134140 	call	13414 <round>
   11794:	1011883a 	mov	r8,r2
   11798:	1813883a 	mov	r9,r3
   1179c:	000d883a 	mov	r6,zero
   117a0:	01d00934 	movhi	r7,16420
   117a4:	4009883a 	mov	r4,r8
   117a8:	480b883a 	mov	r5,r9
   117ac:	00149a40 	call	149a4 <__divdf3>
   117b0:	1009883a 	mov	r4,r2
   117b4:	180b883a 	mov	r5,r3
   117b8:	2005883a 	mov	r2,r4
   117bc:	2807883a 	mov	r3,r5
   117c0:	1009883a 	mov	r4,r2
   117c4:	180b883a 	mov	r5,r3
   117c8:	00135140 	call	13514 <__fixunsdfsi>
                    // Change DAC value
                    dac_val = (unsigned short int) vctcxo_trim_dac_value;
                	Control_TCXO_DAC (1, &dac_val); //enable DAC output, set new val

                } else if( vctcxo_tamer_pkt.pps_10s_error_flag ) {
                	vctcxo_trim_dac_value = (vctcxo_trim_dac_value -
   117cc:	8085c83a 	sub	r2,r16,r2
   117d0:	d0a0030d 	sth	r2,-32756(gp)
                    							(uint16_t)(round((float)vctcxo_tamer_pkt.pps_10s_error * trimdac_cal_line.slope)/10));
                	// Write tuned val to VCTCXO_tamer MM registers
                    vctcxo_trim_dac_write( 0x08, vctcxo_trim_dac_value);
   117d4:	d0a0030b 	ldhu	r2,-32756(gp)
   117d8:	10bfffcc 	andi	r2,r2,65535
   117dc:	100b883a 	mov	r5,r2
   117e0:	01000204 	movi	r4,8
   117e4:	00132480 	call	13248 <vctcxo_trim_dac_write>
                    // Change DAC value
                    dac_val = (unsigned short int) vctcxo_trim_dac_value;
   117e8:	d0a0030b 	ldhu	r2,-32756(gp)
   117ec:	d0a0000d 	sth	r2,-32768(gp)
                	Control_TCXO_DAC (1, &dac_val); //enable DAC output, set new val
   117f0:	d1600004 	addi	r5,gp,-32768
   117f4:	01000044 	movi	r4,1
   117f8:	00107300 	call	10730 <Control_TCXO_DAC>
                    // Change DAC value
                    dac_val = (unsigned short int) vctcxo_trim_dac_value;
                	Control_TCXO_DAC (1, &dac_val); //enable DAC output, set new val
                }

                break;
   117fc:	00002f06 	br	118bc <main+0x674>
                    vctcxo_trim_dac_write( 0x08, vctcxo_trim_dac_value);
                    // Change DAC value
                    dac_val = (unsigned short int) vctcxo_trim_dac_value;
                	Control_TCXO_DAC (1, &dac_val); //enable DAC output, set new val

                } else if( vctcxo_tamer_pkt.pps_100s_error_flag ) {
   11800:	e0bffd03 	ldbu	r2,-12(fp)
   11804:	10803fcc 	andi	r2,r2,255
   11808:	10002c26 	beq	r2,zero,118bc <main+0x674>
                	vctcxo_trim_dac_value = (vctcxo_trim_dac_value -
   1180c:	d420030b 	ldhu	r16,-32756(gp)
                    							(uint16_t)(round((float)vctcxo_tamer_pkt.pps_100s_error * trimdac_cal_line.slope)/100));
   11810:	e0bffc17 	ldw	r2,-16(fp)
   11814:	1009883a 	mov	r4,r2
   11818:	0013fd40 	call	13fd4 <__floatsisf>
   1181c:	1007883a 	mov	r3,r2
   11820:	e0bff517 	ldw	r2,-44(fp)
   11824:	100b883a 	mov	r5,r2
   11828:	1809883a 	mov	r4,r3
   1182c:	0013ba40 	call	13ba4 <__mulsf3>
   11830:	1007883a 	mov	r3,r2
   11834:	1805883a 	mov	r2,r3
   11838:	1009883a 	mov	r4,r2
   1183c:	0015dcc0 	call	15dcc <__extendsfdf2>
   11840:	100b883a 	mov	r5,r2
   11844:	180d883a 	mov	r6,r3
   11848:	2809883a 	mov	r4,r5
   1184c:	300b883a 	mov	r5,r6
   11850:	00134140 	call	13414 <round>
   11854:	1011883a 	mov	r8,r2
   11858:	1813883a 	mov	r9,r3
   1185c:	000d883a 	mov	r6,zero
   11860:	01d01674 	movhi	r7,16473
   11864:	4009883a 	mov	r4,r8
   11868:	480b883a 	mov	r5,r9
   1186c:	00149a40 	call	149a4 <__divdf3>
   11870:	1009883a 	mov	r4,r2
   11874:	180b883a 	mov	r5,r3
   11878:	2005883a 	mov	r2,r4
   1187c:	2807883a 	mov	r3,r5
   11880:	1009883a 	mov	r4,r2
   11884:	180b883a 	mov	r5,r3
   11888:	00135140 	call	13514 <__fixunsdfsi>
                    // Change DAC value
                    dac_val = (unsigned short int) vctcxo_trim_dac_value;
                	Control_TCXO_DAC (1, &dac_val); //enable DAC output, set new val

                } else if( vctcxo_tamer_pkt.pps_100s_error_flag ) {
                	vctcxo_trim_dac_value = (vctcxo_trim_dac_value -
   1188c:	8085c83a 	sub	r2,r16,r2
   11890:	d0a0030d 	sth	r2,-32756(gp)
                    							(uint16_t)(round((float)vctcxo_tamer_pkt.pps_100s_error * trimdac_cal_line.slope)/100));
                	// Write tuned val to VCTCXO_tamer MM registers
                    vctcxo_trim_dac_write( 0x08, vctcxo_trim_dac_value);
   11894:	d0a0030b 	ldhu	r2,-32756(gp)
   11898:	10bfffcc 	andi	r2,r2,65535
   1189c:	100b883a 	mov	r5,r2
   118a0:	01000204 	movi	r4,8
   118a4:	00132480 	call	13248 <vctcxo_trim_dac_write>
                    // Change DAC value
                    dac_val = (unsigned short int) vctcxo_trim_dac_value;
   118a8:	d0a0030b 	ldhu	r2,-32756(gp)
   118ac:	d0a0000d 	sth	r2,-32768(gp)
                	Control_TCXO_DAC (1, &dac_val); //enable DAC output, set new val
   118b0:	d1600004 	addi	r5,gp,-32768
   118b4:	01000044 	movi	r4,1
   118b8:	00107300 	call	10730 <Control_TCXO_DAC>
                }

                break;
   118bc:	0001883a 	nop
                break;

            } /* switch */

            /* Take PPS counters out of reset */
            vctcxo_tamer_reset_counters( false );
   118c0:	0009883a 	mov	r4,zero
   118c4:	0012f7c0 	call	12f7c <vctcxo_tamer_reset_counters>

            /* Enable interrupts */
            vctcxo_tamer_enable_isr( true );
   118c8:	01000044 	movi	r4,1
   118cc:	0012fe80 	call	12fe8 <vctcxo_tamer_enable_isr>

        } /* VCTCXO Tamer interrupt */

        spirez = IORD(AV_FIFO_INT_0_BASE, 2);	// Read FIFO Status
   118d0:	0081fa04 	movi	r2,2024
   118d4:	10800037 	ldwio	r2,0(r2)
   118d8:	e0bfed15 	stw	r2,-76(fp)
        if(!(spirez & 0x01))
   118dc:	e0bfed17 	ldw	r2,-76(fp)
   118e0:	1080004c 	andi	r2,r2,1
   118e4:	103e9b1e 	bne	r2,zero,11354 <_gp+0xffff1b7c>
        {
            IOWR(AV_FIFO_INT_0_BASE, 3, 1);		// Toggle FIFO reset
   118e8:	00c00044 	movi	r3,1
   118ec:	0081fb04 	movi	r2,2028
   118f0:	10c00035 	stwio	r3,0(r2)
            IOWR(AV_FIFO_INT_0_BASE, 3, 0); // Toggle FIFO reset
   118f4:	0007883a 	mov	r3,zero
   118f8:	0081fb04 	movi	r2,2028
   118fc:	10c00035 	stwio	r3,0(r2)

        	getFifoData(glEp0Buffer_Rx, 64);
   11900:	01401004 	movi	r5,64
   11904:	01000074 	movhi	r4,1
   11908:	211ed004 	addi	r4,r4,31552
   1190c:	00101280 	call	10128 <getFifoData>

         	memset (glEp0Buffer_Tx, 0, sizeof(glEp0Buffer_Tx)); //fill whole tx buffer with zeros
   11910:	01801004 	movi	r6,64
   11914:	000b883a 	mov	r5,zero
   11918:	01000074 	movhi	r4,1
   1191c:	211ec004 	addi	r4,r4,31488
   11920:	0015f400 	call	15f40 <memset>
         	cmd_errors = 0;
   11924:	d020c585 	stb	zero,-31978(gp)

     		LMS_Ctrl_Packet_Tx->Header.Command = LMS_Ctrl_Packet_Rx->Header.Command;
   11928:	d0a00117 	ldw	r2,-32764(gp)
   1192c:	d0e00217 	ldw	r3,-32760(gp)
   11930:	18c00003 	ldbu	r3,0(r3)
   11934:	10c00005 	stb	r3,0(r2)
     		LMS_Ctrl_Packet_Tx->Header.Data_blocks = LMS_Ctrl_Packet_Rx->Header.Data_blocks;
   11938:	d0a00117 	ldw	r2,-32764(gp)
   1193c:	d0e00217 	ldw	r3,-32760(gp)
   11940:	18c00083 	ldbu	r3,2(r3)
   11944:	10c00085 	stb	r3,2(r2)
     		LMS_Ctrl_Packet_Tx->Header.Periph_ID = LMS_Ctrl_Packet_Rx->Header.Periph_ID;
   11948:	d0a00117 	ldw	r2,-32764(gp)
   1194c:	d0e00217 	ldw	r3,-32760(gp)
   11950:	18c000c3 	ldbu	r3,3(r3)
   11954:	10c000c5 	stb	r3,3(r2)
     		LMS_Ctrl_Packet_Tx->Header.Status = STATUS_BUSY_CMD;
   11958:	d0a00117 	ldw	r2,-32764(gp)
   1195c:	00c000c4 	movi	r3,3
   11960:	10c00045 	stb	r3,1(r2)


     		switch(LMS_Ctrl_Packet_Rx->Header.Command)
   11964:	d0a00217 	ldw	r2,-32760(gp)
   11968:	10800003 	ldbu	r2,0(r2)
   1196c:	10803fcc 	andi	r2,r2,255
   11970:	10c018e8 	cmpgeui	r3,r2,99
   11974:	1804981e 	bne	r3,zero,12bd8 <main+0x1990>
   11978:	100690ba 	slli	r3,r2,2
   1197c:	00800074 	movhi	r2,1
   11980:	10866404 	addi	r2,r2,6544
   11984:	1885883a 	add	r2,r3,r2
   11988:	10800017 	ldw	r2,0(r2)
   1198c:	1000683a 	jmp	r2
   11990:	00011b1c 	xori	zero,zero,1132
   11994:	00012bd8 	cmpnei	zero,zero,1199
   11998:	00012bd8 	cmpnei	zero,zero,1199
   1199c:	00012bd8 	cmpnei	zero,zero,1199
   119a0:	00012bd8 	cmpnei	zero,zero,1199
   119a4:	00012bd8 	cmpnei	zero,zero,1199
   119a8:	00012bd8 	cmpnei	zero,zero,1199
   119ac:	00012bd8 	cmpnei	zero,zero,1199
   119b0:	00012bd8 	cmpnei	zero,zero,1199
   119b4:	00012bd8 	cmpnei	zero,zero,1199
   119b8:	00012bd8 	cmpnei	zero,zero,1199
   119bc:	00012bd8 	cmpnei	zero,zero,1199
   119c0:	00012bd8 	cmpnei	zero,zero,1199
   119c4:	00012bd8 	cmpnei	zero,zero,1199
   119c8:	00012bd8 	cmpnei	zero,zero,1199
   119cc:	00012bd8 	cmpnei	zero,zero,1199
   119d0:	00012bd8 	cmpnei	zero,zero,1199
   119d4:	00012bd8 	cmpnei	zero,zero,1199
   119d8:	00012bd8 	cmpnei	zero,zero,1199
   119dc:	00012980 	call	1298 <__reset-0xed68>
   119e0:	00012a8c 	andi	zero,zero,1194
   119e4:	00012bd8 	cmpnei	zero,zero,1199
   119e8:	00012bd8 	cmpnei	zero,zero,1199
   119ec:	00012bd8 	cmpnei	zero,zero,1199
   119f0:	00012bd8 	cmpnei	zero,zero,1199
   119f4:	00012bd8 	cmpnei	zero,zero,1199
   119f8:	00012bd8 	cmpnei	zero,zero,1199
   119fc:	00012bd8 	cmpnei	zero,zero,1199
   11a00:	00012bd8 	cmpnei	zero,zero,1199
   11a04:	00012bd8 	cmpnei	zero,zero,1199
   11a08:	00012bd8 	cmpnei	zero,zero,1199
   11a0c:	00012bd8 	cmpnei	zero,zero,1199
   11a10:	00011b64 	muli	zero,zero,1133
   11a14:	00011cc4 	movi	zero,1139
   11a18:	00011dd4 	movui	zero,1143
   11a1c:	00012bd8 	cmpnei	zero,zero,1199
   11a20:	00012bd8 	cmpnei	zero,zero,1199
   11a24:	00012bd8 	cmpnei	zero,zero,1199
   11a28:	00012bd8 	cmpnei	zero,zero,1199
   11a2c:	00012bd8 	cmpnei	zero,zero,1199
   11a30:	00012bd8 	cmpnei	zero,zero,1199
   11a34:	00012bd8 	cmpnei	zero,zero,1199
   11a38:	00012bd8 	cmpnei	zero,zero,1199
   11a3c:	00012bd8 	cmpnei	zero,zero,1199
   11a40:	00012bd8 	cmpnei	zero,zero,1199
   11a44:	00012bd8 	cmpnei	zero,zero,1199
   11a48:	00012bd8 	cmpnei	zero,zero,1199
   11a4c:	00012bd8 	cmpnei	zero,zero,1199
   11a50:	00012bd8 	cmpnei	zero,zero,1199
   11a54:	000120a4 	muli	zero,zero,1154
   11a58:	00012bd8 	cmpnei	zero,zero,1199
   11a5c:	00012bd8 	cmpnei	zero,zero,1199
   11a60:	00012bd8 	cmpnei	zero,zero,1199
   11a64:	00012bd8 	cmpnei	zero,zero,1199
   11a68:	00012bd8 	cmpnei	zero,zero,1199
   11a6c:	00012bd8 	cmpnei	zero,zero,1199
   11a70:	00012bd8 	cmpnei	zero,zero,1199
   11a74:	00012bd8 	cmpnei	zero,zero,1199
   11a78:	00012bd8 	cmpnei	zero,zero,1199
   11a7c:	00012bd8 	cmpnei	zero,zero,1199
   11a80:	00012bd8 	cmpnei	zero,zero,1199
   11a84:	00012bd8 	cmpnei	zero,zero,1199
   11a88:	00012bd8 	cmpnei	zero,zero,1199
   11a8c:	00012bd8 	cmpnei	zero,zero,1199
   11a90:	00012bd8 	cmpnei	zero,zero,1199
   11a94:	00012bd8 	cmpnei	zero,zero,1199
   11a98:	00012bd8 	cmpnei	zero,zero,1199
   11a9c:	00012bd8 	cmpnei	zero,zero,1199
   11aa0:	00012bd8 	cmpnei	zero,zero,1199
   11aa4:	00012bd8 	cmpnei	zero,zero,1199
   11aa8:	00012bd8 	cmpnei	zero,zero,1199
   11aac:	00012bd8 	cmpnei	zero,zero,1199
   11ab0:	00012bd8 	cmpnei	zero,zero,1199
   11ab4:	00012bd8 	cmpnei	zero,zero,1199
   11ab8:	00012bd8 	cmpnei	zero,zero,1199
   11abc:	00012bd8 	cmpnei	zero,zero,1199
   11ac0:	00012bd8 	cmpnei	zero,zero,1199
   11ac4:	00012bd8 	cmpnei	zero,zero,1199
   11ac8:	00012bd8 	cmpnei	zero,zero,1199
   11acc:	00012bd8 	cmpnei	zero,zero,1199
   11ad0:	00012bd8 	cmpnei	zero,zero,1199
   11ad4:	00012bd8 	cmpnei	zero,zero,1199
   11ad8:	00012bd8 	cmpnei	zero,zero,1199
   11adc:	00012bd8 	cmpnei	zero,zero,1199
   11ae0:	00012bd8 	cmpnei	zero,zero,1199
   11ae4:	00011ed8 	cmpnei	zero,zero,1147
   11ae8:	00011fb4 	movhi	zero,1150
   11aec:	00012bd8 	cmpnei	zero,zero,1199
   11af0:	00012bd8 	cmpnei	zero,zero,1199
   11af4:	00012bd8 	cmpnei	zero,zero,1199
   11af8:	00012bd8 	cmpnei	zero,zero,1199
   11afc:	00012bd8 	cmpnei	zero,zero,1199
   11b00:	00012bd8 	cmpnei	zero,zero,1199
   11b04:	00012bd8 	cmpnei	zero,zero,1199
   11b08:	00012bd8 	cmpnei	zero,zero,1199
   11b0c:	00012bd8 	cmpnei	zero,zero,1199
   11b10:	00012bd8 	cmpnei	zero,zero,1199
   11b14:	00012584 	movi	zero,1174
   11b18:	00012144 	movi	zero,1157
     		{
 				case CMD_GET_INFO:

 					LMS_Ctrl_Packet_Tx->Data_field[0] = FW_VER;
   11b1c:	d0a00117 	ldw	r2,-32764(gp)
   11b20:	00c00084 	movi	r3,2
   11b24:	10c00205 	stb	r3,8(r2)
 					LMS_Ctrl_Packet_Tx->Data_field[1] = DEV_TYPE;
   11b28:	d0a00117 	ldw	r2,-32764(gp)
   11b2c:	00c00404 	movi	r3,16
   11b30:	10c00245 	stb	r3,9(r2)
 					LMS_Ctrl_Packet_Tx->Data_field[2] = LMS_PROTOCOL_VER;
   11b34:	d0a00117 	ldw	r2,-32764(gp)
   11b38:	00c00044 	movi	r3,1
   11b3c:	10c00285 	stb	r3,10(r2)
 					LMS_Ctrl_Packet_Tx->Data_field[3] = HW_VER;
   11b40:	d0a00117 	ldw	r2,-32764(gp)
   11b44:	100002c5 	stb	zero,11(r2)
 					LMS_Ctrl_Packet_Tx->Data_field[4] = EXP_BOARD;
   11b48:	d0a00117 	ldw	r2,-32764(gp)
   11b4c:	00c00044 	movi	r3,1
   11b50:	10c00305 	stb	r3,12(r2)

 					LMS_Ctrl_Packet_Tx->Header.Status = STATUS_COMPLETED_CMD;
   11b54:	d0a00117 	ldw	r2,-32764(gp)
   11b58:	00c00044 	movi	r3,1
   11b5c:	10c00045 	stb	r3,1(r2)
 				break;
   11b60:	00043406 	br	12c34 <main+0x19ec>
				

 				case CMD_LMS_RST:

 					if(!Check_Periph_ID(MAX_ID_LMS7, LMS_Ctrl_Packet_Rx->Header.Periph_ID)) break;
   11b64:	d0a00217 	ldw	r2,-32760(gp)
   11b68:	108000c3 	ldbu	r2,3(r2)
   11b6c:	10803fcc 	andi	r2,r2,255
   11b70:	100b883a 	mov	r5,r2
   11b74:	01000044 	movi	r4,1
   11b78:	00100d00 	call	100d0 <Check_Periph_ID>
   11b7c:	10803fcc 	andi	r2,r2,255
   11b80:	10041926 	beq	r2,zero,12be8 <main+0x19a0>

 					switch (LMS_Ctrl_Packet_Rx->Data_field[0])
   11b84:	d0a00217 	ldw	r2,-32760(gp)
   11b88:	10800203 	ldbu	r2,8(r2)
   11b8c:	10803fcc 	andi	r2,r2,255
   11b90:	10c00060 	cmpeqi	r3,r2,1
   11b94:	1800151e 	bne	r3,zero,11bec <main+0x9a4>
   11b98:	10c000a0 	cmpeqi	r3,r2,2
   11b9c:	1800251e 	bne	r3,zero,11c34 <main+0x9ec>
   11ba0:	1000401e 	bne	r2,zero,11ca4 <main+0xa5c>
 					{
 						case LMS_RST_DEACTIVATE:

 		 					switch(LMS_Ctrl_Packet_Rx->Header.Periph_ID)
   11ba4:	d0a00217 	ldw	r2,-32760(gp)
   11ba8:	108000c3 	ldbu	r2,3(r2)
   11bac:	10803fcc 	andi	r2,r2,255
   11bb0:	10800060 	cmpeqi	r2,r2,1
   11bb4:	1000061e 	bne	r2,zero,11bd0 <main+0x988>
 		 					{
 		 						default:
 		 						case 0:
 		 							Modify_BRDSPI16_Reg_bits (BRD_SPI_REG_LMS1_LMS2_CTRL, LMS1_RESET, LMS1_RESET, 1); //high level
   11bb8:	01c00044 	movi	r7,1
   11bbc:	01800044 	movi	r6,1
   11bc0:	01400044 	movi	r5,1
   11bc4:	010004c4 	movi	r4,19
   11bc8:	00110880 	call	11088 <Modify_BRDSPI16_Reg_bits>
 		 						break;
   11bcc:	00000606 	br	11be8 <main+0x9a0>
 		 						case 1:
 		 							Modify_BRDSPI16_Reg_bits (BRD_SPI_REG_LMS1_LMS2_CTRL, LMS2_RESET, LMS2_RESET, 1); //high level
   11bd0:	01c00044 	movi	r7,1
   11bd4:	01800244 	movi	r6,9
   11bd8:	01400244 	movi	r5,9
   11bdc:	010004c4 	movi	r4,19
   11be0:	00110880 	call	11088 <Modify_BRDSPI16_Reg_bits>
 		 						break;
   11be4:	0001883a 	nop
 		 					}

 						break;
   11be8:	00003206 	br	11cb4 <main+0xa6c>

 						case LMS_RST_ACTIVATE:

 		 					switch(LMS_Ctrl_Packet_Rx->Header.Periph_ID)
   11bec:	d0a00217 	ldw	r2,-32760(gp)
   11bf0:	108000c3 	ldbu	r2,3(r2)
   11bf4:	10803fcc 	andi	r2,r2,255
   11bf8:	10800060 	cmpeqi	r2,r2,1
   11bfc:	1000061e 	bne	r2,zero,11c18 <main+0x9d0>
 		 					{
 		 						default:
 		 						case 0:
 		 							Modify_BRDSPI16_Reg_bits (BRD_SPI_REG_LMS1_LMS2_CTRL, LMS1_RESET, LMS1_RESET, 0); //low level
   11c00:	000f883a 	mov	r7,zero
   11c04:	01800044 	movi	r6,1
   11c08:	01400044 	movi	r5,1
   11c0c:	010004c4 	movi	r4,19
   11c10:	00110880 	call	11088 <Modify_BRDSPI16_Reg_bits>
 		 						break;
   11c14:	00000606 	br	11c30 <main+0x9e8>
 		 						case 1:
 		 							Modify_BRDSPI16_Reg_bits (BRD_SPI_REG_LMS1_LMS2_CTRL, LMS2_RESET, LMS2_RESET, 0); //low level
   11c18:	000f883a 	mov	r7,zero
   11c1c:	01800244 	movi	r6,9
   11c20:	01400244 	movi	r5,9
   11c24:	010004c4 	movi	r4,19
   11c28:	00110880 	call	11088 <Modify_BRDSPI16_Reg_bits>
 		 						break;
   11c2c:	0001883a 	nop
 		 					}

 						break;
   11c30:	00002006 	br	11cb4 <main+0xa6c>

 						case LMS_RST_PULSE:
 		 					switch(LMS_Ctrl_Packet_Rx->Header.Periph_ID)
   11c34:	d0a00217 	ldw	r2,-32760(gp)
   11c38:	108000c3 	ldbu	r2,3(r2)
   11c3c:	10803fcc 	andi	r2,r2,255
   11c40:	10800060 	cmpeqi	r2,r2,1
   11c44:	10000b1e 	bne	r2,zero,11c74 <main+0xa2c>
 		 					{
 		 						default:
 		 						case 0:
 		 							Modify_BRDSPI16_Reg_bits (BRD_SPI_REG_LMS1_LMS2_CTRL, LMS1_RESET, LMS1_RESET, 0); //low level
   11c48:	000f883a 	mov	r7,zero
   11c4c:	01800044 	movi	r6,1
   11c50:	01400044 	movi	r5,1
   11c54:	010004c4 	movi	r4,19
   11c58:	00110880 	call	11088 <Modify_BRDSPI16_Reg_bits>
 		 							Modify_BRDSPI16_Reg_bits (BRD_SPI_REG_LMS1_LMS2_CTRL, LMS1_RESET, LMS1_RESET, 1); //high level
   11c5c:	01c00044 	movi	r7,1
   11c60:	01800044 	movi	r6,1
   11c64:	01400044 	movi	r5,1
   11c68:	010004c4 	movi	r4,19
   11c6c:	00110880 	call	11088 <Modify_BRDSPI16_Reg_bits>
 		 						break;
   11c70:	00000b06 	br	11ca0 <main+0xa58>
 		 						case 1:
 		 							Modify_BRDSPI16_Reg_bits (BRD_SPI_REG_LMS1_LMS2_CTRL, LMS2_RESET, LMS2_RESET, 0); //low level
   11c74:	000f883a 	mov	r7,zero
   11c78:	01800244 	movi	r6,9
   11c7c:	01400244 	movi	r5,9
   11c80:	010004c4 	movi	r4,19
   11c84:	00110880 	call	11088 <Modify_BRDSPI16_Reg_bits>
 		 							Modify_BRDSPI16_Reg_bits (BRD_SPI_REG_LMS1_LMS2_CTRL, LMS2_RESET, LMS2_RESET, 1); //high level
   11c88:	01c00044 	movi	r7,1
   11c8c:	01800244 	movi	r6,9
   11c90:	01400244 	movi	r5,9
   11c94:	010004c4 	movi	r4,19
   11c98:	00110880 	call	11088 <Modify_BRDSPI16_Reg_bits>
 		 						break;
   11c9c:	0001883a 	nop
 		 					}

 						break;
   11ca0:	00000406 	br	11cb4 <main+0xa6c>

 						default:
 							cmd_errors++;
   11ca4:	d0a0c583 	ldbu	r2,-31978(gp)
   11ca8:	10800044 	addi	r2,r2,1
   11cac:	d0a0c585 	stb	r2,-31978(gp)
 						break;
   11cb0:	0001883a 	nop
 					}

 					LMS_Ctrl_Packet_Tx->Header.Status = STATUS_COMPLETED_CMD;
   11cb4:	d0a00117 	ldw	r2,-32764(gp)
   11cb8:	00c00044 	movi	r3,1
   11cbc:	10c00045 	stb	r3,1(r2)
 				break;
   11cc0:	0003dc06 	br	12c34 <main+0x19ec>


 				case CMD_LMS7002_WR:
 					if(!Check_Periph_ID(MAX_ID_LMS7, LMS_Ctrl_Packet_Rx->Header.Periph_ID)) break;
   11cc4:	d0a00217 	ldw	r2,-32760(gp)
   11cc8:	108000c3 	ldbu	r2,3(r2)
   11ccc:	10803fcc 	andi	r2,r2,255
   11cd0:	100b883a 	mov	r5,r2
   11cd4:	01000044 	movi	r4,1
   11cd8:	00100d00 	call	100d0 <Check_Periph_ID>
   11cdc:	10803fcc 	andi	r2,r2,255
   11ce0:	1003c326 	beq	r2,zero,12bf0 <main+0x19a8>
 					if(Check_many_blocks (4)) break;
   11ce4:	01000104 	movi	r4,4
   11ce8:	001005c0 	call	1005c <Check_many_blocks>
   11cec:	10803fcc 	andi	r2,r2,255
   11cf0:	1003c11e 	bne	r2,zero,12bf8 <main+0x19b0>

 					for(block = 0; block < LMS_Ctrl_Packet_Rx->Header.Data_blocks; block++)
   11cf4:	d020c505 	stb	zero,-31980(gp)
   11cf8:	00002c06 	br	11dac <main+0xb64>
 					{
 						//Write LMS7 register
 						sbi(LMS_Ctrl_Packet_Rx->Data_field[0 + (block * 4)], 7); //set write bit
   11cfc:	d0e00217 	ldw	r3,-32760(gp)
   11d00:	d0a0c503 	ldbu	r2,-31980(gp)
   11d04:	10803fcc 	andi	r2,r2,255
   11d08:	1085883a 	add	r2,r2,r2
   11d0c:	1085883a 	add	r2,r2,r2
   11d10:	100b883a 	mov	r5,r2
   11d14:	d1200217 	ldw	r4,-32760(gp)
   11d18:	d0a0c503 	ldbu	r2,-31980(gp)
   11d1c:	10803fcc 	andi	r2,r2,255
   11d20:	1085883a 	add	r2,r2,r2
   11d24:	1085883a 	add	r2,r2,r2
   11d28:	2085883a 	add	r2,r4,r2
   11d2c:	10800204 	addi	r2,r2,8
   11d30:	11000003 	ldbu	r4,0(r2)
   11d34:	00bfe004 	movi	r2,-128
   11d38:	2084b03a 	or	r2,r4,r2
   11d3c:	1009883a 	mov	r4,r2
   11d40:	1945883a 	add	r2,r3,r5
   11d44:	10800204 	addi	r2,r2,8
   11d48:	11000005 	stb	r4,0(r2)
 						spirez = alt_avalon_spi_command(FPGA_SPI0_BASE, LMS_Ctrl_Packet_Rx->Header.Periph_ID == 1 ? SPI_NR_LMS7002M_1 : SPI_NR_LMS7002M_0,
   11d4c:	d0a00217 	ldw	r2,-32760(gp)
   11d50:	108000c3 	ldbu	r2,3(r2)
   11d54:	10803fcc 	andi	r2,r2,255
   11d58:	10800060 	cmpeqi	r2,r2,1
   11d5c:	11003fcc 	andi	r4,r2,255
 								4, &LMS_Ctrl_Packet_Rx->Data_field[0 + (block * 4)], 0, NULL, 0);
   11d60:	d0e00217 	ldw	r3,-32760(gp)
   11d64:	d0a0c503 	ldbu	r2,-31980(gp)
   11d68:	10803fcc 	andi	r2,r2,255
   11d6c:	1085883a 	add	r2,r2,r2
   11d70:	1085883a 	add	r2,r2,r2
   11d74:	10800204 	addi	r2,r2,8
   11d78:	1885883a 	add	r2,r3,r2

 					for(block = 0; block < LMS_Ctrl_Packet_Rx->Header.Data_blocks; block++)
 					{
 						//Write LMS7 register
 						sbi(LMS_Ctrl_Packet_Rx->Data_field[0 + (block * 4)], 7); //set write bit
 						spirez = alt_avalon_spi_command(FPGA_SPI0_BASE, LMS_Ctrl_Packet_Rx->Header.Periph_ID == 1 ? SPI_NR_LMS7002M_1 : SPI_NR_LMS7002M_0,
   11d7c:	d8000215 	stw	zero,8(sp)
   11d80:	d8000115 	stw	zero,4(sp)
   11d84:	d8000015 	stw	zero,0(sp)
   11d88:	100f883a 	mov	r7,r2
   11d8c:	01800104 	movi	r6,4
   11d90:	200b883a 	mov	r5,r4
   11d94:	0101d004 	movi	r4,1856
   11d98:	00163ac0 	call	163ac <alt_avalon_spi_command>
   11d9c:	e0bfed15 	stw	r2,-76(fp)

 				case CMD_LMS7002_WR:
 					if(!Check_Periph_ID(MAX_ID_LMS7, LMS_Ctrl_Packet_Rx->Header.Periph_ID)) break;
 					if(Check_many_blocks (4)) break;

 					for(block = 0; block < LMS_Ctrl_Packet_Rx->Header.Data_blocks; block++)
   11da0:	d0a0c503 	ldbu	r2,-31980(gp)
   11da4:	10800044 	addi	r2,r2,1
   11da8:	d0a0c505 	stb	r2,-31980(gp)
   11dac:	d0a00217 	ldw	r2,-32760(gp)
   11db0:	10800083 	ldbu	r2,2(r2)
   11db4:	d0e0c503 	ldbu	r3,-31980(gp)
   11db8:	10803fcc 	andi	r2,r2,255
   11dbc:	18c03fcc 	andi	r3,r3,255
   11dc0:	18bfce36 	bltu	r3,r2,11cfc <_gp+0xffff2524>
 						sbi(LMS_Ctrl_Packet_Rx->Data_field[0 + (block * 4)], 7); //set write bit
 						spirez = alt_avalon_spi_command(FPGA_SPI0_BASE, LMS_Ctrl_Packet_Rx->Header.Periph_ID == 1 ? SPI_NR_LMS7002M_1 : SPI_NR_LMS7002M_0,
 								4, &LMS_Ctrl_Packet_Rx->Data_field[0 + (block * 4)], 0, NULL, 0);
 					}

 					LMS_Ctrl_Packet_Tx->Header.Status = STATUS_COMPLETED_CMD;
   11dc4:	d0a00117 	ldw	r2,-32764(gp)
   11dc8:	00c00044 	movi	r3,1
   11dcc:	10c00045 	stb	r3,1(r2)
 				break;
   11dd0:	00039806 	br	12c34 <main+0x19ec>


 				case CMD_LMS7002_RD:
 					if(Check_many_blocks (4)) break;
   11dd4:	01000104 	movi	r4,4
   11dd8:	001005c0 	call	1005c <Check_many_blocks>
   11ddc:	10803fcc 	andi	r2,r2,255
   11de0:	1003871e 	bne	r2,zero,12c00 <main+0x19b8>

 					for(block = 0; block < LMS_Ctrl_Packet_Rx->Header.Data_blocks; block++)
   11de4:	d020c505 	stb	zero,-31980(gp)
   11de8:	00003106 	br	11eb0 <main+0xc68>
 					{
 						//Read LMS7 register
 						cbi(LMS_Ctrl_Packet_Rx->Data_field[0 + (block * 2)], 7);  //clear write bit
   11dec:	d0e00217 	ldw	r3,-32760(gp)
   11df0:	d0a0c503 	ldbu	r2,-31980(gp)
   11df4:	10803fcc 	andi	r2,r2,255
   11df8:	1085883a 	add	r2,r2,r2
   11dfc:	100b883a 	mov	r5,r2
   11e00:	d1200217 	ldw	r4,-32760(gp)
   11e04:	d0a0c503 	ldbu	r2,-31980(gp)
   11e08:	10803fcc 	andi	r2,r2,255
   11e0c:	1085883a 	add	r2,r2,r2
   11e10:	2085883a 	add	r2,r4,r2
   11e14:	10800204 	addi	r2,r2,8
   11e18:	10800003 	ldbu	r2,0(r2)
   11e1c:	10801fcc 	andi	r2,r2,127
   11e20:	1009883a 	mov	r4,r2
   11e24:	1945883a 	add	r2,r3,r5
   11e28:	10800204 	addi	r2,r2,8
   11e2c:	11000005 	stb	r4,0(r2)
 						spirez = alt_avalon_spi_command(FPGA_SPI0_BASE, LMS_Ctrl_Packet_Rx->Header.Periph_ID == 1 ? SPI_NR_LMS7002M_1 : SPI_NR_LMS7002M_0,
   11e30:	d0a00217 	ldw	r2,-32760(gp)
   11e34:	108000c3 	ldbu	r2,3(r2)
   11e38:	10803fcc 	andi	r2,r2,255
   11e3c:	10800060 	cmpeqi	r2,r2,1
   11e40:	11003fcc 	andi	r4,r2,255
 								2, &LMS_Ctrl_Packet_Rx->Data_field[0 + (block * 2)], 2, &LMS_Ctrl_Packet_Tx->Data_field[2 + (block * 4)], 0);
   11e44:	d0e00217 	ldw	r3,-32760(gp)
   11e48:	d0a0c503 	ldbu	r2,-31980(gp)
   11e4c:	10803fcc 	andi	r2,r2,255
   11e50:	1085883a 	add	r2,r2,r2
   11e54:	10800204 	addi	r2,r2,8
   11e58:	188b883a 	add	r5,r3,r2
   11e5c:	d0e00117 	ldw	r3,-32764(gp)
   11e60:	d0a0c503 	ldbu	r2,-31980(gp)
   11e64:	10803fcc 	andi	r2,r2,255
   11e68:	1085883a 	add	r2,r2,r2
   11e6c:	1085883a 	add	r2,r2,r2
   11e70:	10800084 	addi	r2,r2,2
   11e74:	10800204 	addi	r2,r2,8
   11e78:	1885883a 	add	r2,r3,r2

 					for(block = 0; block < LMS_Ctrl_Packet_Rx->Header.Data_blocks; block++)
 					{
 						//Read LMS7 register
 						cbi(LMS_Ctrl_Packet_Rx->Data_field[0 + (block * 2)], 7);  //clear write bit
 						spirez = alt_avalon_spi_command(FPGA_SPI0_BASE, LMS_Ctrl_Packet_Rx->Header.Periph_ID == 1 ? SPI_NR_LMS7002M_1 : SPI_NR_LMS7002M_0,
   11e7c:	d8000215 	stw	zero,8(sp)
   11e80:	d8800115 	stw	r2,4(sp)
   11e84:	00800084 	movi	r2,2
   11e88:	d8800015 	stw	r2,0(sp)
   11e8c:	280f883a 	mov	r7,r5
   11e90:	01800084 	movi	r6,2
   11e94:	200b883a 	mov	r5,r4
   11e98:	0101d004 	movi	r4,1856
   11e9c:	00163ac0 	call	163ac <alt_avalon_spi_command>
   11ea0:	e0bfed15 	stw	r2,-76(fp)


 				case CMD_LMS7002_RD:
 					if(Check_many_blocks (4)) break;

 					for(block = 0; block < LMS_Ctrl_Packet_Rx->Header.Data_blocks; block++)
   11ea4:	d0a0c503 	ldbu	r2,-31980(gp)
   11ea8:	10800044 	addi	r2,r2,1
   11eac:	d0a0c505 	stb	r2,-31980(gp)
   11eb0:	d0a00217 	ldw	r2,-32760(gp)
   11eb4:	10800083 	ldbu	r2,2(r2)
   11eb8:	d0e0c503 	ldbu	r3,-31980(gp)
   11ebc:	10803fcc 	andi	r2,r2,255
   11ec0:	18c03fcc 	andi	r3,r3,255
   11ec4:	18bfc936 	bltu	r3,r2,11dec <_gp+0xffff2614>
 						cbi(LMS_Ctrl_Packet_Rx->Data_field[0 + (block * 2)], 7);  //clear write bit
 						spirez = alt_avalon_spi_command(FPGA_SPI0_BASE, LMS_Ctrl_Packet_Rx->Header.Periph_ID == 1 ? SPI_NR_LMS7002M_1 : SPI_NR_LMS7002M_0,
 								2, &LMS_Ctrl_Packet_Rx->Data_field[0 + (block * 2)], 2, &LMS_Ctrl_Packet_Tx->Data_field[2 + (block * 4)], 0);
 					}

 					LMS_Ctrl_Packet_Tx->Header.Status = STATUS_COMPLETED_CMD;
   11ec8:	d0a00117 	ldw	r2,-32764(gp)
   11ecc:	00c00044 	movi	r3,1
   11ed0:	10c00045 	stb	r3,1(r2)
 				break;
   11ed4:	00035706 	br	12c34 <main+0x19ec>


 	 			case CMD_BRDSPI16_WR:
 	 				if(Check_many_blocks (4)) break;
   11ed8:	01000104 	movi	r4,4
   11edc:	001005c0 	call	1005c <Check_many_blocks>
   11ee0:	10803fcc 	andi	r2,r2,255
   11ee4:	1003481e 	bne	r2,zero,12c08 <main+0x19c0>

 	 				for(block = 0; block < LMS_Ctrl_Packet_Rx->Header.Data_blocks; block++)
   11ee8:	d020c505 	stb	zero,-31980(gp)
   11eec:	00002706 	br	11f8c <main+0xd44>
 	 				{
 	 					//write reg addr
 	 					sbi(LMS_Ctrl_Packet_Rx->Data_field[0 + (block * 4)], 7); //set write bit
   11ef0:	d0e00217 	ldw	r3,-32760(gp)
   11ef4:	d0a0c503 	ldbu	r2,-31980(gp)
   11ef8:	10803fcc 	andi	r2,r2,255
   11efc:	1085883a 	add	r2,r2,r2
   11f00:	1085883a 	add	r2,r2,r2
   11f04:	100b883a 	mov	r5,r2
   11f08:	d1200217 	ldw	r4,-32760(gp)
   11f0c:	d0a0c503 	ldbu	r2,-31980(gp)
   11f10:	10803fcc 	andi	r2,r2,255
   11f14:	1085883a 	add	r2,r2,r2
   11f18:	1085883a 	add	r2,r2,r2
   11f1c:	2085883a 	add	r2,r4,r2
   11f20:	10800204 	addi	r2,r2,8
   11f24:	11000003 	ldbu	r4,0(r2)
   11f28:	00bfe004 	movi	r2,-128
   11f2c:	2084b03a 	or	r2,r4,r2
   11f30:	1009883a 	mov	r4,r2
   11f34:	1945883a 	add	r2,r3,r5
   11f38:	10800204 	addi	r2,r2,8
   11f3c:	11000005 	stb	r4,0(r2)

 	 					spirez = alt_avalon_spi_command(FPGA_SPI0_BASE, SPI_NR_FPGA, 4, &LMS_Ctrl_Packet_Rx->Data_field[0 + (block * 4)], 0, NULL, 0);
   11f40:	d0e00217 	ldw	r3,-32760(gp)
   11f44:	d0a0c503 	ldbu	r2,-31980(gp)
   11f48:	10803fcc 	andi	r2,r2,255
   11f4c:	1085883a 	add	r2,r2,r2
   11f50:	1085883a 	add	r2,r2,r2
   11f54:	10800204 	addi	r2,r2,8
   11f58:	1885883a 	add	r2,r3,r2
   11f5c:	d8000215 	stw	zero,8(sp)
   11f60:	d8000115 	stw	zero,4(sp)
   11f64:	d8000015 	stw	zero,0(sp)
   11f68:	100f883a 	mov	r7,r2
   11f6c:	01800104 	movi	r6,4
   11f70:	01400184 	movi	r5,6
   11f74:	0101d004 	movi	r4,1856
   11f78:	00163ac0 	call	163ac <alt_avalon_spi_command>
   11f7c:	e0bfed15 	stw	r2,-76(fp)


 	 			case CMD_BRDSPI16_WR:
 	 				if(Check_many_blocks (4)) break;

 	 				for(block = 0; block < LMS_Ctrl_Packet_Rx->Header.Data_blocks; block++)
   11f80:	d0a0c503 	ldbu	r2,-31980(gp)
   11f84:	10800044 	addi	r2,r2,1
   11f88:	d0a0c505 	stb	r2,-31980(gp)
   11f8c:	d0a00217 	ldw	r2,-32760(gp)
   11f90:	10800083 	ldbu	r2,2(r2)
   11f94:	d0e0c503 	ldbu	r3,-31980(gp)
   11f98:	10803fcc 	andi	r2,r2,255
   11f9c:	18c03fcc 	andi	r3,r3,255
   11fa0:	18bfd336 	bltu	r3,r2,11ef0 <_gp+0xffff2718>
 	 					sbi(LMS_Ctrl_Packet_Rx->Data_field[0 + (block * 4)], 7); //set write bit

 	 					spirez = alt_avalon_spi_command(FPGA_SPI0_BASE, SPI_NR_FPGA, 4, &LMS_Ctrl_Packet_Rx->Data_field[0 + (block * 4)], 0, NULL, 0);
 	 				}

 	 				LMS_Ctrl_Packet_Tx->Header.Status = STATUS_COMPLETED_CMD;
   11fa4:	d0a00117 	ldw	r2,-32764(gp)
   11fa8:	00c00044 	movi	r3,1
   11fac:	10c00045 	stb	r3,1(r2)
 	 			break;
   11fb0:	00032006 	br	12c34 <main+0x19ec>


 				case CMD_BRDSPI16_RD:
 					if(Check_many_blocks (4)) break;
   11fb4:	01000104 	movi	r4,4
   11fb8:	001005c0 	call	1005c <Check_many_blocks>
   11fbc:	10803fcc 	andi	r2,r2,255
   11fc0:	1003131e 	bne	r2,zero,12c10 <main+0x19c8>

 					for(block = 0; block < LMS_Ctrl_Packet_Rx->Header.Data_blocks; block++)
   11fc4:	d020c505 	stb	zero,-31980(gp)
   11fc8:	00002c06 	br	1207c <main+0xe34>
 					{

 						//write reg addr
 						cbi(LMS_Ctrl_Packet_Rx->Data_field[0 + (block * 2)], 7);  //clear write bit
   11fcc:	d0e00217 	ldw	r3,-32760(gp)
   11fd0:	d0a0c503 	ldbu	r2,-31980(gp)
   11fd4:	10803fcc 	andi	r2,r2,255
   11fd8:	1085883a 	add	r2,r2,r2
   11fdc:	100b883a 	mov	r5,r2
   11fe0:	d1200217 	ldw	r4,-32760(gp)
   11fe4:	d0a0c503 	ldbu	r2,-31980(gp)
   11fe8:	10803fcc 	andi	r2,r2,255
   11fec:	1085883a 	add	r2,r2,r2
   11ff0:	2085883a 	add	r2,r4,r2
   11ff4:	10800204 	addi	r2,r2,8
   11ff8:	10800003 	ldbu	r2,0(r2)
   11ffc:	10801fcc 	andi	r2,r2,127
   12000:	1009883a 	mov	r4,r2
   12004:	1945883a 	add	r2,r3,r5
   12008:	10800204 	addi	r2,r2,8
   1200c:	11000005 	stb	r4,0(r2)

 						spirez = alt_avalon_spi_command(FPGA_SPI0_BASE, SPI_NR_FPGA, 2, &LMS_Ctrl_Packet_Rx->Data_field[0 + (block * 2)], 2, &LMS_Ctrl_Packet_Tx->Data_field[2 + (block * 4)], 0);
   12010:	d0e00217 	ldw	r3,-32760(gp)
   12014:	d0a0c503 	ldbu	r2,-31980(gp)
   12018:	10803fcc 	andi	r2,r2,255
   1201c:	1085883a 	add	r2,r2,r2
   12020:	10800204 	addi	r2,r2,8
   12024:	1889883a 	add	r4,r3,r2
   12028:	d0e00117 	ldw	r3,-32764(gp)
   1202c:	d0a0c503 	ldbu	r2,-31980(gp)
   12030:	10803fcc 	andi	r2,r2,255
   12034:	1085883a 	add	r2,r2,r2
   12038:	1085883a 	add	r2,r2,r2
   1203c:	10800084 	addi	r2,r2,2
   12040:	10800204 	addi	r2,r2,8
   12044:	1885883a 	add	r2,r3,r2
   12048:	d8000215 	stw	zero,8(sp)
   1204c:	d8800115 	stw	r2,4(sp)
   12050:	00800084 	movi	r2,2
   12054:	d8800015 	stw	r2,0(sp)
   12058:	200f883a 	mov	r7,r4
   1205c:	01800084 	movi	r6,2
   12060:	01400184 	movi	r5,6
   12064:	0101d004 	movi	r4,1856
   12068:	00163ac0 	call	163ac <alt_avalon_spi_command>
   1206c:	e0bfed15 	stw	r2,-76(fp)


 				case CMD_BRDSPI16_RD:
 					if(Check_many_blocks (4)) break;

 					for(block = 0; block < LMS_Ctrl_Packet_Rx->Header.Data_blocks; block++)
   12070:	d0a0c503 	ldbu	r2,-31980(gp)
   12074:	10800044 	addi	r2,r2,1
   12078:	d0a0c505 	stb	r2,-31980(gp)
   1207c:	d0a00217 	ldw	r2,-32760(gp)
   12080:	10800083 	ldbu	r2,2(r2)
   12084:	d0e0c503 	ldbu	r3,-31980(gp)
   12088:	10803fcc 	andi	r2,r2,255
   1208c:	18c03fcc 	andi	r3,r3,255
   12090:	18bfce36 	bltu	r3,r2,11fcc <_gp+0xffff27f4>
 						cbi(LMS_Ctrl_Packet_Rx->Data_field[0 + (block * 2)], 7);  //clear write bit

 						spirez = alt_avalon_spi_command(FPGA_SPI0_BASE, SPI_NR_FPGA, 2, &LMS_Ctrl_Packet_Rx->Data_field[0 + (block * 2)], 2, &LMS_Ctrl_Packet_Tx->Data_field[2 + (block * 4)], 0);
 					}

 					LMS_Ctrl_Packet_Tx->Header.Status = STATUS_COMPLETED_CMD;
   12094:	d0a00117 	ldw	r2,-32764(gp)
   12098:	00c00044 	movi	r3,1
   1209c:	10c00045 	stb	r3,1(r2)
 				break;
   120a0:	0002e406 	br	12c34 <main+0x19ec>


 				case CMD_ADF4002_WR:
 					if(Check_many_blocks (3)) break;
   120a4:	010000c4 	movi	r4,3
   120a8:	001005c0 	call	1005c <Check_many_blocks>
   120ac:	10803fcc 	andi	r2,r2,255
   120b0:	1002d91e 	bne	r2,zero,12c18 <main+0x19d0>

 					Control_TCXO_DAC (0, NULL); //set DAC out to three-state
   120b4:	000b883a 	mov	r5,zero
   120b8:	0009883a 	mov	r4,zero
   120bc:	00107300 	call	10730 <Control_TCXO_DAC>

 					for(block = 0; block < LMS_Ctrl_Packet_Rx->Header.Data_blocks; block++)
   120c0:	d020c505 	stb	zero,-31980(gp)
   120c4:	00000e06 	br	12100 <main+0xeb8>
 					{
 						Control_TCXO_ADF (1, &LMS_Ctrl_Packet_Rx->Data_field[0 + (block*3)]); //write data to ADF
   120c8:	d1200217 	ldw	r4,-32760(gp)
   120cc:	d0a0c503 	ldbu	r2,-31980(gp)
   120d0:	10c03fcc 	andi	r3,r2,255
   120d4:	1805883a 	mov	r2,r3
   120d8:	1085883a 	add	r2,r2,r2
   120dc:	10c5883a 	add	r2,r2,r3
   120e0:	10800204 	addi	r2,r2,8
   120e4:	2085883a 	add	r2,r4,r2
   120e8:	100b883a 	mov	r5,r2
   120ec:	01000044 	movi	r4,1
   120f0:	00108000 	call	10800 <Control_TCXO_ADF>
 				case CMD_ADF4002_WR:
 					if(Check_many_blocks (3)) break;

 					Control_TCXO_DAC (0, NULL); //set DAC out to three-state

 					for(block = 0; block < LMS_Ctrl_Packet_Rx->Header.Data_blocks; block++)
   120f4:	d0a0c503 	ldbu	r2,-31980(gp)
   120f8:	10800044 	addi	r2,r2,1
   120fc:	d0a0c505 	stb	r2,-31980(gp)
   12100:	d0a00217 	ldw	r2,-32760(gp)
   12104:	10800083 	ldbu	r2,2(r2)
   12108:	d0e0c503 	ldbu	r3,-31980(gp)
   1210c:	10803fcc 	andi	r2,r2,255
   12110:	18c03fcc 	andi	r3,r3,255
   12114:	18bfec36 	bltu	r3,r2,120c8 <_gp+0xffff28f0>
 					{
 						Control_TCXO_ADF (1, &LMS_Ctrl_Packet_Rx->Data_field[0 + (block*3)]); //write data to ADF
 					}

 					if(cmd_errors) LMS_Ctrl_Packet_Tx->Header.Status = STATUS_INVALID_PERIPH_ID_CMD;
   12118:	d0a0c583 	ldbu	r2,-31978(gp)
   1211c:	10803fcc 	andi	r2,r2,255
   12120:	10000426 	beq	r2,zero,12134 <main+0xeec>
   12124:	d0a00117 	ldw	r2,-32764(gp)
   12128:	00c00204 	movi	r3,8
   1212c:	10c00045 	stb	r3,1(r2)
 					else LMS_Ctrl_Packet_Tx->Header.Status = STATUS_COMPLETED_CMD;
 				break;
   12130:	0002c006 	br	12c34 <main+0x19ec>
 					{
 						Control_TCXO_ADF (1, &LMS_Ctrl_Packet_Rx->Data_field[0 + (block*3)]); //write data to ADF
 					}

 					if(cmd_errors) LMS_Ctrl_Packet_Tx->Header.Status = STATUS_INVALID_PERIPH_ID_CMD;
 					else LMS_Ctrl_Packet_Tx->Header.Status = STATUS_COMPLETED_CMD;
   12134:	d0a00117 	ldw	r2,-32764(gp)
   12138:	00c00044 	movi	r3,1
   1213c:	10c00045 	stb	r3,1(r2)
 				break;
   12140:	0002bc06 	br	12c34 <main+0x19ec>


				case CMD_ANALOG_VAL_RD:

					for(block = 0; block < LMS_Ctrl_Packet_Rx->Header.Data_blocks; block++)
   12144:	d020c505 	stb	zero,-31980(gp)
   12148:	00010406 	br	1255c <main+0x1314>
					{
						switch (LMS_Ctrl_Packet_Rx->Data_field[0 + (block)])//ch
   1214c:	d0e00217 	ldw	r3,-32760(gp)
   12150:	d0a0c503 	ldbu	r2,-31980(gp)
   12154:	10803fcc 	andi	r2,r2,255
   12158:	1885883a 	add	r2,r3,r2
   1215c:	10800204 	addi	r2,r2,8
   12160:	10800003 	ldbu	r2,0(r2)
   12164:	10803fcc 	andi	r2,r2,255
   12168:	10c00060 	cmpeqi	r3,r2,1
   1216c:	1800381e 	bne	r3,zero,12250 <main+0x1008>
   12170:	10c00088 	cmpgei	r3,r2,2
   12174:	1800021e 	bne	r3,zero,12180 <main+0xf38>
   12178:	10000626 	beq	r2,zero,12194 <main+0xf4c>
   1217c:	0000f006 	br	12540 <main+0x12f8>
   12180:	10c000a0 	cmpeqi	r3,r2,2
   12184:	1800901e 	bne	r3,zero,123c8 <main+0x1180>
   12188:	108000e0 	cmpeqi	r2,r2,3
   1218c:	1000bd1e 	bne	r2,zero,12484 <main+0x123c>
   12190:	0000eb06 	br	12540 <main+0x12f8>
						{
							case 0://dac val

								LMS_Ctrl_Packet_Tx->Data_field[0 + (block * 4)] = LMS_Ctrl_Packet_Rx->Data_field[block]; //ch
   12194:	d1200117 	ldw	r4,-32764(gp)
   12198:	d0a0c503 	ldbu	r2,-31980(gp)
   1219c:	10803fcc 	andi	r2,r2,255
   121a0:	1085883a 	add	r2,r2,r2
   121a4:	1085883a 	add	r2,r2,r2
   121a8:	100b883a 	mov	r5,r2
   121ac:	d0e00217 	ldw	r3,-32760(gp)
   121b0:	d0a0c503 	ldbu	r2,-31980(gp)
   121b4:	10803fcc 	andi	r2,r2,255
   121b8:	1885883a 	add	r2,r3,r2
   121bc:	10800204 	addi	r2,r2,8
   121c0:	10c00003 	ldbu	r3,0(r2)
   121c4:	2145883a 	add	r2,r4,r5
   121c8:	10800204 	addi	r2,r2,8
   121cc:	10c00005 	stb	r3,0(r2)
								LMS_Ctrl_Packet_Tx->Data_field[1 + (block * 4)] = 0x00; //RAW //unit, power
   121d0:	d0e00117 	ldw	r3,-32764(gp)
   121d4:	d0a0c503 	ldbu	r2,-31980(gp)
   121d8:	10803fcc 	andi	r2,r2,255
   121dc:	1085883a 	add	r2,r2,r2
   121e0:	1085883a 	add	r2,r2,r2
   121e4:	10800044 	addi	r2,r2,1
   121e8:	1885883a 	add	r2,r3,r2
   121ec:	10800204 	addi	r2,r2,8
   121f0:	10000005 	stb	zero,0(r2)

								//LMS_Ctrl_Packet_Tx->Data_field[2 + (block * 4)] = 0; //signed val, MSB byte
								//LMS_Ctrl_Packet_Tx->Data_field[3 + (block * 4)] = dac_val; //signed val, LSB byte
								LMS_Ctrl_Packet_Tx->Data_field[2 + (block * 4)] = (dac_val >> 8) & 0xFF; //unsigned val, MSB byte
   121f4:	d0e00117 	ldw	r3,-32764(gp)
   121f8:	d0a0c503 	ldbu	r2,-31980(gp)
   121fc:	10803fcc 	andi	r2,r2,255
   12200:	1085883a 	add	r2,r2,r2
   12204:	1085883a 	add	r2,r2,r2
   12208:	10800084 	addi	r2,r2,2
   1220c:	d120000b 	ldhu	r4,-32768(gp)
   12210:	213fffcc 	andi	r4,r4,65535
   12214:	2008d23a 	srli	r4,r4,8
   12218:	1885883a 	add	r2,r3,r2
   1221c:	10800204 	addi	r2,r2,8
   12220:	11000005 	stb	r4,0(r2)
								LMS_Ctrl_Packet_Tx->Data_field[3 + (block * 4)] = dac_val & 0xFF; //unsigned val, LSB byte
   12224:	d0e00117 	ldw	r3,-32764(gp)
   12228:	d0a0c503 	ldbu	r2,-31980(gp)
   1222c:	10803fcc 	andi	r2,r2,255
   12230:	1085883a 	add	r2,r2,r2
   12234:	1085883a 	add	r2,r2,r2
   12238:	108000c4 	addi	r2,r2,3
   1223c:	d120000b 	ldhu	r4,-32768(gp)
   12240:	1885883a 	add	r2,r3,r2
   12244:	10800204 	addi	r2,r2,8
   12248:	11000005 	stb	r4,0(r2)

							break;
   1224c:	0000c006 	br	12550 <main+0x1308>

							case 1: //temperature

								spirez = I2C_start(I2C_OPENCORES_0_BASE, LM75_I2C_ADDR, 0);
   12250:	000d883a 	mov	r6,zero
   12254:	01401204 	movi	r5,72
   12258:	0101d804 	movi	r4,1888
   1225c:	00166600 	call	16660 <I2C_start>
   12260:	e0bfed15 	stw	r2,-76(fp)
								spirez = I2C_write(I2C_OPENCORES_0_BASE, 0x00, 1);				// Pointer = temperature register
   12264:	01800044 	movi	r6,1
   12268:	000b883a 	mov	r5,zero
   1226c:	0101d804 	movi	r4,1888
   12270:	00167b40 	call	167b4 <I2C_write>
   12274:	e0bfed15 	stw	r2,-76(fp)
								spirez = I2C_start(I2C_OPENCORES_0_BASE, LM75_I2C_ADDR, 1);
   12278:	01800044 	movi	r6,1
   1227c:	01401204 	movi	r5,72
   12280:	0101d804 	movi	r4,1888
   12284:	00166600 	call	16660 <I2C_start>
   12288:	e0bfed15 	stw	r2,-76(fp)

								// Read temperature and recalculate
								converted_val = (signed short int)I2C_read(I2C_OPENCORES_0_BASE, 0);
   1228c:	000b883a 	mov	r5,zero
   12290:	0101d804 	movi	r4,1888
   12294:	00167200 	call	16720 <I2C_read>
   12298:	d0a0008d 	sth	r2,-32766(gp)
								converted_val = converted_val << 8;
   1229c:	d0a0008b 	ldhu	r2,-32766(gp)
   122a0:	10bfffcc 	andi	r2,r2,65535
   122a4:	10a0001c 	xori	r2,r2,32768
   122a8:	10a00004 	addi	r2,r2,-32768
   122ac:	1004923a 	slli	r2,r2,8
   122b0:	d0a0008d 	sth	r2,-32766(gp)
								converted_val = 10 * (converted_val >> 8);
   122b4:	d0a0008b 	ldhu	r2,-32766(gp)
   122b8:	10bfffcc 	andi	r2,r2,65535
   122bc:	10a0001c 	xori	r2,r2,32768
   122c0:	10a00004 	addi	r2,r2,-32768
   122c4:	1005d23a 	srai	r2,r2,8
   122c8:	01400284 	movi	r5,10
   122cc:	1009883a 	mov	r4,r2
   122d0:	001373c0 	call	1373c <__mulsi3>
   122d4:	d0a0008d 	sth	r2,-32766(gp)
								spirez = I2C_read(I2C_OPENCORES_0_BASE, 1);
   122d8:	01400044 	movi	r5,1
   122dc:	0101d804 	movi	r4,1888
   122e0:	00167200 	call	16720 <I2C_read>
   122e4:	e0bfed15 	stw	r2,-76(fp)
								if(spirez & 0x80) converted_val = converted_val + 5;
   122e8:	e0bfed17 	ldw	r2,-76(fp)
   122ec:	1080200c 	andi	r2,r2,128
   122f0:	10000326 	beq	r2,zero,12300 <main+0x10b8>
   122f4:	d0a0008b 	ldhu	r2,-32766(gp)
   122f8:	10800144 	addi	r2,r2,5
   122fc:	d0a0008d 	sth	r2,-32766(gp)

								LMS_Ctrl_Packet_Tx->Data_field[0 + (block * 4)] = LMS_Ctrl_Packet_Rx->Data_field[block]; //ch
   12300:	d1200117 	ldw	r4,-32764(gp)
   12304:	d0a0c503 	ldbu	r2,-31980(gp)
   12308:	10803fcc 	andi	r2,r2,255
   1230c:	1085883a 	add	r2,r2,r2
   12310:	1085883a 	add	r2,r2,r2
   12314:	100b883a 	mov	r5,r2
   12318:	d0e00217 	ldw	r3,-32760(gp)
   1231c:	d0a0c503 	ldbu	r2,-31980(gp)
   12320:	10803fcc 	andi	r2,r2,255
   12324:	1885883a 	add	r2,r3,r2
   12328:	10800204 	addi	r2,r2,8
   1232c:	10c00003 	ldbu	r3,0(r2)
   12330:	2145883a 	add	r2,r4,r5
   12334:	10800204 	addi	r2,r2,8
   12338:	10c00005 	stb	r3,0(r2)
								LMS_Ctrl_Packet_Tx->Data_field[1 + (block * 4)] = 0x50; //mC //unit, power
   1233c:	d0e00117 	ldw	r3,-32764(gp)
   12340:	d0a0c503 	ldbu	r2,-31980(gp)
   12344:	10803fcc 	andi	r2,r2,255
   12348:	1085883a 	add	r2,r2,r2
   1234c:	1085883a 	add	r2,r2,r2
   12350:	10800044 	addi	r2,r2,1
   12354:	1885883a 	add	r2,r3,r2
   12358:	10800204 	addi	r2,r2,8
   1235c:	00c01404 	movi	r3,80
   12360:	10c00005 	stb	r3,0(r2)

								LMS_Ctrl_Packet_Tx->Data_field[2 + (block * 4)] = (converted_val >> 8); //signed val, MSB byte
   12364:	d0e00117 	ldw	r3,-32764(gp)
   12368:	d0a0c503 	ldbu	r2,-31980(gp)
   1236c:	10803fcc 	andi	r2,r2,255
   12370:	1085883a 	add	r2,r2,r2
   12374:	1085883a 	add	r2,r2,r2
   12378:	10800084 	addi	r2,r2,2
   1237c:	d120008b 	ldhu	r4,-32766(gp)
   12380:	213fffcc 	andi	r4,r4,65535
   12384:	2120001c 	xori	r4,r4,32768
   12388:	21200004 	addi	r4,r4,-32768
   1238c:	2009d23a 	srai	r4,r4,8
   12390:	1885883a 	add	r2,r3,r2
   12394:	10800204 	addi	r2,r2,8
   12398:	11000005 	stb	r4,0(r2)
								LMS_Ctrl_Packet_Tx->Data_field[3 + (block * 4)] = converted_val; //signed val, LSB byte
   1239c:	d0e00117 	ldw	r3,-32764(gp)
   123a0:	d0a0c503 	ldbu	r2,-31980(gp)
   123a4:	10803fcc 	andi	r2,r2,255
   123a8:	1085883a 	add	r2,r2,r2
   123ac:	1085883a 	add	r2,r2,r2
   123b0:	108000c4 	addi	r2,r2,3
   123b4:	d120008b 	ldhu	r4,-32766(gp)
   123b8:	1885883a 	add	r2,r3,r2
   123bc:	10800204 	addi	r2,r2,8
   123c0:	11000005 	stb	r4,0(r2)

							break;
   123c4:	00006206 	br	12550 <main+0x1308>

							case 2://wiper 0 position
								LMS_Ctrl_Packet_Tx->Data_field[0 + (block * 4)] = LMS_Ctrl_Packet_Rx->Data_field[block]; //ch
   123c8:	d1200117 	ldw	r4,-32764(gp)
   123cc:	d0a0c503 	ldbu	r2,-31980(gp)
   123d0:	10803fcc 	andi	r2,r2,255
   123d4:	1085883a 	add	r2,r2,r2
   123d8:	1085883a 	add	r2,r2,r2
   123dc:	100b883a 	mov	r5,r2
   123e0:	d0e00217 	ldw	r3,-32760(gp)
   123e4:	d0a0c503 	ldbu	r2,-31980(gp)
   123e8:	10803fcc 	andi	r2,r2,255
   123ec:	1885883a 	add	r2,r3,r2
   123f0:	10800204 	addi	r2,r2,8
   123f4:	10c00003 	ldbu	r3,0(r2)
   123f8:	2145883a 	add	r2,r4,r5
   123fc:	10800204 	addi	r2,r2,8
   12400:	10c00005 	stb	r3,0(r2)
								LMS_Ctrl_Packet_Tx->Data_field[1 + (block * 4)] = 0x00; //RAW //unit, power
   12404:	d0e00117 	ldw	r3,-32764(gp)
   12408:	d0a0c503 	ldbu	r2,-31980(gp)
   1240c:	10803fcc 	andi	r2,r2,255
   12410:	1085883a 	add	r2,r2,r2
   12414:	1085883a 	add	r2,r2,r2
   12418:	10800044 	addi	r2,r2,1
   1241c:	1885883a 	add	r2,r3,r2
   12420:	10800204 	addi	r2,r2,8
   12424:	10000005 	stb	zero,0(r2)

								LMS_Ctrl_Packet_Tx->Data_field[2 + (block * 4)] = (wiper_pos[0] >> 8) & 0xFF; //signed val, MSB byte
   12428:	d0e00117 	ldw	r3,-32764(gp)
   1242c:	d0a0c503 	ldbu	r2,-31980(gp)
   12430:	10803fcc 	andi	r2,r2,255
   12434:	1085883a 	add	r2,r2,r2
   12438:	1085883a 	add	r2,r2,r2
   1243c:	10800084 	addi	r2,r2,2
   12440:	e13fef8b 	ldhu	r4,-66(fp)
   12444:	213fffcc 	andi	r4,r4,65535
   12448:	2008d23a 	srli	r4,r4,8
   1244c:	1885883a 	add	r2,r3,r2
   12450:	10800204 	addi	r2,r2,8
   12454:	11000005 	stb	r4,0(r2)
								LMS_Ctrl_Packet_Tx->Data_field[3 + (block * 4)] = wiper_pos[0] & 0xFF; //signed val, LSB byte
   12458:	d0e00117 	ldw	r3,-32764(gp)
   1245c:	d0a0c503 	ldbu	r2,-31980(gp)
   12460:	10803fcc 	andi	r2,r2,255
   12464:	1085883a 	add	r2,r2,r2
   12468:	1085883a 	add	r2,r2,r2
   1246c:	108000c4 	addi	r2,r2,3
   12470:	e13fef8b 	ldhu	r4,-66(fp)
   12474:	1885883a 	add	r2,r3,r2
   12478:	10800204 	addi	r2,r2,8
   1247c:	11000005 	stb	r4,0(r2)
							break;
   12480:	00003306 	br	12550 <main+0x1308>

							case 3://wiper 1 position
								LMS_Ctrl_Packet_Tx->Data_field[0 + (block * 4)] = LMS_Ctrl_Packet_Rx->Data_field[block]; //ch
   12484:	d1200117 	ldw	r4,-32764(gp)
   12488:	d0a0c503 	ldbu	r2,-31980(gp)
   1248c:	10803fcc 	andi	r2,r2,255
   12490:	1085883a 	add	r2,r2,r2
   12494:	1085883a 	add	r2,r2,r2
   12498:	100b883a 	mov	r5,r2
   1249c:	d0e00217 	ldw	r3,-32760(gp)
   124a0:	d0a0c503 	ldbu	r2,-31980(gp)
   124a4:	10803fcc 	andi	r2,r2,255
   124a8:	1885883a 	add	r2,r3,r2
   124ac:	10800204 	addi	r2,r2,8
   124b0:	10c00003 	ldbu	r3,0(r2)
   124b4:	2145883a 	add	r2,r4,r5
   124b8:	10800204 	addi	r2,r2,8
   124bc:	10c00005 	stb	r3,0(r2)
								LMS_Ctrl_Packet_Tx->Data_field[1 + (block * 4)] = 0x00; //RAW //unit, power
   124c0:	d0e00117 	ldw	r3,-32764(gp)
   124c4:	d0a0c503 	ldbu	r2,-31980(gp)
   124c8:	10803fcc 	andi	r2,r2,255
   124cc:	1085883a 	add	r2,r2,r2
   124d0:	1085883a 	add	r2,r2,r2
   124d4:	10800044 	addi	r2,r2,1
   124d8:	1885883a 	add	r2,r3,r2
   124dc:	10800204 	addi	r2,r2,8
   124e0:	10000005 	stb	zero,0(r2)

								LMS_Ctrl_Packet_Tx->Data_field[2 + (block * 4)] = (wiper_pos[1] >> 8) & 0xFF; //signed val, MSB byte
   124e4:	d0e00117 	ldw	r3,-32764(gp)
   124e8:	d0a0c503 	ldbu	r2,-31980(gp)
   124ec:	10803fcc 	andi	r2,r2,255
   124f0:	1085883a 	add	r2,r2,r2
   124f4:	1085883a 	add	r2,r2,r2
   124f8:	10800084 	addi	r2,r2,2
   124fc:	e13ff00b 	ldhu	r4,-64(fp)
   12500:	213fffcc 	andi	r4,r4,65535
   12504:	2008d23a 	srli	r4,r4,8
   12508:	1885883a 	add	r2,r3,r2
   1250c:	10800204 	addi	r2,r2,8
   12510:	11000005 	stb	r4,0(r2)
								LMS_Ctrl_Packet_Tx->Data_field[3 + (block * 4)] = wiper_pos[1] & 0xFF; //signed val, LSB byte
   12514:	d0e00117 	ldw	r3,-32764(gp)
   12518:	d0a0c503 	ldbu	r2,-31980(gp)
   1251c:	10803fcc 	andi	r2,r2,255
   12520:	1085883a 	add	r2,r2,r2
   12524:	1085883a 	add	r2,r2,r2
   12528:	108000c4 	addi	r2,r2,3
   1252c:	e13ff00b 	ldhu	r4,-64(fp)
   12530:	1885883a 	add	r2,r3,r2
   12534:	10800204 	addi	r2,r2,8
   12538:	11000005 	stb	r4,0(r2)
							break;
   1253c:	00000406 	br	12550 <main+0x1308>

							default:
								cmd_errors++;
   12540:	d0a0c583 	ldbu	r2,-31978(gp)
   12544:	10800044 	addi	r2,r2,1
   12548:	d0a0c585 	stb	r2,-31978(gp)
							break;
   1254c:	0001883a 	nop
 				break;


				case CMD_ANALOG_VAL_RD:

					for(block = 0; block < LMS_Ctrl_Packet_Rx->Header.Data_blocks; block++)
   12550:	d0a0c503 	ldbu	r2,-31980(gp)
   12554:	10800044 	addi	r2,r2,1
   12558:	d0a0c505 	stb	r2,-31980(gp)
   1255c:	d0a00217 	ldw	r2,-32760(gp)
   12560:	10800083 	ldbu	r2,2(r2)
   12564:	d0e0c503 	ldbu	r3,-31980(gp)
   12568:	10803fcc 	andi	r2,r2,255
   1256c:	18c03fcc 	andi	r3,r3,255
   12570:	18bef636 	bltu	r3,r2,1214c <_gp+0xffff2974>
								cmd_errors++;
							break;
						}
					}

					LMS_Ctrl_Packet_Tx->Header.Status = STATUS_COMPLETED_CMD;
   12574:	d0a00117 	ldw	r2,-32764(gp)
   12578:	00c00044 	movi	r3,1
   1257c:	10c00045 	stb	r3,1(r2)

				break;
   12580:	0001ac06 	br	12c34 <main+0x19ec>


				case CMD_ANALOG_VAL_WR:
					if(Check_many_blocks (4)) break;
   12584:	01000104 	movi	r4,4
   12588:	001005c0 	call	1005c <Check_many_blocks>
   1258c:	10803fcc 	andi	r2,r2,255
   12590:	1001a31e 	bne	r2,zero,12c20 <main+0x19d8>

					for(block = 0; block < LMS_Ctrl_Packet_Rx->Header.Data_blocks; block++)
   12594:	d020c505 	stb	zero,-31980(gp)
   12598:	0000e806 	br	1293c <main+0x16f4>
					{
						switch (LMS_Ctrl_Packet_Rx->Data_field[0 + (block * 4)]) //do something according to channel
   1259c:	d0e00217 	ldw	r3,-32760(gp)
   125a0:	d0a0c503 	ldbu	r2,-31980(gp)
   125a4:	10803fcc 	andi	r2,r2,255
   125a8:	1085883a 	add	r2,r2,r2
   125ac:	1085883a 	add	r2,r2,r2
   125b0:	1885883a 	add	r2,r3,r2
   125b4:	10800204 	addi	r2,r2,8
   125b8:	10800003 	ldbu	r2,0(r2)
   125bc:	10803fcc 	andi	r2,r2,255
   125c0:	10c000a0 	cmpeqi	r3,r2,2
   125c4:	1800311e 	bne	r3,zero,1268c <main+0x1444>
   125c8:	10c000e0 	cmpeqi	r3,r2,3
   125cc:	1800811e 	bne	r3,zero,127d4 <main+0x158c>
   125d0:	1000d31e 	bne	r2,zero,12920 <main+0x16d8>
						{
							case 0: //TCXO DAC
								if (LMS_Ctrl_Packet_Rx->Data_field[1 + (block * 4)] == 0) //RAW units?
   125d4:	d0e00217 	ldw	r3,-32760(gp)
   125d8:	d0a0c503 	ldbu	r2,-31980(gp)
   125dc:	10803fcc 	andi	r2,r2,255
   125e0:	1085883a 	add	r2,r2,r2
   125e4:	1085883a 	add	r2,r2,r2
   125e8:	10800044 	addi	r2,r2,1
   125ec:	1885883a 	add	r2,r3,r2
   125f0:	10800204 	addi	r2,r2,8
   125f4:	10800003 	ldbu	r2,0(r2)
   125f8:	10803fcc 	andi	r2,r2,255
   125fc:	10001f1e 	bne	r2,zero,1267c <main+0x1434>
								{
									Control_TCXO_ADF(0, NULL); //set ADF4002 CP to three-state
   12600:	000b883a 	mov	r5,zero
   12604:	0009883a 	mov	r4,zero
   12608:	00108000 	call	10800 <Control_TCXO_ADF>

									//write data to DAC
									//dac_val = LMS_Ctrl_Packet_Rx->Data_field[3 + (block * 4)];
									dac_val = (LMS_Ctrl_Packet_Rx->Data_field[2 + (block * 4)] << 8 ) + LMS_Ctrl_Packet_Rx->Data_field[3 + (block * 4)];
   1260c:	d0e00217 	ldw	r3,-32760(gp)
   12610:	d0a0c503 	ldbu	r2,-31980(gp)
   12614:	10803fcc 	andi	r2,r2,255
   12618:	1085883a 	add	r2,r2,r2
   1261c:	1085883a 	add	r2,r2,r2
   12620:	10800084 	addi	r2,r2,2
   12624:	1885883a 	add	r2,r3,r2
   12628:	10800204 	addi	r2,r2,8
   1262c:	10800003 	ldbu	r2,0(r2)
   12630:	10803fcc 	andi	r2,r2,255
   12634:	1004923a 	slli	r2,r2,8
   12638:	1009883a 	mov	r4,r2
   1263c:	d0e00217 	ldw	r3,-32760(gp)
   12640:	d0a0c503 	ldbu	r2,-31980(gp)
   12644:	10803fcc 	andi	r2,r2,255
   12648:	1085883a 	add	r2,r2,r2
   1264c:	1085883a 	add	r2,r2,r2
   12650:	108000c4 	addi	r2,r2,3
   12654:	1885883a 	add	r2,r3,r2
   12658:	10800204 	addi	r2,r2,8
   1265c:	10800003 	ldbu	r2,0(r2)
   12660:	10803fcc 	andi	r2,r2,255
   12664:	2085883a 	add	r2,r4,r2
   12668:	d0a0000d 	sth	r2,-32768(gp)
									Control_TCXO_DAC(1, &dac_val); //enable DAC output, set new val
   1266c:	d1600004 	addi	r5,gp,-32768
   12670:	01000044 	movi	r4,1
   12674:	00107300 	call	10730 <Control_TCXO_DAC>
								}
								else cmd_errors++;

							break;
   12678:	0000ad06 	br	12930 <main+0x16e8>
									//write data to DAC
									//dac_val = LMS_Ctrl_Packet_Rx->Data_field[3 + (block * 4)];
									dac_val = (LMS_Ctrl_Packet_Rx->Data_field[2 + (block * 4)] << 8 ) + LMS_Ctrl_Packet_Rx->Data_field[3 + (block * 4)];
									Control_TCXO_DAC(1, &dac_val); //enable DAC output, set new val
								}
								else cmd_errors++;
   1267c:	d0a0c583 	ldbu	r2,-31978(gp)
   12680:	10800044 	addi	r2,r2,1
   12684:	d0a0c585 	stb	r2,-31978(gp)

							break;
   12688:	0000a906 	br	12930 <main+0x16e8>

							case 2: //MCP4261 wiper 0 control

								if (LMS_Ctrl_Packet_Rx->Data_field[1 + (block * 4)] == 0) //RAW units?
   1268c:	d0e00217 	ldw	r3,-32760(gp)
   12690:	d0a0c503 	ldbu	r2,-31980(gp)
   12694:	10803fcc 	andi	r2,r2,255
   12698:	1085883a 	add	r2,r2,r2
   1269c:	1085883a 	add	r2,r2,r2
   126a0:	10800044 	addi	r2,r2,1
   126a4:	1885883a 	add	r2,r3,r2
   126a8:	10800204 	addi	r2,r2,8
   126ac:	10800003 	ldbu	r2,0(r2)
   126b0:	10803fcc 	andi	r2,r2,255
   126b4:	1000431e 	bne	r2,zero,127c4 <main+0x157c>
								{
									wiper_pos[0] = (LMS_Ctrl_Packet_Rx->Data_field[2 + (block * 4)] << 8) + LMS_Ctrl_Packet_Rx->Data_field[3 + (block * 4)];
   126b8:	d0e00217 	ldw	r3,-32760(gp)
   126bc:	d0a0c503 	ldbu	r2,-31980(gp)
   126c0:	10803fcc 	andi	r2,r2,255
   126c4:	1085883a 	add	r2,r2,r2
   126c8:	1085883a 	add	r2,r2,r2
   126cc:	10800084 	addi	r2,r2,2
   126d0:	1885883a 	add	r2,r3,r2
   126d4:	10800204 	addi	r2,r2,8
   126d8:	10800003 	ldbu	r2,0(r2)
   126dc:	10803fcc 	andi	r2,r2,255
   126e0:	1004923a 	slli	r2,r2,8
   126e4:	1009883a 	mov	r4,r2
   126e8:	d0e00217 	ldw	r3,-32760(gp)
   126ec:	d0a0c503 	ldbu	r2,-31980(gp)
   126f0:	10803fcc 	andi	r2,r2,255
   126f4:	1085883a 	add	r2,r2,r2
   126f8:	1085883a 	add	r2,r2,r2
   126fc:	108000c4 	addi	r2,r2,3
   12700:	1885883a 	add	r2,r3,r2
   12704:	10800204 	addi	r2,r2,8
   12708:	10800003 	ldbu	r2,0(r2)
   1270c:	10803fcc 	andi	r2,r2,255
   12710:	2085883a 	add	r2,r4,r2
   12714:	e0bfef8d 	sth	r2,-66(fp)
									if(wiper_pos[0] <= 256)
   12718:	e0bfef8b 	ldhu	r2,-66(fp)
   1271c:	10bfffcc 	andi	r2,r2,65535
   12720:	10804068 	cmpgeui	r2,r2,257
   12724:	1000231e 	bne	r2,zero,127b4 <main+0x156c>
									{
										MCP_data[0] = MCP_data[1] = 0;
   12728:	e03fef45 	stb	zero,-67(fp)
   1272c:	e0bfef43 	ldbu	r2,-67(fp)
   12730:	e0bfef05 	stb	r2,-68(fp)

										MCP_data[0] |= (0x00 << 4); //Memory addr [16:13] = Volatile Wiper 0 (0x00)
   12734:	e0bfef03 	ldbu	r2,-68(fp)
   12738:	e0bfef05 	stb	r2,-68(fp)
										MCP_data[0] |= (0x00 << 2); //Command bits [11:10] = CMD  Write data (0x00)
   1273c:	e0bfef03 	ldbu	r2,-68(fp)
   12740:	e0bfef05 	stb	r2,-68(fp)

										if (wiper_pos[0] > 255)	MCP_data[0] |= (0x01); //Full Scale (W = A)
   12744:	e0bfef8b 	ldhu	r2,-66(fp)
   12748:	10bfffcc 	andi	r2,r2,65535
   1274c:	10804030 	cmpltui	r2,r2,256
   12750:	1000031e 	bne	r2,zero,12760 <main+0x1518>
   12754:	e0bfef03 	ldbu	r2,-68(fp)
   12758:	10800054 	ori	r2,r2,1
   1275c:	e0bfef05 	stb	r2,-68(fp)

										MCP_data[1] = LMS_Ctrl_Packet_Rx->Data_field[3 + (block * 4)];
   12760:	d0e00217 	ldw	r3,-32760(gp)
   12764:	d0a0c503 	ldbu	r2,-31980(gp)
   12768:	10803fcc 	andi	r2,r2,255
   1276c:	1085883a 	add	r2,r2,r2
   12770:	1085883a 	add	r2,r2,r2
   12774:	108000c4 	addi	r2,r2,3
   12778:	1885883a 	add	r2,r3,r2
   1277c:	10800204 	addi	r2,r2,8
   12780:	10800003 	ldbu	r2,0(r2)
   12784:	e0bfef45 	stb	r2,-67(fp)

										spirez = alt_avalon_spi_command(FPGA_SPI0_BASE, SPI_NR_POT, 2, MCP_data, 0, NULL, 0);
   12788:	e0bfef04 	addi	r2,fp,-68
   1278c:	d8000215 	stw	zero,8(sp)
   12790:	d8000115 	stw	zero,4(sp)
   12794:	d8000015 	stw	zero,0(sp)
   12798:	100f883a 	mov	r7,r2
   1279c:	01800084 	movi	r6,2
   127a0:	01400104 	movi	r5,4
   127a4:	0101d004 	movi	r4,1856
   127a8:	00163ac0 	call	163ac <alt_avalon_spi_command>
   127ac:	e0bfed15 	stw	r2,-76(fp)
									}
									else cmd_errors++;
								}
								else cmd_errors++;
							break;
   127b0:	00005f06 	br	12930 <main+0x16e8>

										MCP_data[1] = LMS_Ctrl_Packet_Rx->Data_field[3 + (block * 4)];

										spirez = alt_avalon_spi_command(FPGA_SPI0_BASE, SPI_NR_POT, 2, MCP_data, 0, NULL, 0);
									}
									else cmd_errors++;
   127b4:	d0a0c583 	ldbu	r2,-31978(gp)
   127b8:	10800044 	addi	r2,r2,1
   127bc:	d0a0c585 	stb	r2,-31978(gp)
								}
								else cmd_errors++;
							break;
   127c0:	00005b06 	br	12930 <main+0x16e8>

										spirez = alt_avalon_spi_command(FPGA_SPI0_BASE, SPI_NR_POT, 2, MCP_data, 0, NULL, 0);
									}
									else cmd_errors++;
								}
								else cmd_errors++;
   127c4:	d0a0c583 	ldbu	r2,-31978(gp)
   127c8:	10800044 	addi	r2,r2,1
   127cc:	d0a0c585 	stb	r2,-31978(gp)
							break;
   127d0:	00005706 	br	12930 <main+0x16e8>

							case 3: //MCP4261 wiper 1 control

								if (LMS_Ctrl_Packet_Rx->Data_field[1 + (block * 4)] == 0) //RAW units?
   127d4:	d0e00217 	ldw	r3,-32760(gp)
   127d8:	d0a0c503 	ldbu	r2,-31980(gp)
   127dc:	10803fcc 	andi	r2,r2,255
   127e0:	1085883a 	add	r2,r2,r2
   127e4:	1085883a 	add	r2,r2,r2
   127e8:	10800044 	addi	r2,r2,1
   127ec:	1885883a 	add	r2,r3,r2
   127f0:	10800204 	addi	r2,r2,8
   127f4:	10800003 	ldbu	r2,0(r2)
   127f8:	10803fcc 	andi	r2,r2,255
   127fc:	1000441e 	bne	r2,zero,12910 <main+0x16c8>
								{
									wiper_pos[1] = (LMS_Ctrl_Packet_Rx->Data_field[2 + (block * 4)] << 8) + LMS_Ctrl_Packet_Rx->Data_field[3 + (block * 4)];
   12800:	d0e00217 	ldw	r3,-32760(gp)
   12804:	d0a0c503 	ldbu	r2,-31980(gp)
   12808:	10803fcc 	andi	r2,r2,255
   1280c:	1085883a 	add	r2,r2,r2
   12810:	1085883a 	add	r2,r2,r2
   12814:	10800084 	addi	r2,r2,2
   12818:	1885883a 	add	r2,r3,r2
   1281c:	10800204 	addi	r2,r2,8
   12820:	10800003 	ldbu	r2,0(r2)
   12824:	10803fcc 	andi	r2,r2,255
   12828:	1004923a 	slli	r2,r2,8
   1282c:	1009883a 	mov	r4,r2
   12830:	d0e00217 	ldw	r3,-32760(gp)
   12834:	d0a0c503 	ldbu	r2,-31980(gp)
   12838:	10803fcc 	andi	r2,r2,255
   1283c:	1085883a 	add	r2,r2,r2
   12840:	1085883a 	add	r2,r2,r2
   12844:	108000c4 	addi	r2,r2,3
   12848:	1885883a 	add	r2,r3,r2
   1284c:	10800204 	addi	r2,r2,8
   12850:	10800003 	ldbu	r2,0(r2)
   12854:	10803fcc 	andi	r2,r2,255
   12858:	2085883a 	add	r2,r4,r2
   1285c:	e0bff00d 	sth	r2,-64(fp)
									if(wiper_pos[1] <= 256)
   12860:	e0bff00b 	ldhu	r2,-64(fp)
   12864:	10bfffcc 	andi	r2,r2,65535
   12868:	10804068 	cmpgeui	r2,r2,257
   1286c:	1000241e 	bne	r2,zero,12900 <main+0x16b8>
									{
										MCP_data[0] = MCP_data[1] = 0;
   12870:	e03fef45 	stb	zero,-67(fp)
   12874:	e0bfef43 	ldbu	r2,-67(fp)
   12878:	e0bfef05 	stb	r2,-68(fp)

										MCP_data[0] |= (0x01 << 4); //Memory addr [16:13] = Volatile Wiper 1 (0x01)
   1287c:	e0bfef03 	ldbu	r2,-68(fp)
   12880:	10800414 	ori	r2,r2,16
   12884:	e0bfef05 	stb	r2,-68(fp)
										MCP_data[0] |= (0x00 << 2); //Command bits [11:10] = CMD  Write data (0x00)
   12888:	e0bfef03 	ldbu	r2,-68(fp)
   1288c:	e0bfef05 	stb	r2,-68(fp)

										if (wiper_pos[1] > 255)	MCP_data[0] |= (0x01); //Full Scale (W = A)
   12890:	e0bff00b 	ldhu	r2,-64(fp)
   12894:	10bfffcc 	andi	r2,r2,65535
   12898:	10804030 	cmpltui	r2,r2,256
   1289c:	1000031e 	bne	r2,zero,128ac <main+0x1664>
   128a0:	e0bfef03 	ldbu	r2,-68(fp)
   128a4:	10800054 	ori	r2,r2,1
   128a8:	e0bfef05 	stb	r2,-68(fp)

										MCP_data[1] = LMS_Ctrl_Packet_Rx->Data_field[3 + (block * 4)];
   128ac:	d0e00217 	ldw	r3,-32760(gp)
   128b0:	d0a0c503 	ldbu	r2,-31980(gp)
   128b4:	10803fcc 	andi	r2,r2,255
   128b8:	1085883a 	add	r2,r2,r2
   128bc:	1085883a 	add	r2,r2,r2
   128c0:	108000c4 	addi	r2,r2,3
   128c4:	1885883a 	add	r2,r3,r2
   128c8:	10800204 	addi	r2,r2,8
   128cc:	10800003 	ldbu	r2,0(r2)
   128d0:	e0bfef45 	stb	r2,-67(fp)

										spirez = alt_avalon_spi_command(FPGA_SPI0_BASE, SPI_NR_POT, 2, MCP_data, 0, NULL, 0);
   128d4:	e0bfef04 	addi	r2,fp,-68
   128d8:	d8000215 	stw	zero,8(sp)
   128dc:	d8000115 	stw	zero,4(sp)
   128e0:	d8000015 	stw	zero,0(sp)
   128e4:	100f883a 	mov	r7,r2
   128e8:	01800084 	movi	r6,2
   128ec:	01400104 	movi	r5,4
   128f0:	0101d004 	movi	r4,1856
   128f4:	00163ac0 	call	163ac <alt_avalon_spi_command>
   128f8:	e0bfed15 	stw	r2,-76(fp)
									}
									else cmd_errors++;
								}
								else cmd_errors++;
							break;
   128fc:	00000c06 	br	12930 <main+0x16e8>

										MCP_data[1] = LMS_Ctrl_Packet_Rx->Data_field[3 + (block * 4)];

										spirez = alt_avalon_spi_command(FPGA_SPI0_BASE, SPI_NR_POT, 2, MCP_data, 0, NULL, 0);
									}
									else cmd_errors++;
   12900:	d0a0c583 	ldbu	r2,-31978(gp)
   12904:	10800044 	addi	r2,r2,1
   12908:	d0a0c585 	stb	r2,-31978(gp)
								}
								else cmd_errors++;
							break;
   1290c:	00000806 	br	12930 <main+0x16e8>

										spirez = alt_avalon_spi_command(FPGA_SPI0_BASE, SPI_NR_POT, 2, MCP_data, 0, NULL, 0);
									}
									else cmd_errors++;
								}
								else cmd_errors++;
   12910:	d0a0c583 	ldbu	r2,-31978(gp)
   12914:	10800044 	addi	r2,r2,1
   12918:	d0a0c585 	stb	r2,-31978(gp)
							break;
   1291c:	00000406 	br	12930 <main+0x16e8>

							default:
								cmd_errors++;
   12920:	d0a0c583 	ldbu	r2,-31978(gp)
   12924:	10800044 	addi	r2,r2,1
   12928:	d0a0c585 	stb	r2,-31978(gp)
							break;
   1292c:	0001883a 	nop


				case CMD_ANALOG_VAL_WR:
					if(Check_many_blocks (4)) break;

					for(block = 0; block < LMS_Ctrl_Packet_Rx->Header.Data_blocks; block++)
   12930:	d0a0c503 	ldbu	r2,-31980(gp)
   12934:	10800044 	addi	r2,r2,1
   12938:	d0a0c505 	stb	r2,-31980(gp)
   1293c:	d0a00217 	ldw	r2,-32760(gp)
   12940:	10800083 	ldbu	r2,2(r2)
   12944:	d0e0c503 	ldbu	r3,-31980(gp)
   12948:	10803fcc 	andi	r2,r2,255
   1294c:	18c03fcc 	andi	r3,r3,255
   12950:	18bf1236 	bltu	r3,r2,1259c <_gp+0xffff2dc4>
								cmd_errors++;
							break;
						}
					}

					if(cmd_errors) LMS_Ctrl_Packet_Tx->Header.Status = STATUS_ERROR_CMD;
   12954:	d0a0c583 	ldbu	r2,-31978(gp)
   12958:	10803fcc 	andi	r2,r2,255
   1295c:	10000426 	beq	r2,zero,12970 <main+0x1728>
   12960:	d0a00117 	ldw	r2,-32764(gp)
   12964:	00c00144 	movi	r3,5
   12968:	10c00045 	stb	r3,1(r2)
					else LMS_Ctrl_Packet_Tx->Header.Status = STATUS_COMPLETED_CMD;

				break;
   1296c:	0000b106 	br	12c34 <main+0x19ec>
							break;
						}
					}

					if(cmd_errors) LMS_Ctrl_Packet_Tx->Header.Status = STATUS_ERROR_CMD;
					else LMS_Ctrl_Packet_Tx->Header.Status = STATUS_COMPLETED_CMD;
   12970:	d0a00117 	ldw	r2,-32764(gp)
   12974:	00c00044 	movi	r3,1
   12978:	10c00045 	stb	r3,1(r2)

				break;
   1297c:	0000ad06 	br	12c34 <main+0x19ec>


	 			case CMD_SI5351_WR:
	 				if(Check_many_blocks(2)) break;
   12980:	01000084 	movi	r4,2
   12984:	001005c0 	call	1005c <Check_many_blocks>
   12988:	10803fcc 	andi	r2,r2,255
   1298c:	1000a61e 	bne	r2,zero,12c28 <main+0x19e0>

	 				for(block = 0; block < LMS_Ctrl_Packet_Rx->Header.Data_blocks; block++)
   12990:	d020c505 	stb	zero,-31980(gp)
   12994:	00002c06 	br	12a48 <main+0x1800>
	 				{
	 					cmd_errors += I2C_start(I2C_OPENCORES_0_BASE, SI5351_I2C_ADDR, 0);
   12998:	000d883a 	mov	r6,zero
   1299c:	01401804 	movi	r5,96
   129a0:	0101d804 	movi	r4,1888
   129a4:	00166600 	call	16660 <I2C_start>
   129a8:	1007883a 	mov	r3,r2
   129ac:	d0a0c583 	ldbu	r2,-31978(gp)
   129b0:	1885883a 	add	r2,r3,r2
   129b4:	d0a0c585 	stb	r2,-31978(gp)
	 					cmd_errors += I2C_write(I2C_OPENCORES_0_BASE, LMS_Ctrl_Packet_Rx->Data_field[block * 2    ], 0);
   129b8:	d0e00217 	ldw	r3,-32760(gp)
   129bc:	d0a0c503 	ldbu	r2,-31980(gp)
   129c0:	10803fcc 	andi	r2,r2,255
   129c4:	1085883a 	add	r2,r2,r2
   129c8:	1885883a 	add	r2,r3,r2
   129cc:	10800204 	addi	r2,r2,8
   129d0:	10800003 	ldbu	r2,0(r2)
   129d4:	10803fcc 	andi	r2,r2,255
   129d8:	000d883a 	mov	r6,zero
   129dc:	100b883a 	mov	r5,r2
   129e0:	0101d804 	movi	r4,1888
   129e4:	00167b40 	call	167b4 <I2C_write>
   129e8:	1007883a 	mov	r3,r2
   129ec:	d0a0c583 	ldbu	r2,-31978(gp)
   129f0:	1885883a 	add	r2,r3,r2
   129f4:	d0a0c585 	stb	r2,-31978(gp)
	 					cmd_errors += I2C_write(I2C_OPENCORES_0_BASE, LMS_Ctrl_Packet_Rx->Data_field[block * 2 + 1], 1);
   129f8:	d0e00217 	ldw	r3,-32760(gp)
   129fc:	d0a0c503 	ldbu	r2,-31980(gp)
   12a00:	10803fcc 	andi	r2,r2,255
   12a04:	1085883a 	add	r2,r2,r2
   12a08:	10800044 	addi	r2,r2,1
   12a0c:	1885883a 	add	r2,r3,r2
   12a10:	10800204 	addi	r2,r2,8
   12a14:	10800003 	ldbu	r2,0(r2)
   12a18:	10803fcc 	andi	r2,r2,255
   12a1c:	01800044 	movi	r6,1
   12a20:	100b883a 	mov	r5,r2
   12a24:	0101d804 	movi	r4,1888
   12a28:	00167b40 	call	167b4 <I2C_write>
   12a2c:	1007883a 	mov	r3,r2
   12a30:	d0a0c583 	ldbu	r2,-31978(gp)
   12a34:	1885883a 	add	r2,r3,r2
   12a38:	d0a0c585 	stb	r2,-31978(gp)


	 			case CMD_SI5351_WR:
	 				if(Check_many_blocks(2)) break;

	 				for(block = 0; block < LMS_Ctrl_Packet_Rx->Header.Data_blocks; block++)
   12a3c:	d0a0c503 	ldbu	r2,-31980(gp)
   12a40:	10800044 	addi	r2,r2,1
   12a44:	d0a0c505 	stb	r2,-31980(gp)
   12a48:	d0a00217 	ldw	r2,-32760(gp)
   12a4c:	10800083 	ldbu	r2,2(r2)
   12a50:	d0e0c503 	ldbu	r3,-31980(gp)
   12a54:	10803fcc 	andi	r2,r2,255
   12a58:	18c03fcc 	andi	r3,r3,255
   12a5c:	18bfce36 	bltu	r3,r2,12998 <_gp+0xffff31c0>
	 					cmd_errors += I2C_start(I2C_OPENCORES_0_BASE, SI5351_I2C_ADDR, 0);
	 					cmd_errors += I2C_write(I2C_OPENCORES_0_BASE, LMS_Ctrl_Packet_Rx->Data_field[block * 2    ], 0);
	 					cmd_errors += I2C_write(I2C_OPENCORES_0_BASE, LMS_Ctrl_Packet_Rx->Data_field[block * 2 + 1], 1);
	 				}

	 				if(cmd_errors) LMS_Ctrl_Packet_Tx->Header.Status = STATUS_ERROR_CMD;
   12a60:	d0a0c583 	ldbu	r2,-31978(gp)
   12a64:	10803fcc 	andi	r2,r2,255
   12a68:	10000426 	beq	r2,zero,12a7c <main+0x1834>
   12a6c:	d0a00117 	ldw	r2,-32764(gp)
   12a70:	00c00144 	movi	r3,5
   12a74:	10c00045 	stb	r3,1(r2)
	 				else LMS_Ctrl_Packet_Tx->Header.Status = STATUS_COMPLETED_CMD;

	 			break;
   12a78:	00006e06 	br	12c34 <main+0x19ec>
	 					cmd_errors += I2C_write(I2C_OPENCORES_0_BASE, LMS_Ctrl_Packet_Rx->Data_field[block * 2    ], 0);
	 					cmd_errors += I2C_write(I2C_OPENCORES_0_BASE, LMS_Ctrl_Packet_Rx->Data_field[block * 2 + 1], 1);
	 				}

	 				if(cmd_errors) LMS_Ctrl_Packet_Tx->Header.Status = STATUS_ERROR_CMD;
	 				else LMS_Ctrl_Packet_Tx->Header.Status = STATUS_COMPLETED_CMD;
   12a7c:	d0a00117 	ldw	r2,-32764(gp)
   12a80:	00c00044 	movi	r3,1
   12a84:	10c00045 	stb	r3,1(r2)

	 			break;
   12a88:	00006a06 	br	12c34 <main+0x19ec>


 				case CMD_SI5351_RD:
 					if(Check_many_blocks (2)) break;
   12a8c:	01000084 	movi	r4,2
   12a90:	001005c0 	call	1005c <Check_many_blocks>
   12a94:	10803fcc 	andi	r2,r2,255
   12a98:	1000651e 	bne	r2,zero,12c30 <main+0x19e8>

 					for(block = 0; block < LMS_Ctrl_Packet_Rx->Header.Data_blocks; block++)
   12a9c:	d020c505 	stb	zero,-31980(gp)
   12aa0:	00003c06 	br	12b94 <main+0x194c>
 					{
 						cmd_errors += I2C_start(I2C_OPENCORES_0_BASE, SI5351_I2C_ADDR, 0);
   12aa4:	000d883a 	mov	r6,zero
   12aa8:	01401804 	movi	r5,96
   12aac:	0101d804 	movi	r4,1888
   12ab0:	00166600 	call	16660 <I2C_start>
   12ab4:	1007883a 	mov	r3,r2
   12ab8:	d0a0c583 	ldbu	r2,-31978(gp)
   12abc:	1885883a 	add	r2,r3,r2
   12ac0:	d0a0c585 	stb	r2,-31978(gp)
 						cmd_errors += I2C_write(I2C_OPENCORES_0_BASE, LMS_Ctrl_Packet_Rx->Data_field[block], 1);
   12ac4:	d0e00217 	ldw	r3,-32760(gp)
   12ac8:	d0a0c503 	ldbu	r2,-31980(gp)
   12acc:	10803fcc 	andi	r2,r2,255
   12ad0:	1885883a 	add	r2,r3,r2
   12ad4:	10800204 	addi	r2,r2,8
   12ad8:	10800003 	ldbu	r2,0(r2)
   12adc:	10803fcc 	andi	r2,r2,255
   12ae0:	01800044 	movi	r6,1
   12ae4:	100b883a 	mov	r5,r2
   12ae8:	0101d804 	movi	r4,1888
   12aec:	00167b40 	call	167b4 <I2C_write>
   12af0:	1007883a 	mov	r3,r2
   12af4:	d0a0c583 	ldbu	r2,-31978(gp)
   12af8:	1885883a 	add	r2,r3,r2
   12afc:	d0a0c585 	stb	r2,-31978(gp)
 						cmd_errors += I2C_start(I2C_OPENCORES_0_BASE, SI5351_I2C_ADDR, 1);
   12b00:	01800044 	movi	r6,1
   12b04:	01401804 	movi	r5,96
   12b08:	0101d804 	movi	r4,1888
   12b0c:	00166600 	call	16660 <I2C_start>
   12b10:	1007883a 	mov	r3,r2
   12b14:	d0a0c583 	ldbu	r2,-31978(gp)
   12b18:	1885883a 	add	r2,r3,r2
   12b1c:	d0a0c585 	stb	r2,-31978(gp)

 						LMS_Ctrl_Packet_Tx->Data_field[block * 2    ] = LMS_Ctrl_Packet_Rx->Data_field[block];
   12b20:	d1200117 	ldw	r4,-32764(gp)
   12b24:	d0a0c503 	ldbu	r2,-31980(gp)
   12b28:	10803fcc 	andi	r2,r2,255
   12b2c:	1085883a 	add	r2,r2,r2
   12b30:	100b883a 	mov	r5,r2
   12b34:	d0e00217 	ldw	r3,-32760(gp)
   12b38:	d0a0c503 	ldbu	r2,-31980(gp)
   12b3c:	10803fcc 	andi	r2,r2,255
   12b40:	1885883a 	add	r2,r3,r2
   12b44:	10800204 	addi	r2,r2,8
   12b48:	10c00003 	ldbu	r3,0(r2)
   12b4c:	2145883a 	add	r2,r4,r5
   12b50:	10800204 	addi	r2,r2,8
   12b54:	10c00005 	stb	r3,0(r2)
 						LMS_Ctrl_Packet_Tx->Data_field[block * 2 + 1] = I2C_read(I2C_OPENCORES_0_BASE, 1);
   12b58:	d4600117 	ldw	r17,-32764(gp)
   12b5c:	d0a0c503 	ldbu	r2,-31980(gp)
   12b60:	10803fcc 	andi	r2,r2,255
   12b64:	1085883a 	add	r2,r2,r2
   12b68:	14000044 	addi	r16,r2,1
   12b6c:	01400044 	movi	r5,1
   12b70:	0101d804 	movi	r4,1888
   12b74:	00167200 	call	16720 <I2C_read>
   12b78:	1007883a 	mov	r3,r2
   12b7c:	8c05883a 	add	r2,r17,r16
   12b80:	10800204 	addi	r2,r2,8
   12b84:	10c00005 	stb	r3,0(r2)


 				case CMD_SI5351_RD:
 					if(Check_many_blocks (2)) break;

 					for(block = 0; block < LMS_Ctrl_Packet_Rx->Header.Data_blocks; block++)
   12b88:	d0a0c503 	ldbu	r2,-31980(gp)
   12b8c:	10800044 	addi	r2,r2,1
   12b90:	d0a0c505 	stb	r2,-31980(gp)
   12b94:	d0a00217 	ldw	r2,-32760(gp)
   12b98:	10800083 	ldbu	r2,2(r2)
   12b9c:	d0e0c503 	ldbu	r3,-31980(gp)
   12ba0:	10803fcc 	andi	r2,r2,255
   12ba4:	18c03fcc 	andi	r3,r3,255
   12ba8:	18bfbe36 	bltu	r3,r2,12aa4 <_gp+0xffff32cc>

 						LMS_Ctrl_Packet_Tx->Data_field[block * 2    ] = LMS_Ctrl_Packet_Rx->Data_field[block];
 						LMS_Ctrl_Packet_Tx->Data_field[block * 2 + 1] = I2C_read(I2C_OPENCORES_0_BASE, 1);
 					}

 					if(cmd_errors) LMS_Ctrl_Packet_Tx->Header.Status = STATUS_ERROR_CMD;
   12bac:	d0a0c583 	ldbu	r2,-31978(gp)
   12bb0:	10803fcc 	andi	r2,r2,255
   12bb4:	10000426 	beq	r2,zero,12bc8 <main+0x1980>
   12bb8:	d0a00117 	ldw	r2,-32764(gp)
   12bbc:	00c00144 	movi	r3,5
   12bc0:	10c00045 	stb	r3,1(r2)
 					else LMS_Ctrl_Packet_Tx->Header.Status = STATUS_COMPLETED_CMD;

 				break;
   12bc4:	00001b06 	br	12c34 <main+0x19ec>
 						LMS_Ctrl_Packet_Tx->Data_field[block * 2    ] = LMS_Ctrl_Packet_Rx->Data_field[block];
 						LMS_Ctrl_Packet_Tx->Data_field[block * 2 + 1] = I2C_read(I2C_OPENCORES_0_BASE, 1);
 					}

 					if(cmd_errors) LMS_Ctrl_Packet_Tx->Header.Status = STATUS_ERROR_CMD;
 					else LMS_Ctrl_Packet_Tx->Header.Status = STATUS_COMPLETED_CMD;
   12bc8:	d0a00117 	ldw	r2,-32764(gp)
   12bcc:	00c00044 	movi	r3,1
   12bd0:	10c00045 	stb	r3,1(r2)

 				break;
   12bd4:	00001706 	br	12c34 <main+0x19ec>


 				default:
 					/* This is unknown request. */
 					//isHandled = CyFalse;
 					LMS_Ctrl_Packet_Tx->Header.Status = STATUS_UNKNOWN_CMD;
   12bd8:	d0a00117 	ldw	r2,-32764(gp)
   12bdc:	00c00084 	movi	r3,2
   12be0:	10c00045 	stb	r3,1(r2)
 				break;
   12be4:	00001306 	br	12c34 <main+0x19ec>
 				break;
				

 				case CMD_LMS_RST:

 					if(!Check_Periph_ID(MAX_ID_LMS7, LMS_Ctrl_Packet_Rx->Header.Periph_ID)) break;
   12be8:	0001883a 	nop
   12bec:	00001106 	br	12c34 <main+0x19ec>
 					LMS_Ctrl_Packet_Tx->Header.Status = STATUS_COMPLETED_CMD;
 				break;


 				case CMD_LMS7002_WR:
 					if(!Check_Periph_ID(MAX_ID_LMS7, LMS_Ctrl_Packet_Rx->Header.Periph_ID)) break;
   12bf0:	0001883a 	nop
   12bf4:	00000f06 	br	12c34 <main+0x19ec>
 					if(Check_many_blocks (4)) break;
   12bf8:	0001883a 	nop
   12bfc:	00000d06 	br	12c34 <main+0x19ec>
 					LMS_Ctrl_Packet_Tx->Header.Status = STATUS_COMPLETED_CMD;
 				break;


 				case CMD_LMS7002_RD:
 					if(Check_many_blocks (4)) break;
   12c00:	0001883a 	nop
   12c04:	00000b06 	br	12c34 <main+0x19ec>
 					LMS_Ctrl_Packet_Tx->Header.Status = STATUS_COMPLETED_CMD;
 				break;


 	 			case CMD_BRDSPI16_WR:
 	 				if(Check_many_blocks (4)) break;
   12c08:	0001883a 	nop
   12c0c:	00000906 	br	12c34 <main+0x19ec>
 	 				LMS_Ctrl_Packet_Tx->Header.Status = STATUS_COMPLETED_CMD;
 	 			break;


 				case CMD_BRDSPI16_RD:
 					if(Check_many_blocks (4)) break;
   12c10:	0001883a 	nop
   12c14:	00000706 	br	12c34 <main+0x19ec>
 					LMS_Ctrl_Packet_Tx->Header.Status = STATUS_COMPLETED_CMD;
 				break;


 				case CMD_ADF4002_WR:
 					if(Check_many_blocks (3)) break;
   12c18:	0001883a 	nop
   12c1c:	00000506 	br	12c34 <main+0x19ec>

				break;


				case CMD_ANALOG_VAL_WR:
					if(Check_many_blocks (4)) break;
   12c20:	0001883a 	nop
   12c24:	00000306 	br	12c34 <main+0x19ec>

				break;


	 			case CMD_SI5351_WR:
	 				if(Check_many_blocks(2)) break;
   12c28:	0001883a 	nop
   12c2c:	00000106 	br	12c34 <main+0x19ec>

	 			break;


 				case CMD_SI5351_RD:
 					if(Check_many_blocks (2)) break;
   12c30:	0001883a 	nop
			};



     		//Send response to the command
        	for(cnt=0; cnt<64/sizeof(uint32_t); ++cnt)
   12c34:	e03fe845 	stb	zero,-95(fp)
   12c38:	00000d06 	br	12c70 <main+0x1a28>
        	{
        		IOWR(AV_FIFO_INT_0_BASE, 0, dest[cnt]);
   12c3c:	e0bfe847 	ldb	r2,-95(fp)
   12c40:	1085883a 	add	r2,r2,r2
   12c44:	1085883a 	add	r2,r2,r2
   12c48:	1007883a 	mov	r3,r2
   12c4c:	e0bfea17 	ldw	r2,-88(fp)
   12c50:	10c5883a 	add	r2,r2,r3
   12c54:	10800017 	ldw	r2,0(r2)
   12c58:	1007883a 	mov	r3,r2
   12c5c:	0081f804 	movi	r2,2016
   12c60:	10c00035 	stwio	r3,0(r2)
			};



     		//Send response to the command
        	for(cnt=0; cnt<64/sizeof(uint32_t); ++cnt)
   12c64:	e0bfe843 	ldbu	r2,-95(fp)
   12c68:	10800044 	addi	r2,r2,1
   12c6c:	e0bfe845 	stb	r2,-95(fp)
   12c70:	e0bfe843 	ldbu	r2,-95(fp)
   12c74:	10803fcc 	andi	r2,r2,255
   12c78:	10800430 	cmpltui	r2,r2,16
   12c7c:	103fef1e 	bne	r2,zero,12c3c <_gp+0xffff3464>
	    	spirez = alt_avalon_spi_command(PLLCFG_SPI_BASE, 0, 2, wr_buf, 2, rd_buf, 0);
	    }
*/


	}
   12c80:	0039b406 	br	11354 <_gp+0xffff1b7c>

00012c84 <get_pll_config>:
#include "pll_rcfg.h"
#include "system.h"

// Reads main PLL configuration
void get_pll_config(uint32_t PLL_BASE, tPLL_CFG *pll_cfg)
{
   12c84:	defffd04 	addi	sp,sp,-12
   12c88:	df000215 	stw	fp,8(sp)
   12c8c:	df000204 	addi	fp,sp,8
   12c90:	e13ffe15 	stw	r4,-8(fp)
   12c94:	e17fff15 	stw	r5,-4(fp)
	pll_cfg->M_cnt = IORD_32DIRECT(PLL_BASE, M_COUNTER);
   12c98:	e0bffe17 	ldw	r2,-8(fp)
   12c9c:	10800404 	addi	r2,r2,16
   12ca0:	10800037 	ldwio	r2,0(r2)
   12ca4:	1007883a 	mov	r3,r2
   12ca8:	e0bfff17 	ldw	r2,-4(fp)
   12cac:	10c00015 	stw	r3,0(r2)

	pll_cfg->MFrac_cnt = IORD_32DIRECT(PLL_BASE, FRAC_COUNTER);
   12cb0:	e0bffe17 	ldw	r2,-8(fp)
   12cb4:	10800704 	addi	r2,r2,28
   12cb8:	10800037 	ldwio	r2,0(r2)
   12cbc:	1007883a 	mov	r3,r2
   12cc0:	e0bfff17 	ldw	r2,-4(fp)
   12cc4:	10c00115 	stw	r3,4(r2)

	pll_cfg->N_cnt = IORD_32DIRECT(PLL_BASE, N_COUNTER);
   12cc8:	e0bffe17 	ldw	r2,-8(fp)
   12ccc:	10800304 	addi	r2,r2,12
   12cd0:	10800037 	ldwio	r2,0(r2)
   12cd4:	1007883a 	mov	r3,r2
   12cd8:	e0bfff17 	ldw	r2,-4(fp)
   12cdc:	10c00215 	stw	r3,8(r2)

	pll_cfg->DPS_cnt = IORD_32DIRECT(PLL_BASE, DPS_COUNTER);
   12ce0:	e0bffe17 	ldw	r2,-8(fp)
   12ce4:	10800604 	addi	r2,r2,24
   12ce8:	10800037 	ldwio	r2,0(r2)
   12cec:	1007883a 	mov	r3,r2
   12cf0:	e0bfff17 	ldw	r2,-4(fp)
   12cf4:	10c00415 	stw	r3,16(r2)

	pll_cfg->BS_cnt = IORD_32DIRECT(PLL_BASE, BS_COUNTER);
   12cf8:	e0bffe17 	ldw	r2,-8(fp)
   12cfc:	10800804 	addi	r2,r2,32
   12d00:	10800037 	ldwio	r2,0(r2)
   12d04:	1007883a 	mov	r3,r2
   12d08:	e0bfff17 	ldw	r2,-4(fp)
   12d0c:	10c00515 	stw	r3,20(r2)

	pll_cfg->CPS_cnt = IORD_32DIRECT(PLL_BASE, CPS_COUNTER);
   12d10:	e0bffe17 	ldw	r2,-8(fp)
   12d14:	10800904 	addi	r2,r2,36
   12d18:	10800037 	ldwio	r2,0(r2)
   12d1c:	1007883a 	mov	r3,r2
   12d20:	e0bfff17 	ldw	r2,-4(fp)
   12d24:	10c00615 	stw	r3,24(r2)

	pll_cfg->VCO_div = IORD_32DIRECT(PLL_BASE, VCO_DIV);
   12d28:	e0bffe17 	ldw	r2,-8(fp)
   12d2c:	10801c04 	addi	r2,r2,112
   12d30:	10800037 	ldwio	r2,0(r2)
   12d34:	1007883a 	mov	r3,r2
   12d38:	e0bfff17 	ldw	r2,-4(fp)
   12d3c:	10c00715 	stw	r3,28(r2)
}
   12d40:	0001883a 	nop
   12d44:	e037883a 	mov	sp,fp
   12d48:	df000017 	ldw	fp,0(sp)
   12d4c:	dec00104 	addi	sp,sp,4
   12d50:	f800283a 	ret

00012d54 <set_pll_config>:

// Writes main PLL configuration
uint8_t set_pll_config(uint32_t PLL_BASE, tPLL_CFG *pll_cfg)
{
   12d54:	defffd04 	addi	sp,sp,-12
   12d58:	df000215 	stw	fp,8(sp)
   12d5c:	df000204 	addi	fp,sp,8
   12d60:	e13ffe15 	stw	r4,-8(fp)
   12d64:	e17fff15 	stw	r5,-4(fp)

	//printf(" \n Full Reconfiguration Selected \n");

	//M
	IOWR_32DIRECT(PLL_BASE, M_COUNTER, pll_cfg->M_cnt);
   12d68:	e0bffe17 	ldw	r2,-8(fp)
   12d6c:	10800404 	addi	r2,r2,16
   12d70:	1007883a 	mov	r3,r2
   12d74:	e0bfff17 	ldw	r2,-4(fp)
   12d78:	10800017 	ldw	r2,0(r2)
   12d7c:	18800035 	stwio	r2,0(r3)

	//MFrac
	IOWR_32DIRECT(PLL_BASE, FRAC_COUNTER, pll_cfg->MFrac_cnt);
   12d80:	e0bffe17 	ldw	r2,-8(fp)
   12d84:	10800704 	addi	r2,r2,28
   12d88:	1007883a 	mov	r3,r2
   12d8c:	e0bfff17 	ldw	r2,-4(fp)
   12d90:	10800117 	ldw	r2,4(r2)
   12d94:	18800035 	stwio	r2,0(r3)

	//N
	IOWR_32DIRECT(PLL_BASE, N_COUNTER, pll_cfg->N_cnt);
   12d98:	e0bffe17 	ldw	r2,-8(fp)
   12d9c:	10800304 	addi	r2,r2,12
   12da0:	1007883a 	mov	r3,r2
   12da4:	e0bfff17 	ldw	r2,-4(fp)
   12da8:	10800217 	ldw	r2,8(r2)
   12dac:	18800035 	stwio	r2,0(r3)

	//Charge Pump Setting
	//IOWR_32DIRECT(PLL_BASE, CPS_COUNTER, pll_cfg->CPS_cnt);

	//
	IOWR_32DIRECT(PLL_BASE, VCO_DIV, pll_cfg->VCO_div);
   12db0:	e0bffe17 	ldw	r2,-8(fp)
   12db4:	10801c04 	addi	r2,r2,112
   12db8:	1007883a 	mov	r3,r2
   12dbc:	e0bfff17 	ldw	r2,-4(fp)
   12dc0:	10800717 	ldw	r2,28(r2)
   12dc4:	18800035 	stwio	r2,0(r3)


	return PLLCFG_NOERR; //start_Reconfig(PLL_BASE);
   12dc8:	0005883a 	mov	r2,zero

	//printf(" \n Full configuration is completed !! Verify with Scope \n");
}
   12dcc:	e037883a 	mov	sp,fp
   12dd0:	df000017 	ldw	fp,0(sp)
   12dd4:	dec00104 	addi	sp,sp,4
   12dd8:	f800283a 	ret

00012ddc <set_CxCnt>:


uint8_t set_CxCnt(uint32_t PLL_BASE, uint32_t CxVal)
{
   12ddc:	defffd04 	addi	sp,sp,-12
   12de0:	df000215 	stw	fp,8(sp)
   12de4:	df000204 	addi	fp,sp,8
   12de8:	e13ffe15 	stw	r4,-8(fp)
   12dec:	e17fff15 	stw	r5,-4(fp)

 	//IOWR_32DIRECT(PLL_BASE, C_COUNTER, val | (Cx << 18));
	IOWR_32DIRECT(PLL_BASE, C_COUNTER, CxVal);
   12df0:	e0bffe17 	ldw	r2,-8(fp)
   12df4:	10800504 	addi	r2,r2,20
   12df8:	1007883a 	mov	r3,r2
   12dfc:	e0bfff17 	ldw	r2,-4(fp)
   12e00:	18800035 	stwio	r2,0(r3)

	return PLLCFG_NOERR;
   12e04:	0005883a 	mov	r2,zero
}
   12e08:	e037883a 	mov	sp,fp
   12e0c:	df000017 	ldw	fp,0(sp)
   12e10:	dec00104 	addi	sp,sp,4
   12e14:	f800283a 	ret

00012e18 <set_Phase>:

uint8_t set_Phase(uint32_t PLL_BASE, uint32_t Cx, uint32_t val, uint32_t dir)
{
   12e18:	defffa04 	addi	sp,sp,-24
   12e1c:	df000515 	stw	fp,20(sp)
   12e20:	df000504 	addi	fp,sp,20
   12e24:	e13ffc15 	stw	r4,-16(fp)
   12e28:	e17ffd15 	stw	r5,-12(fp)
   12e2c:	e1bffe15 	stw	r6,-8(fp)
   12e30:	e1ffff15 	stw	r7,-4(fp)
	uint32_t dps;

	dps = val;
   12e34:	e0bffe17 	ldw	r2,-8(fp)
   12e38:	e0bffb15 	stw	r2,-20(fp)
	dps = dps | ((Cx & 0x1F) << 16);
   12e3c:	e0bffd17 	ldw	r2,-12(fp)
   12e40:	108007cc 	andi	r2,r2,31
   12e44:	1004943a 	slli	r2,r2,16
   12e48:	e0fffb17 	ldw	r3,-20(fp)
   12e4c:	1884b03a 	or	r2,r3,r2
   12e50:	e0bffb15 	stw	r2,-20(fp)
	dps = dps | ((dir & 0x01) << 21);
   12e54:	e0bfff17 	ldw	r2,-4(fp)
   12e58:	1080004c 	andi	r2,r2,1
   12e5c:	1004957a 	slli	r2,r2,21
   12e60:	e0fffb17 	ldw	r3,-20(fp)
   12e64:	1884b03a 	or	r2,r3,r2
   12e68:	e0bffb15 	stw	r2,-20(fp)

 	IOWR_32DIRECT(PLL_BASE, DPS_COUNTER, dps);
   12e6c:	e0bffc17 	ldw	r2,-16(fp)
   12e70:	10800604 	addi	r2,r2,24
   12e74:	1007883a 	mov	r3,r2
   12e78:	e0bffb17 	ldw	r2,-20(fp)
   12e7c:	18800035 	stwio	r2,0(r3)

	return PLLCFG_NOERR;
   12e80:	0005883a 	mov	r2,zero
}
   12e84:	e037883a 	mov	sp,fp
   12e88:	df000017 	ldw	fp,0(sp)
   12e8c:	dec00104 	addi	sp,sp,4
   12e90:	f800283a 	ret

00012e94 <start_Reconfig>:

uint8_t start_Reconfig(uint32_t PLL_BASE)
{
   12e94:	defffc04 	addi	sp,sp,-16
   12e98:	df000315 	stw	fp,12(sp)
   12e9c:	df000304 	addi	fp,sp,12
   12ea0:	e13fff15 	stw	r4,-4(fp)
	unsigned int status_reconfig, timeout;

	//Write anything to Start Register to Reconfiguration
	IOWR_32DIRECT(PLL_BASE, START, 0x01);
   12ea4:	e0bfff17 	ldw	r2,-4(fp)
   12ea8:	10800204 	addi	r2,r2,8
   12eac:	1007883a 	mov	r3,r2
   12eb0:	00800044 	movi	r2,1
   12eb4:	18800035 	stwio	r2,0(r3)

	timeout = 0;
   12eb8:	e03ffd15 	stw	zero,-12(fp)
	do
	{
	  	status_reconfig = IORD_32DIRECT(PLL_BASE, STATUS);
   12ebc:	e0bfff17 	ldw	r2,-4(fp)
   12ec0:	10800104 	addi	r2,r2,4
   12ec4:	10800037 	ldwio	r2,0(r2)
   12ec8:	e0bffe15 	stw	r2,-8(fp)
	  	if (timeout++ > PLLCFG_TIMEOUT) return PLLCFG_CX_TIMEOUT;
   12ecc:	e0fffd17 	ldw	r3,-12(fp)
   12ed0:	18800044 	addi	r2,r3,1
   12ed4:	e0bffd15 	stw	r2,-12(fp)
   12ed8:	008000b4 	movhi	r2,2
   12edc:	10a1a804 	addi	r2,r2,-31072
   12ee0:	10c0022e 	bgeu	r2,r3,12eec <start_Reconfig+0x58>
   12ee4:	00800284 	movi	r2,10
   12ee8:	00000306 	br	12ef8 <start_Reconfig+0x64>
	}
	while ((!status_reconfig) & 0x01);
   12eec:	e0bffe17 	ldw	r2,-8(fp)
   12ef0:	103ff226 	beq	r2,zero,12ebc <_gp+0xffff36e4>

	return PLLCFG_NOERR;
   12ef4:	0005883a 	mov	r2,zero
}
   12ef8:	e037883a 	mov	sp,fp
   12efc:	df000017 	ldw	fp,0(sp)
   12f00:	dec00104 	addi	sp,sp,4
   12f04:	f800283a 	ret

00012f08 <vctcxo_tamer_read>:
 * by the VCTCXO calibration algorithm to avoid constant read requests
 * going out to the DAC. Initial power-up state of the DAC is mid-scale.
 */
uint16_t vctcxo_trim_dac_value = 0x77FA;

uint8_t vctcxo_tamer_read(uint8_t addr) {
   12f08:	defffe04 	addi	sp,sp,-8
   12f0c:	df000115 	stw	fp,4(sp)
   12f10:	df000104 	addi	fp,sp,4
   12f14:	2005883a 	mov	r2,r4
   12f18:	e0bfff05 	stb	r2,-4(fp)
    return (uint8_t)IORD_8DIRECT(AVALON_MM_EXTERNAL_0_BASE, addr);
   12f1c:	e0bfff03 	ldbu	r2,-4(fp)
   12f20:	10818004 	addi	r2,r2,1536
   12f24:	10800023 	ldbuio	r2,0(r2)
   12f28:	10803fcc 	andi	r2,r2,255
}
   12f2c:	e037883a 	mov	sp,fp
   12f30:	df000017 	ldw	fp,0(sp)
   12f34:	dec00104 	addi	sp,sp,4
   12f38:	f800283a 	ret

00012f3c <vctcxo_tamer_write>:

void vctcxo_tamer_write(uint8_t addr, uint8_t data) {
   12f3c:	defffd04 	addi	sp,sp,-12
   12f40:	df000215 	stw	fp,8(sp)
   12f44:	df000204 	addi	fp,sp,8
   12f48:	2007883a 	mov	r3,r4
   12f4c:	2805883a 	mov	r2,r5
   12f50:	e0fffe05 	stb	r3,-8(fp)
   12f54:	e0bfff05 	stb	r2,-4(fp)
    IOWR_8DIRECT(AVALON_MM_EXTERNAL_0_BASE, addr, data);
   12f58:	e0bffe03 	ldbu	r2,-8(fp)
   12f5c:	10818004 	addi	r2,r2,1536
   12f60:	e0ffff03 	ldbu	r3,-4(fp)
   12f64:	10c00025 	stbio	r3,0(r2)
}
   12f68:	0001883a 	nop
   12f6c:	e037883a 	mov	sp,fp
   12f70:	df000017 	ldw	fp,0(sp)
   12f74:	dec00104 	addi	sp,sp,4
   12f78:	f800283a 	ret

00012f7c <vctcxo_tamer_reset_counters>:

void vctcxo_tamer_reset_counters(bool reset) {
   12f7c:	defffd04 	addi	sp,sp,-12
   12f80:	dfc00215 	stw	ra,8(sp)
   12f84:	df000115 	stw	fp,4(sp)
   12f88:	df000104 	addi	fp,sp,4
   12f8c:	2005883a 	mov	r2,r4
   12f90:	e0bfff05 	stb	r2,-4(fp)
    if( reset ) {
   12f94:	e0bfff03 	ldbu	r2,-4(fp)
   12f98:	10000426 	beq	r2,zero,12fac <vctcxo_tamer_reset_counters+0x30>
        vctcxo_tamer_ctrl_reg |= VT_CTRL_RESET;
   12f9c:	d0a0c5c3 	ldbu	r2,-31977(gp)
   12fa0:	10800054 	ori	r2,r2,1
   12fa4:	d0a0c5c5 	stb	r2,-31977(gp)
   12fa8:	00000406 	br	12fbc <vctcxo_tamer_reset_counters+0x40>
    } else {
        vctcxo_tamer_ctrl_reg &= ~VT_CTRL_RESET;
   12fac:	d0e0c5c3 	ldbu	r3,-31977(gp)
   12fb0:	00bfff84 	movi	r2,-2
   12fb4:	1884703a 	and	r2,r3,r2
   12fb8:	d0a0c5c5 	stb	r2,-31977(gp)
    }

    vctcxo_tamer_write(VT_CTRL_ADDR, vctcxo_tamer_ctrl_reg);
   12fbc:	d0a0c5c3 	ldbu	r2,-31977(gp)
   12fc0:	10803fcc 	andi	r2,r2,255
   12fc4:	100b883a 	mov	r5,r2
   12fc8:	0009883a 	mov	r4,zero
   12fcc:	0012f3c0 	call	12f3c <vctcxo_tamer_write>
    return;
   12fd0:	0001883a 	nop
}
   12fd4:	e037883a 	mov	sp,fp
   12fd8:	dfc00117 	ldw	ra,4(sp)
   12fdc:	df000017 	ldw	fp,0(sp)
   12fe0:	dec00204 	addi	sp,sp,8
   12fe4:	f800283a 	ret

00012fe8 <vctcxo_tamer_enable_isr>:

void vctcxo_tamer_enable_isr(bool enable) {
   12fe8:	defffd04 	addi	sp,sp,-12
   12fec:	dfc00215 	stw	ra,8(sp)
   12ff0:	df000115 	stw	fp,4(sp)
   12ff4:	df000104 	addi	fp,sp,4
   12ff8:	2005883a 	mov	r2,r4
   12ffc:	e0bfff05 	stb	r2,-4(fp)
    if( enable ) {
   13000:	e0bfff03 	ldbu	r2,-4(fp)
   13004:	10000426 	beq	r2,zero,13018 <vctcxo_tamer_enable_isr+0x30>
        vctcxo_tamer_ctrl_reg |= VT_CTRL_IRQ_EN;
   13008:	d0a0c5c3 	ldbu	r2,-31977(gp)
   1300c:	10800414 	ori	r2,r2,16
   13010:	d0a0c5c5 	stb	r2,-31977(gp)
   13014:	00000406 	br	13028 <vctcxo_tamer_enable_isr+0x40>
    } else {
        vctcxo_tamer_ctrl_reg &= ~VT_CTRL_IRQ_EN;
   13018:	d0e0c5c3 	ldbu	r3,-31977(gp)
   1301c:	00bffbc4 	movi	r2,-17
   13020:	1884703a 	and	r2,r3,r2
   13024:	d0a0c5c5 	stb	r2,-31977(gp)
    }

    vctcxo_tamer_write(VT_CTRL_ADDR, vctcxo_tamer_ctrl_reg);
   13028:	d0a0c5c3 	ldbu	r2,-31977(gp)
   1302c:	10803fcc 	andi	r2,r2,255
   13030:	100b883a 	mov	r5,r2
   13034:	0009883a 	mov	r4,zero
   13038:	0012f3c0 	call	12f3c <vctcxo_tamer_write>
    return;
   1303c:	0001883a 	nop
}
   13040:	e037883a 	mov	sp,fp
   13044:	dfc00117 	ldw	ra,4(sp)
   13048:	df000017 	ldw	fp,0(sp)
   1304c:	dec00204 	addi	sp,sp,8
   13050:	f800283a 	ret

00013054 <vctcxo_tamer_clear_isr>:

void vctcxo_tamer_clear_isr() {
   13054:	defffe04 	addi	sp,sp,-8
   13058:	dfc00115 	stw	ra,4(sp)
   1305c:	df000015 	stw	fp,0(sp)
   13060:	d839883a 	mov	fp,sp
    vctcxo_tamer_write(VT_CTRL_ADDR, vctcxo_tamer_ctrl_reg | VT_CTRL_IRQ_CLR);
   13064:	d0a0c5c3 	ldbu	r2,-31977(gp)
   13068:	10800814 	ori	r2,r2,32
   1306c:	10803fcc 	andi	r2,r2,255
   13070:	100b883a 	mov	r5,r2
   13074:	0009883a 	mov	r4,zero
   13078:	0012f3c0 	call	12f3c <vctcxo_tamer_write>
    return;
   1307c:	0001883a 	nop
}
   13080:	e037883a 	mov	sp,fp
   13084:	dfc00117 	ldw	ra,4(sp)
   13088:	df000017 	ldw	fp,0(sp)
   1308c:	dec00204 	addi	sp,sp,8
   13090:	f800283a 	ret

00013094 <vctcxo_tamer_set_tune_mode>:

void vctcxo_tamer_set_tune_mode(vctcxo_tamer_mode mode) {
   13094:	defffd04 	addi	sp,sp,-12
   13098:	dfc00215 	stw	ra,8(sp)
   1309c:	df000115 	stw	fp,4(sp)
   130a0:	df000104 	addi	fp,sp,4
   130a4:	e13fff15 	stw	r4,-4(fp)

    switch (mode) {
   130a8:	e0bfff17 	ldw	r2,-4(fp)
   130ac:	1005883a 	mov	r2,r2
   130b0:	108000e8 	cmpgeui	r2,r2,3
   130b4:	1000221e 	bne	r2,zero,13140 <vctcxo_tamer_set_tune_mode+0xac>
        case VCTCXO_TAMER_DISABLED:
        case VCTCXO_TAMER_1_PPS:
        case VCTCXO_TAMER_10_MHZ:
            vctcxo_tamer_enable_isr(false);
   130b8:	0009883a 	mov	r4,zero
   130bc:	0012fe80 	call	12fe8 <vctcxo_tamer_enable_isr>
            break;
   130c0:	0001883a 	nop
            /* Erroneous value */
            return;
    }

    /* Set tuning mode */
    vctcxo_tamer_ctrl_reg &= ~VT_CTRL_TUNE_MODE;
   130c4:	d0a0c5c3 	ldbu	r2,-31977(gp)
   130c8:	10800fcc 	andi	r2,r2,63
   130cc:	d0a0c5c5 	stb	r2,-31977(gp)
    vctcxo_tamer_ctrl_reg |= (((uint8_t) mode) << 6);
   130d0:	e0bfff17 	ldw	r2,-4(fp)
   130d4:	10803fcc 	andi	r2,r2,255
   130d8:	100491ba 	slli	r2,r2,6
   130dc:	1007883a 	mov	r3,r2
   130e0:	d0a0c5c3 	ldbu	r2,-31977(gp)
   130e4:	1884b03a 	or	r2,r3,r2
   130e8:	d0a0c5c5 	stb	r2,-31977(gp)
    vctcxo_tamer_write(VT_CTRL_ADDR, vctcxo_tamer_ctrl_reg);
   130ec:	d0a0c5c3 	ldbu	r2,-31977(gp)
   130f0:	10803fcc 	andi	r2,r2,255
   130f4:	100b883a 	mov	r5,r2
   130f8:	0009883a 	mov	r4,zero
   130fc:	0012f3c0 	call	12f3c <vctcxo_tamer_write>

    /* Reset the counters */
    vctcxo_tamer_reset_counters( true );
   13100:	01000044 	movi	r4,1
   13104:	0012f7c0 	call	12f7c <vctcxo_tamer_reset_counters>

    /* Take counters out of reset if tuning mode is not DISABLED */
    if( mode != 0x00 ) {
   13108:	e0bfff17 	ldw	r2,-4(fp)
   1310c:	10000226 	beq	r2,zero,13118 <vctcxo_tamer_set_tune_mode+0x84>
        vctcxo_tamer_reset_counters( false );
   13110:	0009883a 	mov	r4,zero
   13114:	0012f7c0 	call	12f7c <vctcxo_tamer_reset_counters>
    }

    switch (mode) {
   13118:	e0bfff17 	ldw	r2,-4(fp)
   1311c:	10bfffc4 	addi	r2,r2,-1
   13120:	108000a8 	cmpgeui	r2,r2,2
   13124:	1000031e 	bne	r2,zero,13134 <vctcxo_tamer_set_tune_mode+0xa0>
        case VCTCXO_TAMER_1_PPS:
        case VCTCXO_TAMER_10_MHZ:
            vctcxo_tamer_enable_isr(true);
   13128:	01000044 	movi	r4,1
   1312c:	0012fe80 	call	12fe8 <vctcxo_tamer_enable_isr>
            break;
   13130:	00000106 	br	13138 <vctcxo_tamer_set_tune_mode+0xa4>

        default:
            /* Leave ISR disabled otherwise */
            break;
   13134:	0001883a 	nop
    }

    return;
   13138:	0001883a 	nop
   1313c:	00000106 	br	13144 <vctcxo_tamer_set_tune_mode+0xb0>
            vctcxo_tamer_enable_isr(false);
            break;

        default:
            /* Erroneous value */
            return;
   13140:	0001883a 	nop
            /* Leave ISR disabled otherwise */
            break;
    }

    return;
}
   13144:	e037883a 	mov	sp,fp
   13148:	dfc00117 	ldw	ra,4(sp)
   1314c:	df000017 	ldw	fp,0(sp)
   13150:	dec00204 	addi	sp,sp,8
   13154:	f800283a 	ret

00013158 <vctcxo_tamer_read_count>:

int32_t vctcxo_tamer_read_count(uint8_t addr) {
   13158:	defffb04 	addi	sp,sp,-20
   1315c:	df000415 	stw	fp,16(sp)
   13160:	df000404 	addi	fp,sp,16
   13164:	2005883a 	mov	r2,r4
   13168:	e0bfff05 	stb	r2,-4(fp)
    uint32_t base = AVALON_MM_EXTERNAL_0_BASE;
   1316c:	00818004 	movi	r2,1536
   13170:	e0bffc15 	stw	r2,-16(fp)
    uint8_t offset = addr;
   13174:	e0bfff03 	ldbu	r2,-4(fp)
   13178:	e0bffd05 	stb	r2,-12(fp)
    int32_t value = 0;
   1317c:	e03ffe15 	stw	zero,-8(fp)

    value  = IORD_8DIRECT(base, offset++);
   13180:	e0bffd03 	ldbu	r2,-12(fp)
   13184:	10c00044 	addi	r3,r2,1
   13188:	e0fffd05 	stb	r3,-12(fp)
   1318c:	10c03fcc 	andi	r3,r2,255
   13190:	e0bffc17 	ldw	r2,-16(fp)
   13194:	1885883a 	add	r2,r3,r2
   13198:	10800023 	ldbuio	r2,0(r2)
   1319c:	10803fcc 	andi	r2,r2,255
   131a0:	e0bffe15 	stw	r2,-8(fp)
    value |= ((int32_t) IORD_8DIRECT(base, offset++)) << 8;
   131a4:	e0bffd03 	ldbu	r2,-12(fp)
   131a8:	10c00044 	addi	r3,r2,1
   131ac:	e0fffd05 	stb	r3,-12(fp)
   131b0:	10c03fcc 	andi	r3,r2,255
   131b4:	e0bffc17 	ldw	r2,-16(fp)
   131b8:	1885883a 	add	r2,r3,r2
   131bc:	10800023 	ldbuio	r2,0(r2)
   131c0:	10803fcc 	andi	r2,r2,255
   131c4:	1004923a 	slli	r2,r2,8
   131c8:	e0fffe17 	ldw	r3,-8(fp)
   131cc:	1884b03a 	or	r2,r3,r2
   131d0:	e0bffe15 	stw	r2,-8(fp)
    value |= ((int32_t) IORD_8DIRECT(base, offset++)) << 16;
   131d4:	e0bffd03 	ldbu	r2,-12(fp)
   131d8:	10c00044 	addi	r3,r2,1
   131dc:	e0fffd05 	stb	r3,-12(fp)
   131e0:	10c03fcc 	andi	r3,r2,255
   131e4:	e0bffc17 	ldw	r2,-16(fp)
   131e8:	1885883a 	add	r2,r3,r2
   131ec:	10800023 	ldbuio	r2,0(r2)
   131f0:	10803fcc 	andi	r2,r2,255
   131f4:	1004943a 	slli	r2,r2,16
   131f8:	e0fffe17 	ldw	r3,-8(fp)
   131fc:	1884b03a 	or	r2,r3,r2
   13200:	e0bffe15 	stw	r2,-8(fp)
    value |= ((int32_t) IORD_8DIRECT(base, offset++)) << 24;
   13204:	e0bffd03 	ldbu	r2,-12(fp)
   13208:	10c00044 	addi	r3,r2,1
   1320c:	e0fffd05 	stb	r3,-12(fp)
   13210:	10c03fcc 	andi	r3,r2,255
   13214:	e0bffc17 	ldw	r2,-16(fp)
   13218:	1885883a 	add	r2,r3,r2
   1321c:	10800023 	ldbuio	r2,0(r2)
   13220:	10803fcc 	andi	r2,r2,255
   13224:	1004963a 	slli	r2,r2,24
   13228:	e0fffe17 	ldw	r3,-8(fp)
   1322c:	1884b03a 	or	r2,r3,r2
   13230:	e0bffe15 	stw	r2,-8(fp)

    return value;
   13234:	e0bffe17 	ldw	r2,-8(fp)
}
   13238:	e037883a 	mov	sp,fp
   1323c:	df000017 	ldw	fp,0(sp)
   13240:	dec00104 	addi	sp,sp,4
   13244:	f800283a 	ret

00013248 <vctcxo_trim_dac_write>:

void vctcxo_trim_dac_write(uint8_t cmd, uint16_t val)
{
   13248:	defffb04 	addi	sp,sp,-20
   1324c:	dfc00415 	stw	ra,16(sp)
   13250:	df000315 	stw	fp,12(sp)
   13254:	df000304 	addi	fp,sp,12
   13258:	2007883a 	mov	r3,r4
   1325c:	2805883a 	mov	r2,r5
   13260:	e0fffe05 	stb	r3,-8(fp)
   13264:	e0bfff0d 	sth	r2,-4(fp)
	uint8_t tuned_val_lsb;
	uint8_t tuned_val_msb;

	tuned_val_lsb = (uint8_t) (val & 0x00FF);
   13268:	e0bfff0b 	ldhu	r2,-4(fp)
   1326c:	e0bffd05 	stb	r2,-12(fp)
	tuned_val_msb = (uint8_t) ((val & 0xFF00) >> 8);
   13270:	e0bfff0b 	ldhu	r2,-4(fp)
   13274:	1004d23a 	srli	r2,r2,8
   13278:	e0bffd45 	stb	r2,-11(fp)

    //write tuned val to VCTCXO_tamer MM registers
    vctcxo_tamer_write(VT_DAC_TUNNED_VAL_ADDR0, tuned_val_lsb);
   1327c:	e0bffd03 	ldbu	r2,-12(fp)
   13280:	100b883a 	mov	r5,r2
   13284:	01000804 	movi	r4,32
   13288:	0012f3c0 	call	12f3c <vctcxo_tamer_write>
    vctcxo_tamer_write(VT_DAC_TUNNED_VAL_ADDR1, tuned_val_msb);
   1328c:	e0bffd43 	ldbu	r2,-11(fp)
   13290:	100b883a 	mov	r5,r2
   13294:	01000844 	movi	r4,33
   13298:	0012f3c0 	call	12f3c <vctcxo_tamer_write>

}
   1329c:	0001883a 	nop
   132a0:	e037883a 	mov	sp,fp
   132a4:	dfc00117 	ldw	ra,4(sp)
   132a8:	df000017 	ldw	fp,0(sp)
   132ac:	dec00204 	addi	sp,sp,8
   132b0:	f800283a 	ret

000132b4 <vctcxo_tamer_isr>:


void vctcxo_tamer_isr(void *context) {
   132b4:	defffb04 	addi	sp,sp,-20
   132b8:	dfc00415 	stw	ra,16(sp)
   132bc:	df000315 	stw	fp,12(sp)
   132c0:	df000304 	addi	fp,sp,12
   132c4:	e13fff15 	stw	r4,-4(fp)
    struct vctcxo_tamer_pkt_buf *pkt = (struct vctcxo_tamer_pkt_buf *)context;
   132c8:	e0bfff17 	ldw	r2,-4(fp)
   132cc:	e0bffd15 	stw	r2,-12(fp)
    uint8_t error_status = 0x00;
   132d0:	e03ffe05 	stb	zero,-8(fp)

    /* Disable interrupts */
    vctcxo_tamer_enable_isr( false );
   132d4:	0009883a 	mov	r4,zero
   132d8:	0012fe80 	call	12fe8 <vctcxo_tamer_enable_isr>

    /* Reset (stop) the counters */
    vctcxo_tamer_reset_counters( true );
   132dc:	01000044 	movi	r4,1
   132e0:	0012f7c0 	call	12f7c <vctcxo_tamer_reset_counters>

    /* Read the current count values */
    pkt->pps_1s_error   = vctcxo_tamer_read_count(VT_ERR_1S_ADDR);
   132e4:	01000104 	movi	r4,4
   132e8:	00131580 	call	13158 <vctcxo_tamer_read_count>
   132ec:	1007883a 	mov	r3,r2
   132f0:	e0bffd17 	ldw	r2,-12(fp)
   132f4:	10c00115 	stw	r3,4(r2)
    pkt->pps_10s_error  = vctcxo_tamer_read_count(VT_ERR_10S_ADDR);
   132f8:	01000304 	movi	r4,12
   132fc:	00131580 	call	13158 <vctcxo_tamer_read_count>
   13300:	1007883a 	mov	r3,r2
   13304:	e0bffd17 	ldw	r2,-12(fp)
   13308:	10c00315 	stw	r3,12(r2)
    pkt->pps_100s_error = vctcxo_tamer_read_count(VT_ERR_100S_ADDR);
   1330c:	01000504 	movi	r4,20
   13310:	00131580 	call	13158 <vctcxo_tamer_read_count>
   13314:	1007883a 	mov	r3,r2
   13318:	e0bffd17 	ldw	r2,-12(fp)
   1331c:	10c00515 	stw	r3,20(r2)

    /* Read the error status register */
    error_status = vctcxo_tamer_read(VT_STAT_ADDR);
   13320:	01000044 	movi	r4,1
   13324:	0012f080 	call	12f08 <vctcxo_tamer_read>
   13328:	e0bffe05 	stb	r2,-8(fp)

    /* Set the appropriate flags in the packet buffer */
    pkt->pps_1s_error_flag   = (error_status & VT_STAT_ERR_1S)   ? true : false;
   1332c:	e0bffe03 	ldbu	r2,-8(fp)
   13330:	1080004c 	andi	r2,r2,1
   13334:	1004c03a 	cmpne	r2,r2,zero
   13338:	1007883a 	mov	r3,r2
   1333c:	e0bffd17 	ldw	r2,-12(fp)
   13340:	10c00205 	stb	r3,8(r2)
    pkt->pps_10s_error_flag  = (error_status & VT_STAT_ERR_10S)  ? true : false;
   13344:	e0bffe03 	ldbu	r2,-8(fp)
   13348:	1080008c 	andi	r2,r2,2
   1334c:	1004c03a 	cmpne	r2,r2,zero
   13350:	1007883a 	mov	r3,r2
   13354:	e0bffd17 	ldw	r2,-12(fp)
   13358:	10c00405 	stb	r3,16(r2)
    pkt->pps_100s_error_flag = (error_status & VT_STAT_ERR_100S) ? true : false;
   1335c:	e0bffe03 	ldbu	r2,-8(fp)
   13360:	1080010c 	andi	r2,r2,4
   13364:	1004c03a 	cmpne	r2,r2,zero
   13368:	1007883a 	mov	r3,r2
   1336c:	e0bffd17 	ldw	r2,-12(fp)
   13370:	10c00605 	stb	r3,24(r2)

    /* Clear interrupt */
    vctcxo_tamer_clear_isr();
   13374:	00130540 	call	13054 <vctcxo_tamer_clear_isr>

    /* Tell the main loop that there is a request pending */
    pkt->ready = true;
   13378:	e0bffd17 	ldw	r2,-12(fp)
   1337c:	00c00044 	movi	r3,1
   13380:	10c00005 	stb	r3,0(r2)

    return;
   13384:	0001883a 	nop
}
   13388:	e037883a 	mov	sp,fp
   1338c:	dfc00117 	ldw	ra,4(sp)
   13390:	df000017 	ldw	fp,0(sp)
   13394:	dec00204 	addi	sp,sp,8
   13398:	f800283a 	ret

0001339c <vctcxo_tamer_init>:


void vctcxo_tamer_init(){
   1339c:	defffe04 	addi	sp,sp,-8
   133a0:	dfc00115 	stw	ra,4(sp)
   133a4:	df000015 	stw	fp,0(sp)
   133a8:	d839883a 	mov	fp,sp
    /* Default VCTCXO Tamer and its interrupts to be disabled. */
	vctcxo_tamer_write(VT_STATE_ADDR, 0x00);
   133ac:	000b883a 	mov	r5,zero
   133b0:	01000704 	movi	r4,28
   133b4:	0012f3c0 	call	12f3c <vctcxo_tamer_write>
	/* Write status to to state register*/
    vctcxo_tamer_set_tune_mode(VCTCXO_TAMER_1_PPS);
   133b8:	01000044 	movi	r4,1
   133bc:	00130940 	call	13094 <vctcxo_tamer_set_tune_mode>
}
   133c0:	0001883a 	nop
   133c4:	e037883a 	mov	sp,fp
   133c8:	dfc00117 	ldw	ra,4(sp)
   133cc:	df000017 	ldw	fp,0(sp)
   133d0:	dec00204 	addi	sp,sp,8
   133d4:	f800283a 	ret

000133d8 <vctcxo_tamer_dis>:

void vctcxo_tamer_dis(){
   133d8:	defffe04 	addi	sp,sp,-8
   133dc:	dfc00115 	stw	ra,4(sp)
   133e0:	df000015 	stw	fp,0(sp)
   133e4:	d839883a 	mov	fp,sp
    /* Default VCTCXO Tamer and its interrupts to be disabled. */
    vctcxo_tamer_set_tune_mode(VCTCXO_TAMER_DISABLED);
   133e8:	0009883a 	mov	r4,zero
   133ec:	00130940 	call	13094 <vctcxo_tamer_set_tune_mode>

	/* Write status to to state register*/
	vctcxo_tamer_write(VT_STATE_ADDR, 0x00);
   133f0:	000b883a 	mov	r5,zero
   133f4:	01000704 	movi	r4,28
   133f8:	0012f3c0 	call	12f3c <vctcxo_tamer_write>
}
   133fc:	0001883a 	nop
   13400:	e037883a 	mov	sp,fp
   13404:	dfc00117 	ldw	ra,4(sp)
   13408:	df000017 	ldw	fp,0(sp)
   1340c:	dec00204 	addi	sp,sp,8
   13410:	f800283a 	ret

00013414 <round>:
   13414:	289ffc2c 	andhi	r2,r5,32752
   13418:	1005d53a 	srai	r2,r2,20
   1341c:	024004c4 	movi	r9,19
   13420:	2807883a 	mov	r3,r5
   13424:	123f0044 	addi	r8,r2,-1023
   13428:	200d883a 	mov	r6,r4
   1342c:	280f883a 	mov	r7,r5
   13430:	4a000916 	blt	r9,r8,13458 <round+0x44>
   13434:	40002516 	blt	r8,zero,134cc <round+0xb8>
   13438:	00800434 	movhi	r2,16
   1343c:	10bfffc4 	addi	r2,r2,-1
   13440:	1205d83a 	sra	r2,r2,r8
   13444:	2888703a 	and	r4,r5,r2
   13448:	2000181e 	bne	r4,zero,134ac <round+0x98>
   1344c:	3000171e 	bne	r6,zero,134ac <round+0x98>
   13450:	0005883a 	mov	r2,zero
   13454:	f800283a 	ret
   13458:	02400cc4 	movi	r9,51
   1345c:	4a00040e 	bge	r9,r8,13470 <round+0x5c>
   13460:	00810004 	movi	r2,1024
   13464:	40802126 	beq	r8,r2,134ec <round+0xd8>
   13468:	3005883a 	mov	r2,r6
   1346c:	f800283a 	ret
   13470:	013fffc4 	movi	r4,-1
   13474:	10befb44 	addi	r2,r2,-1043
   13478:	2084d83a 	srl	r2,r4,r2
   1347c:	3088703a 	and	r4,r6,r2
   13480:	20001726 	beq	r4,zero,134e0 <round+0xcc>
   13484:	4a11c83a 	sub	r8,r9,r8
   13488:	02400044 	movi	r9,1
   1348c:	4a10983a 	sll	r8,r9,r8
   13490:	4191883a 	add	r8,r8,r6
   13494:	4180012e 	bgeu	r8,r6,1349c <round+0x88>
   13498:	2a47883a 	add	r3,r5,r9
   1349c:	0084303a 	nor	r2,zero,r2
   134a0:	120c703a 	and	r6,r2,r8
   134a4:	3005883a 	mov	r2,r6
   134a8:	f800283a 	ret
   134ac:	00c00234 	movhi	r3,8
   134b0:	1a07d83a 	sra	r3,r3,r8
   134b4:	0084303a 	nor	r2,zero,r2
   134b8:	000d883a 	mov	r6,zero
   134bc:	19c7883a 	add	r3,r3,r7
   134c0:	1886703a 	and	r3,r3,r2
   134c4:	3005883a 	mov	r2,r6
   134c8:	f800283a 	ret
   134cc:	00bfffc4 	movi	r2,-1
   134d0:	28e0002c 	andhi	r3,r5,32768
   134d4:	40800c26 	beq	r8,r2,13508 <round+0xf4>
   134d8:	000d883a 	mov	r6,zero
   134dc:	003fe206 	br	13468 <_gp+0xffff3c90>
   134e0:	3005883a 	mov	r2,r6
   134e4:	2807883a 	mov	r3,r5
   134e8:	f800283a 	ret
   134ec:	deffff04 	addi	sp,sp,-4
   134f0:	280f883a 	mov	r7,r5
   134f4:	dfc00015 	stw	ra,0(sp)
   134f8:	00140f80 	call	140f8 <__adddf3>
   134fc:	dfc00017 	ldw	ra,0(sp)
   13500:	dec00104 	addi	sp,sp,4
   13504:	f800283a 	ret
   13508:	18cffc34 	orhi	r3,r3,16368
   1350c:	000d883a 	mov	r6,zero
   13510:	003fd506 	br	13468 <_gp+0xffff3c90>

00013514 <__fixunsdfsi>:
   13514:	defffd04 	addi	sp,sp,-12
   13518:	000d883a 	mov	r6,zero
   1351c:	01d07834 	movhi	r7,16864
   13520:	dc400115 	stw	r17,4(sp)
   13524:	dc000015 	stw	r16,0(sp)
   13528:	dfc00215 	stw	ra,8(sp)
   1352c:	2023883a 	mov	r17,r4
   13530:	2821883a 	mov	r16,r5
   13534:	00153740 	call	15374 <__gedf2>
   13538:	1000080e 	bge	r2,zero,1355c <__fixunsdfsi+0x48>
   1353c:	8809883a 	mov	r4,r17
   13540:	800b883a 	mov	r5,r16
   13544:	0015d4c0 	call	15d4c <__fixdfsi>
   13548:	dfc00217 	ldw	ra,8(sp)
   1354c:	dc400117 	ldw	r17,4(sp)
   13550:	dc000017 	ldw	r16,0(sp)
   13554:	dec00304 	addi	sp,sp,12
   13558:	f800283a 	ret
   1355c:	000d883a 	mov	r6,zero
   13560:	01d07834 	movhi	r7,16864
   13564:	8809883a 	mov	r4,r17
   13568:	800b883a 	mov	r5,r16
   1356c:	00154500 	call	15450 <__subdf3>
   13570:	180b883a 	mov	r5,r3
   13574:	1009883a 	mov	r4,r2
   13578:	0015d4c0 	call	15d4c <__fixdfsi>
   1357c:	00e00034 	movhi	r3,32768
   13580:	10c5883a 	add	r2,r2,r3
   13584:	003ff006 	br	13548 <_gp+0xffff3d70>

00013588 <__divsi3>:
   13588:	20001b16 	blt	r4,zero,135f8 <__divsi3+0x70>
   1358c:	000f883a 	mov	r7,zero
   13590:	28001616 	blt	r5,zero,135ec <__divsi3+0x64>
   13594:	200d883a 	mov	r6,r4
   13598:	29001a2e 	bgeu	r5,r4,13604 <__divsi3+0x7c>
   1359c:	00800804 	movi	r2,32
   135a0:	00c00044 	movi	r3,1
   135a4:	00000106 	br	135ac <__divsi3+0x24>
   135a8:	10000d26 	beq	r2,zero,135e0 <__divsi3+0x58>
   135ac:	294b883a 	add	r5,r5,r5
   135b0:	10bfffc4 	addi	r2,r2,-1
   135b4:	18c7883a 	add	r3,r3,r3
   135b8:	293ffb36 	bltu	r5,r4,135a8 <_gp+0xffff3dd0>
   135bc:	0005883a 	mov	r2,zero
   135c0:	18000726 	beq	r3,zero,135e0 <__divsi3+0x58>
   135c4:	0005883a 	mov	r2,zero
   135c8:	31400236 	bltu	r6,r5,135d4 <__divsi3+0x4c>
   135cc:	314dc83a 	sub	r6,r6,r5
   135d0:	10c4b03a 	or	r2,r2,r3
   135d4:	1806d07a 	srli	r3,r3,1
   135d8:	280ad07a 	srli	r5,r5,1
   135dc:	183ffa1e 	bne	r3,zero,135c8 <_gp+0xffff3df0>
   135e0:	38000126 	beq	r7,zero,135e8 <__divsi3+0x60>
   135e4:	0085c83a 	sub	r2,zero,r2
   135e8:	f800283a 	ret
   135ec:	014bc83a 	sub	r5,zero,r5
   135f0:	39c0005c 	xori	r7,r7,1
   135f4:	003fe706 	br	13594 <_gp+0xffff3dbc>
   135f8:	0109c83a 	sub	r4,zero,r4
   135fc:	01c00044 	movi	r7,1
   13600:	003fe306 	br	13590 <_gp+0xffff3db8>
   13604:	00c00044 	movi	r3,1
   13608:	003fee06 	br	135c4 <_gp+0xffff3dec>

0001360c <__modsi3>:
   1360c:	20001716 	blt	r4,zero,1366c <__modsi3+0x60>
   13610:	000f883a 	mov	r7,zero
   13614:	2005883a 	mov	r2,r4
   13618:	28001216 	blt	r5,zero,13664 <__modsi3+0x58>
   1361c:	2900162e 	bgeu	r5,r4,13678 <__modsi3+0x6c>
   13620:	01800804 	movi	r6,32
   13624:	00c00044 	movi	r3,1
   13628:	00000106 	br	13630 <__modsi3+0x24>
   1362c:	30000a26 	beq	r6,zero,13658 <__modsi3+0x4c>
   13630:	294b883a 	add	r5,r5,r5
   13634:	31bfffc4 	addi	r6,r6,-1
   13638:	18c7883a 	add	r3,r3,r3
   1363c:	293ffb36 	bltu	r5,r4,1362c <_gp+0xffff3e54>
   13640:	18000526 	beq	r3,zero,13658 <__modsi3+0x4c>
   13644:	1806d07a 	srli	r3,r3,1
   13648:	11400136 	bltu	r2,r5,13650 <__modsi3+0x44>
   1364c:	1145c83a 	sub	r2,r2,r5
   13650:	280ad07a 	srli	r5,r5,1
   13654:	183ffb1e 	bne	r3,zero,13644 <_gp+0xffff3e6c>
   13658:	38000126 	beq	r7,zero,13660 <__modsi3+0x54>
   1365c:	0085c83a 	sub	r2,zero,r2
   13660:	f800283a 	ret
   13664:	014bc83a 	sub	r5,zero,r5
   13668:	003fec06 	br	1361c <_gp+0xffff3e44>
   1366c:	0109c83a 	sub	r4,zero,r4
   13670:	01c00044 	movi	r7,1
   13674:	003fe706 	br	13614 <_gp+0xffff3e3c>
   13678:	00c00044 	movi	r3,1
   1367c:	003ff106 	br	13644 <_gp+0xffff3e6c>

00013680 <__udivsi3>:
   13680:	200d883a 	mov	r6,r4
   13684:	2900152e 	bgeu	r5,r4,136dc <__udivsi3+0x5c>
   13688:	28001416 	blt	r5,zero,136dc <__udivsi3+0x5c>
   1368c:	00800804 	movi	r2,32
   13690:	00c00044 	movi	r3,1
   13694:	00000206 	br	136a0 <__udivsi3+0x20>
   13698:	10000e26 	beq	r2,zero,136d4 <__udivsi3+0x54>
   1369c:	28000516 	blt	r5,zero,136b4 <__udivsi3+0x34>
   136a0:	294b883a 	add	r5,r5,r5
   136a4:	10bfffc4 	addi	r2,r2,-1
   136a8:	18c7883a 	add	r3,r3,r3
   136ac:	293ffa36 	bltu	r5,r4,13698 <_gp+0xffff3ec0>
   136b0:	18000826 	beq	r3,zero,136d4 <__udivsi3+0x54>
   136b4:	0005883a 	mov	r2,zero
   136b8:	31400236 	bltu	r6,r5,136c4 <__udivsi3+0x44>
   136bc:	314dc83a 	sub	r6,r6,r5
   136c0:	10c4b03a 	or	r2,r2,r3
   136c4:	1806d07a 	srli	r3,r3,1
   136c8:	280ad07a 	srli	r5,r5,1
   136cc:	183ffa1e 	bne	r3,zero,136b8 <_gp+0xffff3ee0>
   136d0:	f800283a 	ret
   136d4:	0005883a 	mov	r2,zero
   136d8:	f800283a 	ret
   136dc:	00c00044 	movi	r3,1
   136e0:	003ff406 	br	136b4 <_gp+0xffff3edc>

000136e4 <__umodsi3>:
   136e4:	2005883a 	mov	r2,r4
   136e8:	2900122e 	bgeu	r5,r4,13734 <__umodsi3+0x50>
   136ec:	28001116 	blt	r5,zero,13734 <__umodsi3+0x50>
   136f0:	01800804 	movi	r6,32
   136f4:	00c00044 	movi	r3,1
   136f8:	00000206 	br	13704 <__umodsi3+0x20>
   136fc:	30000c26 	beq	r6,zero,13730 <__umodsi3+0x4c>
   13700:	28000516 	blt	r5,zero,13718 <__umodsi3+0x34>
   13704:	294b883a 	add	r5,r5,r5
   13708:	31bfffc4 	addi	r6,r6,-1
   1370c:	18c7883a 	add	r3,r3,r3
   13710:	293ffa36 	bltu	r5,r4,136fc <_gp+0xffff3f24>
   13714:	18000626 	beq	r3,zero,13730 <__umodsi3+0x4c>
   13718:	1806d07a 	srli	r3,r3,1
   1371c:	11400136 	bltu	r2,r5,13724 <__umodsi3+0x40>
   13720:	1145c83a 	sub	r2,r2,r5
   13724:	280ad07a 	srli	r5,r5,1
   13728:	183ffb1e 	bne	r3,zero,13718 <_gp+0xffff3f40>
   1372c:	f800283a 	ret
   13730:	f800283a 	ret
   13734:	00c00044 	movi	r3,1
   13738:	003ff706 	br	13718 <_gp+0xffff3f40>

0001373c <__mulsi3>:
   1373c:	0005883a 	mov	r2,zero
   13740:	20000726 	beq	r4,zero,13760 <__mulsi3+0x24>
   13744:	20c0004c 	andi	r3,r4,1
   13748:	2008d07a 	srli	r4,r4,1
   1374c:	18000126 	beq	r3,zero,13754 <__mulsi3+0x18>
   13750:	1145883a 	add	r2,r2,r5
   13754:	294b883a 	add	r5,r5,r5
   13758:	203ffa1e 	bne	r4,zero,13744 <_gp+0xffff3f6c>
   1375c:	f800283a 	ret
   13760:	f800283a 	ret

00013764 <__divsf3>:
   13764:	defff504 	addi	sp,sp,-44
   13768:	200cd5fa 	srli	r6,r4,23
   1376c:	dcc00415 	stw	r19,16(sp)
   13770:	2026d7fa 	srli	r19,r4,31
   13774:	00c02034 	movhi	r3,128
   13778:	dd800715 	stw	r22,28(sp)
   1377c:	dd000515 	stw	r20,20(sp)
   13780:	dc800315 	stw	r18,12(sp)
   13784:	18ffffc4 	addi	r3,r3,-1
   13788:	dfc00a15 	stw	ra,40(sp)
   1378c:	df000915 	stw	fp,36(sp)
   13790:	ddc00815 	stw	r23,32(sp)
   13794:	dd400615 	stw	r21,24(sp)
   13798:	dc400215 	stw	r17,8(sp)
   1379c:	dc000115 	stw	r16,4(sp)
   137a0:	35003fcc 	andi	r20,r6,255
   137a4:	1924703a 	and	r18,r3,r4
   137a8:	9d803fcc 	andi	r22,r19,255
   137ac:	a0005226 	beq	r20,zero,138f8 <__divsf3+0x194>
   137b0:	00803fc4 	movi	r2,255
   137b4:	a0802e26 	beq	r20,r2,13870 <__divsf3+0x10c>
   137b8:	91002034 	orhi	r4,r18,128
   137bc:	202490fa 	slli	r18,r4,3
   137c0:	a53fe044 	addi	r20,r20,-127
   137c4:	0021883a 	mov	r16,zero
   137c8:	002f883a 	mov	r23,zero
   137cc:	280cd5fa 	srli	r6,r5,23
   137d0:	282ad7fa 	srli	r21,r5,31
   137d4:	00c02034 	movhi	r3,128
   137d8:	18ffffc4 	addi	r3,r3,-1
   137dc:	31803fcc 	andi	r6,r6,255
   137e0:	1962703a 	and	r17,r3,r5
   137e4:	af003fcc 	andi	fp,r21,255
   137e8:	30004a26 	beq	r6,zero,13914 <__divsf3+0x1b0>
   137ec:	00803fc4 	movi	r2,255
   137f0:	30804526 	beq	r6,r2,13908 <__divsf3+0x1a4>
   137f4:	89402034 	orhi	r5,r17,128
   137f8:	282290fa 	slli	r17,r5,3
   137fc:	31bfe044 	addi	r6,r6,-127
   13800:	000b883a 	mov	r5,zero
   13804:	2c20b03a 	or	r16,r5,r16
   13808:	802090ba 	slli	r16,r16,2
   1380c:	00800074 	movhi	r2,1
   13810:	108e0c04 	addi	r2,r2,14384
   13814:	80a1883a 	add	r16,r16,r2
   13818:	81000017 	ldw	r4,0(r16)
   1381c:	9d46f03a 	xor	r3,r19,r21
   13820:	180f883a 	mov	r7,r3
   13824:	18803fcc 	andi	r2,r3,255
   13828:	a18dc83a 	sub	r6,r20,r6
   1382c:	2000683a 	jmp	r4
   13830:	00013a14 	movui	zero,1256
   13834:	00013898 	cmpnei	zero,zero,1250
   13838:	00013a08 	cmpgei	zero,zero,1256
   1383c:	00013884 	movi	zero,1250
   13840:	00013a08 	cmpgei	zero,zero,1256
   13844:	000139e0 	cmpeqi	zero,zero,1255
   13848:	00013a08 	cmpgei	zero,zero,1256
   1384c:	00013884 	movi	zero,1250
   13850:	00013898 	cmpnei	zero,zero,1250
   13854:	00013898 	cmpnei	zero,zero,1250
   13858:	000139e0 	cmpeqi	zero,zero,1255
   1385c:	00013884 	movi	zero,1250
   13860:	00013af4 	movhi	zero,1259
   13864:	00013af4 	movhi	zero,1259
   13868:	00013af4 	movhi	zero,1259
   1386c:	00013aa8 	cmpgeui	zero,zero,1258
   13870:	9000581e 	bne	r18,zero,139d4 <__divsf3+0x270>
   13874:	04000204 	movi	r16,8
   13878:	05c00084 	movi	r23,2
   1387c:	003fd306 	br	137cc <_gp+0xffff3ff4>
   13880:	0023883a 	mov	r17,zero
   13884:	e02d883a 	mov	r22,fp
   13888:	282f883a 	mov	r23,r5
   1388c:	00800084 	movi	r2,2
   13890:	b8808f1e 	bne	r23,r2,13ad0 <__divsf3+0x36c>
   13894:	b005883a 	mov	r2,r22
   13898:	11c0004c 	andi	r7,r2,1
   1389c:	013fffc4 	movi	r4,-1
   138a0:	000d883a 	mov	r6,zero
   138a4:	21003fcc 	andi	r4,r4,255
   138a8:	200895fa 	slli	r4,r4,23
   138ac:	38803fcc 	andi	r2,r7,255
   138b0:	00c02034 	movhi	r3,128
   138b4:	100497fa 	slli	r2,r2,31
   138b8:	18ffffc4 	addi	r3,r3,-1
   138bc:	30c6703a 	and	r3,r6,r3
   138c0:	1906b03a 	or	r3,r3,r4
   138c4:	1884b03a 	or	r2,r3,r2
   138c8:	dfc00a17 	ldw	ra,40(sp)
   138cc:	df000917 	ldw	fp,36(sp)
   138d0:	ddc00817 	ldw	r23,32(sp)
   138d4:	dd800717 	ldw	r22,28(sp)
   138d8:	dd400617 	ldw	r21,24(sp)
   138dc:	dd000517 	ldw	r20,20(sp)
   138e0:	dcc00417 	ldw	r19,16(sp)
   138e4:	dc800317 	ldw	r18,12(sp)
   138e8:	dc400217 	ldw	r17,8(sp)
   138ec:	dc000117 	ldw	r16,4(sp)
   138f0:	dec00b04 	addi	sp,sp,44
   138f4:	f800283a 	ret
   138f8:	90002b1e 	bne	r18,zero,139a8 <__divsf3+0x244>
   138fc:	04000104 	movi	r16,4
   13900:	05c00044 	movi	r23,1
   13904:	003fb106 	br	137cc <_gp+0xffff3ff4>
   13908:	8800251e 	bne	r17,zero,139a0 <__divsf3+0x23c>
   1390c:	01400084 	movi	r5,2
   13910:	00000206 	br	1391c <__divsf3+0x1b8>
   13914:	88001a1e 	bne	r17,zero,13980 <__divsf3+0x21c>
   13918:	01400044 	movi	r5,1
   1391c:	8160b03a 	or	r16,r16,r5
   13920:	802090ba 	slli	r16,r16,2
   13924:	00c00074 	movhi	r3,1
   13928:	18ce5004 	addi	r3,r3,14656
   1392c:	80e1883a 	add	r16,r16,r3
   13930:	80c00017 	ldw	r3,0(r16)
   13934:	9d44f03a 	xor	r2,r19,r21
   13938:	a18dc83a 	sub	r6,r20,r6
   1393c:	1800683a 	jmp	r3
   13940:	00013898 	cmpnei	zero,zero,1250
   13944:	00013898 	cmpnei	zero,zero,1250
   13948:	00013ae4 	muli	zero,zero,1259
   1394c:	00013880 	call	1388 <__reset-0xec78>
   13950:	00013ae4 	muli	zero,zero,1259
   13954:	000139e0 	cmpeqi	zero,zero,1255
   13958:	00013ae4 	muli	zero,zero,1259
   1395c:	00013880 	call	1388 <__reset-0xec78>
   13960:	00013898 	cmpnei	zero,zero,1250
   13964:	00013898 	cmpnei	zero,zero,1250
   13968:	000139e0 	cmpeqi	zero,zero,1255
   1396c:	00013880 	call	1388 <__reset-0xec78>
   13970:	00013af4 	movhi	zero,1259
   13974:	00013af4 	movhi	zero,1259
   13978:	00013af4 	movhi	zero,1259
   1397c:	00013b0c 	andi	zero,zero,1260
   13980:	8809883a 	mov	r4,r17
   13984:	0015edc0 	call	15edc <__clzsi2>
   13988:	10fffec4 	addi	r3,r2,-5
   1398c:	10801d84 	addi	r2,r2,118
   13990:	88e2983a 	sll	r17,r17,r3
   13994:	008dc83a 	sub	r6,zero,r2
   13998:	000b883a 	mov	r5,zero
   1399c:	003f9906 	br	13804 <_gp+0xffff402c>
   139a0:	014000c4 	movi	r5,3
   139a4:	003f9706 	br	13804 <_gp+0xffff402c>
   139a8:	9009883a 	mov	r4,r18
   139ac:	d9400015 	stw	r5,0(sp)
   139b0:	0015edc0 	call	15edc <__clzsi2>
   139b4:	10fffec4 	addi	r3,r2,-5
   139b8:	11801d84 	addi	r6,r2,118
   139bc:	90e4983a 	sll	r18,r18,r3
   139c0:	01a9c83a 	sub	r20,zero,r6
   139c4:	0021883a 	mov	r16,zero
   139c8:	002f883a 	mov	r23,zero
   139cc:	d9400017 	ldw	r5,0(sp)
   139d0:	003f7e06 	br	137cc <_gp+0xffff3ff4>
   139d4:	04000304 	movi	r16,12
   139d8:	05c000c4 	movi	r23,3
   139dc:	003f7b06 	br	137cc <_gp+0xffff3ff4>
   139e0:	01802034 	movhi	r6,128
   139e4:	000f883a 	mov	r7,zero
   139e8:	31bfffc4 	addi	r6,r6,-1
   139ec:	013fffc4 	movi	r4,-1
   139f0:	003fac06 	br	138a4 <_gp+0xffff40cc>
   139f4:	01400044 	movi	r5,1
   139f8:	2909c83a 	sub	r4,r5,r4
   139fc:	00c006c4 	movi	r3,27
   13a00:	19004b0e 	bge	r3,r4,13b30 <__divsf3+0x3cc>
   13a04:	114e703a 	and	r7,r2,r5
   13a08:	0009883a 	mov	r4,zero
   13a0c:	000d883a 	mov	r6,zero
   13a10:	003fa406 	br	138a4 <_gp+0xffff40cc>
   13a14:	9006917a 	slli	r3,r18,5
   13a18:	8822917a 	slli	r17,r17,5
   13a1c:	1c40372e 	bgeu	r3,r17,13afc <__divsf3+0x398>
   13a20:	31bfffc4 	addi	r6,r6,-1
   13a24:	010006c4 	movi	r4,27
   13a28:	000b883a 	mov	r5,zero
   13a2c:	180f883a 	mov	r7,r3
   13a30:	294b883a 	add	r5,r5,r5
   13a34:	18c7883a 	add	r3,r3,r3
   13a38:	38000116 	blt	r7,zero,13a40 <__divsf3+0x2dc>
   13a3c:	1c400236 	bltu	r3,r17,13a48 <__divsf3+0x2e4>
   13a40:	1c47c83a 	sub	r3,r3,r17
   13a44:	29400054 	ori	r5,r5,1
   13a48:	213fffc4 	addi	r4,r4,-1
   13a4c:	203ff71e 	bne	r4,zero,13a2c <_gp+0xffff4254>
   13a50:	1806c03a 	cmpne	r3,r3,zero
   13a54:	1962b03a 	or	r17,r3,r5
   13a58:	31001fc4 	addi	r4,r6,127
   13a5c:	013fe50e 	bge	zero,r4,139f4 <_gp+0xffff421c>
   13a60:	88c001cc 	andi	r3,r17,7
   13a64:	18000426 	beq	r3,zero,13a78 <__divsf3+0x314>
   13a68:	88c003cc 	andi	r3,r17,15
   13a6c:	01400104 	movi	r5,4
   13a70:	19400126 	beq	r3,r5,13a78 <__divsf3+0x314>
   13a74:	8963883a 	add	r17,r17,r5
   13a78:	88c2002c 	andhi	r3,r17,2048
   13a7c:	18000426 	beq	r3,zero,13a90 <__divsf3+0x32c>
   13a80:	00fe0034 	movhi	r3,63488
   13a84:	18ffffc4 	addi	r3,r3,-1
   13a88:	31002004 	addi	r4,r6,128
   13a8c:	88e2703a 	and	r17,r17,r3
   13a90:	00c03f84 	movi	r3,254
   13a94:	193f8016 	blt	r3,r4,13898 <_gp+0xffff40c0>
   13a98:	880c91ba 	slli	r6,r17,6
   13a9c:	11c0004c 	andi	r7,r2,1
   13aa0:	300cd27a 	srli	r6,r6,9
   13aa4:	003f7f06 	br	138a4 <_gp+0xffff40cc>
   13aa8:	9080102c 	andhi	r2,r18,64
   13aac:	10000226 	beq	r2,zero,13ab8 <__divsf3+0x354>
   13ab0:	8880102c 	andhi	r2,r17,64
   13ab4:	10001826 	beq	r2,zero,13b18 <__divsf3+0x3b4>
   13ab8:	00802034 	movhi	r2,128
   13abc:	91801034 	orhi	r6,r18,64
   13ac0:	10bfffc4 	addi	r2,r2,-1
   13ac4:	980f883a 	mov	r7,r19
   13ac8:	308c703a 	and	r6,r6,r2
   13acc:	003fc706 	br	139ec <_gp+0xffff4214>
   13ad0:	008000c4 	movi	r2,3
   13ad4:	b8802d26 	beq	r23,r2,13b8c <__divsf3+0x428>
   13ad8:	00c00044 	movi	r3,1
   13adc:	b005883a 	mov	r2,r22
   13ae0:	b8ffdd1e 	bne	r23,r3,13a58 <_gp+0xffff4280>
   13ae4:	11c0004c 	andi	r7,r2,1
   13ae8:	0009883a 	mov	r4,zero
   13aec:	000d883a 	mov	r6,zero
   13af0:	003f6c06 	br	138a4 <_gp+0xffff40cc>
   13af4:	9023883a 	mov	r17,r18
   13af8:	003f6406 	br	1388c <_gp+0xffff40b4>
   13afc:	1c47c83a 	sub	r3,r3,r17
   13b00:	01000684 	movi	r4,26
   13b04:	01400044 	movi	r5,1
   13b08:	003fc806 	br	13a2c <_gp+0xffff4254>
   13b0c:	9080102c 	andhi	r2,r18,64
   13b10:	103fe926 	beq	r2,zero,13ab8 <_gp+0xffff42e0>
   13b14:	0023883a 	mov	r17,zero
   13b18:	00802034 	movhi	r2,128
   13b1c:	89801034 	orhi	r6,r17,64
   13b20:	10bfffc4 	addi	r2,r2,-1
   13b24:	a80f883a 	mov	r7,r21
   13b28:	308c703a 	and	r6,r6,r2
   13b2c:	003faf06 	br	139ec <_gp+0xffff4214>
   13b30:	01c00804 	movi	r7,32
   13b34:	390fc83a 	sub	r7,r7,r4
   13b38:	89ce983a 	sll	r7,r17,r7
   13b3c:	890ad83a 	srl	r5,r17,r4
   13b40:	380ec03a 	cmpne	r7,r7,zero
   13b44:	29cab03a 	or	r5,r5,r7
   13b48:	28c001cc 	andi	r3,r5,7
   13b4c:	18000426 	beq	r3,zero,13b60 <__divsf3+0x3fc>
   13b50:	28c003cc 	andi	r3,r5,15
   13b54:	01000104 	movi	r4,4
   13b58:	19000126 	beq	r3,r4,13b60 <__divsf3+0x3fc>
   13b5c:	290b883a 	add	r5,r5,r4
   13b60:	28c1002c 	andhi	r3,r5,1024
   13b64:	18000426 	beq	r3,zero,13b78 <__divsf3+0x414>
   13b68:	11c0004c 	andi	r7,r2,1
   13b6c:	01000044 	movi	r4,1
   13b70:	000d883a 	mov	r6,zero
   13b74:	003f4b06 	br	138a4 <_gp+0xffff40cc>
   13b78:	280a91ba 	slli	r5,r5,6
   13b7c:	11c0004c 	andi	r7,r2,1
   13b80:	0009883a 	mov	r4,zero
   13b84:	280cd27a 	srli	r6,r5,9
   13b88:	003f4606 	br	138a4 <_gp+0xffff40cc>
   13b8c:	00802034 	movhi	r2,128
   13b90:	89801034 	orhi	r6,r17,64
   13b94:	10bfffc4 	addi	r2,r2,-1
   13b98:	b00f883a 	mov	r7,r22
   13b9c:	308c703a 	and	r6,r6,r2
   13ba0:	003f9206 	br	139ec <_gp+0xffff4214>

00013ba4 <__mulsf3>:
   13ba4:	defff504 	addi	sp,sp,-44
   13ba8:	dc000115 	stw	r16,4(sp)
   13bac:	2020d5fa 	srli	r16,r4,23
   13bb0:	dd400615 	stw	r21,24(sp)
   13bb4:	202ad7fa 	srli	r21,r4,31
   13bb8:	dc800315 	stw	r18,12(sp)
   13bbc:	04802034 	movhi	r18,128
   13bc0:	df000915 	stw	fp,36(sp)
   13bc4:	dd000515 	stw	r20,20(sp)
   13bc8:	94bfffc4 	addi	r18,r18,-1
   13bcc:	dfc00a15 	stw	ra,40(sp)
   13bd0:	ddc00815 	stw	r23,32(sp)
   13bd4:	dd800715 	stw	r22,28(sp)
   13bd8:	dcc00415 	stw	r19,16(sp)
   13bdc:	dc400215 	stw	r17,8(sp)
   13be0:	84003fcc 	andi	r16,r16,255
   13be4:	9124703a 	and	r18,r18,r4
   13be8:	a829883a 	mov	r20,r21
   13bec:	af003fcc 	andi	fp,r21,255
   13bf0:	80005426 	beq	r16,zero,13d44 <__mulsf3+0x1a0>
   13bf4:	00803fc4 	movi	r2,255
   13bf8:	80802f26 	beq	r16,r2,13cb8 <__mulsf3+0x114>
   13bfc:	91002034 	orhi	r4,r18,128
   13c00:	202490fa 	slli	r18,r4,3
   13c04:	843fe044 	addi	r16,r16,-127
   13c08:	0023883a 	mov	r17,zero
   13c0c:	002f883a 	mov	r23,zero
   13c10:	2804d5fa 	srli	r2,r5,23
   13c14:	282cd7fa 	srli	r22,r5,31
   13c18:	01002034 	movhi	r4,128
   13c1c:	213fffc4 	addi	r4,r4,-1
   13c20:	10803fcc 	andi	r2,r2,255
   13c24:	2166703a 	and	r19,r4,r5
   13c28:	b1803fcc 	andi	r6,r22,255
   13c2c:	10004c26 	beq	r2,zero,13d60 <__mulsf3+0x1bc>
   13c30:	00c03fc4 	movi	r3,255
   13c34:	10c04726 	beq	r2,r3,13d54 <__mulsf3+0x1b0>
   13c38:	99002034 	orhi	r4,r19,128
   13c3c:	202690fa 	slli	r19,r4,3
   13c40:	10bfe044 	addi	r2,r2,-127
   13c44:	0007883a 	mov	r3,zero
   13c48:	80a1883a 	add	r16,r16,r2
   13c4c:	010003c4 	movi	r4,15
   13c50:	1c44b03a 	or	r2,r3,r17
   13c54:	b56af03a 	xor	r21,r22,r21
   13c58:	81c00044 	addi	r7,r16,1
   13c5c:	20806b36 	bltu	r4,r2,13e0c <__mulsf3+0x268>
   13c60:	100490ba 	slli	r2,r2,2
   13c64:	01000074 	movhi	r4,1
   13c68:	210f1e04 	addi	r4,r4,15480
   13c6c:	1105883a 	add	r2,r2,r4
   13c70:	10800017 	ldw	r2,0(r2)
   13c74:	1000683a 	jmp	r2
   13c78:	00013e0c 	andi	zero,zero,1272
   13c7c:	00013ccc 	andi	zero,zero,1267
   13c80:	00013ccc 	andi	zero,zero,1267
   13c84:	00013cc8 	cmpgei	zero,zero,1267
   13c88:	00013df0 	cmpltui	zero,zero,1271
   13c8c:	00013df0 	cmpltui	zero,zero,1271
   13c90:	00013ddc 	xori	zero,zero,1271
   13c94:	00013cc8 	cmpgei	zero,zero,1267
   13c98:	00013df0 	cmpltui	zero,zero,1271
   13c9c:	00013ddc 	xori	zero,zero,1271
   13ca0:	00013df0 	cmpltui	zero,zero,1271
   13ca4:	00013cc8 	cmpgei	zero,zero,1267
   13ca8:	00013dfc 	xorhi	zero,zero,1271
   13cac:	00013dfc 	xorhi	zero,zero,1271
   13cb0:	00013dfc 	xorhi	zero,zero,1271
   13cb4:	00013f0c 	andi	zero,zero,1276
   13cb8:	90003b1e 	bne	r18,zero,13da8 <__mulsf3+0x204>
   13cbc:	04400204 	movi	r17,8
   13cc0:	05c00084 	movi	r23,2
   13cc4:	003fd206 	br	13c10 <_gp+0xffff4438>
   13cc8:	302b883a 	mov	r21,r6
   13ccc:	00800084 	movi	r2,2
   13cd0:	18802626 	beq	r3,r2,13d6c <__mulsf3+0x1c8>
   13cd4:	008000c4 	movi	r2,3
   13cd8:	1880b826 	beq	r3,r2,13fbc <__mulsf3+0x418>
   13cdc:	00800044 	movi	r2,1
   13ce0:	1880af1e 	bne	r3,r2,13fa0 <__mulsf3+0x3fc>
   13ce4:	a829883a 	mov	r20,r21
   13ce8:	0007883a 	mov	r3,zero
   13cec:	0009883a 	mov	r4,zero
   13cf0:	18803fcc 	andi	r2,r3,255
   13cf4:	100695fa 	slli	r3,r2,23
   13cf8:	a0803fcc 	andi	r2,r20,255
   13cfc:	100a97fa 	slli	r5,r2,31
   13d00:	00802034 	movhi	r2,128
   13d04:	10bfffc4 	addi	r2,r2,-1
   13d08:	2084703a 	and	r2,r4,r2
   13d0c:	10c4b03a 	or	r2,r2,r3
   13d10:	1144b03a 	or	r2,r2,r5
   13d14:	dfc00a17 	ldw	ra,40(sp)
   13d18:	df000917 	ldw	fp,36(sp)
   13d1c:	ddc00817 	ldw	r23,32(sp)
   13d20:	dd800717 	ldw	r22,28(sp)
   13d24:	dd400617 	ldw	r21,24(sp)
   13d28:	dd000517 	ldw	r20,20(sp)
   13d2c:	dcc00417 	ldw	r19,16(sp)
   13d30:	dc800317 	ldw	r18,12(sp)
   13d34:	dc400217 	ldw	r17,8(sp)
   13d38:	dc000117 	ldw	r16,4(sp)
   13d3c:	dec00b04 	addi	sp,sp,44
   13d40:	f800283a 	ret
   13d44:	90000d1e 	bne	r18,zero,13d7c <__mulsf3+0x1d8>
   13d48:	04400104 	movi	r17,4
   13d4c:	05c00044 	movi	r23,1
   13d50:	003faf06 	br	13c10 <_gp+0xffff4438>
   13d54:	9806c03a 	cmpne	r3,r19,zero
   13d58:	18c00084 	addi	r3,r3,2
   13d5c:	003fba06 	br	13c48 <_gp+0xffff4470>
   13d60:	9800141e 	bne	r19,zero,13db4 <__mulsf3+0x210>
   13d64:	00c00044 	movi	r3,1
   13d68:	003fb706 	br	13c48 <_gp+0xffff4470>
   13d6c:	a829883a 	mov	r20,r21
   13d70:	00ffffc4 	movi	r3,-1
   13d74:	0009883a 	mov	r4,zero
   13d78:	003fdd06 	br	13cf0 <_gp+0xffff4518>
   13d7c:	9009883a 	mov	r4,r18
   13d80:	d9400015 	stw	r5,0(sp)
   13d84:	0015edc0 	call	15edc <__clzsi2>
   13d88:	10fffec4 	addi	r3,r2,-5
   13d8c:	10801d84 	addi	r2,r2,118
   13d90:	90e4983a 	sll	r18,r18,r3
   13d94:	00a1c83a 	sub	r16,zero,r2
   13d98:	0023883a 	mov	r17,zero
   13d9c:	002f883a 	mov	r23,zero
   13da0:	d9400017 	ldw	r5,0(sp)
   13da4:	003f9a06 	br	13c10 <_gp+0xffff4438>
   13da8:	04400304 	movi	r17,12
   13dac:	05c000c4 	movi	r23,3
   13db0:	003f9706 	br	13c10 <_gp+0xffff4438>
   13db4:	9809883a 	mov	r4,r19
   13db8:	d9800015 	stw	r6,0(sp)
   13dbc:	0015edc0 	call	15edc <__clzsi2>
   13dc0:	10fffec4 	addi	r3,r2,-5
   13dc4:	10801d84 	addi	r2,r2,118
   13dc8:	98e6983a 	sll	r19,r19,r3
   13dcc:	0085c83a 	sub	r2,zero,r2
   13dd0:	0007883a 	mov	r3,zero
   13dd4:	d9800017 	ldw	r6,0(sp)
   13dd8:	003f9b06 	br	13c48 <_gp+0xffff4470>
   13ddc:	01002034 	movhi	r4,128
   13de0:	0029883a 	mov	r20,zero
   13de4:	213fffc4 	addi	r4,r4,-1
   13de8:	00ffffc4 	movi	r3,-1
   13dec:	003fc006 	br	13cf0 <_gp+0xffff4518>
   13df0:	9027883a 	mov	r19,r18
   13df4:	b807883a 	mov	r3,r23
   13df8:	003fb406 	br	13ccc <_gp+0xffff44f4>
   13dfc:	9027883a 	mov	r19,r18
   13e00:	e02b883a 	mov	r21,fp
   13e04:	b807883a 	mov	r3,r23
   13e08:	003fb006 	br	13ccc <_gp+0xffff44f4>
   13e0c:	9028d43a 	srli	r20,r18,16
   13e10:	982cd43a 	srli	r22,r19,16
   13e14:	94bfffcc 	andi	r18,r18,65535
   13e18:	9cffffcc 	andi	r19,r19,65535
   13e1c:	980b883a 	mov	r5,r19
   13e20:	9009883a 	mov	r4,r18
   13e24:	d9c00015 	stw	r7,0(sp)
   13e28:	001373c0 	call	1373c <__mulsi3>
   13e2c:	a00b883a 	mov	r5,r20
   13e30:	9809883a 	mov	r4,r19
   13e34:	1023883a 	mov	r17,r2
   13e38:	001373c0 	call	1373c <__mulsi3>
   13e3c:	a009883a 	mov	r4,r20
   13e40:	b00b883a 	mov	r5,r22
   13e44:	1027883a 	mov	r19,r2
   13e48:	001373c0 	call	1373c <__mulsi3>
   13e4c:	b00b883a 	mov	r5,r22
   13e50:	9009883a 	mov	r4,r18
   13e54:	1029883a 	mov	r20,r2
   13e58:	001373c0 	call	1373c <__mulsi3>
   13e5c:	8806d43a 	srli	r3,r17,16
   13e60:	14c5883a 	add	r2,r2,r19
   13e64:	d9c00017 	ldw	r7,0(sp)
   13e68:	1885883a 	add	r2,r3,r2
   13e6c:	14c0022e 	bgeu	r2,r19,13e78 <__mulsf3+0x2d4>
   13e70:	00c00074 	movhi	r3,1
   13e74:	a0e9883a 	add	r20,r20,r3
   13e78:	1026943a 	slli	r19,r2,16
   13e7c:	8c7fffcc 	andi	r17,r17,65535
   13e80:	1004d43a 	srli	r2,r2,16
   13e84:	9c63883a 	add	r17,r19,r17
   13e88:	882691ba 	slli	r19,r17,6
   13e8c:	1505883a 	add	r2,r2,r20
   13e90:	8822d6ba 	srli	r17,r17,26
   13e94:	100891ba 	slli	r4,r2,6
   13e98:	9826c03a 	cmpne	r19,r19,zero
   13e9c:	9c62b03a 	or	r17,r19,r17
   13ea0:	8926b03a 	or	r19,r17,r4
   13ea4:	9882002c 	andhi	r2,r19,2048
   13ea8:	10000426 	beq	r2,zero,13ebc <__mulsf3+0x318>
   13eac:	9804d07a 	srli	r2,r19,1
   13eb0:	9900004c 	andi	r4,r19,1
   13eb4:	3821883a 	mov	r16,r7
   13eb8:	1126b03a 	or	r19,r2,r4
   13ebc:	80c01fc4 	addi	r3,r16,127
   13ec0:	00c0210e 	bge	zero,r3,13f48 <__mulsf3+0x3a4>
   13ec4:	988001cc 	andi	r2,r19,7
   13ec8:	10000426 	beq	r2,zero,13edc <__mulsf3+0x338>
   13ecc:	988003cc 	andi	r2,r19,15
   13ed0:	01000104 	movi	r4,4
   13ed4:	11000126 	beq	r2,r4,13edc <__mulsf3+0x338>
   13ed8:	9927883a 	add	r19,r19,r4
   13edc:	9882002c 	andhi	r2,r19,2048
   13ee0:	10000426 	beq	r2,zero,13ef4 <__mulsf3+0x350>
   13ee4:	00be0034 	movhi	r2,63488
   13ee8:	10bfffc4 	addi	r2,r2,-1
   13eec:	80c02004 	addi	r3,r16,128
   13ef0:	98a6703a 	and	r19,r19,r2
   13ef4:	00803f84 	movi	r2,254
   13ef8:	10ff9c16 	blt	r2,r3,13d6c <_gp+0xffff4594>
   13efc:	980891ba 	slli	r4,r19,6
   13f00:	a829883a 	mov	r20,r21
   13f04:	2008d27a 	srli	r4,r4,9
   13f08:	003f7906 	br	13cf0 <_gp+0xffff4518>
   13f0c:	9080102c 	andhi	r2,r18,64
   13f10:	10000826 	beq	r2,zero,13f34 <__mulsf3+0x390>
   13f14:	9880102c 	andhi	r2,r19,64
   13f18:	1000061e 	bne	r2,zero,13f34 <__mulsf3+0x390>
   13f1c:	00802034 	movhi	r2,128
   13f20:	99001034 	orhi	r4,r19,64
   13f24:	10bfffc4 	addi	r2,r2,-1
   13f28:	b029883a 	mov	r20,r22
   13f2c:	2088703a 	and	r4,r4,r2
   13f30:	003fad06 	br	13de8 <_gp+0xffff4610>
   13f34:	00802034 	movhi	r2,128
   13f38:	91001034 	orhi	r4,r18,64
   13f3c:	10bfffc4 	addi	r2,r2,-1
   13f40:	2088703a 	and	r4,r4,r2
   13f44:	003fa806 	br	13de8 <_gp+0xffff4610>
   13f48:	00800044 	movi	r2,1
   13f4c:	10c7c83a 	sub	r3,r2,r3
   13f50:	008006c4 	movi	r2,27
   13f54:	10ff6316 	blt	r2,r3,13ce4 <_gp+0xffff450c>
   13f58:	00800804 	movi	r2,32
   13f5c:	10c5c83a 	sub	r2,r2,r3
   13f60:	9884983a 	sll	r2,r19,r2
   13f64:	98c6d83a 	srl	r3,r19,r3
   13f68:	1004c03a 	cmpne	r2,r2,zero
   13f6c:	1884b03a 	or	r2,r3,r2
   13f70:	10c001cc 	andi	r3,r2,7
   13f74:	18000426 	beq	r3,zero,13f88 <__mulsf3+0x3e4>
   13f78:	10c003cc 	andi	r3,r2,15
   13f7c:	01000104 	movi	r4,4
   13f80:	19000126 	beq	r3,r4,13f88 <__mulsf3+0x3e4>
   13f84:	1105883a 	add	r2,r2,r4
   13f88:	10c1002c 	andhi	r3,r2,1024
   13f8c:	18000626 	beq	r3,zero,13fa8 <__mulsf3+0x404>
   13f90:	a829883a 	mov	r20,r21
   13f94:	00c00044 	movi	r3,1
   13f98:	0009883a 	mov	r4,zero
   13f9c:	003f5406 	br	13cf0 <_gp+0xffff4518>
   13fa0:	3821883a 	mov	r16,r7
   13fa4:	003fc506 	br	13ebc <_gp+0xffff46e4>
   13fa8:	100491ba 	slli	r2,r2,6
   13fac:	a829883a 	mov	r20,r21
   13fb0:	0007883a 	mov	r3,zero
   13fb4:	1008d27a 	srli	r4,r2,9
   13fb8:	003f4d06 	br	13cf0 <_gp+0xffff4518>
   13fbc:	00802034 	movhi	r2,128
   13fc0:	99001034 	orhi	r4,r19,64
   13fc4:	10bfffc4 	addi	r2,r2,-1
   13fc8:	a829883a 	mov	r20,r21
   13fcc:	2088703a 	and	r4,r4,r2
   13fd0:	003f8506 	br	13de8 <_gp+0xffff4610>

00013fd4 <__floatsisf>:
   13fd4:	defffd04 	addi	sp,sp,-12
   13fd8:	dfc00215 	stw	ra,8(sp)
   13fdc:	dc400115 	stw	r17,4(sp)
   13fe0:	dc000015 	stw	r16,0(sp)
   13fe4:	20003526 	beq	r4,zero,140bc <__floatsisf+0xe8>
   13fe8:	2021883a 	mov	r16,r4
   13fec:	2022d7fa 	srli	r17,r4,31
   13ff0:	20003616 	blt	r4,zero,140cc <__floatsisf+0xf8>
   13ff4:	8009883a 	mov	r4,r16
   13ff8:	0015edc0 	call	15edc <__clzsi2>
   13ffc:	00c02784 	movi	r3,158
   14000:	1887c83a 	sub	r3,r3,r2
   14004:	01002584 	movi	r4,150
   14008:	20c01416 	blt	r4,r3,1405c <__floatsisf+0x88>
   1400c:	20c9c83a 	sub	r4,r4,r3
   14010:	8120983a 	sll	r16,r16,r4
   14014:	00802034 	movhi	r2,128
   14018:	10bfffc4 	addi	r2,r2,-1
   1401c:	8809883a 	mov	r4,r17
   14020:	80a0703a 	and	r16,r16,r2
   14024:	18803fcc 	andi	r2,r3,255
   14028:	100695fa 	slli	r3,r2,23
   1402c:	20803fcc 	andi	r2,r4,255
   14030:	100897fa 	slli	r4,r2,31
   14034:	00802034 	movhi	r2,128
   14038:	10bfffc4 	addi	r2,r2,-1
   1403c:	8084703a 	and	r2,r16,r2
   14040:	10c4b03a 	or	r2,r2,r3
   14044:	1104b03a 	or	r2,r2,r4
   14048:	dfc00217 	ldw	ra,8(sp)
   1404c:	dc400117 	ldw	r17,4(sp)
   14050:	dc000017 	ldw	r16,0(sp)
   14054:	dec00304 	addi	sp,sp,12
   14058:	f800283a 	ret
   1405c:	01002644 	movi	r4,153
   14060:	20c01c16 	blt	r4,r3,140d4 <__floatsisf+0x100>
   14064:	20c9c83a 	sub	r4,r4,r3
   14068:	8120983a 	sll	r16,r16,r4
   1406c:	013f0034 	movhi	r4,64512
   14070:	213fffc4 	addi	r4,r4,-1
   14074:	814001cc 	andi	r5,r16,7
   14078:	8108703a 	and	r4,r16,r4
   1407c:	28000426 	beq	r5,zero,14090 <__floatsisf+0xbc>
   14080:	840003cc 	andi	r16,r16,15
   14084:	01400104 	movi	r5,4
   14088:	81400126 	beq	r16,r5,14090 <__floatsisf+0xbc>
   1408c:	2149883a 	add	r4,r4,r5
   14090:	2141002c 	andhi	r5,r4,1024
   14094:	28000526 	beq	r5,zero,140ac <__floatsisf+0xd8>
   14098:	00c027c4 	movi	r3,159
   1409c:	1887c83a 	sub	r3,r3,r2
   140a0:	00bf0034 	movhi	r2,64512
   140a4:	10bfffc4 	addi	r2,r2,-1
   140a8:	2088703a 	and	r4,r4,r2
   140ac:	202091ba 	slli	r16,r4,6
   140b0:	8809883a 	mov	r4,r17
   140b4:	8020d27a 	srli	r16,r16,9
   140b8:	003fda06 	br	14024 <_gp+0xffff484c>
   140bc:	0009883a 	mov	r4,zero
   140c0:	0007883a 	mov	r3,zero
   140c4:	0021883a 	mov	r16,zero
   140c8:	003fd606 	br	14024 <_gp+0xffff484c>
   140cc:	0121c83a 	sub	r16,zero,r4
   140d0:	003fc806 	br	13ff4 <_gp+0xffff481c>
   140d4:	01002e44 	movi	r4,185
   140d8:	20c9c83a 	sub	r4,r4,r3
   140dc:	01400144 	movi	r5,5
   140e0:	8108983a 	sll	r4,r16,r4
   140e4:	288bc83a 	sub	r5,r5,r2
   140e8:	8160d83a 	srl	r16,r16,r5
   140ec:	2008c03a 	cmpne	r4,r4,zero
   140f0:	8120b03a 	or	r16,r16,r4
   140f4:	003fdd06 	br	1406c <_gp+0xffff4894>

000140f8 <__adddf3>:
   140f8:	02c00434 	movhi	r11,16
   140fc:	5affffc4 	addi	r11,r11,-1
   14100:	2806d7fa 	srli	r3,r5,31
   14104:	2ad4703a 	and	r10,r5,r11
   14108:	3ad2703a 	and	r9,r7,r11
   1410c:	3804d53a 	srli	r2,r7,20
   14110:	3018d77a 	srli	r12,r6,29
   14114:	280ad53a 	srli	r5,r5,20
   14118:	501490fa 	slli	r10,r10,3
   1411c:	2010d77a 	srli	r8,r4,29
   14120:	481290fa 	slli	r9,r9,3
   14124:	380ed7fa 	srli	r7,r7,31
   14128:	defffb04 	addi	sp,sp,-20
   1412c:	dc800215 	stw	r18,8(sp)
   14130:	dc400115 	stw	r17,4(sp)
   14134:	dc000015 	stw	r16,0(sp)
   14138:	dfc00415 	stw	ra,16(sp)
   1413c:	dcc00315 	stw	r19,12(sp)
   14140:	1c803fcc 	andi	r18,r3,255
   14144:	2c01ffcc 	andi	r16,r5,2047
   14148:	5210b03a 	or	r8,r10,r8
   1414c:	202290fa 	slli	r17,r4,3
   14150:	1081ffcc 	andi	r2,r2,2047
   14154:	4b12b03a 	or	r9,r9,r12
   14158:	300c90fa 	slli	r6,r6,3
   1415c:	91c07526 	beq	r18,r7,14334 <__adddf3+0x23c>
   14160:	8087c83a 	sub	r3,r16,r2
   14164:	00c0ab0e 	bge	zero,r3,14414 <__adddf3+0x31c>
   14168:	10002a1e 	bne	r2,zero,14214 <__adddf3+0x11c>
   1416c:	4984b03a 	or	r2,r9,r6
   14170:	1000961e 	bne	r2,zero,143cc <__adddf3+0x2d4>
   14174:	888001cc 	andi	r2,r17,7
   14178:	10000726 	beq	r2,zero,14198 <__adddf3+0xa0>
   1417c:	888003cc 	andi	r2,r17,15
   14180:	00c00104 	movi	r3,4
   14184:	10c00426 	beq	r2,r3,14198 <__adddf3+0xa0>
   14188:	88c7883a 	add	r3,r17,r3
   1418c:	1c63803a 	cmpltu	r17,r3,r17
   14190:	4451883a 	add	r8,r8,r17
   14194:	1823883a 	mov	r17,r3
   14198:	4080202c 	andhi	r2,r8,128
   1419c:	10005926 	beq	r2,zero,14304 <__adddf3+0x20c>
   141a0:	84000044 	addi	r16,r16,1
   141a4:	0081ffc4 	movi	r2,2047
   141a8:	8080ba26 	beq	r16,r2,14494 <__adddf3+0x39c>
   141ac:	00bfe034 	movhi	r2,65408
   141b0:	10bfffc4 	addi	r2,r2,-1
   141b4:	4090703a 	and	r8,r8,r2
   141b8:	4004977a 	slli	r2,r8,29
   141bc:	4010927a 	slli	r8,r8,9
   141c0:	8822d0fa 	srli	r17,r17,3
   141c4:	8401ffcc 	andi	r16,r16,2047
   141c8:	4010d33a 	srli	r8,r8,12
   141cc:	9007883a 	mov	r3,r18
   141d0:	1444b03a 	or	r2,r2,r17
   141d4:	8401ffcc 	andi	r16,r16,2047
   141d8:	8020953a 	slli	r16,r16,20
   141dc:	18c03fcc 	andi	r3,r3,255
   141e0:	01000434 	movhi	r4,16
   141e4:	213fffc4 	addi	r4,r4,-1
   141e8:	180697fa 	slli	r3,r3,31
   141ec:	4110703a 	and	r8,r8,r4
   141f0:	4410b03a 	or	r8,r8,r16
   141f4:	40c6b03a 	or	r3,r8,r3
   141f8:	dfc00417 	ldw	ra,16(sp)
   141fc:	dcc00317 	ldw	r19,12(sp)
   14200:	dc800217 	ldw	r18,8(sp)
   14204:	dc400117 	ldw	r17,4(sp)
   14208:	dc000017 	ldw	r16,0(sp)
   1420c:	dec00504 	addi	sp,sp,20
   14210:	f800283a 	ret
   14214:	0081ffc4 	movi	r2,2047
   14218:	80bfd626 	beq	r16,r2,14174 <_gp+0xffff499c>
   1421c:	4a402034 	orhi	r9,r9,128
   14220:	00800e04 	movi	r2,56
   14224:	10c09f16 	blt	r2,r3,144a4 <__adddf3+0x3ac>
   14228:	008007c4 	movi	r2,31
   1422c:	10c0c216 	blt	r2,r3,14538 <__adddf3+0x440>
   14230:	00800804 	movi	r2,32
   14234:	10c5c83a 	sub	r2,r2,r3
   14238:	488a983a 	sll	r5,r9,r2
   1423c:	30c8d83a 	srl	r4,r6,r3
   14240:	3084983a 	sll	r2,r6,r2
   14244:	48c6d83a 	srl	r3,r9,r3
   14248:	290cb03a 	or	r6,r5,r4
   1424c:	1004c03a 	cmpne	r2,r2,zero
   14250:	308cb03a 	or	r6,r6,r2
   14254:	898dc83a 	sub	r6,r17,r6
   14258:	89a3803a 	cmpltu	r17,r17,r6
   1425c:	40d1c83a 	sub	r8,r8,r3
   14260:	4451c83a 	sub	r8,r8,r17
   14264:	3023883a 	mov	r17,r6
   14268:	4080202c 	andhi	r2,r8,128
   1426c:	10002326 	beq	r2,zero,142fc <__adddf3+0x204>
   14270:	04c02034 	movhi	r19,128
   14274:	9cffffc4 	addi	r19,r19,-1
   14278:	44e6703a 	and	r19,r8,r19
   1427c:	98007626 	beq	r19,zero,14458 <__adddf3+0x360>
   14280:	9809883a 	mov	r4,r19
   14284:	0015edc0 	call	15edc <__clzsi2>
   14288:	10fffe04 	addi	r3,r2,-8
   1428c:	010007c4 	movi	r4,31
   14290:	20c07716 	blt	r4,r3,14470 <__adddf3+0x378>
   14294:	00800804 	movi	r2,32
   14298:	10c5c83a 	sub	r2,r2,r3
   1429c:	8884d83a 	srl	r2,r17,r2
   142a0:	98d0983a 	sll	r8,r19,r3
   142a4:	88e2983a 	sll	r17,r17,r3
   142a8:	1204b03a 	or	r2,r2,r8
   142ac:	1c007416 	blt	r3,r16,14480 <__adddf3+0x388>
   142b0:	1c21c83a 	sub	r16,r3,r16
   142b4:	82000044 	addi	r8,r16,1
   142b8:	00c007c4 	movi	r3,31
   142bc:	1a009116 	blt	r3,r8,14504 <__adddf3+0x40c>
   142c0:	00c00804 	movi	r3,32
   142c4:	1a07c83a 	sub	r3,r3,r8
   142c8:	8a08d83a 	srl	r4,r17,r8
   142cc:	88e2983a 	sll	r17,r17,r3
   142d0:	10c6983a 	sll	r3,r2,r3
   142d4:	1210d83a 	srl	r8,r2,r8
   142d8:	8804c03a 	cmpne	r2,r17,zero
   142dc:	1906b03a 	or	r3,r3,r4
   142e0:	18a2b03a 	or	r17,r3,r2
   142e4:	0021883a 	mov	r16,zero
   142e8:	003fa206 	br	14174 <_gp+0xffff499c>
   142ec:	1890b03a 	or	r8,r3,r2
   142f0:	40017d26 	beq	r8,zero,148e8 <__adddf3+0x7f0>
   142f4:	1011883a 	mov	r8,r2
   142f8:	1823883a 	mov	r17,r3
   142fc:	888001cc 	andi	r2,r17,7
   14300:	103f9e1e 	bne	r2,zero,1417c <_gp+0xffff49a4>
   14304:	4004977a 	slli	r2,r8,29
   14308:	8822d0fa 	srli	r17,r17,3
   1430c:	4010d0fa 	srli	r8,r8,3
   14310:	9007883a 	mov	r3,r18
   14314:	1444b03a 	or	r2,r2,r17
   14318:	0101ffc4 	movi	r4,2047
   1431c:	81002426 	beq	r16,r4,143b0 <__adddf3+0x2b8>
   14320:	8120703a 	and	r16,r16,r4
   14324:	01000434 	movhi	r4,16
   14328:	213fffc4 	addi	r4,r4,-1
   1432c:	4110703a 	and	r8,r8,r4
   14330:	003fa806 	br	141d4 <_gp+0xffff49fc>
   14334:	8089c83a 	sub	r4,r16,r2
   14338:	01005e0e 	bge	zero,r4,144b4 <__adddf3+0x3bc>
   1433c:	10002b26 	beq	r2,zero,143ec <__adddf3+0x2f4>
   14340:	0081ffc4 	movi	r2,2047
   14344:	80bf8b26 	beq	r16,r2,14174 <_gp+0xffff499c>
   14348:	4a402034 	orhi	r9,r9,128
   1434c:	00800e04 	movi	r2,56
   14350:	1100a40e 	bge	r2,r4,145e4 <__adddf3+0x4ec>
   14354:	498cb03a 	or	r6,r9,r6
   14358:	300ac03a 	cmpne	r5,r6,zero
   1435c:	0013883a 	mov	r9,zero
   14360:	2c4b883a 	add	r5,r5,r17
   14364:	2c63803a 	cmpltu	r17,r5,r17
   14368:	4a11883a 	add	r8,r9,r8
   1436c:	8a11883a 	add	r8,r17,r8
   14370:	2823883a 	mov	r17,r5
   14374:	4080202c 	andhi	r2,r8,128
   14378:	103fe026 	beq	r2,zero,142fc <_gp+0xffff4b24>
   1437c:	84000044 	addi	r16,r16,1
   14380:	0081ffc4 	movi	r2,2047
   14384:	8080d226 	beq	r16,r2,146d0 <__adddf3+0x5d8>
   14388:	00bfe034 	movhi	r2,65408
   1438c:	10bfffc4 	addi	r2,r2,-1
   14390:	4090703a 	and	r8,r8,r2
   14394:	880ad07a 	srli	r5,r17,1
   14398:	400897fa 	slli	r4,r8,31
   1439c:	88c0004c 	andi	r3,r17,1
   143a0:	28e2b03a 	or	r17,r5,r3
   143a4:	4010d07a 	srli	r8,r8,1
   143a8:	2462b03a 	or	r17,r4,r17
   143ac:	003f7106 	br	14174 <_gp+0xffff499c>
   143b0:	4088b03a 	or	r4,r8,r2
   143b4:	20014526 	beq	r4,zero,148cc <__adddf3+0x7d4>
   143b8:	01000434 	movhi	r4,16
   143bc:	42000234 	orhi	r8,r8,8
   143c0:	213fffc4 	addi	r4,r4,-1
   143c4:	4110703a 	and	r8,r8,r4
   143c8:	003f8206 	br	141d4 <_gp+0xffff49fc>
   143cc:	18ffffc4 	addi	r3,r3,-1
   143d0:	1800491e 	bne	r3,zero,144f8 <__adddf3+0x400>
   143d4:	898bc83a 	sub	r5,r17,r6
   143d8:	8963803a 	cmpltu	r17,r17,r5
   143dc:	4251c83a 	sub	r8,r8,r9
   143e0:	4451c83a 	sub	r8,r8,r17
   143e4:	2823883a 	mov	r17,r5
   143e8:	003f9f06 	br	14268 <_gp+0xffff4a90>
   143ec:	4984b03a 	or	r2,r9,r6
   143f0:	103f6026 	beq	r2,zero,14174 <_gp+0xffff499c>
   143f4:	213fffc4 	addi	r4,r4,-1
   143f8:	2000931e 	bne	r4,zero,14648 <__adddf3+0x550>
   143fc:	898d883a 	add	r6,r17,r6
   14400:	3463803a 	cmpltu	r17,r6,r17
   14404:	4251883a 	add	r8,r8,r9
   14408:	8a11883a 	add	r8,r17,r8
   1440c:	3023883a 	mov	r17,r6
   14410:	003fd806 	br	14374 <_gp+0xffff4b9c>
   14414:	1800541e 	bne	r3,zero,14568 <__adddf3+0x470>
   14418:	80800044 	addi	r2,r16,1
   1441c:	1081ffcc 	andi	r2,r2,2047
   14420:	00c00044 	movi	r3,1
   14424:	1880a00e 	bge	r3,r2,146a8 <__adddf3+0x5b0>
   14428:	8989c83a 	sub	r4,r17,r6
   1442c:	8905803a 	cmpltu	r2,r17,r4
   14430:	4267c83a 	sub	r19,r8,r9
   14434:	98a7c83a 	sub	r19,r19,r2
   14438:	9880202c 	andhi	r2,r19,128
   1443c:	10006326 	beq	r2,zero,145cc <__adddf3+0x4d4>
   14440:	3463c83a 	sub	r17,r6,r17
   14444:	4a07c83a 	sub	r3,r9,r8
   14448:	344d803a 	cmpltu	r6,r6,r17
   1444c:	19a7c83a 	sub	r19,r3,r6
   14450:	3825883a 	mov	r18,r7
   14454:	983f8a1e 	bne	r19,zero,14280 <_gp+0xffff4aa8>
   14458:	8809883a 	mov	r4,r17
   1445c:	0015edc0 	call	15edc <__clzsi2>
   14460:	10800804 	addi	r2,r2,32
   14464:	10fffe04 	addi	r3,r2,-8
   14468:	010007c4 	movi	r4,31
   1446c:	20ff890e 	bge	r4,r3,14294 <_gp+0xffff4abc>
   14470:	10bff604 	addi	r2,r2,-40
   14474:	8884983a 	sll	r2,r17,r2
   14478:	0023883a 	mov	r17,zero
   1447c:	1c3f8c0e 	bge	r3,r16,142b0 <_gp+0xffff4ad8>
   14480:	023fe034 	movhi	r8,65408
   14484:	423fffc4 	addi	r8,r8,-1
   14488:	80e1c83a 	sub	r16,r16,r3
   1448c:	1210703a 	and	r8,r2,r8
   14490:	003f3806 	br	14174 <_gp+0xffff499c>
   14494:	9007883a 	mov	r3,r18
   14498:	0011883a 	mov	r8,zero
   1449c:	0005883a 	mov	r2,zero
   144a0:	003f4c06 	br	141d4 <_gp+0xffff49fc>
   144a4:	498cb03a 	or	r6,r9,r6
   144a8:	300cc03a 	cmpne	r6,r6,zero
   144ac:	0007883a 	mov	r3,zero
   144b0:	003f6806 	br	14254 <_gp+0xffff4a7c>
   144b4:	20009c1e 	bne	r4,zero,14728 <__adddf3+0x630>
   144b8:	80800044 	addi	r2,r16,1
   144bc:	1141ffcc 	andi	r5,r2,2047
   144c0:	01000044 	movi	r4,1
   144c4:	2140670e 	bge	r4,r5,14664 <__adddf3+0x56c>
   144c8:	0101ffc4 	movi	r4,2047
   144cc:	11007f26 	beq	r2,r4,146cc <__adddf3+0x5d4>
   144d0:	898d883a 	add	r6,r17,r6
   144d4:	4247883a 	add	r3,r8,r9
   144d8:	3451803a 	cmpltu	r8,r6,r17
   144dc:	40d1883a 	add	r8,r8,r3
   144e0:	402297fa 	slli	r17,r8,31
   144e4:	300cd07a 	srli	r6,r6,1
   144e8:	4010d07a 	srli	r8,r8,1
   144ec:	1021883a 	mov	r16,r2
   144f0:	89a2b03a 	or	r17,r17,r6
   144f4:	003f1f06 	br	14174 <_gp+0xffff499c>
   144f8:	0081ffc4 	movi	r2,2047
   144fc:	80bf481e 	bne	r16,r2,14220 <_gp+0xffff4a48>
   14500:	003f1c06 	br	14174 <_gp+0xffff499c>
   14504:	843ff844 	addi	r16,r16,-31
   14508:	01000804 	movi	r4,32
   1450c:	1406d83a 	srl	r3,r2,r16
   14510:	41005026 	beq	r8,r4,14654 <__adddf3+0x55c>
   14514:	01001004 	movi	r4,64
   14518:	2211c83a 	sub	r8,r4,r8
   1451c:	1204983a 	sll	r2,r2,r8
   14520:	88a2b03a 	or	r17,r17,r2
   14524:	8822c03a 	cmpne	r17,r17,zero
   14528:	1c62b03a 	or	r17,r3,r17
   1452c:	0011883a 	mov	r8,zero
   14530:	0021883a 	mov	r16,zero
   14534:	003f7106 	br	142fc <_gp+0xffff4b24>
   14538:	193ff804 	addi	r4,r3,-32
   1453c:	00800804 	movi	r2,32
   14540:	4908d83a 	srl	r4,r9,r4
   14544:	18804526 	beq	r3,r2,1465c <__adddf3+0x564>
   14548:	00801004 	movi	r2,64
   1454c:	10c5c83a 	sub	r2,r2,r3
   14550:	4886983a 	sll	r3,r9,r2
   14554:	198cb03a 	or	r6,r3,r6
   14558:	300cc03a 	cmpne	r6,r6,zero
   1455c:	218cb03a 	or	r6,r4,r6
   14560:	0007883a 	mov	r3,zero
   14564:	003f3b06 	br	14254 <_gp+0xffff4a7c>
   14568:	80002a26 	beq	r16,zero,14614 <__adddf3+0x51c>
   1456c:	0101ffc4 	movi	r4,2047
   14570:	11006826 	beq	r2,r4,14714 <__adddf3+0x61c>
   14574:	00c7c83a 	sub	r3,zero,r3
   14578:	42002034 	orhi	r8,r8,128
   1457c:	01000e04 	movi	r4,56
   14580:	20c07c16 	blt	r4,r3,14774 <__adddf3+0x67c>
   14584:	010007c4 	movi	r4,31
   14588:	20c0da16 	blt	r4,r3,148f4 <__adddf3+0x7fc>
   1458c:	01000804 	movi	r4,32
   14590:	20c9c83a 	sub	r4,r4,r3
   14594:	4114983a 	sll	r10,r8,r4
   14598:	88cad83a 	srl	r5,r17,r3
   1459c:	8908983a 	sll	r4,r17,r4
   145a0:	40c6d83a 	srl	r3,r8,r3
   145a4:	5162b03a 	or	r17,r10,r5
   145a8:	2008c03a 	cmpne	r4,r4,zero
   145ac:	8922b03a 	or	r17,r17,r4
   145b0:	3463c83a 	sub	r17,r6,r17
   145b4:	48c7c83a 	sub	r3,r9,r3
   145b8:	344d803a 	cmpltu	r6,r6,r17
   145bc:	1991c83a 	sub	r8,r3,r6
   145c0:	1021883a 	mov	r16,r2
   145c4:	3825883a 	mov	r18,r7
   145c8:	003f2706 	br	14268 <_gp+0xffff4a90>
   145cc:	24d0b03a 	or	r8,r4,r19
   145d0:	40001b1e 	bne	r8,zero,14640 <__adddf3+0x548>
   145d4:	0005883a 	mov	r2,zero
   145d8:	0007883a 	mov	r3,zero
   145dc:	0021883a 	mov	r16,zero
   145e0:	003f4d06 	br	14318 <_gp+0xffff4b40>
   145e4:	008007c4 	movi	r2,31
   145e8:	11003c16 	blt	r2,r4,146dc <__adddf3+0x5e4>
   145ec:	00800804 	movi	r2,32
   145f0:	1105c83a 	sub	r2,r2,r4
   145f4:	488e983a 	sll	r7,r9,r2
   145f8:	310ad83a 	srl	r5,r6,r4
   145fc:	3084983a 	sll	r2,r6,r2
   14600:	4912d83a 	srl	r9,r9,r4
   14604:	394ab03a 	or	r5,r7,r5
   14608:	1004c03a 	cmpne	r2,r2,zero
   1460c:	288ab03a 	or	r5,r5,r2
   14610:	003f5306 	br	14360 <_gp+0xffff4b88>
   14614:	4448b03a 	or	r4,r8,r17
   14618:	20003e26 	beq	r4,zero,14714 <__adddf3+0x61c>
   1461c:	00c6303a 	nor	r3,zero,r3
   14620:	18003a1e 	bne	r3,zero,1470c <__adddf3+0x614>
   14624:	3463c83a 	sub	r17,r6,r17
   14628:	4a07c83a 	sub	r3,r9,r8
   1462c:	344d803a 	cmpltu	r6,r6,r17
   14630:	1991c83a 	sub	r8,r3,r6
   14634:	1021883a 	mov	r16,r2
   14638:	3825883a 	mov	r18,r7
   1463c:	003f0a06 	br	14268 <_gp+0xffff4a90>
   14640:	2023883a 	mov	r17,r4
   14644:	003f0d06 	br	1427c <_gp+0xffff4aa4>
   14648:	0081ffc4 	movi	r2,2047
   1464c:	80bf3f1e 	bne	r16,r2,1434c <_gp+0xffff4b74>
   14650:	003ec806 	br	14174 <_gp+0xffff499c>
   14654:	0005883a 	mov	r2,zero
   14658:	003fb106 	br	14520 <_gp+0xffff4d48>
   1465c:	0007883a 	mov	r3,zero
   14660:	003fbc06 	br	14554 <_gp+0xffff4d7c>
   14664:	4444b03a 	or	r2,r8,r17
   14668:	8000871e 	bne	r16,zero,14888 <__adddf3+0x790>
   1466c:	1000ba26 	beq	r2,zero,14958 <__adddf3+0x860>
   14670:	4984b03a 	or	r2,r9,r6
   14674:	103ebf26 	beq	r2,zero,14174 <_gp+0xffff499c>
   14678:	8985883a 	add	r2,r17,r6
   1467c:	4247883a 	add	r3,r8,r9
   14680:	1451803a 	cmpltu	r8,r2,r17
   14684:	40d1883a 	add	r8,r8,r3
   14688:	40c0202c 	andhi	r3,r8,128
   1468c:	1023883a 	mov	r17,r2
   14690:	183f1a26 	beq	r3,zero,142fc <_gp+0xffff4b24>
   14694:	00bfe034 	movhi	r2,65408
   14698:	10bfffc4 	addi	r2,r2,-1
   1469c:	2021883a 	mov	r16,r4
   146a0:	4090703a 	and	r8,r8,r2
   146a4:	003eb306 	br	14174 <_gp+0xffff499c>
   146a8:	4444b03a 	or	r2,r8,r17
   146ac:	8000291e 	bne	r16,zero,14754 <__adddf3+0x65c>
   146b0:	10004b1e 	bne	r2,zero,147e0 <__adddf3+0x6e8>
   146b4:	4990b03a 	or	r8,r9,r6
   146b8:	40008b26 	beq	r8,zero,148e8 <__adddf3+0x7f0>
   146bc:	4811883a 	mov	r8,r9
   146c0:	3023883a 	mov	r17,r6
   146c4:	3825883a 	mov	r18,r7
   146c8:	003eaa06 	br	14174 <_gp+0xffff499c>
   146cc:	1021883a 	mov	r16,r2
   146d0:	0011883a 	mov	r8,zero
   146d4:	0005883a 	mov	r2,zero
   146d8:	003f0f06 	br	14318 <_gp+0xffff4b40>
   146dc:	217ff804 	addi	r5,r4,-32
   146e0:	00800804 	movi	r2,32
   146e4:	494ad83a 	srl	r5,r9,r5
   146e8:	20807d26 	beq	r4,r2,148e0 <__adddf3+0x7e8>
   146ec:	00801004 	movi	r2,64
   146f0:	1109c83a 	sub	r4,r2,r4
   146f4:	4912983a 	sll	r9,r9,r4
   146f8:	498cb03a 	or	r6,r9,r6
   146fc:	300cc03a 	cmpne	r6,r6,zero
   14700:	298ab03a 	or	r5,r5,r6
   14704:	0013883a 	mov	r9,zero
   14708:	003f1506 	br	14360 <_gp+0xffff4b88>
   1470c:	0101ffc4 	movi	r4,2047
   14710:	113f9a1e 	bne	r2,r4,1457c <_gp+0xffff4da4>
   14714:	4811883a 	mov	r8,r9
   14718:	3023883a 	mov	r17,r6
   1471c:	1021883a 	mov	r16,r2
   14720:	3825883a 	mov	r18,r7
   14724:	003e9306 	br	14174 <_gp+0xffff499c>
   14728:	8000161e 	bne	r16,zero,14784 <__adddf3+0x68c>
   1472c:	444ab03a 	or	r5,r8,r17
   14730:	28005126 	beq	r5,zero,14878 <__adddf3+0x780>
   14734:	0108303a 	nor	r4,zero,r4
   14738:	20004d1e 	bne	r4,zero,14870 <__adddf3+0x778>
   1473c:	89a3883a 	add	r17,r17,r6
   14740:	4253883a 	add	r9,r8,r9
   14744:	898d803a 	cmpltu	r6,r17,r6
   14748:	3251883a 	add	r8,r6,r9
   1474c:	1021883a 	mov	r16,r2
   14750:	003f0806 	br	14374 <_gp+0xffff4b9c>
   14754:	1000301e 	bne	r2,zero,14818 <__adddf3+0x720>
   14758:	4984b03a 	or	r2,r9,r6
   1475c:	10007126 	beq	r2,zero,14924 <__adddf3+0x82c>
   14760:	4811883a 	mov	r8,r9
   14764:	3023883a 	mov	r17,r6
   14768:	3825883a 	mov	r18,r7
   1476c:	0401ffc4 	movi	r16,2047
   14770:	003e8006 	br	14174 <_gp+0xffff499c>
   14774:	4462b03a 	or	r17,r8,r17
   14778:	8822c03a 	cmpne	r17,r17,zero
   1477c:	0007883a 	mov	r3,zero
   14780:	003f8b06 	br	145b0 <_gp+0xffff4dd8>
   14784:	0141ffc4 	movi	r5,2047
   14788:	11403b26 	beq	r2,r5,14878 <__adddf3+0x780>
   1478c:	0109c83a 	sub	r4,zero,r4
   14790:	42002034 	orhi	r8,r8,128
   14794:	01400e04 	movi	r5,56
   14798:	29006716 	blt	r5,r4,14938 <__adddf3+0x840>
   1479c:	014007c4 	movi	r5,31
   147a0:	29007016 	blt	r5,r4,14964 <__adddf3+0x86c>
   147a4:	01400804 	movi	r5,32
   147a8:	290bc83a 	sub	r5,r5,r4
   147ac:	4154983a 	sll	r10,r8,r5
   147b0:	890ed83a 	srl	r7,r17,r4
   147b4:	894a983a 	sll	r5,r17,r5
   147b8:	4108d83a 	srl	r4,r8,r4
   147bc:	51e2b03a 	or	r17,r10,r7
   147c0:	280ac03a 	cmpne	r5,r5,zero
   147c4:	8962b03a 	or	r17,r17,r5
   147c8:	89a3883a 	add	r17,r17,r6
   147cc:	2253883a 	add	r9,r4,r9
   147d0:	898d803a 	cmpltu	r6,r17,r6
   147d4:	3251883a 	add	r8,r6,r9
   147d8:	1021883a 	mov	r16,r2
   147dc:	003ee506 	br	14374 <_gp+0xffff4b9c>
   147e0:	4984b03a 	or	r2,r9,r6
   147e4:	103e6326 	beq	r2,zero,14174 <_gp+0xffff499c>
   147e8:	8987c83a 	sub	r3,r17,r6
   147ec:	88c9803a 	cmpltu	r4,r17,r3
   147f0:	4245c83a 	sub	r2,r8,r9
   147f4:	1105c83a 	sub	r2,r2,r4
   147f8:	1100202c 	andhi	r4,r2,128
   147fc:	203ebb26 	beq	r4,zero,142ec <_gp+0xffff4b14>
   14800:	3463c83a 	sub	r17,r6,r17
   14804:	4a07c83a 	sub	r3,r9,r8
   14808:	344d803a 	cmpltu	r6,r6,r17
   1480c:	1991c83a 	sub	r8,r3,r6
   14810:	3825883a 	mov	r18,r7
   14814:	003e5706 	br	14174 <_gp+0xffff499c>
   14818:	4984b03a 	or	r2,r9,r6
   1481c:	10002e26 	beq	r2,zero,148d8 <__adddf3+0x7e0>
   14820:	4004d0fa 	srli	r2,r8,3
   14824:	8822d0fa 	srli	r17,r17,3
   14828:	4010977a 	slli	r8,r8,29
   1482c:	10c0022c 	andhi	r3,r2,8
   14830:	4462b03a 	or	r17,r8,r17
   14834:	18000826 	beq	r3,zero,14858 <__adddf3+0x760>
   14838:	4808d0fa 	srli	r4,r9,3
   1483c:	20c0022c 	andhi	r3,r4,8
   14840:	1800051e 	bne	r3,zero,14858 <__adddf3+0x760>
   14844:	300cd0fa 	srli	r6,r6,3
   14848:	4806977a 	slli	r3,r9,29
   1484c:	2005883a 	mov	r2,r4
   14850:	3825883a 	mov	r18,r7
   14854:	19a2b03a 	or	r17,r3,r6
   14858:	8810d77a 	srli	r8,r17,29
   1485c:	100490fa 	slli	r2,r2,3
   14860:	882290fa 	slli	r17,r17,3
   14864:	0401ffc4 	movi	r16,2047
   14868:	4090b03a 	or	r8,r8,r2
   1486c:	003e4106 	br	14174 <_gp+0xffff499c>
   14870:	0141ffc4 	movi	r5,2047
   14874:	117fc71e 	bne	r2,r5,14794 <_gp+0xffff4fbc>
   14878:	4811883a 	mov	r8,r9
   1487c:	3023883a 	mov	r17,r6
   14880:	1021883a 	mov	r16,r2
   14884:	003e3b06 	br	14174 <_gp+0xffff499c>
   14888:	10002f26 	beq	r2,zero,14948 <__adddf3+0x850>
   1488c:	4984b03a 	or	r2,r9,r6
   14890:	10001126 	beq	r2,zero,148d8 <__adddf3+0x7e0>
   14894:	4004d0fa 	srli	r2,r8,3
   14898:	8822d0fa 	srli	r17,r17,3
   1489c:	4010977a 	slli	r8,r8,29
   148a0:	10c0022c 	andhi	r3,r2,8
   148a4:	4462b03a 	or	r17,r8,r17
   148a8:	183feb26 	beq	r3,zero,14858 <_gp+0xffff5080>
   148ac:	4808d0fa 	srli	r4,r9,3
   148b0:	20c0022c 	andhi	r3,r4,8
   148b4:	183fe81e 	bne	r3,zero,14858 <_gp+0xffff5080>
   148b8:	300cd0fa 	srli	r6,r6,3
   148bc:	4806977a 	slli	r3,r9,29
   148c0:	2005883a 	mov	r2,r4
   148c4:	19a2b03a 	or	r17,r3,r6
   148c8:	003fe306 	br	14858 <_gp+0xffff5080>
   148cc:	0011883a 	mov	r8,zero
   148d0:	0005883a 	mov	r2,zero
   148d4:	003e3f06 	br	141d4 <_gp+0xffff49fc>
   148d8:	0401ffc4 	movi	r16,2047
   148dc:	003e2506 	br	14174 <_gp+0xffff499c>
   148e0:	0013883a 	mov	r9,zero
   148e4:	003f8406 	br	146f8 <_gp+0xffff4f20>
   148e8:	0005883a 	mov	r2,zero
   148ec:	0007883a 	mov	r3,zero
   148f0:	003e8906 	br	14318 <_gp+0xffff4b40>
   148f4:	197ff804 	addi	r5,r3,-32
   148f8:	01000804 	movi	r4,32
   148fc:	414ad83a 	srl	r5,r8,r5
   14900:	19002426 	beq	r3,r4,14994 <__adddf3+0x89c>
   14904:	01001004 	movi	r4,64
   14908:	20c7c83a 	sub	r3,r4,r3
   1490c:	40c6983a 	sll	r3,r8,r3
   14910:	1c46b03a 	or	r3,r3,r17
   14914:	1806c03a 	cmpne	r3,r3,zero
   14918:	28e2b03a 	or	r17,r5,r3
   1491c:	0007883a 	mov	r3,zero
   14920:	003f2306 	br	145b0 <_gp+0xffff4dd8>
   14924:	0007883a 	mov	r3,zero
   14928:	5811883a 	mov	r8,r11
   1492c:	00bfffc4 	movi	r2,-1
   14930:	0401ffc4 	movi	r16,2047
   14934:	003e7806 	br	14318 <_gp+0xffff4b40>
   14938:	4462b03a 	or	r17,r8,r17
   1493c:	8822c03a 	cmpne	r17,r17,zero
   14940:	0009883a 	mov	r4,zero
   14944:	003fa006 	br	147c8 <_gp+0xffff4ff0>
   14948:	4811883a 	mov	r8,r9
   1494c:	3023883a 	mov	r17,r6
   14950:	0401ffc4 	movi	r16,2047
   14954:	003e0706 	br	14174 <_gp+0xffff499c>
   14958:	4811883a 	mov	r8,r9
   1495c:	3023883a 	mov	r17,r6
   14960:	003e0406 	br	14174 <_gp+0xffff499c>
   14964:	21fff804 	addi	r7,r4,-32
   14968:	01400804 	movi	r5,32
   1496c:	41ced83a 	srl	r7,r8,r7
   14970:	21400a26 	beq	r4,r5,1499c <__adddf3+0x8a4>
   14974:	01401004 	movi	r5,64
   14978:	2909c83a 	sub	r4,r5,r4
   1497c:	4108983a 	sll	r4,r8,r4
   14980:	2448b03a 	or	r4,r4,r17
   14984:	2008c03a 	cmpne	r4,r4,zero
   14988:	3922b03a 	or	r17,r7,r4
   1498c:	0009883a 	mov	r4,zero
   14990:	003f8d06 	br	147c8 <_gp+0xffff4ff0>
   14994:	0007883a 	mov	r3,zero
   14998:	003fdd06 	br	14910 <_gp+0xffff5138>
   1499c:	0009883a 	mov	r4,zero
   149a0:	003ff706 	br	14980 <_gp+0xffff51a8>

000149a4 <__divdf3>:
   149a4:	defff004 	addi	sp,sp,-64
   149a8:	dc800815 	stw	r18,32(sp)
   149ac:	2824d53a 	srli	r18,r5,20
   149b0:	dd800c15 	stw	r22,48(sp)
   149b4:	282cd7fa 	srli	r22,r5,31
   149b8:	dc000615 	stw	r16,24(sp)
   149bc:	04000434 	movhi	r16,16
   149c0:	843fffc4 	addi	r16,r16,-1
   149c4:	dfc00f15 	stw	ra,60(sp)
   149c8:	df000e15 	stw	fp,56(sp)
   149cc:	ddc00d15 	stw	r23,52(sp)
   149d0:	dd400b15 	stw	r21,44(sp)
   149d4:	dd000a15 	stw	r20,40(sp)
   149d8:	dcc00915 	stw	r19,36(sp)
   149dc:	dc400715 	stw	r17,28(sp)
   149e0:	9481ffcc 	andi	r18,r18,2047
   149e4:	2c20703a 	and	r16,r5,r16
   149e8:	b2003fcc 	andi	r8,r22,255
   149ec:	90006126 	beq	r18,zero,14b74 <__divdf3+0x1d0>
   149f0:	0081ffc4 	movi	r2,2047
   149f4:	202b883a 	mov	r21,r4
   149f8:	90803726 	beq	r18,r2,14ad8 <__divdf3+0x134>
   149fc:	80800434 	orhi	r2,r16,16
   14a00:	100490fa 	slli	r2,r2,3
   14a04:	2020d77a 	srli	r16,r4,29
   14a08:	202a90fa 	slli	r21,r4,3
   14a0c:	94bf0044 	addi	r18,r18,-1023
   14a10:	80a0b03a 	or	r16,r16,r2
   14a14:	0013883a 	mov	r9,zero
   14a18:	000b883a 	mov	r5,zero
   14a1c:	3806d53a 	srli	r3,r7,20
   14a20:	382ed7fa 	srli	r23,r7,31
   14a24:	04400434 	movhi	r17,16
   14a28:	8c7fffc4 	addi	r17,r17,-1
   14a2c:	18c1ffcc 	andi	r3,r3,2047
   14a30:	3029883a 	mov	r20,r6
   14a34:	3c62703a 	and	r17,r7,r17
   14a38:	bf003fcc 	andi	fp,r23,255
   14a3c:	18006e26 	beq	r3,zero,14bf8 <__divdf3+0x254>
   14a40:	0081ffc4 	movi	r2,2047
   14a44:	18806626 	beq	r3,r2,14be0 <__divdf3+0x23c>
   14a48:	88800434 	orhi	r2,r17,16
   14a4c:	100490fa 	slli	r2,r2,3
   14a50:	3022d77a 	srli	r17,r6,29
   14a54:	302890fa 	slli	r20,r6,3
   14a58:	18ff0044 	addi	r3,r3,-1023
   14a5c:	88a2b03a 	or	r17,r17,r2
   14a60:	000f883a 	mov	r7,zero
   14a64:	b5e6f03a 	xor	r19,r22,r23
   14a68:	3a4cb03a 	or	r6,r7,r9
   14a6c:	008003c4 	movi	r2,15
   14a70:	9809883a 	mov	r4,r19
   14a74:	90c7c83a 	sub	r3,r18,r3
   14a78:	9cc03fcc 	andi	r19,r19,255
   14a7c:	11809636 	bltu	r2,r6,14cd8 <__divdf3+0x334>
   14a80:	300c90ba 	slli	r6,r6,2
   14a84:	00800074 	movhi	r2,1
   14a88:	1092a604 	addi	r2,r2,19096
   14a8c:	308d883a 	add	r6,r6,r2
   14a90:	30800017 	ldw	r2,0(r6)
   14a94:	1000683a 	jmp	r2
   14a98:	00014cd8 	cmpnei	zero,zero,1331
   14a9c:	00014b10 	cmplti	zero,zero,1324
   14aa0:	00014cc8 	cmpgei	zero,zero,1331
   14aa4:	00014b04 	movi	zero,1324
   14aa8:	00014cc8 	cmpgei	zero,zero,1331
   14aac:	00014c9c 	xori	zero,zero,1330
   14ab0:	00014cc8 	cmpgei	zero,zero,1331
   14ab4:	00014b04 	movi	zero,1324
   14ab8:	00014b10 	cmplti	zero,zero,1324
   14abc:	00014b10 	cmplti	zero,zero,1324
   14ac0:	00014c9c 	xori	zero,zero,1330
   14ac4:	00014b04 	movi	zero,1324
   14ac8:	00014af4 	movhi	zero,1323
   14acc:	00014af4 	movhi	zero,1323
   14ad0:	00014af4 	movhi	zero,1323
   14ad4:	00015060 	cmpeqi	zero,zero,1345
   14ad8:	2404b03a 	or	r2,r4,r16
   14adc:	10006c1e 	bne	r2,zero,14c90 <__divdf3+0x2ec>
   14ae0:	02400204 	movi	r9,8
   14ae4:	0021883a 	mov	r16,zero
   14ae8:	002b883a 	mov	r21,zero
   14aec:	01400084 	movi	r5,2
   14af0:	003fca06 	br	14a1c <_gp+0xffff5244>
   14af4:	8023883a 	mov	r17,r16
   14af8:	a829883a 	mov	r20,r21
   14afc:	4039883a 	mov	fp,r8
   14b00:	280f883a 	mov	r7,r5
   14b04:	00800084 	movi	r2,2
   14b08:	3881601e 	bne	r7,r2,1508c <__divdf3+0x6e8>
   14b0c:	e027883a 	mov	r19,fp
   14b10:	9900004c 	andi	r4,r19,1
   14b14:	0081ffc4 	movi	r2,2047
   14b18:	0021883a 	mov	r16,zero
   14b1c:	002b883a 	mov	r21,zero
   14b20:	1004953a 	slli	r2,r2,20
   14b24:	20c03fcc 	andi	r3,r4,255
   14b28:	01400434 	movhi	r5,16
   14b2c:	297fffc4 	addi	r5,r5,-1
   14b30:	180697fa 	slli	r3,r3,31
   14b34:	8160703a 	and	r16,r16,r5
   14b38:	80a0b03a 	or	r16,r16,r2
   14b3c:	80c6b03a 	or	r3,r16,r3
   14b40:	a805883a 	mov	r2,r21
   14b44:	dfc00f17 	ldw	ra,60(sp)
   14b48:	df000e17 	ldw	fp,56(sp)
   14b4c:	ddc00d17 	ldw	r23,52(sp)
   14b50:	dd800c17 	ldw	r22,48(sp)
   14b54:	dd400b17 	ldw	r21,44(sp)
   14b58:	dd000a17 	ldw	r20,40(sp)
   14b5c:	dcc00917 	ldw	r19,36(sp)
   14b60:	dc800817 	ldw	r18,32(sp)
   14b64:	dc400717 	ldw	r17,28(sp)
   14b68:	dc000617 	ldw	r16,24(sp)
   14b6c:	dec01004 	addi	sp,sp,64
   14b70:	f800283a 	ret
   14b74:	2404b03a 	or	r2,r4,r16
   14b78:	2023883a 	mov	r17,r4
   14b7c:	10003f26 	beq	r2,zero,14c7c <__divdf3+0x2d8>
   14b80:	80015e26 	beq	r16,zero,150fc <__divdf3+0x758>
   14b84:	8009883a 	mov	r4,r16
   14b88:	d9800215 	stw	r6,8(sp)
   14b8c:	d9c00515 	stw	r7,20(sp)
   14b90:	da000415 	stw	r8,16(sp)
   14b94:	0015edc0 	call	15edc <__clzsi2>
   14b98:	d9800217 	ldw	r6,8(sp)
   14b9c:	d9c00517 	ldw	r7,20(sp)
   14ba0:	da000417 	ldw	r8,16(sp)
   14ba4:	113ffd44 	addi	r4,r2,-11
   14ba8:	00c00704 	movi	r3,28
   14bac:	19014f16 	blt	r3,r4,150ec <__divdf3+0x748>
   14bb0:	00c00744 	movi	r3,29
   14bb4:	157ffe04 	addi	r21,r2,-8
   14bb8:	1907c83a 	sub	r3,r3,r4
   14bbc:	8560983a 	sll	r16,r16,r21
   14bc0:	88c6d83a 	srl	r3,r17,r3
   14bc4:	8d6a983a 	sll	r21,r17,r21
   14bc8:	1c20b03a 	or	r16,r3,r16
   14bcc:	1080fcc4 	addi	r2,r2,1011
   14bd0:	00a5c83a 	sub	r18,zero,r2
   14bd4:	0013883a 	mov	r9,zero
   14bd8:	000b883a 	mov	r5,zero
   14bdc:	003f8f06 	br	14a1c <_gp+0xffff5244>
   14be0:	3444b03a 	or	r2,r6,r17
   14be4:	1000231e 	bne	r2,zero,14c74 <__divdf3+0x2d0>
   14be8:	0023883a 	mov	r17,zero
   14bec:	0029883a 	mov	r20,zero
   14bf0:	01c00084 	movi	r7,2
   14bf4:	003f9b06 	br	14a64 <_gp+0xffff528c>
   14bf8:	3444b03a 	or	r2,r6,r17
   14bfc:	10001926 	beq	r2,zero,14c64 <__divdf3+0x2c0>
   14c00:	88014b26 	beq	r17,zero,15130 <__divdf3+0x78c>
   14c04:	8809883a 	mov	r4,r17
   14c08:	d9400115 	stw	r5,4(sp)
   14c0c:	d9800215 	stw	r6,8(sp)
   14c10:	da000415 	stw	r8,16(sp)
   14c14:	da400315 	stw	r9,12(sp)
   14c18:	0015edc0 	call	15edc <__clzsi2>
   14c1c:	d9400117 	ldw	r5,4(sp)
   14c20:	d9800217 	ldw	r6,8(sp)
   14c24:	da000417 	ldw	r8,16(sp)
   14c28:	da400317 	ldw	r9,12(sp)
   14c2c:	113ffd44 	addi	r4,r2,-11
   14c30:	00c00704 	movi	r3,28
   14c34:	19013a16 	blt	r3,r4,15120 <__divdf3+0x77c>
   14c38:	00c00744 	movi	r3,29
   14c3c:	153ffe04 	addi	r20,r2,-8
   14c40:	1907c83a 	sub	r3,r3,r4
   14c44:	8d22983a 	sll	r17,r17,r20
   14c48:	30c6d83a 	srl	r3,r6,r3
   14c4c:	3528983a 	sll	r20,r6,r20
   14c50:	1c62b03a 	or	r17,r3,r17
   14c54:	1080fcc4 	addi	r2,r2,1011
   14c58:	0087c83a 	sub	r3,zero,r2
   14c5c:	000f883a 	mov	r7,zero
   14c60:	003f8006 	br	14a64 <_gp+0xffff528c>
   14c64:	0023883a 	mov	r17,zero
   14c68:	0029883a 	mov	r20,zero
   14c6c:	01c00044 	movi	r7,1
   14c70:	003f7c06 	br	14a64 <_gp+0xffff528c>
   14c74:	01c000c4 	movi	r7,3
   14c78:	003f7a06 	br	14a64 <_gp+0xffff528c>
   14c7c:	02400104 	movi	r9,4
   14c80:	0021883a 	mov	r16,zero
   14c84:	002b883a 	mov	r21,zero
   14c88:	01400044 	movi	r5,1
   14c8c:	003f6306 	br	14a1c <_gp+0xffff5244>
   14c90:	02400304 	movi	r9,12
   14c94:	014000c4 	movi	r5,3
   14c98:	003f6006 	br	14a1c <_gp+0xffff5244>
   14c9c:	04000434 	movhi	r16,16
   14ca0:	0009883a 	mov	r4,zero
   14ca4:	843fffc4 	addi	r16,r16,-1
   14ca8:	057fffc4 	movi	r21,-1
   14cac:	0081ffc4 	movi	r2,2047
   14cb0:	003f9b06 	br	14b20 <_gp+0xffff5348>
   14cb4:	00c00044 	movi	r3,1
   14cb8:	1887c83a 	sub	r3,r3,r2
   14cbc:	01000e04 	movi	r4,56
   14cc0:	20c1530e 	bge	r4,r3,15210 <__divdf3+0x86c>
   14cc4:	9900004c 	andi	r4,r19,1
   14cc8:	0005883a 	mov	r2,zero
   14ccc:	0021883a 	mov	r16,zero
   14cd0:	002b883a 	mov	r21,zero
   14cd4:	003f9206 	br	14b20 <_gp+0xffff5348>
   14cd8:	8c012e36 	bltu	r17,r16,15194 <__divdf3+0x7f0>
   14cdc:	84412c26 	beq	r16,r17,15190 <__divdf3+0x7ec>
   14ce0:	a82f883a 	mov	r23,r21
   14ce4:	18ffffc4 	addi	r3,r3,-1
   14ce8:	002b883a 	mov	r21,zero
   14cec:	a004d63a 	srli	r2,r20,24
   14cf0:	8822923a 	slli	r17,r17,8
   14cf4:	a028923a 	slli	r20,r20,8
   14cf8:	8009883a 	mov	r4,r16
   14cfc:	88acb03a 	or	r22,r17,r2
   14d00:	dd000015 	stw	r20,0(sp)
   14d04:	b028d43a 	srli	r20,r22,16
   14d08:	d8c00215 	stw	r3,8(sp)
   14d0c:	b4bfffcc 	andi	r18,r22,65535
   14d10:	a00b883a 	mov	r5,r20
   14d14:	00136800 	call	13680 <__udivsi3>
   14d18:	100b883a 	mov	r5,r2
   14d1c:	9009883a 	mov	r4,r18
   14d20:	1023883a 	mov	r17,r2
   14d24:	001373c0 	call	1373c <__mulsi3>
   14d28:	8009883a 	mov	r4,r16
   14d2c:	a00b883a 	mov	r5,r20
   14d30:	1039883a 	mov	fp,r2
   14d34:	00136e40 	call	136e4 <__umodsi3>
   14d38:	1004943a 	slli	r2,r2,16
   14d3c:	b808d43a 	srli	r4,r23,16
   14d40:	d8c00217 	ldw	r3,8(sp)
   14d44:	2084b03a 	or	r2,r4,r2
   14d48:	1700062e 	bgeu	r2,fp,14d64 <__divdf3+0x3c0>
   14d4c:	1585883a 	add	r2,r2,r22
   14d50:	893fffc4 	addi	r4,r17,-1
   14d54:	15811d36 	bltu	r2,r22,151cc <__divdf3+0x828>
   14d58:	17011c2e 	bgeu	r2,fp,151cc <__divdf3+0x828>
   14d5c:	8c7fff84 	addi	r17,r17,-2
   14d60:	1585883a 	add	r2,r2,r22
   14d64:	1739c83a 	sub	fp,r2,fp
   14d68:	a00b883a 	mov	r5,r20
   14d6c:	e009883a 	mov	r4,fp
   14d70:	d8c00215 	stw	r3,8(sp)
   14d74:	00136800 	call	13680 <__udivsi3>
   14d78:	100b883a 	mov	r5,r2
   14d7c:	9009883a 	mov	r4,r18
   14d80:	1021883a 	mov	r16,r2
   14d84:	001373c0 	call	1373c <__mulsi3>
   14d88:	a00b883a 	mov	r5,r20
   14d8c:	e009883a 	mov	r4,fp
   14d90:	d8800415 	stw	r2,16(sp)
   14d94:	00136e40 	call	136e4 <__umodsi3>
   14d98:	1004943a 	slli	r2,r2,16
   14d9c:	da000417 	ldw	r8,16(sp)
   14da0:	bdffffcc 	andi	r23,r23,65535
   14da4:	b884b03a 	or	r2,r23,r2
   14da8:	d8c00217 	ldw	r3,8(sp)
   14dac:	1200062e 	bgeu	r2,r8,14dc8 <__divdf3+0x424>
   14db0:	1585883a 	add	r2,r2,r22
   14db4:	813fffc4 	addi	r4,r16,-1
   14db8:	15810236 	bltu	r2,r22,151c4 <__divdf3+0x820>
   14dbc:	1201012e 	bgeu	r2,r8,151c4 <__divdf3+0x820>
   14dc0:	843fff84 	addi	r16,r16,-2
   14dc4:	1585883a 	add	r2,r2,r22
   14dc8:	8822943a 	slli	r17,r17,16
   14dcc:	d9800017 	ldw	r6,0(sp)
   14dd0:	1211c83a 	sub	r8,r2,r8
   14dd4:	8c22b03a 	or	r17,r17,r16
   14dd8:	373fffcc 	andi	fp,r6,65535
   14ddc:	8abfffcc 	andi	r10,r17,65535
   14de0:	8820d43a 	srli	r16,r17,16
   14de4:	5009883a 	mov	r4,r10
   14de8:	e00b883a 	mov	r5,fp
   14dec:	302ed43a 	srli	r23,r6,16
   14df0:	d8c00215 	stw	r3,8(sp)
   14df4:	da000415 	stw	r8,16(sp)
   14df8:	da800115 	stw	r10,4(sp)
   14dfc:	001373c0 	call	1373c <__mulsi3>
   14e00:	800b883a 	mov	r5,r16
   14e04:	e009883a 	mov	r4,fp
   14e08:	d8800515 	stw	r2,20(sp)
   14e0c:	001373c0 	call	1373c <__mulsi3>
   14e10:	8009883a 	mov	r4,r16
   14e14:	b80b883a 	mov	r5,r23
   14e18:	d8800315 	stw	r2,12(sp)
   14e1c:	001373c0 	call	1373c <__mulsi3>
   14e20:	da800117 	ldw	r10,4(sp)
   14e24:	b80b883a 	mov	r5,r23
   14e28:	1021883a 	mov	r16,r2
   14e2c:	5009883a 	mov	r4,r10
   14e30:	001373c0 	call	1373c <__mulsi3>
   14e34:	d9c00517 	ldw	r7,20(sp)
   14e38:	da400317 	ldw	r9,12(sp)
   14e3c:	d8c00217 	ldw	r3,8(sp)
   14e40:	3808d43a 	srli	r4,r7,16
   14e44:	1245883a 	add	r2,r2,r9
   14e48:	da000417 	ldw	r8,16(sp)
   14e4c:	2085883a 	add	r2,r4,r2
   14e50:	1240022e 	bgeu	r2,r9,14e5c <__divdf3+0x4b8>
   14e54:	01000074 	movhi	r4,1
   14e58:	8121883a 	add	r16,r16,r4
   14e5c:	1008d43a 	srli	r4,r2,16
   14e60:	1004943a 	slli	r2,r2,16
   14e64:	39ffffcc 	andi	r7,r7,65535
   14e68:	2409883a 	add	r4,r4,r16
   14e6c:	11c5883a 	add	r2,r2,r7
   14e70:	4100bb36 	bltu	r8,r4,15160 <__divdf3+0x7bc>
   14e74:	4100d726 	beq	r8,r4,151d4 <__divdf3+0x830>
   14e78:	4109c83a 	sub	r4,r8,r4
   14e7c:	a8a1c83a 	sub	r16,r21,r2
   14e80:	ac2b803a 	cmpltu	r21,r21,r16
   14e84:	256bc83a 	sub	r21,r4,r21
   14e88:	b540d926 	beq	r22,r21,151f0 <__divdf3+0x84c>
   14e8c:	a00b883a 	mov	r5,r20
   14e90:	a809883a 	mov	r4,r21
   14e94:	d8c00215 	stw	r3,8(sp)
   14e98:	00136800 	call	13680 <__udivsi3>
   14e9c:	100b883a 	mov	r5,r2
   14ea0:	9009883a 	mov	r4,r18
   14ea4:	d8800515 	stw	r2,20(sp)
   14ea8:	001373c0 	call	1373c <__mulsi3>
   14eac:	a809883a 	mov	r4,r21
   14eb0:	a00b883a 	mov	r5,r20
   14eb4:	d8800415 	stw	r2,16(sp)
   14eb8:	00136e40 	call	136e4 <__umodsi3>
   14ebc:	1004943a 	slli	r2,r2,16
   14ec0:	8008d43a 	srli	r4,r16,16
   14ec4:	da000417 	ldw	r8,16(sp)
   14ec8:	d8c00217 	ldw	r3,8(sp)
   14ecc:	2084b03a 	or	r2,r4,r2
   14ed0:	d9c00517 	ldw	r7,20(sp)
   14ed4:	1200062e 	bgeu	r2,r8,14ef0 <__divdf3+0x54c>
   14ed8:	1585883a 	add	r2,r2,r22
   14edc:	393fffc4 	addi	r4,r7,-1
   14ee0:	1580c536 	bltu	r2,r22,151f8 <__divdf3+0x854>
   14ee4:	1200c42e 	bgeu	r2,r8,151f8 <__divdf3+0x854>
   14ee8:	39ffff84 	addi	r7,r7,-2
   14eec:	1585883a 	add	r2,r2,r22
   14ef0:	122bc83a 	sub	r21,r2,r8
   14ef4:	a00b883a 	mov	r5,r20
   14ef8:	a809883a 	mov	r4,r21
   14efc:	d8c00215 	stw	r3,8(sp)
   14f00:	d9c00515 	stw	r7,20(sp)
   14f04:	00136800 	call	13680 <__udivsi3>
   14f08:	9009883a 	mov	r4,r18
   14f0c:	100b883a 	mov	r5,r2
   14f10:	d8800415 	stw	r2,16(sp)
   14f14:	001373c0 	call	1373c <__mulsi3>
   14f18:	a809883a 	mov	r4,r21
   14f1c:	a00b883a 	mov	r5,r20
   14f20:	1025883a 	mov	r18,r2
   14f24:	00136e40 	call	136e4 <__umodsi3>
   14f28:	1004943a 	slli	r2,r2,16
   14f2c:	813fffcc 	andi	r4,r16,65535
   14f30:	d8c00217 	ldw	r3,8(sp)
   14f34:	20a0b03a 	or	r16,r4,r2
   14f38:	d9c00517 	ldw	r7,20(sp)
   14f3c:	da000417 	ldw	r8,16(sp)
   14f40:	8480062e 	bgeu	r16,r18,14f5c <__divdf3+0x5b8>
   14f44:	85a1883a 	add	r16,r16,r22
   14f48:	40bfffc4 	addi	r2,r8,-1
   14f4c:	8580ac36 	bltu	r16,r22,15200 <__divdf3+0x85c>
   14f50:	8480ab2e 	bgeu	r16,r18,15200 <__divdf3+0x85c>
   14f54:	423fff84 	addi	r8,r8,-2
   14f58:	85a1883a 	add	r16,r16,r22
   14f5c:	3804943a 	slli	r2,r7,16
   14f60:	84a1c83a 	sub	r16,r16,r18
   14f64:	e009883a 	mov	r4,fp
   14f68:	1228b03a 	or	r20,r2,r8
   14f6c:	a1ffffcc 	andi	r7,r20,65535
   14f70:	a024d43a 	srli	r18,r20,16
   14f74:	380b883a 	mov	r5,r7
   14f78:	d8c00215 	stw	r3,8(sp)
   14f7c:	d9c00515 	stw	r7,20(sp)
   14f80:	001373c0 	call	1373c <__mulsi3>
   14f84:	900b883a 	mov	r5,r18
   14f88:	e009883a 	mov	r4,fp
   14f8c:	102b883a 	mov	r21,r2
   14f90:	001373c0 	call	1373c <__mulsi3>
   14f94:	900b883a 	mov	r5,r18
   14f98:	b809883a 	mov	r4,r23
   14f9c:	1039883a 	mov	fp,r2
   14fa0:	001373c0 	call	1373c <__mulsi3>
   14fa4:	d9c00517 	ldw	r7,20(sp)
   14fa8:	b80b883a 	mov	r5,r23
   14fac:	1025883a 	mov	r18,r2
   14fb0:	3809883a 	mov	r4,r7
   14fb4:	001373c0 	call	1373c <__mulsi3>
   14fb8:	a808d43a 	srli	r4,r21,16
   14fbc:	1705883a 	add	r2,r2,fp
   14fc0:	d8c00217 	ldw	r3,8(sp)
   14fc4:	2085883a 	add	r2,r4,r2
   14fc8:	1700022e 	bgeu	r2,fp,14fd4 <__divdf3+0x630>
   14fcc:	01000074 	movhi	r4,1
   14fd0:	9125883a 	add	r18,r18,r4
   14fd4:	1008d43a 	srli	r4,r2,16
   14fd8:	1004943a 	slli	r2,r2,16
   14fdc:	ad7fffcc 	andi	r21,r21,65535
   14fe0:	2489883a 	add	r4,r4,r18
   14fe4:	1545883a 	add	r2,r2,r21
   14fe8:	81003836 	bltu	r16,r4,150cc <__divdf3+0x728>
   14fec:	81003626 	beq	r16,r4,150c8 <__divdf3+0x724>
   14ff0:	a5000054 	ori	r20,r20,1
   14ff4:	1880ffc4 	addi	r2,r3,1023
   14ff8:	00bf2e0e 	bge	zero,r2,14cb4 <_gp+0xffff54dc>
   14ffc:	a10001cc 	andi	r4,r20,7
   15000:	20000726 	beq	r4,zero,15020 <__divdf3+0x67c>
   15004:	a10003cc 	andi	r4,r20,15
   15008:	01400104 	movi	r5,4
   1500c:	21400426 	beq	r4,r5,15020 <__divdf3+0x67c>
   15010:	a149883a 	add	r4,r20,r5
   15014:	2529803a 	cmpltu	r20,r4,r20
   15018:	8d23883a 	add	r17,r17,r20
   1501c:	2029883a 	mov	r20,r4
   15020:	8900402c 	andhi	r4,r17,256
   15024:	20000426 	beq	r4,zero,15038 <__divdf3+0x694>
   15028:	18810004 	addi	r2,r3,1024
   1502c:	00ffc034 	movhi	r3,65280
   15030:	18ffffc4 	addi	r3,r3,-1
   15034:	88e2703a 	and	r17,r17,r3
   15038:	00c1ff84 	movi	r3,2046
   1503c:	18beb416 	blt	r3,r2,14b10 <_gp+0xffff5338>
   15040:	a028d0fa 	srli	r20,r20,3
   15044:	882a977a 	slli	r21,r17,29
   15048:	8820927a 	slli	r16,r17,9
   1504c:	1081ffcc 	andi	r2,r2,2047
   15050:	ad2ab03a 	or	r21,r21,r20
   15054:	8020d33a 	srli	r16,r16,12
   15058:	9900004c 	andi	r4,r19,1
   1505c:	003eb006 	br	14b20 <_gp+0xffff5348>
   15060:	8080022c 	andhi	r2,r16,8
   15064:	10001226 	beq	r2,zero,150b0 <__divdf3+0x70c>
   15068:	8880022c 	andhi	r2,r17,8
   1506c:	1000101e 	bne	r2,zero,150b0 <__divdf3+0x70c>
   15070:	00800434 	movhi	r2,16
   15074:	8c000234 	orhi	r16,r17,8
   15078:	10bfffc4 	addi	r2,r2,-1
   1507c:	b809883a 	mov	r4,r23
   15080:	80a0703a 	and	r16,r16,r2
   15084:	a02b883a 	mov	r21,r20
   15088:	003f0806 	br	14cac <_gp+0xffff54d4>
   1508c:	008000c4 	movi	r2,3
   15090:	3880b126 	beq	r7,r2,15358 <__divdf3+0x9b4>
   15094:	00800044 	movi	r2,1
   15098:	38805b1e 	bne	r7,r2,15208 <__divdf3+0x864>
   1509c:	e009883a 	mov	r4,fp
   150a0:	0005883a 	mov	r2,zero
   150a4:	0021883a 	mov	r16,zero
   150a8:	002b883a 	mov	r21,zero
   150ac:	003e9c06 	br	14b20 <_gp+0xffff5348>
   150b0:	00800434 	movhi	r2,16
   150b4:	84000234 	orhi	r16,r16,8
   150b8:	10bfffc4 	addi	r2,r2,-1
   150bc:	b009883a 	mov	r4,r22
   150c0:	80a0703a 	and	r16,r16,r2
   150c4:	003ef906 	br	14cac <_gp+0xffff54d4>
   150c8:	103fca26 	beq	r2,zero,14ff4 <_gp+0xffff581c>
   150cc:	b421883a 	add	r16,r22,r16
   150d0:	a17fffc4 	addi	r5,r20,-1
   150d4:	8580422e 	bgeu	r16,r22,151e0 <__divdf3+0x83c>
   150d8:	2829883a 	mov	r20,r5
   150dc:	813fc41e 	bne	r16,r4,14ff0 <_gp+0xffff5818>
   150e0:	d9800017 	ldw	r6,0(sp)
   150e4:	30bfc21e 	bne	r6,r2,14ff0 <_gp+0xffff5818>
   150e8:	003fc206 	br	14ff4 <_gp+0xffff581c>
   150ec:	143ff604 	addi	r16,r2,-40
   150f0:	8c20983a 	sll	r16,r17,r16
   150f4:	002b883a 	mov	r21,zero
   150f8:	003eb406 	br	14bcc <_gp+0xffff53f4>
   150fc:	d9800215 	stw	r6,8(sp)
   15100:	d9c00515 	stw	r7,20(sp)
   15104:	da000415 	stw	r8,16(sp)
   15108:	0015edc0 	call	15edc <__clzsi2>
   1510c:	10800804 	addi	r2,r2,32
   15110:	da000417 	ldw	r8,16(sp)
   15114:	d9c00517 	ldw	r7,20(sp)
   15118:	d9800217 	ldw	r6,8(sp)
   1511c:	003ea106 	br	14ba4 <_gp+0xffff53cc>
   15120:	147ff604 	addi	r17,r2,-40
   15124:	3462983a 	sll	r17,r6,r17
   15128:	0029883a 	mov	r20,zero
   1512c:	003ec906 	br	14c54 <_gp+0xffff547c>
   15130:	3009883a 	mov	r4,r6
   15134:	d9400115 	stw	r5,4(sp)
   15138:	d9800215 	stw	r6,8(sp)
   1513c:	da000415 	stw	r8,16(sp)
   15140:	da400315 	stw	r9,12(sp)
   15144:	0015edc0 	call	15edc <__clzsi2>
   15148:	10800804 	addi	r2,r2,32
   1514c:	da400317 	ldw	r9,12(sp)
   15150:	da000417 	ldw	r8,16(sp)
   15154:	d9800217 	ldw	r6,8(sp)
   15158:	d9400117 	ldw	r5,4(sp)
   1515c:	003eb306 	br	14c2c <_gp+0xffff5454>
   15160:	d9800017 	ldw	r6,0(sp)
   15164:	a9ab883a 	add	r21,r21,r6
   15168:	a98b803a 	cmpltu	r5,r21,r6
   1516c:	2d8b883a 	add	r5,r5,r22
   15170:	2a11883a 	add	r8,r5,r8
   15174:	897fffc4 	addi	r5,r17,-1
   15178:	b2000c2e 	bgeu	r22,r8,151ac <__divdf3+0x808>
   1517c:	41003f36 	bltu	r8,r4,1527c <__divdf3+0x8d8>
   15180:	22006c26 	beq	r4,r8,15334 <__divdf3+0x990>
   15184:	4109c83a 	sub	r4,r8,r4
   15188:	2823883a 	mov	r17,r5
   1518c:	003f3b06 	br	14e7c <_gp+0xffff56a4>
   15190:	ad3ed336 	bltu	r21,r20,14ce0 <_gp+0xffff5508>
   15194:	a804d07a 	srli	r2,r21,1
   15198:	802e97fa 	slli	r23,r16,31
   1519c:	a82a97fa 	slli	r21,r21,31
   151a0:	8020d07a 	srli	r16,r16,1
   151a4:	b8aeb03a 	or	r23,r23,r2
   151a8:	003ed006 	br	14cec <_gp+0xffff5514>
   151ac:	b23ff51e 	bne	r22,r8,15184 <_gp+0xffff59ac>
   151b0:	d9800017 	ldw	r6,0(sp)
   151b4:	a9bff12e 	bgeu	r21,r6,1517c <_gp+0xffff59a4>
   151b8:	b109c83a 	sub	r4,r22,r4
   151bc:	2823883a 	mov	r17,r5
   151c0:	003f2e06 	br	14e7c <_gp+0xffff56a4>
   151c4:	2021883a 	mov	r16,r4
   151c8:	003eff06 	br	14dc8 <_gp+0xffff55f0>
   151cc:	2023883a 	mov	r17,r4
   151d0:	003ee406 	br	14d64 <_gp+0xffff558c>
   151d4:	a8bfe236 	bltu	r21,r2,15160 <_gp+0xffff5988>
   151d8:	0009883a 	mov	r4,zero
   151dc:	003f2706 	br	14e7c <_gp+0xffff56a4>
   151e0:	81002d36 	bltu	r16,r4,15298 <__divdf3+0x8f4>
   151e4:	24005626 	beq	r4,r16,15340 <__divdf3+0x99c>
   151e8:	2829883a 	mov	r20,r5
   151ec:	003f8006 	br	14ff0 <_gp+0xffff5818>
   151f0:	053fffc4 	movi	r20,-1
   151f4:	003f7f06 	br	14ff4 <_gp+0xffff581c>
   151f8:	200f883a 	mov	r7,r4
   151fc:	003f3c06 	br	14ef0 <_gp+0xffff5718>
   15200:	1011883a 	mov	r8,r2
   15204:	003f5506 	br	14f5c <_gp+0xffff5784>
   15208:	e027883a 	mov	r19,fp
   1520c:	003f7906 	br	14ff4 <_gp+0xffff581c>
   15210:	010007c4 	movi	r4,31
   15214:	20c02816 	blt	r4,r3,152b8 <__divdf3+0x914>
   15218:	00800804 	movi	r2,32
   1521c:	10c5c83a 	sub	r2,r2,r3
   15220:	888a983a 	sll	r5,r17,r2
   15224:	a0c8d83a 	srl	r4,r20,r3
   15228:	a084983a 	sll	r2,r20,r2
   1522c:	88e2d83a 	srl	r17,r17,r3
   15230:	2906b03a 	or	r3,r5,r4
   15234:	1004c03a 	cmpne	r2,r2,zero
   15238:	1886b03a 	or	r3,r3,r2
   1523c:	188001cc 	andi	r2,r3,7
   15240:	10000726 	beq	r2,zero,15260 <__divdf3+0x8bc>
   15244:	188003cc 	andi	r2,r3,15
   15248:	01000104 	movi	r4,4
   1524c:	11000426 	beq	r2,r4,15260 <__divdf3+0x8bc>
   15250:	1805883a 	mov	r2,r3
   15254:	10c00104 	addi	r3,r2,4
   15258:	1885803a 	cmpltu	r2,r3,r2
   1525c:	88a3883a 	add	r17,r17,r2
   15260:	8880202c 	andhi	r2,r17,128
   15264:	10002926 	beq	r2,zero,1530c <__divdf3+0x968>
   15268:	9900004c 	andi	r4,r19,1
   1526c:	00800044 	movi	r2,1
   15270:	0021883a 	mov	r16,zero
   15274:	002b883a 	mov	r21,zero
   15278:	003e2906 	br	14b20 <_gp+0xffff5348>
   1527c:	d9800017 	ldw	r6,0(sp)
   15280:	8c7fff84 	addi	r17,r17,-2
   15284:	a9ab883a 	add	r21,r21,r6
   15288:	a98b803a 	cmpltu	r5,r21,r6
   1528c:	2d8b883a 	add	r5,r5,r22
   15290:	2a11883a 	add	r8,r5,r8
   15294:	003ef806 	br	14e78 <_gp+0xffff56a0>
   15298:	d9800017 	ldw	r6,0(sp)
   1529c:	318f883a 	add	r7,r6,r6
   152a0:	398b803a 	cmpltu	r5,r7,r6
   152a4:	2d8d883a 	add	r6,r5,r22
   152a8:	81a1883a 	add	r16,r16,r6
   152ac:	a17fff84 	addi	r5,r20,-2
   152b0:	d9c00015 	stw	r7,0(sp)
   152b4:	003f8806 	br	150d8 <_gp+0xffff5900>
   152b8:	013ff844 	movi	r4,-31
   152bc:	2085c83a 	sub	r2,r4,r2
   152c0:	8888d83a 	srl	r4,r17,r2
   152c4:	00800804 	movi	r2,32
   152c8:	18802126 	beq	r3,r2,15350 <__divdf3+0x9ac>
   152cc:	04001004 	movi	r16,64
   152d0:	80c7c83a 	sub	r3,r16,r3
   152d4:	88e0983a 	sll	r16,r17,r3
   152d8:	8504b03a 	or	r2,r16,r20
   152dc:	1004c03a 	cmpne	r2,r2,zero
   152e0:	2084b03a 	or	r2,r4,r2
   152e4:	144001cc 	andi	r17,r2,7
   152e8:	88000d1e 	bne	r17,zero,15320 <__divdf3+0x97c>
   152ec:	0021883a 	mov	r16,zero
   152f0:	102ad0fa 	srli	r21,r2,3
   152f4:	9900004c 	andi	r4,r19,1
   152f8:	0005883a 	mov	r2,zero
   152fc:	ac6ab03a 	or	r21,r21,r17
   15300:	003e0706 	br	14b20 <_gp+0xffff5348>
   15304:	1007883a 	mov	r3,r2
   15308:	0023883a 	mov	r17,zero
   1530c:	8820927a 	slli	r16,r17,9
   15310:	1805883a 	mov	r2,r3
   15314:	8822977a 	slli	r17,r17,29
   15318:	8020d33a 	srli	r16,r16,12
   1531c:	003ff406 	br	152f0 <_gp+0xffff5b18>
   15320:	10c003cc 	andi	r3,r2,15
   15324:	01000104 	movi	r4,4
   15328:	193ff626 	beq	r3,r4,15304 <_gp+0xffff5b2c>
   1532c:	0023883a 	mov	r17,zero
   15330:	003fc806 	br	15254 <_gp+0xffff5a7c>
   15334:	a8bfd136 	bltu	r21,r2,1527c <_gp+0xffff5aa4>
   15338:	2823883a 	mov	r17,r5
   1533c:	003fa606 	br	151d8 <_gp+0xffff5a00>
   15340:	d9800017 	ldw	r6,0(sp)
   15344:	30bfd436 	bltu	r6,r2,15298 <_gp+0xffff5ac0>
   15348:	2829883a 	mov	r20,r5
   1534c:	003f6406 	br	150e0 <_gp+0xffff5908>
   15350:	0021883a 	mov	r16,zero
   15354:	003fe006 	br	152d8 <_gp+0xffff5b00>
   15358:	00800434 	movhi	r2,16
   1535c:	8c000234 	orhi	r16,r17,8
   15360:	10bfffc4 	addi	r2,r2,-1
   15364:	e009883a 	mov	r4,fp
   15368:	80a0703a 	and	r16,r16,r2
   1536c:	a02b883a 	mov	r21,r20
   15370:	003e4e06 	br	14cac <_gp+0xffff54d4>

00015374 <__gedf2>:
   15374:	2804d53a 	srli	r2,r5,20
   15378:	3806d53a 	srli	r3,r7,20
   1537c:	02000434 	movhi	r8,16
   15380:	423fffc4 	addi	r8,r8,-1
   15384:	1081ffcc 	andi	r2,r2,2047
   15388:	0241ffc4 	movi	r9,2047
   1538c:	2a14703a 	and	r10,r5,r8
   15390:	18c1ffcc 	andi	r3,r3,2047
   15394:	3a10703a 	and	r8,r7,r8
   15398:	280ad7fa 	srli	r5,r5,31
   1539c:	380ed7fa 	srli	r7,r7,31
   153a0:	12401d26 	beq	r2,r9,15418 <__gedf2+0xa4>
   153a4:	0241ffc4 	movi	r9,2047
   153a8:	1a401226 	beq	r3,r9,153f4 <__gedf2+0x80>
   153ac:	1000081e 	bne	r2,zero,153d0 <__gedf2+0x5c>
   153b0:	2296b03a 	or	r11,r4,r10
   153b4:	5813003a 	cmpeq	r9,r11,zero
   153b8:	1800091e 	bne	r3,zero,153e0 <__gedf2+0x6c>
   153bc:	3218b03a 	or	r12,r6,r8
   153c0:	6000071e 	bne	r12,zero,153e0 <__gedf2+0x6c>
   153c4:	0005883a 	mov	r2,zero
   153c8:	5800101e 	bne	r11,zero,1540c <__gedf2+0x98>
   153cc:	f800283a 	ret
   153d0:	18000c1e 	bne	r3,zero,15404 <__gedf2+0x90>
   153d4:	3212b03a 	or	r9,r6,r8
   153d8:	48000c26 	beq	r9,zero,1540c <__gedf2+0x98>
   153dc:	0013883a 	mov	r9,zero
   153e0:	39c03fcc 	andi	r7,r7,255
   153e4:	48000826 	beq	r9,zero,15408 <__gedf2+0x94>
   153e8:	38000926 	beq	r7,zero,15410 <__gedf2+0x9c>
   153ec:	00800044 	movi	r2,1
   153f0:	f800283a 	ret
   153f4:	3212b03a 	or	r9,r6,r8
   153f8:	483fec26 	beq	r9,zero,153ac <_gp+0xffff5bd4>
   153fc:	00bfff84 	movi	r2,-2
   15400:	f800283a 	ret
   15404:	39c03fcc 	andi	r7,r7,255
   15408:	29c00626 	beq	r5,r7,15424 <__gedf2+0xb0>
   1540c:	283ff726 	beq	r5,zero,153ec <_gp+0xffff5c14>
   15410:	00bfffc4 	movi	r2,-1
   15414:	f800283a 	ret
   15418:	2292b03a 	or	r9,r4,r10
   1541c:	483fe126 	beq	r9,zero,153a4 <_gp+0xffff5bcc>
   15420:	003ff606 	br	153fc <_gp+0xffff5c24>
   15424:	18bff916 	blt	r3,r2,1540c <_gp+0xffff5c34>
   15428:	10c00316 	blt	r2,r3,15438 <__gedf2+0xc4>
   1542c:	42bff736 	bltu	r8,r10,1540c <_gp+0xffff5c34>
   15430:	52000326 	beq	r10,r8,15440 <__gedf2+0xcc>
   15434:	5200042e 	bgeu	r10,r8,15448 <__gedf2+0xd4>
   15438:	283fec1e 	bne	r5,zero,153ec <_gp+0xffff5c14>
   1543c:	003ff406 	br	15410 <_gp+0xffff5c38>
   15440:	313ff236 	bltu	r6,r4,1540c <_gp+0xffff5c34>
   15444:	21bffc36 	bltu	r4,r6,15438 <_gp+0xffff5c60>
   15448:	0005883a 	mov	r2,zero
   1544c:	f800283a 	ret

00015450 <__subdf3>:
   15450:	02000434 	movhi	r8,16
   15454:	423fffc4 	addi	r8,r8,-1
   15458:	defffb04 	addi	sp,sp,-20
   1545c:	2a14703a 	and	r10,r5,r8
   15460:	3812d53a 	srli	r9,r7,20
   15464:	3a10703a 	and	r8,r7,r8
   15468:	2006d77a 	srli	r3,r4,29
   1546c:	3004d77a 	srli	r2,r6,29
   15470:	dc000015 	stw	r16,0(sp)
   15474:	501490fa 	slli	r10,r10,3
   15478:	2820d53a 	srli	r16,r5,20
   1547c:	401090fa 	slli	r8,r8,3
   15480:	dc800215 	stw	r18,8(sp)
   15484:	dc400115 	stw	r17,4(sp)
   15488:	dfc00415 	stw	ra,16(sp)
   1548c:	202290fa 	slli	r17,r4,3
   15490:	dcc00315 	stw	r19,12(sp)
   15494:	4a41ffcc 	andi	r9,r9,2047
   15498:	0101ffc4 	movi	r4,2047
   1549c:	2824d7fa 	srli	r18,r5,31
   154a0:	8401ffcc 	andi	r16,r16,2047
   154a4:	50c6b03a 	or	r3,r10,r3
   154a8:	380ed7fa 	srli	r7,r7,31
   154ac:	408ab03a 	or	r5,r8,r2
   154b0:	300c90fa 	slli	r6,r6,3
   154b4:	49009626 	beq	r9,r4,15710 <__subdf3+0x2c0>
   154b8:	39c0005c 	xori	r7,r7,1
   154bc:	8245c83a 	sub	r2,r16,r9
   154c0:	3c807426 	beq	r7,r18,15694 <__subdf3+0x244>
   154c4:	0080af0e 	bge	zero,r2,15784 <__subdf3+0x334>
   154c8:	48002a1e 	bne	r9,zero,15574 <__subdf3+0x124>
   154cc:	2988b03a 	or	r4,r5,r6
   154d0:	20009a1e 	bne	r4,zero,1573c <__subdf3+0x2ec>
   154d4:	888001cc 	andi	r2,r17,7
   154d8:	10000726 	beq	r2,zero,154f8 <__subdf3+0xa8>
   154dc:	888003cc 	andi	r2,r17,15
   154e0:	01000104 	movi	r4,4
   154e4:	11000426 	beq	r2,r4,154f8 <__subdf3+0xa8>
   154e8:	890b883a 	add	r5,r17,r4
   154ec:	2c63803a 	cmpltu	r17,r5,r17
   154f0:	1c47883a 	add	r3,r3,r17
   154f4:	2823883a 	mov	r17,r5
   154f8:	1880202c 	andhi	r2,r3,128
   154fc:	10005926 	beq	r2,zero,15664 <__subdf3+0x214>
   15500:	84000044 	addi	r16,r16,1
   15504:	0081ffc4 	movi	r2,2047
   15508:	8080be26 	beq	r16,r2,15804 <__subdf3+0x3b4>
   1550c:	017fe034 	movhi	r5,65408
   15510:	297fffc4 	addi	r5,r5,-1
   15514:	1946703a 	and	r3,r3,r5
   15518:	1804977a 	slli	r2,r3,29
   1551c:	1806927a 	slli	r3,r3,9
   15520:	8822d0fa 	srli	r17,r17,3
   15524:	8401ffcc 	andi	r16,r16,2047
   15528:	180ad33a 	srli	r5,r3,12
   1552c:	9100004c 	andi	r4,r18,1
   15530:	1444b03a 	or	r2,r2,r17
   15534:	80c1ffcc 	andi	r3,r16,2047
   15538:	1820953a 	slli	r16,r3,20
   1553c:	20c03fcc 	andi	r3,r4,255
   15540:	180897fa 	slli	r4,r3,31
   15544:	00c00434 	movhi	r3,16
   15548:	18ffffc4 	addi	r3,r3,-1
   1554c:	28c6703a 	and	r3,r5,r3
   15550:	1c06b03a 	or	r3,r3,r16
   15554:	1906b03a 	or	r3,r3,r4
   15558:	dfc00417 	ldw	ra,16(sp)
   1555c:	dcc00317 	ldw	r19,12(sp)
   15560:	dc800217 	ldw	r18,8(sp)
   15564:	dc400117 	ldw	r17,4(sp)
   15568:	dc000017 	ldw	r16,0(sp)
   1556c:	dec00504 	addi	sp,sp,20
   15570:	f800283a 	ret
   15574:	0101ffc4 	movi	r4,2047
   15578:	813fd626 	beq	r16,r4,154d4 <_gp+0xffff5cfc>
   1557c:	29402034 	orhi	r5,r5,128
   15580:	01000e04 	movi	r4,56
   15584:	2080a316 	blt	r4,r2,15814 <__subdf3+0x3c4>
   15588:	010007c4 	movi	r4,31
   1558c:	2080c616 	blt	r4,r2,158a8 <__subdf3+0x458>
   15590:	01000804 	movi	r4,32
   15594:	2089c83a 	sub	r4,r4,r2
   15598:	2910983a 	sll	r8,r5,r4
   1559c:	308ed83a 	srl	r7,r6,r2
   155a0:	3108983a 	sll	r4,r6,r4
   155a4:	2884d83a 	srl	r2,r5,r2
   155a8:	41ccb03a 	or	r6,r8,r7
   155ac:	2008c03a 	cmpne	r4,r4,zero
   155b0:	310cb03a 	or	r6,r6,r4
   155b4:	898dc83a 	sub	r6,r17,r6
   155b8:	89a3803a 	cmpltu	r17,r17,r6
   155bc:	1887c83a 	sub	r3,r3,r2
   155c0:	1c47c83a 	sub	r3,r3,r17
   155c4:	3023883a 	mov	r17,r6
   155c8:	1880202c 	andhi	r2,r3,128
   155cc:	10002326 	beq	r2,zero,1565c <__subdf3+0x20c>
   155d0:	04c02034 	movhi	r19,128
   155d4:	9cffffc4 	addi	r19,r19,-1
   155d8:	1ce6703a 	and	r19,r3,r19
   155dc:	98007a26 	beq	r19,zero,157c8 <__subdf3+0x378>
   155e0:	9809883a 	mov	r4,r19
   155e4:	0015edc0 	call	15edc <__clzsi2>
   155e8:	113ffe04 	addi	r4,r2,-8
   155ec:	00c007c4 	movi	r3,31
   155f0:	19007b16 	blt	r3,r4,157e0 <__subdf3+0x390>
   155f4:	00800804 	movi	r2,32
   155f8:	1105c83a 	sub	r2,r2,r4
   155fc:	8884d83a 	srl	r2,r17,r2
   15600:	9906983a 	sll	r3,r19,r4
   15604:	8922983a 	sll	r17,r17,r4
   15608:	10c4b03a 	or	r2,r2,r3
   1560c:	24007816 	blt	r4,r16,157f0 <__subdf3+0x3a0>
   15610:	2421c83a 	sub	r16,r4,r16
   15614:	80c00044 	addi	r3,r16,1
   15618:	010007c4 	movi	r4,31
   1561c:	20c09516 	blt	r4,r3,15874 <__subdf3+0x424>
   15620:	01400804 	movi	r5,32
   15624:	28cbc83a 	sub	r5,r5,r3
   15628:	88c8d83a 	srl	r4,r17,r3
   1562c:	8962983a 	sll	r17,r17,r5
   15630:	114a983a 	sll	r5,r2,r5
   15634:	10c6d83a 	srl	r3,r2,r3
   15638:	8804c03a 	cmpne	r2,r17,zero
   1563c:	290ab03a 	or	r5,r5,r4
   15640:	28a2b03a 	or	r17,r5,r2
   15644:	0021883a 	mov	r16,zero
   15648:	003fa206 	br	154d4 <_gp+0xffff5cfc>
   1564c:	2090b03a 	or	r8,r4,r2
   15650:	40018e26 	beq	r8,zero,15c8c <__subdf3+0x83c>
   15654:	1007883a 	mov	r3,r2
   15658:	2023883a 	mov	r17,r4
   1565c:	888001cc 	andi	r2,r17,7
   15660:	103f9e1e 	bne	r2,zero,154dc <_gp+0xffff5d04>
   15664:	1804977a 	slli	r2,r3,29
   15668:	8822d0fa 	srli	r17,r17,3
   1566c:	1810d0fa 	srli	r8,r3,3
   15670:	9100004c 	andi	r4,r18,1
   15674:	1444b03a 	or	r2,r2,r17
   15678:	00c1ffc4 	movi	r3,2047
   1567c:	80c02826 	beq	r16,r3,15720 <__subdf3+0x2d0>
   15680:	01400434 	movhi	r5,16
   15684:	297fffc4 	addi	r5,r5,-1
   15688:	80e0703a 	and	r16,r16,r3
   1568c:	414a703a 	and	r5,r8,r5
   15690:	003fa806 	br	15534 <_gp+0xffff5d5c>
   15694:	0080630e 	bge	zero,r2,15824 <__subdf3+0x3d4>
   15698:	48003026 	beq	r9,zero,1575c <__subdf3+0x30c>
   1569c:	0101ffc4 	movi	r4,2047
   156a0:	813f8c26 	beq	r16,r4,154d4 <_gp+0xffff5cfc>
   156a4:	29402034 	orhi	r5,r5,128
   156a8:	01000e04 	movi	r4,56
   156ac:	2080a90e 	bge	r4,r2,15954 <__subdf3+0x504>
   156b0:	298cb03a 	or	r6,r5,r6
   156b4:	3012c03a 	cmpne	r9,r6,zero
   156b8:	0005883a 	mov	r2,zero
   156bc:	4c53883a 	add	r9,r9,r17
   156c0:	4c63803a 	cmpltu	r17,r9,r17
   156c4:	10c7883a 	add	r3,r2,r3
   156c8:	88c7883a 	add	r3,r17,r3
   156cc:	4823883a 	mov	r17,r9
   156d0:	1880202c 	andhi	r2,r3,128
   156d4:	1000d026 	beq	r2,zero,15a18 <__subdf3+0x5c8>
   156d8:	84000044 	addi	r16,r16,1
   156dc:	0081ffc4 	movi	r2,2047
   156e0:	8080fe26 	beq	r16,r2,15adc <__subdf3+0x68c>
   156e4:	00bfe034 	movhi	r2,65408
   156e8:	10bfffc4 	addi	r2,r2,-1
   156ec:	1886703a 	and	r3,r3,r2
   156f0:	880ad07a 	srli	r5,r17,1
   156f4:	180497fa 	slli	r2,r3,31
   156f8:	8900004c 	andi	r4,r17,1
   156fc:	2922b03a 	or	r17,r5,r4
   15700:	1806d07a 	srli	r3,r3,1
   15704:	1462b03a 	or	r17,r2,r17
   15708:	3825883a 	mov	r18,r7
   1570c:	003f7106 	br	154d4 <_gp+0xffff5cfc>
   15710:	2984b03a 	or	r2,r5,r6
   15714:	103f6826 	beq	r2,zero,154b8 <_gp+0xffff5ce0>
   15718:	39c03fcc 	andi	r7,r7,255
   1571c:	003f6706 	br	154bc <_gp+0xffff5ce4>
   15720:	4086b03a 	or	r3,r8,r2
   15724:	18015226 	beq	r3,zero,15c70 <__subdf3+0x820>
   15728:	00c00434 	movhi	r3,16
   1572c:	41400234 	orhi	r5,r8,8
   15730:	18ffffc4 	addi	r3,r3,-1
   15734:	28ca703a 	and	r5,r5,r3
   15738:	003f7e06 	br	15534 <_gp+0xffff5d5c>
   1573c:	10bfffc4 	addi	r2,r2,-1
   15740:	1000491e 	bne	r2,zero,15868 <__subdf3+0x418>
   15744:	898fc83a 	sub	r7,r17,r6
   15748:	89e3803a 	cmpltu	r17,r17,r7
   1574c:	1947c83a 	sub	r3,r3,r5
   15750:	1c47c83a 	sub	r3,r3,r17
   15754:	3823883a 	mov	r17,r7
   15758:	003f9b06 	br	155c8 <_gp+0xffff5df0>
   1575c:	2988b03a 	or	r4,r5,r6
   15760:	203f5c26 	beq	r4,zero,154d4 <_gp+0xffff5cfc>
   15764:	10bfffc4 	addi	r2,r2,-1
   15768:	1000931e 	bne	r2,zero,159b8 <__subdf3+0x568>
   1576c:	898d883a 	add	r6,r17,r6
   15770:	3463803a 	cmpltu	r17,r6,r17
   15774:	1947883a 	add	r3,r3,r5
   15778:	88c7883a 	add	r3,r17,r3
   1577c:	3023883a 	mov	r17,r6
   15780:	003fd306 	br	156d0 <_gp+0xffff5ef8>
   15784:	1000541e 	bne	r2,zero,158d8 <__subdf3+0x488>
   15788:	80800044 	addi	r2,r16,1
   1578c:	1081ffcc 	andi	r2,r2,2047
   15790:	01000044 	movi	r4,1
   15794:	2080a20e 	bge	r4,r2,15a20 <__subdf3+0x5d0>
   15798:	8989c83a 	sub	r4,r17,r6
   1579c:	8905803a 	cmpltu	r2,r17,r4
   157a0:	1967c83a 	sub	r19,r3,r5
   157a4:	98a7c83a 	sub	r19,r19,r2
   157a8:	9880202c 	andhi	r2,r19,128
   157ac:	10006326 	beq	r2,zero,1593c <__subdf3+0x4ec>
   157b0:	3463c83a 	sub	r17,r6,r17
   157b4:	28c7c83a 	sub	r3,r5,r3
   157b8:	344d803a 	cmpltu	r6,r6,r17
   157bc:	19a7c83a 	sub	r19,r3,r6
   157c0:	3825883a 	mov	r18,r7
   157c4:	983f861e 	bne	r19,zero,155e0 <_gp+0xffff5e08>
   157c8:	8809883a 	mov	r4,r17
   157cc:	0015edc0 	call	15edc <__clzsi2>
   157d0:	10800804 	addi	r2,r2,32
   157d4:	113ffe04 	addi	r4,r2,-8
   157d8:	00c007c4 	movi	r3,31
   157dc:	193f850e 	bge	r3,r4,155f4 <_gp+0xffff5e1c>
   157e0:	10bff604 	addi	r2,r2,-40
   157e4:	8884983a 	sll	r2,r17,r2
   157e8:	0023883a 	mov	r17,zero
   157ec:	243f880e 	bge	r4,r16,15610 <_gp+0xffff5e38>
   157f0:	00ffe034 	movhi	r3,65408
   157f4:	18ffffc4 	addi	r3,r3,-1
   157f8:	8121c83a 	sub	r16,r16,r4
   157fc:	10c6703a 	and	r3,r2,r3
   15800:	003f3406 	br	154d4 <_gp+0xffff5cfc>
   15804:	9100004c 	andi	r4,r18,1
   15808:	000b883a 	mov	r5,zero
   1580c:	0005883a 	mov	r2,zero
   15810:	003f4806 	br	15534 <_gp+0xffff5d5c>
   15814:	298cb03a 	or	r6,r5,r6
   15818:	300cc03a 	cmpne	r6,r6,zero
   1581c:	0005883a 	mov	r2,zero
   15820:	003f6406 	br	155b4 <_gp+0xffff5ddc>
   15824:	10009a1e 	bne	r2,zero,15a90 <__subdf3+0x640>
   15828:	82400044 	addi	r9,r16,1
   1582c:	4881ffcc 	andi	r2,r9,2047
   15830:	02800044 	movi	r10,1
   15834:	5080670e 	bge	r10,r2,159d4 <__subdf3+0x584>
   15838:	0081ffc4 	movi	r2,2047
   1583c:	4880af26 	beq	r9,r2,15afc <__subdf3+0x6ac>
   15840:	898d883a 	add	r6,r17,r6
   15844:	1945883a 	add	r2,r3,r5
   15848:	3447803a 	cmpltu	r3,r6,r17
   1584c:	1887883a 	add	r3,r3,r2
   15850:	182297fa 	slli	r17,r3,31
   15854:	300cd07a 	srli	r6,r6,1
   15858:	1806d07a 	srli	r3,r3,1
   1585c:	4821883a 	mov	r16,r9
   15860:	89a2b03a 	or	r17,r17,r6
   15864:	003f1b06 	br	154d4 <_gp+0xffff5cfc>
   15868:	0101ffc4 	movi	r4,2047
   1586c:	813f441e 	bne	r16,r4,15580 <_gp+0xffff5da8>
   15870:	003f1806 	br	154d4 <_gp+0xffff5cfc>
   15874:	843ff844 	addi	r16,r16,-31
   15878:	01400804 	movi	r5,32
   1587c:	1408d83a 	srl	r4,r2,r16
   15880:	19405026 	beq	r3,r5,159c4 <__subdf3+0x574>
   15884:	01401004 	movi	r5,64
   15888:	28c7c83a 	sub	r3,r5,r3
   1588c:	10c4983a 	sll	r2,r2,r3
   15890:	88a2b03a 	or	r17,r17,r2
   15894:	8822c03a 	cmpne	r17,r17,zero
   15898:	2462b03a 	or	r17,r4,r17
   1589c:	0007883a 	mov	r3,zero
   158a0:	0021883a 	mov	r16,zero
   158a4:	003f6d06 	br	1565c <_gp+0xffff5e84>
   158a8:	11fff804 	addi	r7,r2,-32
   158ac:	01000804 	movi	r4,32
   158b0:	29ced83a 	srl	r7,r5,r7
   158b4:	11004526 	beq	r2,r4,159cc <__subdf3+0x57c>
   158b8:	01001004 	movi	r4,64
   158bc:	2089c83a 	sub	r4,r4,r2
   158c0:	2904983a 	sll	r2,r5,r4
   158c4:	118cb03a 	or	r6,r2,r6
   158c8:	300cc03a 	cmpne	r6,r6,zero
   158cc:	398cb03a 	or	r6,r7,r6
   158d0:	0005883a 	mov	r2,zero
   158d4:	003f3706 	br	155b4 <_gp+0xffff5ddc>
   158d8:	80002a26 	beq	r16,zero,15984 <__subdf3+0x534>
   158dc:	0101ffc4 	movi	r4,2047
   158e0:	49006626 	beq	r9,r4,15a7c <__subdf3+0x62c>
   158e4:	0085c83a 	sub	r2,zero,r2
   158e8:	18c02034 	orhi	r3,r3,128
   158ec:	01000e04 	movi	r4,56
   158f0:	20807e16 	blt	r4,r2,15aec <__subdf3+0x69c>
   158f4:	010007c4 	movi	r4,31
   158f8:	2080e716 	blt	r4,r2,15c98 <__subdf3+0x848>
   158fc:	01000804 	movi	r4,32
   15900:	2089c83a 	sub	r4,r4,r2
   15904:	1914983a 	sll	r10,r3,r4
   15908:	8890d83a 	srl	r8,r17,r2
   1590c:	8908983a 	sll	r4,r17,r4
   15910:	1884d83a 	srl	r2,r3,r2
   15914:	5222b03a 	or	r17,r10,r8
   15918:	2006c03a 	cmpne	r3,r4,zero
   1591c:	88e2b03a 	or	r17,r17,r3
   15920:	3463c83a 	sub	r17,r6,r17
   15924:	2885c83a 	sub	r2,r5,r2
   15928:	344d803a 	cmpltu	r6,r6,r17
   1592c:	1187c83a 	sub	r3,r2,r6
   15930:	4821883a 	mov	r16,r9
   15934:	3825883a 	mov	r18,r7
   15938:	003f2306 	br	155c8 <_gp+0xffff5df0>
   1593c:	24d0b03a 	or	r8,r4,r19
   15940:	40001b1e 	bne	r8,zero,159b0 <__subdf3+0x560>
   15944:	0005883a 	mov	r2,zero
   15948:	0009883a 	mov	r4,zero
   1594c:	0021883a 	mov	r16,zero
   15950:	003f4906 	br	15678 <_gp+0xffff5ea0>
   15954:	010007c4 	movi	r4,31
   15958:	20803a16 	blt	r4,r2,15a44 <__subdf3+0x5f4>
   1595c:	01000804 	movi	r4,32
   15960:	2089c83a 	sub	r4,r4,r2
   15964:	2912983a 	sll	r9,r5,r4
   15968:	3090d83a 	srl	r8,r6,r2
   1596c:	3108983a 	sll	r4,r6,r4
   15970:	2884d83a 	srl	r2,r5,r2
   15974:	4a12b03a 	or	r9,r9,r8
   15978:	2008c03a 	cmpne	r4,r4,zero
   1597c:	4912b03a 	or	r9,r9,r4
   15980:	003f4e06 	br	156bc <_gp+0xffff5ee4>
   15984:	1c48b03a 	or	r4,r3,r17
   15988:	20003c26 	beq	r4,zero,15a7c <__subdf3+0x62c>
   1598c:	0084303a 	nor	r2,zero,r2
   15990:	1000381e 	bne	r2,zero,15a74 <__subdf3+0x624>
   15994:	3463c83a 	sub	r17,r6,r17
   15998:	28c5c83a 	sub	r2,r5,r3
   1599c:	344d803a 	cmpltu	r6,r6,r17
   159a0:	1187c83a 	sub	r3,r2,r6
   159a4:	4821883a 	mov	r16,r9
   159a8:	3825883a 	mov	r18,r7
   159ac:	003f0606 	br	155c8 <_gp+0xffff5df0>
   159b0:	2023883a 	mov	r17,r4
   159b4:	003f0906 	br	155dc <_gp+0xffff5e04>
   159b8:	0101ffc4 	movi	r4,2047
   159bc:	813f3a1e 	bne	r16,r4,156a8 <_gp+0xffff5ed0>
   159c0:	003ec406 	br	154d4 <_gp+0xffff5cfc>
   159c4:	0005883a 	mov	r2,zero
   159c8:	003fb106 	br	15890 <_gp+0xffff60b8>
   159cc:	0005883a 	mov	r2,zero
   159d0:	003fbc06 	br	158c4 <_gp+0xffff60ec>
   159d4:	1c44b03a 	or	r2,r3,r17
   159d8:	80008e1e 	bne	r16,zero,15c14 <__subdf3+0x7c4>
   159dc:	1000c826 	beq	r2,zero,15d00 <__subdf3+0x8b0>
   159e0:	2984b03a 	or	r2,r5,r6
   159e4:	103ebb26 	beq	r2,zero,154d4 <_gp+0xffff5cfc>
   159e8:	8989883a 	add	r4,r17,r6
   159ec:	1945883a 	add	r2,r3,r5
   159f0:	2447803a 	cmpltu	r3,r4,r17
   159f4:	1887883a 	add	r3,r3,r2
   159f8:	1880202c 	andhi	r2,r3,128
   159fc:	2023883a 	mov	r17,r4
   15a00:	103f1626 	beq	r2,zero,1565c <_gp+0xffff5e84>
   15a04:	00bfe034 	movhi	r2,65408
   15a08:	10bfffc4 	addi	r2,r2,-1
   15a0c:	5021883a 	mov	r16,r10
   15a10:	1886703a 	and	r3,r3,r2
   15a14:	003eaf06 	br	154d4 <_gp+0xffff5cfc>
   15a18:	3825883a 	mov	r18,r7
   15a1c:	003f0f06 	br	1565c <_gp+0xffff5e84>
   15a20:	1c44b03a 	or	r2,r3,r17
   15a24:	8000251e 	bne	r16,zero,15abc <__subdf3+0x66c>
   15a28:	1000661e 	bne	r2,zero,15bc4 <__subdf3+0x774>
   15a2c:	2990b03a 	or	r8,r5,r6
   15a30:	40009626 	beq	r8,zero,15c8c <__subdf3+0x83c>
   15a34:	2807883a 	mov	r3,r5
   15a38:	3023883a 	mov	r17,r6
   15a3c:	3825883a 	mov	r18,r7
   15a40:	003ea406 	br	154d4 <_gp+0xffff5cfc>
   15a44:	127ff804 	addi	r9,r2,-32
   15a48:	01000804 	movi	r4,32
   15a4c:	2a52d83a 	srl	r9,r5,r9
   15a50:	11008c26 	beq	r2,r4,15c84 <__subdf3+0x834>
   15a54:	01001004 	movi	r4,64
   15a58:	2085c83a 	sub	r2,r4,r2
   15a5c:	2884983a 	sll	r2,r5,r2
   15a60:	118cb03a 	or	r6,r2,r6
   15a64:	300cc03a 	cmpne	r6,r6,zero
   15a68:	4992b03a 	or	r9,r9,r6
   15a6c:	0005883a 	mov	r2,zero
   15a70:	003f1206 	br	156bc <_gp+0xffff5ee4>
   15a74:	0101ffc4 	movi	r4,2047
   15a78:	493f9c1e 	bne	r9,r4,158ec <_gp+0xffff6114>
   15a7c:	2807883a 	mov	r3,r5
   15a80:	3023883a 	mov	r17,r6
   15a84:	4821883a 	mov	r16,r9
   15a88:	3825883a 	mov	r18,r7
   15a8c:	003e9106 	br	154d4 <_gp+0xffff5cfc>
   15a90:	80001f1e 	bne	r16,zero,15b10 <__subdf3+0x6c0>
   15a94:	1c48b03a 	or	r4,r3,r17
   15a98:	20005a26 	beq	r4,zero,15c04 <__subdf3+0x7b4>
   15a9c:	0084303a 	nor	r2,zero,r2
   15aa0:	1000561e 	bne	r2,zero,15bfc <__subdf3+0x7ac>
   15aa4:	89a3883a 	add	r17,r17,r6
   15aa8:	1945883a 	add	r2,r3,r5
   15aac:	898d803a 	cmpltu	r6,r17,r6
   15ab0:	3087883a 	add	r3,r6,r2
   15ab4:	4821883a 	mov	r16,r9
   15ab8:	003f0506 	br	156d0 <_gp+0xffff5ef8>
   15abc:	10002b1e 	bne	r2,zero,15b6c <__subdf3+0x71c>
   15ac0:	2984b03a 	or	r2,r5,r6
   15ac4:	10008026 	beq	r2,zero,15cc8 <__subdf3+0x878>
   15ac8:	2807883a 	mov	r3,r5
   15acc:	3023883a 	mov	r17,r6
   15ad0:	3825883a 	mov	r18,r7
   15ad4:	0401ffc4 	movi	r16,2047
   15ad8:	003e7e06 	br	154d4 <_gp+0xffff5cfc>
   15adc:	3809883a 	mov	r4,r7
   15ae0:	0011883a 	mov	r8,zero
   15ae4:	0005883a 	mov	r2,zero
   15ae8:	003ee306 	br	15678 <_gp+0xffff5ea0>
   15aec:	1c62b03a 	or	r17,r3,r17
   15af0:	8822c03a 	cmpne	r17,r17,zero
   15af4:	0005883a 	mov	r2,zero
   15af8:	003f8906 	br	15920 <_gp+0xffff6148>
   15afc:	3809883a 	mov	r4,r7
   15b00:	4821883a 	mov	r16,r9
   15b04:	0011883a 	mov	r8,zero
   15b08:	0005883a 	mov	r2,zero
   15b0c:	003eda06 	br	15678 <_gp+0xffff5ea0>
   15b10:	0101ffc4 	movi	r4,2047
   15b14:	49003b26 	beq	r9,r4,15c04 <__subdf3+0x7b4>
   15b18:	0085c83a 	sub	r2,zero,r2
   15b1c:	18c02034 	orhi	r3,r3,128
   15b20:	01000e04 	movi	r4,56
   15b24:	20806e16 	blt	r4,r2,15ce0 <__subdf3+0x890>
   15b28:	010007c4 	movi	r4,31
   15b2c:	20807716 	blt	r4,r2,15d0c <__subdf3+0x8bc>
   15b30:	01000804 	movi	r4,32
   15b34:	2089c83a 	sub	r4,r4,r2
   15b38:	1914983a 	sll	r10,r3,r4
   15b3c:	8890d83a 	srl	r8,r17,r2
   15b40:	8908983a 	sll	r4,r17,r4
   15b44:	1884d83a 	srl	r2,r3,r2
   15b48:	5222b03a 	or	r17,r10,r8
   15b4c:	2006c03a 	cmpne	r3,r4,zero
   15b50:	88e2b03a 	or	r17,r17,r3
   15b54:	89a3883a 	add	r17,r17,r6
   15b58:	1145883a 	add	r2,r2,r5
   15b5c:	898d803a 	cmpltu	r6,r17,r6
   15b60:	3087883a 	add	r3,r6,r2
   15b64:	4821883a 	mov	r16,r9
   15b68:	003ed906 	br	156d0 <_gp+0xffff5ef8>
   15b6c:	2984b03a 	or	r2,r5,r6
   15b70:	10004226 	beq	r2,zero,15c7c <__subdf3+0x82c>
   15b74:	1808d0fa 	srli	r4,r3,3
   15b78:	8822d0fa 	srli	r17,r17,3
   15b7c:	1806977a 	slli	r3,r3,29
   15b80:	2080022c 	andhi	r2,r4,8
   15b84:	1c62b03a 	or	r17,r3,r17
   15b88:	10000826 	beq	r2,zero,15bac <__subdf3+0x75c>
   15b8c:	2812d0fa 	srli	r9,r5,3
   15b90:	4880022c 	andhi	r2,r9,8
   15b94:	1000051e 	bne	r2,zero,15bac <__subdf3+0x75c>
   15b98:	300cd0fa 	srli	r6,r6,3
   15b9c:	2804977a 	slli	r2,r5,29
   15ba0:	4809883a 	mov	r4,r9
   15ba4:	3825883a 	mov	r18,r7
   15ba8:	11a2b03a 	or	r17,r2,r6
   15bac:	8806d77a 	srli	r3,r17,29
   15bb0:	200890fa 	slli	r4,r4,3
   15bb4:	882290fa 	slli	r17,r17,3
   15bb8:	0401ffc4 	movi	r16,2047
   15bbc:	1906b03a 	or	r3,r3,r4
   15bc0:	003e4406 	br	154d4 <_gp+0xffff5cfc>
   15bc4:	2984b03a 	or	r2,r5,r6
   15bc8:	103e4226 	beq	r2,zero,154d4 <_gp+0xffff5cfc>
   15bcc:	8989c83a 	sub	r4,r17,r6
   15bd0:	8911803a 	cmpltu	r8,r17,r4
   15bd4:	1945c83a 	sub	r2,r3,r5
   15bd8:	1205c83a 	sub	r2,r2,r8
   15bdc:	1200202c 	andhi	r8,r2,128
   15be0:	403e9a26 	beq	r8,zero,1564c <_gp+0xffff5e74>
   15be4:	3463c83a 	sub	r17,r6,r17
   15be8:	28c5c83a 	sub	r2,r5,r3
   15bec:	344d803a 	cmpltu	r6,r6,r17
   15bf0:	1187c83a 	sub	r3,r2,r6
   15bf4:	3825883a 	mov	r18,r7
   15bf8:	003e3606 	br	154d4 <_gp+0xffff5cfc>
   15bfc:	0101ffc4 	movi	r4,2047
   15c00:	493fc71e 	bne	r9,r4,15b20 <_gp+0xffff6348>
   15c04:	2807883a 	mov	r3,r5
   15c08:	3023883a 	mov	r17,r6
   15c0c:	4821883a 	mov	r16,r9
   15c10:	003e3006 	br	154d4 <_gp+0xffff5cfc>
   15c14:	10003626 	beq	r2,zero,15cf0 <__subdf3+0x8a0>
   15c18:	2984b03a 	or	r2,r5,r6
   15c1c:	10001726 	beq	r2,zero,15c7c <__subdf3+0x82c>
   15c20:	1808d0fa 	srli	r4,r3,3
   15c24:	8822d0fa 	srli	r17,r17,3
   15c28:	1806977a 	slli	r3,r3,29
   15c2c:	2080022c 	andhi	r2,r4,8
   15c30:	1c62b03a 	or	r17,r3,r17
   15c34:	10000726 	beq	r2,zero,15c54 <__subdf3+0x804>
   15c38:	2812d0fa 	srli	r9,r5,3
   15c3c:	4880022c 	andhi	r2,r9,8
   15c40:	1000041e 	bne	r2,zero,15c54 <__subdf3+0x804>
   15c44:	300cd0fa 	srli	r6,r6,3
   15c48:	2804977a 	slli	r2,r5,29
   15c4c:	4809883a 	mov	r4,r9
   15c50:	11a2b03a 	or	r17,r2,r6
   15c54:	8806d77a 	srli	r3,r17,29
   15c58:	200890fa 	slli	r4,r4,3
   15c5c:	882290fa 	slli	r17,r17,3
   15c60:	3825883a 	mov	r18,r7
   15c64:	1906b03a 	or	r3,r3,r4
   15c68:	0401ffc4 	movi	r16,2047
   15c6c:	003e1906 	br	154d4 <_gp+0xffff5cfc>
   15c70:	000b883a 	mov	r5,zero
   15c74:	0005883a 	mov	r2,zero
   15c78:	003e2e06 	br	15534 <_gp+0xffff5d5c>
   15c7c:	0401ffc4 	movi	r16,2047
   15c80:	003e1406 	br	154d4 <_gp+0xffff5cfc>
   15c84:	0005883a 	mov	r2,zero
   15c88:	003f7506 	br	15a60 <_gp+0xffff6288>
   15c8c:	0005883a 	mov	r2,zero
   15c90:	0009883a 	mov	r4,zero
   15c94:	003e7806 	br	15678 <_gp+0xffff5ea0>
   15c98:	123ff804 	addi	r8,r2,-32
   15c9c:	01000804 	movi	r4,32
   15ca0:	1a10d83a 	srl	r8,r3,r8
   15ca4:	11002526 	beq	r2,r4,15d3c <__subdf3+0x8ec>
   15ca8:	01001004 	movi	r4,64
   15cac:	2085c83a 	sub	r2,r4,r2
   15cb0:	1884983a 	sll	r2,r3,r2
   15cb4:	1444b03a 	or	r2,r2,r17
   15cb8:	1004c03a 	cmpne	r2,r2,zero
   15cbc:	40a2b03a 	or	r17,r8,r2
   15cc0:	0005883a 	mov	r2,zero
   15cc4:	003f1606 	br	15920 <_gp+0xffff6148>
   15cc8:	02000434 	movhi	r8,16
   15ccc:	0009883a 	mov	r4,zero
   15cd0:	423fffc4 	addi	r8,r8,-1
   15cd4:	00bfffc4 	movi	r2,-1
   15cd8:	0401ffc4 	movi	r16,2047
   15cdc:	003e6606 	br	15678 <_gp+0xffff5ea0>
   15ce0:	1c62b03a 	or	r17,r3,r17
   15ce4:	8822c03a 	cmpne	r17,r17,zero
   15ce8:	0005883a 	mov	r2,zero
   15cec:	003f9906 	br	15b54 <_gp+0xffff637c>
   15cf0:	2807883a 	mov	r3,r5
   15cf4:	3023883a 	mov	r17,r6
   15cf8:	0401ffc4 	movi	r16,2047
   15cfc:	003df506 	br	154d4 <_gp+0xffff5cfc>
   15d00:	2807883a 	mov	r3,r5
   15d04:	3023883a 	mov	r17,r6
   15d08:	003df206 	br	154d4 <_gp+0xffff5cfc>
   15d0c:	123ff804 	addi	r8,r2,-32
   15d10:	01000804 	movi	r4,32
   15d14:	1a10d83a 	srl	r8,r3,r8
   15d18:	11000a26 	beq	r2,r4,15d44 <__subdf3+0x8f4>
   15d1c:	01001004 	movi	r4,64
   15d20:	2085c83a 	sub	r2,r4,r2
   15d24:	1884983a 	sll	r2,r3,r2
   15d28:	1444b03a 	or	r2,r2,r17
   15d2c:	1004c03a 	cmpne	r2,r2,zero
   15d30:	40a2b03a 	or	r17,r8,r2
   15d34:	0005883a 	mov	r2,zero
   15d38:	003f8606 	br	15b54 <_gp+0xffff637c>
   15d3c:	0005883a 	mov	r2,zero
   15d40:	003fdc06 	br	15cb4 <_gp+0xffff64dc>
   15d44:	0005883a 	mov	r2,zero
   15d48:	003ff706 	br	15d28 <_gp+0xffff6550>

00015d4c <__fixdfsi>:
   15d4c:	280cd53a 	srli	r6,r5,20
   15d50:	00c00434 	movhi	r3,16
   15d54:	18ffffc4 	addi	r3,r3,-1
   15d58:	3181ffcc 	andi	r6,r6,2047
   15d5c:	01c0ff84 	movi	r7,1022
   15d60:	28c6703a 	and	r3,r5,r3
   15d64:	280ad7fa 	srli	r5,r5,31
   15d68:	3980120e 	bge	r7,r6,15db4 <__fixdfsi+0x68>
   15d6c:	00810744 	movi	r2,1053
   15d70:	11800c16 	blt	r2,r6,15da4 <__fixdfsi+0x58>
   15d74:	00810cc4 	movi	r2,1075
   15d78:	1185c83a 	sub	r2,r2,r6
   15d7c:	01c007c4 	movi	r7,31
   15d80:	18c00434 	orhi	r3,r3,16
   15d84:	38800d16 	blt	r7,r2,15dbc <__fixdfsi+0x70>
   15d88:	31befb44 	addi	r6,r6,-1043
   15d8c:	2084d83a 	srl	r2,r4,r2
   15d90:	1986983a 	sll	r3,r3,r6
   15d94:	1884b03a 	or	r2,r3,r2
   15d98:	28000726 	beq	r5,zero,15db8 <__fixdfsi+0x6c>
   15d9c:	0085c83a 	sub	r2,zero,r2
   15da0:	f800283a 	ret
   15da4:	00a00034 	movhi	r2,32768
   15da8:	10bfffc4 	addi	r2,r2,-1
   15dac:	2885883a 	add	r2,r5,r2
   15db0:	f800283a 	ret
   15db4:	0005883a 	mov	r2,zero
   15db8:	f800283a 	ret
   15dbc:	008104c4 	movi	r2,1043
   15dc0:	1185c83a 	sub	r2,r2,r6
   15dc4:	1884d83a 	srl	r2,r3,r2
   15dc8:	003ff306 	br	15d98 <_gp+0xffff65c0>

00015dcc <__extendsfdf2>:
   15dcc:	200ad5fa 	srli	r5,r4,23
   15dd0:	defffd04 	addi	sp,sp,-12
   15dd4:	dc400115 	stw	r17,4(sp)
   15dd8:	29403fcc 	andi	r5,r5,255
   15ddc:	29800044 	addi	r6,r5,1
   15de0:	04402034 	movhi	r17,128
   15de4:	dc000015 	stw	r16,0(sp)
   15de8:	8c7fffc4 	addi	r17,r17,-1
   15dec:	dfc00215 	stw	ra,8(sp)
   15df0:	31803fcc 	andi	r6,r6,255
   15df4:	00800044 	movi	r2,1
   15df8:	8922703a 	and	r17,r17,r4
   15dfc:	2020d7fa 	srli	r16,r4,31
   15e00:	1180110e 	bge	r2,r6,15e48 <__extendsfdf2+0x7c>
   15e04:	880cd0fa 	srli	r6,r17,3
   15e08:	8822977a 	slli	r17,r17,29
   15e0c:	2940e004 	addi	r5,r5,896
   15e10:	2941ffcc 	andi	r5,r5,2047
   15e14:	2804953a 	slli	r2,r5,20
   15e18:	01400434 	movhi	r5,16
   15e1c:	800697fa 	slli	r3,r16,31
   15e20:	297fffc4 	addi	r5,r5,-1
   15e24:	314a703a 	and	r5,r6,r5
   15e28:	288ab03a 	or	r5,r5,r2
   15e2c:	28c6b03a 	or	r3,r5,r3
   15e30:	8805883a 	mov	r2,r17
   15e34:	dfc00217 	ldw	ra,8(sp)
   15e38:	dc400117 	ldw	r17,4(sp)
   15e3c:	dc000017 	ldw	r16,0(sp)
   15e40:	dec00304 	addi	sp,sp,12
   15e44:	f800283a 	ret
   15e48:	2800111e 	bne	r5,zero,15e90 <__extendsfdf2+0xc4>
   15e4c:	88001c26 	beq	r17,zero,15ec0 <__extendsfdf2+0xf4>
   15e50:	8809883a 	mov	r4,r17
   15e54:	0015edc0 	call	15edc <__clzsi2>
   15e58:	00c00284 	movi	r3,10
   15e5c:	18801b16 	blt	r3,r2,15ecc <__extendsfdf2+0x100>
   15e60:	018002c4 	movi	r6,11
   15e64:	308dc83a 	sub	r6,r6,r2
   15e68:	11000544 	addi	r4,r2,21
   15e6c:	8986d83a 	srl	r3,r17,r6
   15e70:	8922983a 	sll	r17,r17,r4
   15e74:	0180e244 	movi	r6,905
   15e78:	01400434 	movhi	r5,16
   15e7c:	3085c83a 	sub	r2,r6,r2
   15e80:	297fffc4 	addi	r5,r5,-1
   15e84:	194c703a 	and	r6,r3,r5
   15e88:	1141ffcc 	andi	r5,r2,2047
   15e8c:	003fe006 	br	15e10 <_gp+0xffff6638>
   15e90:	88000826 	beq	r17,zero,15eb4 <__extendsfdf2+0xe8>
   15e94:	880cd0fa 	srli	r6,r17,3
   15e98:	00800434 	movhi	r2,16
   15e9c:	10bfffc4 	addi	r2,r2,-1
   15ea0:	31800234 	orhi	r6,r6,8
   15ea4:	8822977a 	slli	r17,r17,29
   15ea8:	308c703a 	and	r6,r6,r2
   15eac:	0141ffc4 	movi	r5,2047
   15eb0:	003fd706 	br	15e10 <_gp+0xffff6638>
   15eb4:	0141ffc4 	movi	r5,2047
   15eb8:	000d883a 	mov	r6,zero
   15ebc:	003fd406 	br	15e10 <_gp+0xffff6638>
   15ec0:	000b883a 	mov	r5,zero
   15ec4:	000d883a 	mov	r6,zero
   15ec8:	003fd106 	br	15e10 <_gp+0xffff6638>
   15ecc:	11bffd44 	addi	r6,r2,-11
   15ed0:	8986983a 	sll	r3,r17,r6
   15ed4:	0023883a 	mov	r17,zero
   15ed8:	003fe606 	br	15e74 <_gp+0xffff669c>

00015edc <__clzsi2>:
   15edc:	00bfffd4 	movui	r2,65535
   15ee0:	11000536 	bltu	r2,r4,15ef8 <__clzsi2+0x1c>
   15ee4:	00803fc4 	movi	r2,255
   15ee8:	11000f36 	bltu	r2,r4,15f28 <__clzsi2+0x4c>
   15eec:	00800804 	movi	r2,32
   15ef0:	0007883a 	mov	r3,zero
   15ef4:	00000506 	br	15f0c <__clzsi2+0x30>
   15ef8:	00804034 	movhi	r2,256
   15efc:	10bfffc4 	addi	r2,r2,-1
   15f00:	11000c2e 	bgeu	r2,r4,15f34 <__clzsi2+0x58>
   15f04:	00800204 	movi	r2,8
   15f08:	00c00604 	movi	r3,24
   15f0c:	20c8d83a 	srl	r4,r4,r3
   15f10:	00c00074 	movhi	r3,1
   15f14:	18dcfc04 	addi	r3,r3,29680
   15f18:	1909883a 	add	r4,r3,r4
   15f1c:	20c00003 	ldbu	r3,0(r4)
   15f20:	10c5c83a 	sub	r2,r2,r3
   15f24:	f800283a 	ret
   15f28:	00800604 	movi	r2,24
   15f2c:	00c00204 	movi	r3,8
   15f30:	003ff606 	br	15f0c <_gp+0xffff6734>
   15f34:	00800404 	movi	r2,16
   15f38:	1007883a 	mov	r3,r2
   15f3c:	003ff306 	br	15f0c <_gp+0xffff6734>

00015f40 <memset>:
   15f40:	2005883a 	mov	r2,r4
   15f44:	2007883a 	mov	r3,r4
   15f48:	218d883a 	add	r6,r4,r6
   15f4c:	19800326 	beq	r3,r6,15f5c <memset+0x1c>
   15f50:	19400005 	stb	r5,0(r3)
   15f54:	18c00044 	addi	r3,r3,1
   15f58:	003ffc06 	br	15f4c <_gp+0xffff6774>
   15f5c:	f800283a 	ret

00015f60 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   15f60:	defffc04 	addi	sp,sp,-16
   15f64:	df000315 	stw	fp,12(sp)
   15f68:	df000304 	addi	fp,sp,12
   15f6c:	e13ffd15 	stw	r4,-12(fp)
   15f70:	e17ffe15 	stw	r5,-8(fp)
   15f74:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   15f78:	e0fffe17 	ldw	r3,-8(fp)
   15f7c:	e0bffd17 	ldw	r2,-12(fp)
   15f80:	18800c26 	beq	r3,r2,15fb4 <alt_load_section+0x54>
  {
    while( to != end )
   15f84:	00000806 	br	15fa8 <alt_load_section+0x48>
    {
      *to++ = *from++;
   15f88:	e0bffe17 	ldw	r2,-8(fp)
   15f8c:	10c00104 	addi	r3,r2,4
   15f90:	e0fffe15 	stw	r3,-8(fp)
   15f94:	e0fffd17 	ldw	r3,-12(fp)
   15f98:	19000104 	addi	r4,r3,4
   15f9c:	e13ffd15 	stw	r4,-12(fp)
   15fa0:	18c00017 	ldw	r3,0(r3)
   15fa4:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   15fa8:	e0fffe17 	ldw	r3,-8(fp)
   15fac:	e0bfff17 	ldw	r2,-4(fp)
   15fb0:	18bff51e 	bne	r3,r2,15f88 <_gp+0xffff67b0>
    {
      *to++ = *from++;
    }
  }
}
   15fb4:	0001883a 	nop
   15fb8:	e037883a 	mov	sp,fp
   15fbc:	df000017 	ldw	fp,0(sp)
   15fc0:	dec00104 	addi	sp,sp,4
   15fc4:	f800283a 	ret

00015fc8 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   15fc8:	defffe04 	addi	sp,sp,-8
   15fcc:	dfc00115 	stw	ra,4(sp)
   15fd0:	df000015 	stw	fp,0(sp)
   15fd4:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   15fd8:	01800074 	movhi	r6,1
   15fdc:	319e0204 	addi	r6,r6,30728
   15fe0:	01400074 	movhi	r5,1
   15fe4:	295d4904 	addi	r5,r5,29988
   15fe8:	01000074 	movhi	r4,1
   15fec:	211e0204 	addi	r4,r4,30728
   15ff0:	0015f600 	call	15f60 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   15ff4:	01800074 	movhi	r6,1
   15ff8:	31800804 	addi	r6,r6,32
   15ffc:	01400074 	movhi	r5,1
   16000:	29400804 	addi	r5,r5,32
   16004:	01000074 	movhi	r4,1
   16008:	21000804 	addi	r4,r4,32
   1600c:	0015f600 	call	15f60 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   16010:	01800074 	movhi	r6,1
   16014:	319d4904 	addi	r6,r6,29988
   16018:	01400074 	movhi	r5,1
   1601c:	295cfc04 	addi	r5,r5,29680
   16020:	01000074 	movhi	r4,1
   16024:	211cfc04 	addi	r4,r4,29680
   16028:	0015f600 	call	15f60 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   1602c:	001698c0 	call	1698c <alt_dcache_flush_all>
  alt_icache_flush_all();
   16030:	0016ab80 	call	16ab8 <alt_icache_flush_all>
}
   16034:	0001883a 	nop
   16038:	e037883a 	mov	sp,fp
   1603c:	dfc00117 	ldw	ra,4(sp)
   16040:	df000017 	ldw	fp,0(sp)
   16044:	dec00204 	addi	sp,sp,8
   16048:	f800283a 	ret

0001604c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   1604c:	defffd04 	addi	sp,sp,-12
   16050:	dfc00215 	stw	ra,8(sp)
   16054:	df000115 	stw	fp,4(sp)
   16058:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   1605c:	0009883a 	mov	r4,zero
   16060:	00160ec0 	call	160ec <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   16064:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   16068:	00161240 	call	16124 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   1606c:	01800074 	movhi	r6,1
   16070:	319d3c04 	addi	r6,r6,29936
   16074:	01400074 	movhi	r5,1
   16078:	295d3c04 	addi	r5,r5,29936
   1607c:	01000074 	movhi	r4,1
   16080:	211d3c04 	addi	r4,r4,29936
   16084:	0016bbc0 	call	16bbc <alt_io_redirect>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   16088:	d0a0c617 	ldw	r2,-31976(gp)
   1608c:	d0e0c717 	ldw	r3,-31972(gp)
   16090:	d120c817 	ldw	r4,-31968(gp)
   16094:	200d883a 	mov	r6,r4
   16098:	180b883a 	mov	r5,r3
   1609c:	1009883a 	mov	r4,r2
   160a0:	00112480 	call	11248 <main>
   160a4:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   160a8:	01000044 	movi	r4,1
   160ac:	00168b40 	call	168b4 <close>
  exit (result);
   160b0:	e13fff17 	ldw	r4,-4(fp)
   160b4:	00171c00 	call	171c0 <exit>

000160b8 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   160b8:	defffd04 	addi	sp,sp,-12
   160bc:	dfc00215 	stw	ra,8(sp)
   160c0:	df000115 	stw	fp,4(sp)
   160c4:	df000104 	addi	fp,sp,4
   160c8:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   160cc:	d1600604 	addi	r5,gp,-32744
   160d0:	e13fff17 	ldw	r4,-4(fp)
   160d4:	0016a140 	call	16a14 <alt_dev_llist_insert>
}
   160d8:	e037883a 	mov	sp,fp
   160dc:	dfc00117 	ldw	ra,4(sp)
   160e0:	df000017 	ldw	fp,0(sp)
   160e4:	dec00204 	addi	sp,sp,8
   160e8:	f800283a 	ret

000160ec <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   160ec:	defffd04 	addi	sp,sp,-12
   160f0:	dfc00215 	stw	ra,8(sp)
   160f4:	df000115 	stw	fp,4(sp)
   160f8:	df000104 	addi	fp,sp,4
   160fc:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_CPU, nios2_cpu);
   16100:	0016f400 	call	16f40 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   16104:	00800044 	movi	r2,1
   16108:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   1610c:	0001883a 	nop
   16110:	e037883a 	mov	sp,fp
   16114:	dfc00117 	ldw	ra,4(sp)
   16118:	df000017 	ldw	fp,0(sp)
   1611c:	dec00204 	addi	sp,sp,8
   16120:	f800283a 	ret

00016124 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   16124:	defffe04 	addi	sp,sp,-8
   16128:	dfc00115 	stw	ra,4(sp)
   1612c:	df000015 	stw	fp,0(sp)
   16130:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
   16134:	01000074 	movhi	r4,1
   16138:	211d4904 	addi	r4,r4,29988
   1613c:	00160b80 	call	160b8 <alt_dev_reg>
    ALTERA_AVALON_SPI_INIT ( DAC_SPI1, dac_spi1);
   16140:	0001883a 	nop
    ALTERA_AVALON_SPI_INIT ( FPGA_SPI0, fpga_spi0);
   16144:	0001883a 	nop
    ALTERA_AVALON_SPI_INIT ( PLLCFG_SPI, PLLCFG_SPI);
   16148:	0001883a 	nop
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
   1614c:	0001883a 	nop
    I2C_OPENCORES_INIT ( I2C_OPENCORES_0, i2c_opencores_0);
   16150:	0001883a 	nop
}
   16154:	0001883a 	nop
   16158:	e037883a 	mov	sp,fp
   1615c:	dfc00117 	ldw	ra,4(sp)
   16160:	df000017 	ldw	fp,0(sp)
   16164:	dec00204 	addi	sp,sp,8
   16168:	f800283a 	ret

0001616c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   1616c:	defffa04 	addi	sp,sp,-24
   16170:	dfc00515 	stw	ra,20(sp)
   16174:	df000415 	stw	fp,16(sp)
   16178:	df000404 	addi	fp,sp,16
   1617c:	e13ffd15 	stw	r4,-12(fp)
   16180:	e17ffe15 	stw	r5,-8(fp)
   16184:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   16188:	e0bffd17 	ldw	r2,-12(fp)
   1618c:	10800017 	ldw	r2,0(r2)
   16190:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   16194:	e0bffc17 	ldw	r2,-16(fp)
   16198:	10c00a04 	addi	r3,r2,40
   1619c:	e0bffd17 	ldw	r2,-12(fp)
   161a0:	10800217 	ldw	r2,8(r2)
   161a4:	100f883a 	mov	r7,r2
   161a8:	e1bfff17 	ldw	r6,-4(fp)
   161ac:	e17ffe17 	ldw	r5,-8(fp)
   161b0:	1809883a 	mov	r4,r3
   161b4:	001622c0 	call	1622c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   161b8:	e037883a 	mov	sp,fp
   161bc:	dfc00117 	ldw	ra,4(sp)
   161c0:	df000017 	ldw	fp,0(sp)
   161c4:	dec00204 	addi	sp,sp,8
   161c8:	f800283a 	ret

000161cc <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   161cc:	defffa04 	addi	sp,sp,-24
   161d0:	dfc00515 	stw	ra,20(sp)
   161d4:	df000415 	stw	fp,16(sp)
   161d8:	df000404 	addi	fp,sp,16
   161dc:	e13ffd15 	stw	r4,-12(fp)
   161e0:	e17ffe15 	stw	r5,-8(fp)
   161e4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   161e8:	e0bffd17 	ldw	r2,-12(fp)
   161ec:	10800017 	ldw	r2,0(r2)
   161f0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   161f4:	e0bffc17 	ldw	r2,-16(fp)
   161f8:	10c00a04 	addi	r3,r2,40
   161fc:	e0bffd17 	ldw	r2,-12(fp)
   16200:	10800217 	ldw	r2,8(r2)
   16204:	100f883a 	mov	r7,r2
   16208:	e1bfff17 	ldw	r6,-4(fp)
   1620c:	e17ffe17 	ldw	r5,-8(fp)
   16210:	1809883a 	mov	r4,r3
   16214:	00163180 	call	16318 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   16218:	e037883a 	mov	sp,fp
   1621c:	dfc00117 	ldw	ra,4(sp)
   16220:	df000017 	ldw	fp,0(sp)
   16224:	dec00204 	addi	sp,sp,8
   16228:	f800283a 	ret

0001622c <altera_avalon_jtag_uart_read>:
 */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
   1622c:	defff704 	addi	sp,sp,-36
   16230:	df000815 	stw	fp,32(sp)
   16234:	df000804 	addi	fp,sp,32
   16238:	e13ffc15 	stw	r4,-16(fp)
   1623c:	e17ffd15 	stw	r5,-12(fp)
   16240:	e1bffe15 	stw	r6,-8(fp)
   16244:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
   16248:	e0bffc17 	ldw	r2,-16(fp)
   1624c:	10800017 	ldw	r2,0(r2)
   16250:	e0bff915 	stw	r2,-28(fp)

  char * ptr = buffer;
   16254:	e0bffd17 	ldw	r2,-12(fp)
   16258:	e0bff815 	stw	r2,-32(fp)
  char * end = buffer + space;
   1625c:	e0bffe17 	ldw	r2,-8(fp)
   16260:	e0fffd17 	ldw	r3,-12(fp)
   16264:	1885883a 	add	r2,r3,r2
   16268:	e0bffa15 	stw	r2,-24(fp)

  while (ptr < end)
   1626c:	00001206 	br	162b8 <altera_avalon_jtag_uart_read+0x8c>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   16270:	e0bff917 	ldw	r2,-28(fp)
   16274:	10800037 	ldwio	r2,0(r2)
   16278:	e0bffb15 	stw	r2,-20(fp)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
   1627c:	e0bffb17 	ldw	r2,-20(fp)
   16280:	10a0000c 	andi	r2,r2,32768
   16284:	10000626 	beq	r2,zero,162a0 <altera_avalon_jtag_uart_read+0x74>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   16288:	e0bff817 	ldw	r2,-32(fp)
   1628c:	10c00044 	addi	r3,r2,1
   16290:	e0fff815 	stw	r3,-32(fp)
   16294:	e0fffb17 	ldw	r3,-20(fp)
   16298:	10c00005 	stb	r3,0(r2)
   1629c:	00000606 	br	162b8 <altera_avalon_jtag_uart_read+0x8c>
    else if (ptr != buffer)
   162a0:	e0fff817 	ldw	r3,-32(fp)
   162a4:	e0bffd17 	ldw	r2,-12(fp)
   162a8:	1880071e 	bne	r3,r2,162c8 <altera_avalon_jtag_uart_read+0x9c>
      break;
    else if(flags & O_NONBLOCK)
   162ac:	e0bfff17 	ldw	r2,-4(fp)
   162b0:	1090000c 	andi	r2,r2,16384
   162b4:	1000061e 	bne	r2,zero,162d0 <altera_avalon_jtag_uart_read+0xa4>
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
   162b8:	e0fff817 	ldw	r3,-32(fp)
   162bc:	e0bffa17 	ldw	r2,-24(fp)
   162c0:	18bfeb36 	bltu	r3,r2,16270 <_gp+0xffff6a98>
   162c4:	00000306 	br	162d4 <altera_avalon_jtag_uart_read+0xa8>
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
   162c8:	0001883a 	nop
   162cc:	00000106 	br	162d4 <altera_avalon_jtag_uart_read+0xa8>
    else if(flags & O_NONBLOCK)
      break;   
   162d0:	0001883a 	nop
    
  }

  if (ptr != buffer)
   162d4:	e0fff817 	ldw	r3,-32(fp)
   162d8:	e0bffd17 	ldw	r2,-12(fp)
   162dc:	18800426 	beq	r3,r2,162f0 <altera_avalon_jtag_uart_read+0xc4>
    return ptr - buffer;
   162e0:	e0fff817 	ldw	r3,-32(fp)
   162e4:	e0bffd17 	ldw	r2,-12(fp)
   162e8:	1885c83a 	sub	r2,r3,r2
   162ec:	00000606 	br	16308 <altera_avalon_jtag_uart_read+0xdc>
  else if (flags & O_NONBLOCK)
   162f0:	e0bfff17 	ldw	r2,-4(fp)
   162f4:	1090000c 	andi	r2,r2,16384
   162f8:	10000226 	beq	r2,zero,16304 <altera_avalon_jtag_uart_read+0xd8>
    return -EWOULDBLOCK;
   162fc:	00bffd44 	movi	r2,-11
   16300:	00000106 	br	16308 <altera_avalon_jtag_uart_read+0xdc>
  else
    return -EIO;
   16304:	00bffec4 	movi	r2,-5
}
   16308:	e037883a 	mov	sp,fp
   1630c:	df000017 	ldw	fp,0(sp)
   16310:	dec00104 	addi	sp,sp,4
   16314:	f800283a 	ret

00016318 <altera_avalon_jtag_uart_write>:
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   16318:	defff904 	addi	sp,sp,-28
   1631c:	df000615 	stw	fp,24(sp)
   16320:	df000604 	addi	fp,sp,24
   16324:	e13ffc15 	stw	r4,-16(fp)
   16328:	e17ffd15 	stw	r5,-12(fp)
   1632c:	e1bffe15 	stw	r6,-8(fp)
   16330:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
   16334:	e0bffc17 	ldw	r2,-16(fp)
   16338:	10800017 	ldw	r2,0(r2)
   1633c:	e0bffa15 	stw	r2,-24(fp)

  const char * end = ptr + count;
   16340:	e0bffe17 	ldw	r2,-8(fp)
   16344:	e0fffd17 	ldw	r3,-12(fp)
   16348:	1885883a 	add	r2,r3,r2
   1634c:	e0bffb15 	stw	r2,-20(fp)

  while (ptr < end)
   16350:	00000e06 	br	1638c <altera_avalon_jtag_uart_write+0x74>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
   16354:	e0bffa17 	ldw	r2,-24(fp)
   16358:	10800104 	addi	r2,r2,4
   1635c:	10800037 	ldwio	r2,0(r2)
   16360:	10bfffec 	andhi	r2,r2,65535
   16364:	10000926 	beq	r2,zero,1638c <altera_avalon_jtag_uart_write+0x74>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
   16368:	e0fffa17 	ldw	r3,-24(fp)
   1636c:	e0bffd17 	ldw	r2,-12(fp)
   16370:	11000044 	addi	r4,r2,1
   16374:	e13ffd15 	stw	r4,-12(fp)
   16378:	10800003 	ldbu	r2,0(r2)
   1637c:	10803fcc 	andi	r2,r2,255
   16380:	1080201c 	xori	r2,r2,128
   16384:	10bfe004 	addi	r2,r2,-128
   16388:	18800035 	stwio	r2,0(r3)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
   1638c:	e0fffd17 	ldw	r3,-12(fp)
   16390:	e0bffb17 	ldw	r2,-20(fp)
   16394:	18bfef36 	bltu	r3,r2,16354 <_gp+0xffff6b7c>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
   16398:	e0bffe17 	ldw	r2,-8(fp)
}
   1639c:	e037883a 	mov	sp,fp
   163a0:	df000017 	ldw	fp,0(sp)
   163a4:	dec00104 	addi	sp,sp,4
   163a8:	f800283a 	ret

000163ac <alt_avalon_spi_command>:

int alt_avalon_spi_command(alt_u32 base, alt_u32 slave,
                           alt_u32 write_length, const alt_u8 * write_data,
                           alt_u32 read_length, alt_u8 * read_data,
                           alt_u32 flags)
{
   163ac:	defff404 	addi	sp,sp,-48
   163b0:	df000b15 	stw	fp,44(sp)
   163b4:	df000b04 	addi	fp,sp,44
   163b8:	e13ffc15 	stw	r4,-16(fp)
   163bc:	e17ffd15 	stw	r5,-12(fp)
   163c0:	e1bffe15 	stw	r6,-8(fp)
   163c4:	e1ffff15 	stw	r7,-4(fp)
  const alt_u8 * write_end = write_data + write_length;
   163c8:	e0ffff17 	ldw	r3,-4(fp)
   163cc:	e0bffe17 	ldw	r2,-8(fp)
   163d0:	1885883a 	add	r2,r3,r2
   163d4:	e0bff815 	stw	r2,-32(fp)
  alt_u8 * read_end = read_data + read_length;
   163d8:	e0c00217 	ldw	r3,8(fp)
   163dc:	e0800117 	ldw	r2,4(fp)
   163e0:	1885883a 	add	r2,r3,r2
   163e4:	e0bff915 	stw	r2,-28(fp)

  alt_u32 write_zeros = read_length;
   163e8:	e0800117 	ldw	r2,4(fp)
   163ec:	e0bff515 	stw	r2,-44(fp)
  alt_u32 read_ignore = write_length;
   163f0:	e0bffe17 	ldw	r2,-8(fp)
   163f4:	e0bff615 	stw	r2,-40(fp)

  /* We must not send more than two bytes to the target before it has
   * returned any as otherwise it will overflow. */
  /* Unfortunately the hardware does not seem to work with credits > 1,
   * leave it at 1 for now. */
  alt_32 credits = 1;
   163f8:	00800044 	movi	r2,1
   163fc:	e0bff715 	stw	r2,-36(fp)
  /* Warning: this function is not currently safe if called in a multi-threaded
   * environment, something above must perform locking to make it safe if more
   * than one thread intends to use it.
   */

  IOWR_ALTERA_AVALON_SPI_SLAVE_SEL(base, 1 << slave);
   16400:	e0bffc17 	ldw	r2,-16(fp)
   16404:	10800504 	addi	r2,r2,20
   16408:	1009883a 	mov	r4,r2
   1640c:	00c00044 	movi	r3,1
   16410:	e0bffd17 	ldw	r2,-12(fp)
   16414:	1884983a 	sll	r2,r3,r2
   16418:	20800035 	stwio	r2,0(r4)
  
  /* Set the SSO bit (force chipselect) only if the toggle flag is not set */
  if ((flags & ALT_AVALON_SPI_COMMAND_TOGGLE_SS_N) == 0) {
   1641c:	e0800317 	ldw	r2,12(fp)
   16420:	1080008c 	andi	r2,r2,2
   16424:	1000051e 	bne	r2,zero,1643c <alt_avalon_spi_command+0x90>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, ALTERA_AVALON_SPI_CONTROL_SSO_MSK);
   16428:	e0bffc17 	ldw	r2,-16(fp)
   1642c:	10800304 	addi	r2,r2,12
   16430:	1007883a 	mov	r3,r2
   16434:	00810004 	movi	r2,1024
   16438:	18800035 	stwio	r2,0(r3)
  /*
   * Discard any stale data present in the RXDATA register, in case
   * previous communication was interrupted and stale data was left
   * behind.
   */
  IORD_ALTERA_AVALON_SPI_RXDATA(base);
   1643c:	e0bffc17 	ldw	r2,-16(fp)
   16440:	10800037 	ldwio	r2,0(r2)
  for ( ; ; )
  {
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
   16444:	e0bffc17 	ldw	r2,-16(fp)
   16448:	10800204 	addi	r2,r2,8
   1644c:	10800037 	ldwio	r2,0(r2)
   16450:	e0bffa15 	stw	r2,-24(fp)
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
   16454:	e0bffa17 	ldw	r2,-24(fp)
   16458:	1080100c 	andi	r2,r2,64
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
   1645c:	10000226 	beq	r2,zero,16468 <alt_avalon_spi_command+0xbc>
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
   16460:	e0bff717 	ldw	r2,-36(fp)
   16464:	1000031e 	bne	r2,zero,16474 <alt_avalon_spi_command+0xc8>
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
   16468:	e0bffa17 	ldw	r2,-24(fp)
   1646c:	1080200c 	andi	r2,r2,128
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
   16470:	103ff426 	beq	r2,zero,16444 <_gp+0xffff6c6c>
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);

    if ((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) != 0 && credits > 0)
   16474:	e0bffa17 	ldw	r2,-24(fp)
   16478:	1080100c 	andi	r2,r2,64
   1647c:	10001e26 	beq	r2,zero,164f8 <alt_avalon_spi_command+0x14c>
   16480:	e0bff717 	ldw	r2,-36(fp)
   16484:	00801c0e 	bge	zero,r2,164f8 <alt_avalon_spi_command+0x14c>
    {
      credits--;
   16488:	e0bff717 	ldw	r2,-36(fp)
   1648c:	10bfffc4 	addi	r2,r2,-1
   16490:	e0bff715 	stw	r2,-36(fp)

      if (write_data < write_end)
   16494:	e0ffff17 	ldw	r3,-4(fp)
   16498:	e0bff817 	ldw	r2,-32(fp)
   1649c:	18800a2e 	bgeu	r3,r2,164c8 <alt_avalon_spi_command+0x11c>
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, *write_data++);
   164a0:	e0bffc17 	ldw	r2,-16(fp)
   164a4:	10800104 	addi	r2,r2,4
   164a8:	1009883a 	mov	r4,r2
   164ac:	e0bfff17 	ldw	r2,-4(fp)
   164b0:	10c00044 	addi	r3,r2,1
   164b4:	e0ffff15 	stw	r3,-4(fp)
   164b8:	10800003 	ldbu	r2,0(r2)
   164bc:	10803fcc 	andi	r2,r2,255
   164c0:	20800035 	stwio	r2,0(r4)
   164c4:	00000c06 	br	164f8 <alt_avalon_spi_command+0x14c>
      else if (write_zeros > 0)
   164c8:	e0bff517 	ldw	r2,-44(fp)
   164cc:	10000826 	beq	r2,zero,164f0 <alt_avalon_spi_command+0x144>
      {
        write_zeros--;
   164d0:	e0bff517 	ldw	r2,-44(fp)
   164d4:	10bfffc4 	addi	r2,r2,-1
   164d8:	e0bff515 	stw	r2,-44(fp)
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, 0);
   164dc:	e0bffc17 	ldw	r2,-16(fp)
   164e0:	10800104 	addi	r2,r2,4
   164e4:	0007883a 	mov	r3,zero
   164e8:	10c00035 	stwio	r3,0(r2)
   164ec:	00000206 	br	164f8 <alt_avalon_spi_command+0x14c>
      }
      else
        credits = -1024;
   164f0:	00bf0004 	movi	r2,-1024
   164f4:	e0bff715 	stw	r2,-36(fp)
    };

    if ((status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) != 0)
   164f8:	e0bffa17 	ldw	r2,-24(fp)
   164fc:	1080200c 	andi	r2,r2,128
   16500:	103fd026 	beq	r2,zero,16444 <_gp+0xffff6c6c>
    {
      alt_u32 rxdata = IORD_ALTERA_AVALON_SPI_RXDATA(base);
   16504:	e0bffc17 	ldw	r2,-16(fp)
   16508:	10800037 	ldwio	r2,0(r2)
   1650c:	e0bffb15 	stw	r2,-20(fp)

      if (read_ignore > 0)
   16510:	e0bff617 	ldw	r2,-40(fp)
   16514:	10000426 	beq	r2,zero,16528 <alt_avalon_spi_command+0x17c>
        read_ignore--;
   16518:	e0bff617 	ldw	r2,-40(fp)
   1651c:	10bfffc4 	addi	r2,r2,-1
   16520:	e0bff615 	stw	r2,-40(fp)
   16524:	00000506 	br	1653c <alt_avalon_spi_command+0x190>
      else
        *read_data++ = (alt_u8)rxdata;
   16528:	e0800217 	ldw	r2,8(fp)
   1652c:	10c00044 	addi	r3,r2,1
   16530:	e0c00215 	stw	r3,8(fp)
   16534:	e0fffb17 	ldw	r3,-20(fp)
   16538:	10c00005 	stb	r3,0(r2)
      credits++;
   1653c:	e0bff717 	ldw	r2,-36(fp)
   16540:	10800044 	addi	r2,r2,1
   16544:	e0bff715 	stw	r2,-36(fp)

      if (read_ignore == 0 && read_data == read_end)
   16548:	e0bff617 	ldw	r2,-40(fp)
   1654c:	103fbd1e 	bne	r2,zero,16444 <_gp+0xffff6c6c>
   16550:	e0c00217 	ldw	r3,8(fp)
   16554:	e0bff917 	ldw	r2,-28(fp)
   16558:	18bfba1e 	bne	r3,r2,16444 <_gp+0xffff6c6c>
  }

  /* Wait until the interface has finished transmitting */
  do
  {
    status = IORD_ALTERA_AVALON_SPI_STATUS(base);
   1655c:	e0bffc17 	ldw	r2,-16(fp)
   16560:	10800204 	addi	r2,r2,8
   16564:	10800037 	ldwio	r2,0(r2)
   16568:	e0bffa15 	stw	r2,-24(fp)
  }
  while ((status & ALTERA_AVALON_SPI_STATUS_TMT_MSK) == 0);
   1656c:	e0bffa17 	ldw	r2,-24(fp)
   16570:	1080080c 	andi	r2,r2,32
   16574:	103ff926 	beq	r2,zero,1655c <_gp+0xffff6d84>

  /* Clear SSO (release chipselect) unless the caller is going to
   * keep using this chip
   */
  if ((flags & ALT_AVALON_SPI_COMMAND_MERGE) == 0)
   16578:	e0800317 	ldw	r2,12(fp)
   1657c:	1080004c 	andi	r2,r2,1
   16580:	1000041e 	bne	r2,zero,16594 <alt_avalon_spi_command+0x1e8>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, 0);
   16584:	e0bffc17 	ldw	r2,-16(fp)
   16588:	10800304 	addi	r2,r2,12
   1658c:	0007883a 	mov	r3,zero
   16590:	10c00035 	stwio	r3,0(r2)

  return read_length;
   16594:	e0800117 	ldw	r2,4(fp)
}
   16598:	e037883a 	mov	sp,fp
   1659c:	df000017 	ldw	fp,0(sp)
   165a0:	dec00104 	addi	sp,sp,4
   165a4:	f800283a 	ret

000165a8 <I2C_init>:
      clk = freuqency of the clock driving this component  ( in Hz)
      speed = SCL speed ie 100K, 400K ...            (in Hz)
15-OCT-07 initial release
*****************************************************************/
void I2C_init(alt_u32 base,alt_u32 clk,alt_u32 speed)
{
   165a8:	defffa04 	addi	sp,sp,-24
   165ac:	dfc00515 	stw	ra,20(sp)
   165b0:	df000415 	stw	fp,16(sp)
   165b4:	df000404 	addi	fp,sp,16
   165b8:	e13ffd15 	stw	r4,-12(fp)
   165bc:	e17ffe15 	stw	r5,-8(fp)
   165c0:	e1bfff15 	stw	r6,-4(fp)
  alt_u32 prescale = (clk/( 5 * speed))-1;
   165c4:	01400144 	movi	r5,5
   165c8:	e13fff17 	ldw	r4,-4(fp)
   165cc:	001373c0 	call	1373c <__mulsi3>
   165d0:	100b883a 	mov	r5,r2
   165d4:	e13ffe17 	ldw	r4,-8(fp)
   165d8:	00136800 	call	13680 <__udivsi3>
   165dc:	10bfffc4 	addi	r2,r2,-1
   165e0:	e0bffc15 	stw	r2,-16(fp)
#ifdef  I2C_DEBUG
        printf(" Initializing  I2C at 0x%x, \n\twith clock speed 0x%x \n\tand SCL speed 0x%x \n\tand prescale 0x%x\n",base,clk,speed,prescale);
#endif
  IOWR_I2C_OPENCORES_CTR(base, 0x00); /* turn off the core*/
   165e4:	e0bffd17 	ldw	r2,-12(fp)
   165e8:	10800204 	addi	r2,r2,8
   165ec:	0007883a 	mov	r3,zero
   165f0:	10c00035 	stwio	r3,0(r2)

  IOWR_I2C_OPENCORES_CR(base, I2C_OPENCORES_CR_IACK_MSK); /* clearn any pening IRQ*/
   165f4:	e0bffd17 	ldw	r2,-12(fp)
   165f8:	10800404 	addi	r2,r2,16
   165fc:	1007883a 	mov	r3,r2
   16600:	00800044 	movi	r2,1
   16604:	18800035 	stwio	r2,0(r3)

  IOWR_I2C_OPENCORES_PRERLO(base, (0xff & prescale));  /* load low presacle bit*/
   16608:	e0bffd17 	ldw	r2,-12(fp)
   1660c:	e0fffc17 	ldw	r3,-16(fp)
   16610:	18c03fcc 	andi	r3,r3,255
   16614:	10c00035 	stwio	r3,0(r2)

  IOWR_I2C_OPENCORES_PRERHI(base, (0xff & (prescale>>8)));  /* load upper prescale bit */
   16618:	e0bffd17 	ldw	r2,-12(fp)
   1661c:	10800104 	addi	r2,r2,4
   16620:	1007883a 	mov	r3,r2
   16624:	e0bffc17 	ldw	r2,-16(fp)
   16628:	1004d23a 	srli	r2,r2,8
   1662c:	10803fcc 	andi	r2,r2,255
   16630:	18800035 	stwio	r2,0(r3)

  IOWR_I2C_OPENCORES_CTR(base, I2C_OPENCORES_CTR_EN_MSK); /* turn on the core*/
   16634:	e0bffd17 	ldw	r2,-12(fp)
   16638:	10800204 	addi	r2,r2,8
   1663c:	1007883a 	mov	r3,r2
   16640:	00802004 	movi	r2,128
   16644:	18800035 	stwio	r2,0(r3)

}
   16648:	0001883a 	nop
   1664c:	e037883a 	mov	sp,fp
   16650:	dfc00117 	ldw	ra,4(sp)
   16654:	df000017 	ldw	fp,0(sp)
   16658:	dec00204 	addi	sp,sp,8
   1665c:	f800283a 	ret

00016660 <I2C_start>:
       0 if address is acknowledged
       1 if address was not acknowledged
15-OCT-07 initial release
*****************************************************************/
int I2C_start(alt_u32 base, alt_u32 add, alt_u32 read)
{
   16660:	defffb04 	addi	sp,sp,-20
   16664:	df000415 	stw	fp,16(sp)
   16668:	df000404 	addi	fp,sp,16
   1666c:	e13ffd15 	stw	r4,-12(fp)
   16670:	e17ffe15 	stw	r5,-8(fp)
   16674:	e1bfff15 	stw	r6,-4(fp)
	int retries = 0;
   16678:	e03ffc15 	stw	zero,-16(fp)
#ifdef  I2C_DEBUG
        printf(" Start  I2C at 0x%x, \n\twith address 0x%x \n\tand read 0x%x \n\tand prescale 0x%x\n",base,add,read);
#endif

          /* transmit the address shifted by one and the read/write bit*/
  IOWR_I2C_OPENCORES_TXR(base, ((add<<1) + (0x1 & read)));
   1667c:	e0bffd17 	ldw	r2,-12(fp)
   16680:	10800304 	addi	r2,r2,12
   16684:	1007883a 	mov	r3,r2
   16688:	e0bffe17 	ldw	r2,-8(fp)
   1668c:	1085883a 	add	r2,r2,r2
   16690:	1009883a 	mov	r4,r2
   16694:	e0bfff17 	ldw	r2,-4(fp)
   16698:	1080004c 	andi	r2,r2,1
   1669c:	2085883a 	add	r2,r4,r2
   166a0:	18800035 	stwio	r2,0(r3)

          /* set start and write  bits which will start the transaction*/
  IOWR_I2C_OPENCORES_CR(base, I2C_OPENCORES_CR_STA_MSK | I2C_OPENCORES_CR_WR_MSK );
   166a4:	e0bffd17 	ldw	r2,-12(fp)
   166a8:	10800404 	addi	r2,r2,16
   166ac:	1007883a 	mov	r3,r2
   166b0:	00802404 	movi	r2,144
   166b4:	18800035 	stwio	r2,0(r3)

          /* wait for the trnasaction to be over.*/
  while( (IORD_I2C_OPENCORES_SR(base) & I2C_OPENCORES_SR_TIP_MSK) && (retries++ < MAX_RETRIES));
   166b8:	0001883a 	nop
   166bc:	e0bffd17 	ldw	r2,-12(fp)
   166c0:	10800404 	addi	r2,r2,16
   166c4:	10800037 	ldwio	r2,0(r2)
   166c8:	1080008c 	andi	r2,r2,2
   166cc:	10000526 	beq	r2,zero,166e4 <I2C_start+0x84>
   166d0:	e0bffc17 	ldw	r2,-16(fp)
   166d4:	10c00044 	addi	r3,r2,1
   166d8:	e0fffc15 	stw	r3,-16(fp)
   166dc:	1080fa10 	cmplti	r2,r2,1000
   166e0:	103ff61e 	bne	r2,zero,166bc <_gp+0xffff6ee4>

         /* now check to see if the address was acknowledged */
   if((IORD_I2C_OPENCORES_SR(base) & I2C_OPENCORES_SR_RXNACK_MSK) || retries >= MAX_RETRIES)
   166e4:	e0bffd17 	ldw	r2,-12(fp)
   166e8:	10800404 	addi	r2,r2,16
   166ec:	10800037 	ldwio	r2,0(r2)
   166f0:	1080200c 	andi	r2,r2,128
   166f4:	1000031e 	bne	r2,zero,16704 <I2C_start+0xa4>
   166f8:	e0bffc17 	ldw	r2,-16(fp)
   166fc:	1080fa10 	cmplti	r2,r2,1000
   16700:	1000021e 	bne	r2,zero,1670c <I2C_start+0xac>
   {
#ifdef  I2C_DEBUG
        printf("\tNOACK\n");
#endif
        return (I2C_NOACK);
   16704:	00800044 	movi	r2,1
   16708:	00000106 	br	16710 <I2C_start+0xb0>
   else
   {
#ifdef  I2C_DEBUG
        printf("\tACK\n");
#endif
       return (I2C_ACK);
   1670c:	0005883a 	mov	r2,zero
   }
}
   16710:	e037883a 	mov	sp,fp
   16714:	df000017 	ldw	fp,0(sp)
   16718:	dec00104 	addi	sp,sp,4
   1671c:	f800283a 	ret

00016720 <I2C_read>:
return value
       byte read back.
15-OCT-07 initial release
*****************************************************************/
alt_u32 I2C_read(alt_u32 base,alt_u32 last)
{
   16720:	defffc04 	addi	sp,sp,-16
   16724:	df000315 	stw	fp,12(sp)
   16728:	df000304 	addi	fp,sp,12
   1672c:	e13ffe15 	stw	r4,-8(fp)
   16730:	e17fff15 	stw	r5,-4(fp)
	int retries = 0;
   16734:	e03ffd15 	stw	zero,-12(fp)
#ifdef  I2C_DEBUG
        printf(" Read I2C at 0x%x, \n\twith last0x%x\n",base,last);
#endif
  if( last)
   16738:	e0bfff17 	ldw	r2,-4(fp)
   1673c:	10000626 	beq	r2,zero,16758 <I2C_read+0x38>
  {
               /* start a read and no ack and stop bit*/
           IOWR_I2C_OPENCORES_CR(base, I2C_OPENCORES_CR_RD_MSK |
   16740:	e0bffe17 	ldw	r2,-8(fp)
   16744:	10800404 	addi	r2,r2,16
   16748:	1007883a 	mov	r3,r2
   1674c:	00801a04 	movi	r2,104
   16750:	18800035 	stwio	r2,0(r3)
   16754:	00000506 	br	1676c <I2C_read+0x4c>
               I2C_OPENCORES_CR_NACK_MSK | I2C_OPENCORES_CR_STO_MSK);
  }
  else
  {
          /* start read*/
          IOWR_I2C_OPENCORES_CR(base, I2C_OPENCORES_CR_RD_MSK );
   16758:	e0bffe17 	ldw	r2,-8(fp)
   1675c:	10800404 	addi	r2,r2,16
   16760:	1007883a 	mov	r3,r2
   16764:	00800804 	movi	r2,32
   16768:	18800035 	stwio	r2,0(r3)
  }
          /* wait for the trnasaction to be over.*/
  while( (IORD_I2C_OPENCORES_SR(base) & I2C_OPENCORES_SR_TIP_MSK) && (retries++ < MAX_RETRIES));
   1676c:	0001883a 	nop
   16770:	e0bffe17 	ldw	r2,-8(fp)
   16774:	10800404 	addi	r2,r2,16
   16778:	10800037 	ldwio	r2,0(r2)
   1677c:	1080008c 	andi	r2,r2,2
   16780:	10000526 	beq	r2,zero,16798 <I2C_read+0x78>
   16784:	e0bffd17 	ldw	r2,-12(fp)
   16788:	10c00044 	addi	r3,r2,1
   1678c:	e0fffd15 	stw	r3,-12(fp)
   16790:	1080fa10 	cmplti	r2,r2,1000
   16794:	103ff61e 	bne	r2,zero,16770 <_gp+0xffff6f98>

         /* now read the data */
        return (IORD_I2C_OPENCORES_RXR(base));
   16798:	e0bffe17 	ldw	r2,-8(fp)
   1679c:	10800304 	addi	r2,r2,12
   167a0:	10800037 	ldwio	r2,0(r2)

}
   167a4:	e037883a 	mov	sp,fp
   167a8:	df000017 	ldw	fp,0(sp)
   167ac:	dec00104 	addi	sp,sp,4
   167b0:	f800283a 	ret

000167b4 <I2C_write>:
       0 if address is acknowledged
       1 if address was not acknowledged
15-OCT-07 initial release
*****************************************************************/
alt_u32 I2C_write(alt_u32 base,alt_u8 data, alt_u32 last)
{
   167b4:	defffb04 	addi	sp,sp,-20
   167b8:	df000415 	stw	fp,16(sp)
   167bc:	df000404 	addi	fp,sp,16
   167c0:	e13ffd15 	stw	r4,-12(fp)
   167c4:	2805883a 	mov	r2,r5
   167c8:	e1bfff15 	stw	r6,-4(fp)
   167cc:	e0bffe05 	stb	r2,-8(fp)
	int retries = 0;
   167d0:	e03ffc15 	stw	zero,-16(fp)
  #ifdef  I2C_DEBUG
        printf(" Read I2C at 0x%x, \n\twith data 0x%x,\n\twith last0x%x\n",base,data,last);
#endif
                 /* transmit the data*/
  IOWR_I2C_OPENCORES_TXR(base, data);
   167d4:	e0bffd17 	ldw	r2,-12(fp)
   167d8:	10800304 	addi	r2,r2,12
   167dc:	1007883a 	mov	r3,r2
   167e0:	e0bffe03 	ldbu	r2,-8(fp)
   167e4:	18800035 	stwio	r2,0(r3)

  if( last)
   167e8:	e0bfff17 	ldw	r2,-4(fp)
   167ec:	10000626 	beq	r2,zero,16808 <I2C_write+0x54>
  {
               /* start a read and no ack and stop bit*/
           IOWR_I2C_OPENCORES_CR(base, I2C_OPENCORES_CR_WR_MSK |
   167f0:	e0bffd17 	ldw	r2,-12(fp)
   167f4:	10800404 	addi	r2,r2,16
   167f8:	1007883a 	mov	r3,r2
   167fc:	00801404 	movi	r2,80
   16800:	18800035 	stwio	r2,0(r3)
   16804:	00000506 	br	1681c <I2C_write+0x68>
               I2C_OPENCORES_CR_STO_MSK);
  }
  else
  {
          /* start read*/
          IOWR_I2C_OPENCORES_CR(base, I2C_OPENCORES_CR_WR_MSK );
   16808:	e0bffd17 	ldw	r2,-12(fp)
   1680c:	10800404 	addi	r2,r2,16
   16810:	1007883a 	mov	r3,r2
   16814:	00800404 	movi	r2,16
   16818:	18800035 	stwio	r2,0(r3)
  }
           /* wait for the trnasaction to be over.*/
  while( (IORD_I2C_OPENCORES_SR(base) & I2C_OPENCORES_SR_TIP_MSK) && (retries++ < MAX_RETRIES));
   1681c:	0001883a 	nop
   16820:	e0bffd17 	ldw	r2,-12(fp)
   16824:	10800404 	addi	r2,r2,16
   16828:	10800037 	ldwio	r2,0(r2)
   1682c:	1080008c 	andi	r2,r2,2
   16830:	10000526 	beq	r2,zero,16848 <I2C_write+0x94>
   16834:	e0bffc17 	ldw	r2,-16(fp)
   16838:	10c00044 	addi	r3,r2,1
   1683c:	e0fffc15 	stw	r3,-16(fp)
   16840:	1080fa10 	cmplti	r2,r2,1000
   16844:	103ff61e 	bne	r2,zero,16820 <_gp+0xffff7048>

         /* now check to see if the address was acknowledged */
   if(IORD_I2C_OPENCORES_SR(base) & I2C_OPENCORES_SR_RXNACK_MSK)
   16848:	e0bffd17 	ldw	r2,-12(fp)
   1684c:	10800404 	addi	r2,r2,16
   16850:	10800037 	ldwio	r2,0(r2)
   16854:	1080200c 	andi	r2,r2,128
   16858:	10000226 	beq	r2,zero,16864 <I2C_write+0xb0>
   {
#ifdef  I2C_DEBUG
        printf("\tNOACK\n");
#endif
        return (I2C_NOACK);
   1685c:	00800044 	movi	r2,1
   16860:	00000106 	br	16868 <I2C_write+0xb4>
   else
   {
#ifdef  I2C_DEBUG
        printf("\tACK\n");
#endif
       return (I2C_ACK);
   16864:	0005883a 	mov	r2,zero
   }

}
   16868:	e037883a 	mov	sp,fp
   1686c:	df000017 	ldw	fp,0(sp)
   16870:	dec00104 	addi	sp,sp,4
   16874:	f800283a 	ret

00016878 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   16878:	defffe04 	addi	sp,sp,-8
   1687c:	dfc00115 	stw	ra,4(sp)
   16880:	df000015 	stw	fp,0(sp)
   16884:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   16888:	d0a00917 	ldw	r2,-32732(gp)
   1688c:	10000326 	beq	r2,zero,1689c <alt_get_errno+0x24>
   16890:	d0a00917 	ldw	r2,-32732(gp)
   16894:	103ee83a 	callr	r2
   16898:	00000106 	br	168a0 <alt_get_errno+0x28>
   1689c:	d0a0c904 	addi	r2,gp,-31964
}
   168a0:	e037883a 	mov	sp,fp
   168a4:	dfc00117 	ldw	ra,4(sp)
   168a8:	df000017 	ldw	fp,0(sp)
   168ac:	dec00204 	addi	sp,sp,8
   168b0:	f800283a 	ret

000168b4 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   168b4:	defffb04 	addi	sp,sp,-20
   168b8:	dfc00415 	stw	ra,16(sp)
   168bc:	df000315 	stw	fp,12(sp)
   168c0:	df000304 	addi	fp,sp,12
   168c4:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   168c8:	e0bfff17 	ldw	r2,-4(fp)
   168cc:	10000816 	blt	r2,zero,168f0 <close+0x3c>
   168d0:	01400304 	movi	r5,12
   168d4:	e13fff17 	ldw	r4,-4(fp)
   168d8:	001373c0 	call	1373c <__mulsi3>
   168dc:	1007883a 	mov	r3,r2
   168e0:	00800074 	movhi	r2,1
   168e4:	109d5e04 	addi	r2,r2,30072
   168e8:	1885883a 	add	r2,r3,r2
   168ec:	00000106 	br	168f4 <close+0x40>
   168f0:	0005883a 	mov	r2,zero
   168f4:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   168f8:	e0bffd17 	ldw	r2,-12(fp)
   168fc:	10001926 	beq	r2,zero,16964 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   16900:	e0bffd17 	ldw	r2,-12(fp)
   16904:	10800017 	ldw	r2,0(r2)
   16908:	10800417 	ldw	r2,16(r2)
   1690c:	10000626 	beq	r2,zero,16928 <close+0x74>
   16910:	e0bffd17 	ldw	r2,-12(fp)
   16914:	10800017 	ldw	r2,0(r2)
   16918:	10800417 	ldw	r2,16(r2)
   1691c:	e13ffd17 	ldw	r4,-12(fp)
   16920:	103ee83a 	callr	r2
   16924:	00000106 	br	1692c <close+0x78>
   16928:	0005883a 	mov	r2,zero
   1692c:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   16930:	e13fff17 	ldw	r4,-4(fp)
   16934:	0016ebc0 	call	16ebc <alt_release_fd>
    if (rval < 0)
   16938:	e0bffe17 	ldw	r2,-8(fp)
   1693c:	1000070e 	bge	r2,zero,1695c <close+0xa8>
    {
      ALT_ERRNO = -rval;
   16940:	00168780 	call	16878 <alt_get_errno>
   16944:	1007883a 	mov	r3,r2
   16948:	e0bffe17 	ldw	r2,-8(fp)
   1694c:	0085c83a 	sub	r2,zero,r2
   16950:	18800015 	stw	r2,0(r3)
      return -1;
   16954:	00bfffc4 	movi	r2,-1
   16958:	00000706 	br	16978 <close+0xc4>
    }
    return 0;
   1695c:	0005883a 	mov	r2,zero
   16960:	00000506 	br	16978 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   16964:	00168780 	call	16878 <alt_get_errno>
   16968:	1007883a 	mov	r3,r2
   1696c:	00801444 	movi	r2,81
   16970:	18800015 	stw	r2,0(r3)
    return -1;
   16974:	00bfffc4 	movi	r2,-1
  }
}
   16978:	e037883a 	mov	sp,fp
   1697c:	dfc00117 	ldw	ra,4(sp)
   16980:	df000017 	ldw	fp,0(sp)
   16984:	dec00204 	addi	sp,sp,8
   16988:	f800283a 	ret

0001698c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   1698c:	deffff04 	addi	sp,sp,-4
   16990:	df000015 	stw	fp,0(sp)
   16994:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   16998:	0001883a 	nop
   1699c:	e037883a 	mov	sp,fp
   169a0:	df000017 	ldw	fp,0(sp)
   169a4:	dec00104 	addi	sp,sp,4
   169a8:	f800283a 	ret

000169ac <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   169ac:	defffc04 	addi	sp,sp,-16
   169b0:	df000315 	stw	fp,12(sp)
   169b4:	df000304 	addi	fp,sp,12
   169b8:	e13ffd15 	stw	r4,-12(fp)
   169bc:	e17ffe15 	stw	r5,-8(fp)
   169c0:	e1bfff15 	stw	r6,-4(fp)
  return len;
   169c4:	e0bfff17 	ldw	r2,-4(fp)
}
   169c8:	e037883a 	mov	sp,fp
   169cc:	df000017 	ldw	fp,0(sp)
   169d0:	dec00104 	addi	sp,sp,4
   169d4:	f800283a 	ret

000169d8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   169d8:	defffe04 	addi	sp,sp,-8
   169dc:	dfc00115 	stw	ra,4(sp)
   169e0:	df000015 	stw	fp,0(sp)
   169e4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   169e8:	d0a00917 	ldw	r2,-32732(gp)
   169ec:	10000326 	beq	r2,zero,169fc <alt_get_errno+0x24>
   169f0:	d0a00917 	ldw	r2,-32732(gp)
   169f4:	103ee83a 	callr	r2
   169f8:	00000106 	br	16a00 <alt_get_errno+0x28>
   169fc:	d0a0c904 	addi	r2,gp,-31964
}
   16a00:	e037883a 	mov	sp,fp
   16a04:	dfc00117 	ldw	ra,4(sp)
   16a08:	df000017 	ldw	fp,0(sp)
   16a0c:	dec00204 	addi	sp,sp,8
   16a10:	f800283a 	ret

00016a14 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   16a14:	defffa04 	addi	sp,sp,-24
   16a18:	dfc00515 	stw	ra,20(sp)
   16a1c:	df000415 	stw	fp,16(sp)
   16a20:	df000404 	addi	fp,sp,16
   16a24:	e13ffe15 	stw	r4,-8(fp)
   16a28:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   16a2c:	e0bffe17 	ldw	r2,-8(fp)
   16a30:	10000326 	beq	r2,zero,16a40 <alt_dev_llist_insert+0x2c>
   16a34:	e0bffe17 	ldw	r2,-8(fp)
   16a38:	10800217 	ldw	r2,8(r2)
   16a3c:	1000061e 	bne	r2,zero,16a58 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   16a40:	00169d80 	call	169d8 <alt_get_errno>
   16a44:	1007883a 	mov	r3,r2
   16a48:	00800584 	movi	r2,22
   16a4c:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   16a50:	00bffa84 	movi	r2,-22
   16a54:	00001306 	br	16aa4 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   16a58:	e0bffe17 	ldw	r2,-8(fp)
   16a5c:	e0ffff17 	ldw	r3,-4(fp)
   16a60:	e0fffc15 	stw	r3,-16(fp)
   16a64:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   16a68:	e0bffd17 	ldw	r2,-12(fp)
   16a6c:	e0fffc17 	ldw	r3,-16(fp)
   16a70:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   16a74:	e0bffc17 	ldw	r2,-16(fp)
   16a78:	10c00017 	ldw	r3,0(r2)
   16a7c:	e0bffd17 	ldw	r2,-12(fp)
   16a80:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   16a84:	e0bffc17 	ldw	r2,-16(fp)
   16a88:	10800017 	ldw	r2,0(r2)
   16a8c:	e0fffd17 	ldw	r3,-12(fp)
   16a90:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   16a94:	e0bffc17 	ldw	r2,-16(fp)
   16a98:	e0fffd17 	ldw	r3,-12(fp)
   16a9c:	10c00015 	stw	r3,0(r2)

  return 0;  
   16aa0:	0005883a 	mov	r2,zero
}
   16aa4:	e037883a 	mov	sp,fp
   16aa8:	dfc00117 	ldw	ra,4(sp)
   16aac:	df000017 	ldw	fp,0(sp)
   16ab0:	dec00204 	addi	sp,sp,8
   16ab4:	f800283a 	ret

00016ab8 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   16ab8:	deffff04 	addi	sp,sp,-4
   16abc:	df000015 	stw	fp,0(sp)
   16ac0:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   16ac4:	0001883a 	nop
   16ac8:	e037883a 	mov	sp,fp
   16acc:	df000017 	ldw	fp,0(sp)
   16ad0:	dec00104 	addi	sp,sp,4
   16ad4:	f800283a 	ret

00016ad8 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   16ad8:	defff804 	addi	sp,sp,-32
   16adc:	dfc00715 	stw	ra,28(sp)
   16ae0:	df000615 	stw	fp,24(sp)
   16ae4:	dc000515 	stw	r16,20(sp)
   16ae8:	df000604 	addi	fp,sp,24
   16aec:	e13ffb15 	stw	r4,-20(fp)
   16af0:	e17ffc15 	stw	r5,-16(fp)
   16af4:	e1bffd15 	stw	r6,-12(fp)
   16af8:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
   16afc:	e1bffe17 	ldw	r6,-8(fp)
   16b00:	e17ffd17 	ldw	r5,-12(fp)
   16b04:	e13ffc17 	ldw	r4,-16(fp)
   16b08:	0016d600 	call	16d60 <open>
   16b0c:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
   16b10:	e0bffa17 	ldw	r2,-24(fp)
   16b14:	10002216 	blt	r2,zero,16ba0 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
   16b18:	04000074 	movhi	r16,1
   16b1c:	841d5e04 	addi	r16,r16,30072
   16b20:	e0bffa17 	ldw	r2,-24(fp)
   16b24:	01400304 	movi	r5,12
   16b28:	1009883a 	mov	r4,r2
   16b2c:	001373c0 	call	1373c <__mulsi3>
   16b30:	8085883a 	add	r2,r16,r2
   16b34:	10c00017 	ldw	r3,0(r2)
   16b38:	e0bffb17 	ldw	r2,-20(fp)
   16b3c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   16b40:	04000074 	movhi	r16,1
   16b44:	841d5e04 	addi	r16,r16,30072
   16b48:	e0bffa17 	ldw	r2,-24(fp)
   16b4c:	01400304 	movi	r5,12
   16b50:	1009883a 	mov	r4,r2
   16b54:	001373c0 	call	1373c <__mulsi3>
   16b58:	8085883a 	add	r2,r16,r2
   16b5c:	10800104 	addi	r2,r2,4
   16b60:	10c00017 	ldw	r3,0(r2)
   16b64:	e0bffb17 	ldw	r2,-20(fp)
   16b68:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   16b6c:	04000074 	movhi	r16,1
   16b70:	841d5e04 	addi	r16,r16,30072
   16b74:	e0bffa17 	ldw	r2,-24(fp)
   16b78:	01400304 	movi	r5,12
   16b7c:	1009883a 	mov	r4,r2
   16b80:	001373c0 	call	1373c <__mulsi3>
   16b84:	8085883a 	add	r2,r16,r2
   16b88:	10800204 	addi	r2,r2,8
   16b8c:	10c00017 	ldw	r3,0(r2)
   16b90:	e0bffb17 	ldw	r2,-20(fp)
   16b94:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   16b98:	e13ffa17 	ldw	r4,-24(fp)
   16b9c:	0016ebc0 	call	16ebc <alt_release_fd>
  }
} 
   16ba0:	0001883a 	nop
   16ba4:	e6ffff04 	addi	sp,fp,-4
   16ba8:	dfc00217 	ldw	ra,8(sp)
   16bac:	df000117 	ldw	fp,4(sp)
   16bb0:	dc000017 	ldw	r16,0(sp)
   16bb4:	dec00304 	addi	sp,sp,12
   16bb8:	f800283a 	ret

00016bbc <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   16bbc:	defffb04 	addi	sp,sp,-20
   16bc0:	dfc00415 	stw	ra,16(sp)
   16bc4:	df000315 	stw	fp,12(sp)
   16bc8:	df000304 	addi	fp,sp,12
   16bcc:	e13ffd15 	stw	r4,-12(fp)
   16bd0:	e17ffe15 	stw	r5,-8(fp)
   16bd4:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   16bd8:	01c07fc4 	movi	r7,511
   16bdc:	01800044 	movi	r6,1
   16be0:	e17ffd17 	ldw	r5,-12(fp)
   16be4:	01000074 	movhi	r4,1
   16be8:	211d6104 	addi	r4,r4,30084
   16bec:	0016ad80 	call	16ad8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   16bf0:	01c07fc4 	movi	r7,511
   16bf4:	000d883a 	mov	r6,zero
   16bf8:	e17ffe17 	ldw	r5,-8(fp)
   16bfc:	01000074 	movhi	r4,1
   16c00:	211d5e04 	addi	r4,r4,30072
   16c04:	0016ad80 	call	16ad8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   16c08:	01c07fc4 	movi	r7,511
   16c0c:	01800044 	movi	r6,1
   16c10:	e17fff17 	ldw	r5,-4(fp)
   16c14:	01000074 	movhi	r4,1
   16c18:	211d6404 	addi	r4,r4,30096
   16c1c:	0016ad80 	call	16ad8 <alt_open_fd>
}  
   16c20:	0001883a 	nop
   16c24:	e037883a 	mov	sp,fp
   16c28:	dfc00117 	ldw	ra,4(sp)
   16c2c:	df000017 	ldw	fp,0(sp)
   16c30:	dec00204 	addi	sp,sp,8
   16c34:	f800283a 	ret

00016c38 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   16c38:	defffe04 	addi	sp,sp,-8
   16c3c:	dfc00115 	stw	ra,4(sp)
   16c40:	df000015 	stw	fp,0(sp)
   16c44:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   16c48:	d0a00917 	ldw	r2,-32732(gp)
   16c4c:	10000326 	beq	r2,zero,16c5c <alt_get_errno+0x24>
   16c50:	d0a00917 	ldw	r2,-32732(gp)
   16c54:	103ee83a 	callr	r2
   16c58:	00000106 	br	16c60 <alt_get_errno+0x28>
   16c5c:	d0a0c904 	addi	r2,gp,-31964
}
   16c60:	e037883a 	mov	sp,fp
   16c64:	dfc00117 	ldw	ra,4(sp)
   16c68:	df000017 	ldw	fp,0(sp)
   16c6c:	dec00204 	addi	sp,sp,8
   16c70:	f800283a 	ret

00016c74 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   16c74:	defffb04 	addi	sp,sp,-20
   16c78:	dfc00415 	stw	ra,16(sp)
   16c7c:	df000315 	stw	fp,12(sp)
   16c80:	dc000215 	stw	r16,8(sp)
   16c84:	df000304 	addi	fp,sp,12
   16c88:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   16c8c:	e0bffe17 	ldw	r2,-8(fp)
   16c90:	10800217 	ldw	r2,8(r2)
   16c94:	10d00034 	orhi	r3,r2,16384
   16c98:	e0bffe17 	ldw	r2,-8(fp)
   16c9c:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   16ca0:	e03ffd15 	stw	zero,-12(fp)
   16ca4:	00002306 	br	16d34 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   16ca8:	04000074 	movhi	r16,1
   16cac:	841d5e04 	addi	r16,r16,30072
   16cb0:	e0bffd17 	ldw	r2,-12(fp)
   16cb4:	01400304 	movi	r5,12
   16cb8:	1009883a 	mov	r4,r2
   16cbc:	001373c0 	call	1373c <__mulsi3>
   16cc0:	8085883a 	add	r2,r16,r2
   16cc4:	10c00017 	ldw	r3,0(r2)
   16cc8:	e0bffe17 	ldw	r2,-8(fp)
   16ccc:	10800017 	ldw	r2,0(r2)
   16cd0:	1880151e 	bne	r3,r2,16d28 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   16cd4:	04000074 	movhi	r16,1
   16cd8:	841d5e04 	addi	r16,r16,30072
   16cdc:	e0bffd17 	ldw	r2,-12(fp)
   16ce0:	01400304 	movi	r5,12
   16ce4:	1009883a 	mov	r4,r2
   16ce8:	001373c0 	call	1373c <__mulsi3>
   16cec:	8085883a 	add	r2,r16,r2
   16cf0:	10800204 	addi	r2,r2,8
   16cf4:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   16cf8:	10000b0e 	bge	r2,zero,16d28 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   16cfc:	01400304 	movi	r5,12
   16d00:	e13ffd17 	ldw	r4,-12(fp)
   16d04:	001373c0 	call	1373c <__mulsi3>
   16d08:	1007883a 	mov	r3,r2
   16d0c:	00800074 	movhi	r2,1
   16d10:	109d5e04 	addi	r2,r2,30072
   16d14:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   16d18:	e0bffe17 	ldw	r2,-8(fp)
   16d1c:	18800226 	beq	r3,r2,16d28 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   16d20:	00bffcc4 	movi	r2,-13
   16d24:	00000806 	br	16d48 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   16d28:	e0bffd17 	ldw	r2,-12(fp)
   16d2c:	10800044 	addi	r2,r2,1
   16d30:	e0bffd15 	stw	r2,-12(fp)
   16d34:	d0a00817 	ldw	r2,-32736(gp)
   16d38:	1007883a 	mov	r3,r2
   16d3c:	e0bffd17 	ldw	r2,-12(fp)
   16d40:	18bfd92e 	bgeu	r3,r2,16ca8 <_gp+0xffff74d0>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   16d44:	0005883a 	mov	r2,zero
}
   16d48:	e6ffff04 	addi	sp,fp,-4
   16d4c:	dfc00217 	ldw	ra,8(sp)
   16d50:	df000117 	ldw	fp,4(sp)
   16d54:	dc000017 	ldw	r16,0(sp)
   16d58:	dec00304 	addi	sp,sp,12
   16d5c:	f800283a 	ret

00016d60 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   16d60:	defff604 	addi	sp,sp,-40
   16d64:	dfc00915 	stw	ra,36(sp)
   16d68:	df000815 	stw	fp,32(sp)
   16d6c:	df000804 	addi	fp,sp,32
   16d70:	e13ffd15 	stw	r4,-12(fp)
   16d74:	e17ffe15 	stw	r5,-8(fp)
   16d78:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   16d7c:	00bfffc4 	movi	r2,-1
   16d80:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   16d84:	00bffb44 	movi	r2,-19
   16d88:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   16d8c:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   16d90:	d1600604 	addi	r5,gp,-32744
   16d94:	e13ffd17 	ldw	r4,-12(fp)
   16d98:	0016f640 	call	16f64 <alt_find_dev>
   16d9c:	e0bff815 	stw	r2,-32(fp)
   16da0:	e0bff817 	ldw	r2,-32(fp)
   16da4:	1000051e 	bne	r2,zero,16dbc <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   16da8:	e13ffd17 	ldw	r4,-12(fp)
   16dac:	0016ff40 	call	16ff4 <alt_find_file>
   16db0:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   16db4:	00800044 	movi	r2,1
   16db8:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   16dbc:	e0bff817 	ldw	r2,-32(fp)
   16dc0:	10002b26 	beq	r2,zero,16e70 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
   16dc4:	e13ff817 	ldw	r4,-32(fp)
   16dc8:	00170fc0 	call	170fc <alt_get_fd>
   16dcc:	e0bff915 	stw	r2,-28(fp)
   16dd0:	e0bff917 	ldw	r2,-28(fp)
   16dd4:	1000030e 	bge	r2,zero,16de4 <open+0x84>
    {
      status = index;
   16dd8:	e0bff917 	ldw	r2,-28(fp)
   16ddc:	e0bffa15 	stw	r2,-24(fp)
   16de0:	00002506 	br	16e78 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
   16de4:	01400304 	movi	r5,12
   16de8:	e13ff917 	ldw	r4,-28(fp)
   16dec:	001373c0 	call	1373c <__mulsi3>
   16df0:	1007883a 	mov	r3,r2
   16df4:	00800074 	movhi	r2,1
   16df8:	109d5e04 	addi	r2,r2,30072
   16dfc:	1885883a 	add	r2,r3,r2
   16e00:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   16e04:	e0fffe17 	ldw	r3,-8(fp)
   16e08:	00900034 	movhi	r2,16384
   16e0c:	10bfffc4 	addi	r2,r2,-1
   16e10:	1886703a 	and	r3,r3,r2
   16e14:	e0bffc17 	ldw	r2,-16(fp)
   16e18:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   16e1c:	e0bffb17 	ldw	r2,-20(fp)
   16e20:	1000051e 	bne	r2,zero,16e38 <open+0xd8>
   16e24:	e13ffc17 	ldw	r4,-16(fp)
   16e28:	0016c740 	call	16c74 <alt_file_locked>
   16e2c:	e0bffa15 	stw	r2,-24(fp)
   16e30:	e0bffa17 	ldw	r2,-24(fp)
   16e34:	10001016 	blt	r2,zero,16e78 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   16e38:	e0bff817 	ldw	r2,-32(fp)
   16e3c:	10800317 	ldw	r2,12(r2)
   16e40:	10000826 	beq	r2,zero,16e64 <open+0x104>
   16e44:	e0bff817 	ldw	r2,-32(fp)
   16e48:	10800317 	ldw	r2,12(r2)
   16e4c:	e1ffff17 	ldw	r7,-4(fp)
   16e50:	e1bffe17 	ldw	r6,-8(fp)
   16e54:	e17ffd17 	ldw	r5,-12(fp)
   16e58:	e13ffc17 	ldw	r4,-16(fp)
   16e5c:	103ee83a 	callr	r2
   16e60:	00000106 	br	16e68 <open+0x108>
   16e64:	0005883a 	mov	r2,zero
   16e68:	e0bffa15 	stw	r2,-24(fp)
   16e6c:	00000206 	br	16e78 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
   16e70:	00bffb44 	movi	r2,-19
   16e74:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   16e78:	e0bffa17 	ldw	r2,-24(fp)
   16e7c:	1000090e 	bge	r2,zero,16ea4 <open+0x144>
  {
    alt_release_fd (index);  
   16e80:	e13ff917 	ldw	r4,-28(fp)
   16e84:	0016ebc0 	call	16ebc <alt_release_fd>
    ALT_ERRNO = -status;
   16e88:	0016c380 	call	16c38 <alt_get_errno>
   16e8c:	1007883a 	mov	r3,r2
   16e90:	e0bffa17 	ldw	r2,-24(fp)
   16e94:	0085c83a 	sub	r2,zero,r2
   16e98:	18800015 	stw	r2,0(r3)
    return -1;
   16e9c:	00bfffc4 	movi	r2,-1
   16ea0:	00000106 	br	16ea8 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
   16ea4:	e0bff917 	ldw	r2,-28(fp)
}
   16ea8:	e037883a 	mov	sp,fp
   16eac:	dfc00117 	ldw	ra,4(sp)
   16eb0:	df000017 	ldw	fp,0(sp)
   16eb4:	dec00204 	addi	sp,sp,8
   16eb8:	f800283a 	ret

00016ebc <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   16ebc:	defffc04 	addi	sp,sp,-16
   16ec0:	dfc00315 	stw	ra,12(sp)
   16ec4:	df000215 	stw	fp,8(sp)
   16ec8:	dc000115 	stw	r16,4(sp)
   16ecc:	df000204 	addi	fp,sp,8
   16ed0:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
   16ed4:	e0bffe17 	ldw	r2,-8(fp)
   16ed8:	108000d0 	cmplti	r2,r2,3
   16edc:	1000111e 	bne	r2,zero,16f24 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
   16ee0:	04000074 	movhi	r16,1
   16ee4:	841d5e04 	addi	r16,r16,30072
   16ee8:	e0bffe17 	ldw	r2,-8(fp)
   16eec:	01400304 	movi	r5,12
   16ef0:	1009883a 	mov	r4,r2
   16ef4:	001373c0 	call	1373c <__mulsi3>
   16ef8:	8085883a 	add	r2,r16,r2
   16efc:	10800204 	addi	r2,r2,8
   16f00:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   16f04:	04000074 	movhi	r16,1
   16f08:	841d5e04 	addi	r16,r16,30072
   16f0c:	e0bffe17 	ldw	r2,-8(fp)
   16f10:	01400304 	movi	r5,12
   16f14:	1009883a 	mov	r4,r2
   16f18:	001373c0 	call	1373c <__mulsi3>
   16f1c:	8085883a 	add	r2,r16,r2
   16f20:	10000015 	stw	zero,0(r2)
  }
}
   16f24:	0001883a 	nop
   16f28:	e6ffff04 	addi	sp,fp,-4
   16f2c:	dfc00217 	ldw	ra,8(sp)
   16f30:	df000117 	ldw	fp,4(sp)
   16f34:	dc000017 	ldw	r16,0(sp)
   16f38:	dec00304 	addi	sp,sp,12
   16f3c:	f800283a 	ret

00016f40 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   16f40:	deffff04 	addi	sp,sp,-4
   16f44:	df000015 	stw	fp,0(sp)
   16f48:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   16f4c:	000170fa 	wrctl	ienable,zero
}
   16f50:	0001883a 	nop
   16f54:	e037883a 	mov	sp,fp
   16f58:	df000017 	ldw	fp,0(sp)
   16f5c:	dec00104 	addi	sp,sp,4
   16f60:	f800283a 	ret

00016f64 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   16f64:	defffa04 	addi	sp,sp,-24
   16f68:	dfc00515 	stw	ra,20(sp)
   16f6c:	df000415 	stw	fp,16(sp)
   16f70:	df000404 	addi	fp,sp,16
   16f74:	e13ffe15 	stw	r4,-8(fp)
   16f78:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   16f7c:	e0bfff17 	ldw	r2,-4(fp)
   16f80:	10800017 	ldw	r2,0(r2)
   16f84:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   16f88:	e13ffe17 	ldw	r4,-8(fp)
   16f8c:	00172100 	call	17210 <strlen>
   16f90:	10800044 	addi	r2,r2,1
   16f94:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   16f98:	00000d06 	br	16fd0 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   16f9c:	e0bffc17 	ldw	r2,-16(fp)
   16fa0:	10800217 	ldw	r2,8(r2)
   16fa4:	e0fffd17 	ldw	r3,-12(fp)
   16fa8:	180d883a 	mov	r6,r3
   16fac:	e17ffe17 	ldw	r5,-8(fp)
   16fb0:	1009883a 	mov	r4,r2
   16fb4:	00171e00 	call	171e0 <memcmp>
   16fb8:	1000021e 	bne	r2,zero,16fc4 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   16fbc:	e0bffc17 	ldw	r2,-16(fp)
   16fc0:	00000706 	br	16fe0 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   16fc4:	e0bffc17 	ldw	r2,-16(fp)
   16fc8:	10800017 	ldw	r2,0(r2)
   16fcc:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   16fd0:	e0fffc17 	ldw	r3,-16(fp)
   16fd4:	e0bfff17 	ldw	r2,-4(fp)
   16fd8:	18bff01e 	bne	r3,r2,16f9c <_gp+0xffff77c4>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   16fdc:	0005883a 	mov	r2,zero
}
   16fe0:	e037883a 	mov	sp,fp
   16fe4:	dfc00117 	ldw	ra,4(sp)
   16fe8:	df000017 	ldw	fp,0(sp)
   16fec:	dec00204 	addi	sp,sp,8
   16ff0:	f800283a 	ret

00016ff4 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   16ff4:	defffb04 	addi	sp,sp,-20
   16ff8:	dfc00415 	stw	ra,16(sp)
   16ffc:	df000315 	stw	fp,12(sp)
   17000:	df000304 	addi	fp,sp,12
   17004:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   17008:	d0a00417 	ldw	r2,-32752(gp)
   1700c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   17010:	00003106 	br	170d8 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   17014:	e0bffd17 	ldw	r2,-12(fp)
   17018:	10800217 	ldw	r2,8(r2)
   1701c:	1009883a 	mov	r4,r2
   17020:	00172100 	call	17210 <strlen>
   17024:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   17028:	e0bffd17 	ldw	r2,-12(fp)
   1702c:	10c00217 	ldw	r3,8(r2)
   17030:	e0bffe17 	ldw	r2,-8(fp)
   17034:	10bfffc4 	addi	r2,r2,-1
   17038:	1885883a 	add	r2,r3,r2
   1703c:	10800003 	ldbu	r2,0(r2)
   17040:	10803fcc 	andi	r2,r2,255
   17044:	1080201c 	xori	r2,r2,128
   17048:	10bfe004 	addi	r2,r2,-128
   1704c:	10800bd8 	cmpnei	r2,r2,47
   17050:	1000031e 	bne	r2,zero,17060 <alt_find_file+0x6c>
    {
      len -= 1;
   17054:	e0bffe17 	ldw	r2,-8(fp)
   17058:	10bfffc4 	addi	r2,r2,-1
   1705c:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   17060:	e0bffe17 	ldw	r2,-8(fp)
   17064:	e0ffff17 	ldw	r3,-4(fp)
   17068:	1885883a 	add	r2,r3,r2
   1706c:	10800003 	ldbu	r2,0(r2)
   17070:	10803fcc 	andi	r2,r2,255
   17074:	1080201c 	xori	r2,r2,128
   17078:	10bfe004 	addi	r2,r2,-128
   1707c:	10800be0 	cmpeqi	r2,r2,47
   17080:	1000081e 	bne	r2,zero,170a4 <alt_find_file+0xb0>
   17084:	e0bffe17 	ldw	r2,-8(fp)
   17088:	e0ffff17 	ldw	r3,-4(fp)
   1708c:	1885883a 	add	r2,r3,r2
   17090:	10800003 	ldbu	r2,0(r2)
   17094:	10803fcc 	andi	r2,r2,255
   17098:	1080201c 	xori	r2,r2,128
   1709c:	10bfe004 	addi	r2,r2,-128
   170a0:	10000a1e 	bne	r2,zero,170cc <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   170a4:	e0bffd17 	ldw	r2,-12(fp)
   170a8:	10800217 	ldw	r2,8(r2)
   170ac:	e0fffe17 	ldw	r3,-8(fp)
   170b0:	180d883a 	mov	r6,r3
   170b4:	e17fff17 	ldw	r5,-4(fp)
   170b8:	1009883a 	mov	r4,r2
   170bc:	00171e00 	call	171e0 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   170c0:	1000021e 	bne	r2,zero,170cc <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   170c4:	e0bffd17 	ldw	r2,-12(fp)
   170c8:	00000706 	br	170e8 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   170cc:	e0bffd17 	ldw	r2,-12(fp)
   170d0:	10800017 	ldw	r2,0(r2)
   170d4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   170d8:	e0fffd17 	ldw	r3,-12(fp)
   170dc:	d0a00404 	addi	r2,gp,-32752
   170e0:	18bfcc1e 	bne	r3,r2,17014 <_gp+0xffff783c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   170e4:	0005883a 	mov	r2,zero
}
   170e8:	e037883a 	mov	sp,fp
   170ec:	dfc00117 	ldw	ra,4(sp)
   170f0:	df000017 	ldw	fp,0(sp)
   170f4:	dec00204 	addi	sp,sp,8
   170f8:	f800283a 	ret

000170fc <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   170fc:	defffa04 	addi	sp,sp,-24
   17100:	dfc00515 	stw	ra,20(sp)
   17104:	df000415 	stw	fp,16(sp)
   17108:	dc000315 	stw	r16,12(sp)
   1710c:	df000404 	addi	fp,sp,16
   17110:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
   17114:	00bffa04 	movi	r2,-24
   17118:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   1711c:	e03ffc15 	stw	zero,-16(fp)
   17120:	00001d06 	br	17198 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
   17124:	04000074 	movhi	r16,1
   17128:	841d5e04 	addi	r16,r16,30072
   1712c:	e0bffc17 	ldw	r2,-16(fp)
   17130:	01400304 	movi	r5,12
   17134:	1009883a 	mov	r4,r2
   17138:	001373c0 	call	1373c <__mulsi3>
   1713c:	8085883a 	add	r2,r16,r2
   17140:	10800017 	ldw	r2,0(r2)
   17144:	1000111e 	bne	r2,zero,1718c <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
   17148:	04000074 	movhi	r16,1
   1714c:	841d5e04 	addi	r16,r16,30072
   17150:	e0bffc17 	ldw	r2,-16(fp)
   17154:	01400304 	movi	r5,12
   17158:	1009883a 	mov	r4,r2
   1715c:	001373c0 	call	1373c <__mulsi3>
   17160:	8085883a 	add	r2,r16,r2
   17164:	e0fffe17 	ldw	r3,-8(fp)
   17168:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   1716c:	d0e00817 	ldw	r3,-32736(gp)
   17170:	e0bffc17 	ldw	r2,-16(fp)
   17174:	1880020e 	bge	r3,r2,17180 <alt_get_fd+0x84>
      {
        alt_max_fd = i;
   17178:	e0bffc17 	ldw	r2,-16(fp)
   1717c:	d0a00815 	stw	r2,-32736(gp)
      }
      rc = i;
   17180:	e0bffc17 	ldw	r2,-16(fp)
   17184:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
   17188:	00000606 	br	171a4 <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   1718c:	e0bffc17 	ldw	r2,-16(fp)
   17190:	10800044 	addi	r2,r2,1
   17194:	e0bffc15 	stw	r2,-16(fp)
   17198:	e0bffc17 	ldw	r2,-16(fp)
   1719c:	10800810 	cmplti	r2,r2,32
   171a0:	103fe01e 	bne	r2,zero,17124 <_gp+0xffff794c>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   171a4:	e0bffd17 	ldw	r2,-12(fp)
}
   171a8:	e6ffff04 	addi	sp,fp,-4
   171ac:	dfc00217 	ldw	ra,8(sp)
   171b0:	df000117 	ldw	fp,4(sp)
   171b4:	dc000017 	ldw	r16,0(sp)
   171b8:	dec00304 	addi	sp,sp,12
   171bc:	f800283a 	ret

000171c0 <exit>:
   171c0:	defffe04 	addi	sp,sp,-8
   171c4:	000b883a 	mov	r5,zero
   171c8:	dc000015 	stw	r16,0(sp)
   171cc:	dfc00115 	stw	ra,4(sp)
   171d0:	2021883a 	mov	r16,r4
   171d4:	001722c0 	call	1722c <__call_exitprocs>
   171d8:	8009883a 	mov	r4,r16
   171dc:	00173bc0 	call	173bc <_exit>

000171e0 <memcmp>:
   171e0:	218d883a 	add	r6,r4,r6
   171e4:	21800826 	beq	r4,r6,17208 <memcmp+0x28>
   171e8:	20800003 	ldbu	r2,0(r4)
   171ec:	28c00003 	ldbu	r3,0(r5)
   171f0:	10c00226 	beq	r2,r3,171fc <memcmp+0x1c>
   171f4:	10c5c83a 	sub	r2,r2,r3
   171f8:	f800283a 	ret
   171fc:	21000044 	addi	r4,r4,1
   17200:	29400044 	addi	r5,r5,1
   17204:	003ff706 	br	171e4 <_gp+0xffff7a0c>
   17208:	0005883a 	mov	r2,zero
   1720c:	f800283a 	ret

00017210 <strlen>:
   17210:	2005883a 	mov	r2,r4
   17214:	10c00007 	ldb	r3,0(r2)
   17218:	18000226 	beq	r3,zero,17224 <strlen+0x14>
   1721c:	10800044 	addi	r2,r2,1
   17220:	003ffc06 	br	17214 <_gp+0xffff7a3c>
   17224:	1105c83a 	sub	r2,r2,r4
   17228:	f800283a 	ret

0001722c <__call_exitprocs>:
   1722c:	defff504 	addi	sp,sp,-44
   17230:	dd000515 	stw	r20,20(sp)
   17234:	05000074 	movhi	r20,1
   17238:	dc800315 	stw	r18,12(sp)
   1723c:	dfc00a15 	stw	ra,40(sp)
   17240:	df000915 	stw	fp,36(sp)
   17244:	ddc00815 	stw	r23,32(sp)
   17248:	dd800715 	stw	r22,28(sp)
   1724c:	dd400615 	stw	r21,24(sp)
   17250:	dcc00415 	stw	r19,16(sp)
   17254:	dc400215 	stw	r17,8(sp)
   17258:	dc000115 	stw	r16,4(sp)
   1725c:	d9000015 	stw	r4,0(sp)
   17260:	2825883a 	mov	r18,r5
   17264:	a51e0004 	addi	r20,r20,30720
   17268:	a4400017 	ldw	r17,0(r20)
   1726c:	8cc00c17 	ldw	r19,48(r17)
   17270:	8c400c04 	addi	r17,r17,48
   17274:	98004526 	beq	r19,zero,1738c <__call_exitprocs+0x160>
   17278:	9c000117 	ldw	r16,4(r19)
   1727c:	00900034 	movhi	r2,16384
   17280:	10bfffc4 	addi	r2,r2,-1
   17284:	9d402217 	ldw	r21,136(r19)
   17288:	85bfffc4 	addi	r22,r16,-1
   1728c:	80a1883a 	add	r16,r16,r2
   17290:	8421883a 	add	r16,r16,r16
   17294:	8421883a 	add	r16,r16,r16
   17298:	ac2f883a 	add	r23,r21,r16
   1729c:	84000204 	addi	r16,r16,8
   172a0:	9c21883a 	add	r16,r19,r16
   172a4:	b0002716 	blt	r22,zero,17344 <__call_exitprocs+0x118>
   172a8:	90000726 	beq	r18,zero,172c8 <__call_exitprocs+0x9c>
   172ac:	a800041e 	bne	r21,zero,172c0 <__call_exitprocs+0x94>
   172b0:	b5bfffc4 	addi	r22,r22,-1
   172b4:	bdffff04 	addi	r23,r23,-4
   172b8:	843fff04 	addi	r16,r16,-4
   172bc:	003ff906 	br	172a4 <_gp+0xffff7acc>
   172c0:	b9002017 	ldw	r4,128(r23)
   172c4:	913ffa1e 	bne	r18,r4,172b0 <_gp+0xffff7ad8>
   172c8:	99000117 	ldw	r4,4(r19)
   172cc:	82000017 	ldw	r8,0(r16)
   172d0:	213fffc4 	addi	r4,r4,-1
   172d4:	b100021e 	bne	r22,r4,172e0 <__call_exitprocs+0xb4>
   172d8:	9d800115 	stw	r22,4(r19)
   172dc:	00000106 	br	172e4 <__call_exitprocs+0xb8>
   172e0:	80000015 	stw	zero,0(r16)
   172e4:	403ff226 	beq	r8,zero,172b0 <_gp+0xffff7ad8>
   172e8:	9f000117 	ldw	fp,4(r19)
   172ec:	a8000526 	beq	r21,zero,17304 <__call_exitprocs+0xd8>
   172f0:	00800044 	movi	r2,1
   172f4:	1592983a 	sll	r9,r2,r22
   172f8:	a9404017 	ldw	r5,256(r21)
   172fc:	494a703a 	and	r5,r9,r5
   17300:	2800021e 	bne	r5,zero,1730c <__call_exitprocs+0xe0>
   17304:	403ee83a 	callr	r8
   17308:	00000906 	br	17330 <__call_exitprocs+0x104>
   1730c:	a9004117 	ldw	r4,260(r21)
   17310:	4908703a 	and	r4,r9,r4
   17314:	2000041e 	bne	r4,zero,17328 <__call_exitprocs+0xfc>
   17318:	b9400017 	ldw	r5,0(r23)
   1731c:	d9000017 	ldw	r4,0(sp)
   17320:	403ee83a 	callr	r8
   17324:	00000206 	br	17330 <__call_exitprocs+0x104>
   17328:	b9000017 	ldw	r4,0(r23)
   1732c:	403ee83a 	callr	r8
   17330:	99000117 	ldw	r4,4(r19)
   17334:	e13fcc1e 	bne	fp,r4,17268 <_gp+0xffff7a90>
   17338:	89000017 	ldw	r4,0(r17)
   1733c:	993fdc26 	beq	r19,r4,172b0 <_gp+0xffff7ad8>
   17340:	003fc906 	br	17268 <_gp+0xffff7a90>
   17344:	00800034 	movhi	r2,0
   17348:	10800004 	addi	r2,r2,0
   1734c:	10000f26 	beq	r2,zero,1738c <__call_exitprocs+0x160>
   17350:	99400117 	ldw	r5,4(r19)
   17354:	99000017 	ldw	r4,0(r19)
   17358:	2800091e 	bne	r5,zero,17380 <__call_exitprocs+0x154>
   1735c:	20000826 	beq	r4,zero,17380 <__call_exitprocs+0x154>
   17360:	89000015 	stw	r4,0(r17)
   17364:	a8000226 	beq	r21,zero,17370 <__call_exitprocs+0x144>
   17368:	a809883a 	mov	r4,r21
   1736c:	00000000 	call	0 <__reset-0x10000>
   17370:	9809883a 	mov	r4,r19
   17374:	00000000 	call	0 <__reset-0x10000>
   17378:	8cc00017 	ldw	r19,0(r17)
   1737c:	003fbd06 	br	17274 <_gp+0xffff7a9c>
   17380:	9823883a 	mov	r17,r19
   17384:	2027883a 	mov	r19,r4
   17388:	003fba06 	br	17274 <_gp+0xffff7a9c>
   1738c:	dfc00a17 	ldw	ra,40(sp)
   17390:	df000917 	ldw	fp,36(sp)
   17394:	ddc00817 	ldw	r23,32(sp)
   17398:	dd800717 	ldw	r22,28(sp)
   1739c:	dd400617 	ldw	r21,24(sp)
   173a0:	dd000517 	ldw	r20,20(sp)
   173a4:	dcc00417 	ldw	r19,16(sp)
   173a8:	dc800317 	ldw	r18,12(sp)
   173ac:	dc400217 	ldw	r17,8(sp)
   173b0:	dc000117 	ldw	r16,4(sp)
   173b4:	dec00b04 	addi	sp,sp,44
   173b8:	f800283a 	ret

000173bc <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   173bc:	defffd04 	addi	sp,sp,-12
   173c0:	df000215 	stw	fp,8(sp)
   173c4:	df000204 	addi	fp,sp,8
   173c8:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   173cc:	0001883a 	nop
   173d0:	e0bfff17 	ldw	r2,-4(fp)
   173d4:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   173d8:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   173dc:	10000226 	beq	r2,zero,173e8 <_exit+0x2c>
    ALT_SIM_FAIL();
   173e0:	002af070 	cmpltui	zero,zero,43969
   173e4:	00000106 	br	173ec <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   173e8:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   173ec:	003fff06 	br	173ec <_gp+0xffff7c14>
