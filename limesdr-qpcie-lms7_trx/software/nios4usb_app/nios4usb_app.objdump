
nios4usb_app.elf:     file format elf32-littlenios2
nios4usb_app.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010020

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00010020 paddr 0x00010020 align 2**12
         filesz 0x0000411c memsz 0x0000411c flags r-x
    LOAD off    0x0000513c vaddr 0x0001413c paddr 0x0001441c align 2**12
         filesz 0x000002e0 memsz 0x000002e0 flags rw-
    LOAD off    0x000056fc vaddr 0x000146fc paddr 0x000146fc align 2**12
         filesz 0x00000000 memsz 0x00000094 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00010000  00010000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00010020  00010020  0000541c  2**0
                  CONTENTS
  2 .text         000040e8  00010020  00010020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000034  00014108  00014108  00005108  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000002e0  0001413c  0001441c  0000513c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000094  000146fc  000146fc  000056fc  2**2
                  ALLOC, SMALL_DATA
  6 .oc_mem       00000000  00014790  00014790  0000541c  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  0000541c  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000430  00000000  00000000  00005440  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00005122  00000000  00000000  00005870  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001bae  00000000  00000000  0000a992  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000023cb  00000000  00000000  0000c540  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000a84  00000000  00000000  0000e90c  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0000189f  00000000  00000000  0000f390  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000082d  00000000  00000000  00010c2f  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  0001145c  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000100  00000000  00000000  00011470  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00012dde  2**0
                  CONTENTS, READONLY
 18 .cpu          00000009  00000000  00000000  00012de1  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00012dea  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00012deb  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  00012dec  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  00012df0  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  00012df4  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   0000000b  00000000  00000000  00012df8  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    0000000b  00000000  00000000  00012e03  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   0000000b  00000000  00000000  00012e0e  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000008  00000000  00000000  00012e19  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000056  00000000  00000000  00012e21  2**0
                  CONTENTS, READONLY
 29 .jdi          0000a82e  00000000  00000000  00012e77  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     0009c0e9  00000000  00000000  0001d6a5  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00010000 l    d  .entry	00000000 .entry
00010020 l    d  .exceptions	00000000 .exceptions
00010020 l    d  .text	00000000 .text
00014108 l    d  .rodata	00000000 .rodata
0001413c l    d  .rwdata	00000000 .rwdata
000146fc l    d  .bss	00000000 .bss
00014790 l    d  .oc_mem	00000000 .oc_mem
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../nios4usb_bsp//obj/HAL/src/crt0.o
00010058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 pll_rcfg.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 alt_load.c
00012c78 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00012dd0 l     F .text	00000034 alt_dev_reg
0001413c l     O .rwdata	0000002c jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_spi.c
00000000 l    df *ABS*	00000000 i2c_opencores.c
00000000 l    df *ABS*	00000000 alt_close.c
00013590 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
000136c4 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
000136f0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
000137f0 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
00013950 l     F .text	0000003c alt_get_errno
0001398c l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 impure.c
00014310 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 alt_exit.c
00012d64 g     F .text	0000006c alt_main
000100d0 g     F .text	00000058 Check_Periph_ID
0001441c g       *ABS*	00000000 __flash_rwdata_start
000146fc g     O .bss	00000001 block
00014710 g     O .bss	00000040 glEp0Buffer_Tx
000143f2 g     O .rwdata	00000002 converted_val
00013c58 g     F .text	00000024 altera_nios2_gen2_irq_init
00010000 g     F .entry	0000000c __reset
000107f4 g     F .text	0000011c Control_TCXO_ADF
00010020 g       *ABS*	00000000 __flash_exceptions_start
0001470c g     O .bss	00000004 errno
00014704 g     O .bss	00000004 alt_argv
0001c3f0 g       *ABS*	00000000 _gp
00014190 g     O .rwdata	00000180 alt_fd_list
00013c7c g     F .text	00000090 alt_find_dev
000138d4 g     F .text	0000007c alt_io_redirect
00013378 g     F .text	000000c0 I2C_start
0001107c g     F .text	000001c0 Modify_BRDSPI16_Reg_bits
00012f44 g     F .text	000000ec altera_avalon_jtag_uart_read
00012b74 g     F .text	00000064 .hidden __udivsi3
000109b8 g     F .text	00000090 GetPLLCFG_Base
0001440c g     O .rwdata	00000004 alt_max_fd
00010fd8 g     F .text	000000a4 ResetPLL
00010a48 g     F .text	00000460 UpdatePLLCFG
00014414 g     O .rwdata	00000004 _global_impure_ptr
00014790 g       *ABS*	00000000 __bss_end
00014168 g     O .rwdata	00000028 alt_dev_null
000128c8 g     F .text	00000088 set_pll_config
000136a4 g     F .text	00000020 alt_dcache_flush_all
00010ea8 g     F .text	00000130 UpdatePHCFG
00010000 g       *ABS*	00000000 __alt_mem_oc_mem
0001441c g       *ABS*	00000000 __ram_rwdata_end
00014404 g     O .rwdata	00000008 alt_dev_list
0001413c g       *ABS*	00000000 __ram_rodata_end
00012bd8 g     F .text	00000058 .hidden __umodsi3
00014790 g       *ABS*	00000000 end
00018000 g       *ABS*	00000000 __alt_stack_pointer
00013030 g     F .text	00000094 altera_avalon_jtag_uart_write
00012950 g     F .text	0000003c set_CxCnt
00013f44 g     F .text	00000190 __call_exitprocs
000146fd g     O .bss	00000001 test
00010020 g     F .text	0000003c _start
000130c4 g     F .text	000001fc alt_avalon_spi_command
00012e3c g     F .text	00000048 alt_sys_init
00012c30 g     F .text	00000028 .hidden __mulsi3
0001413c g       *ABS*	00000000 __ram_rwdata_start
00014108 g       *ABS*	00000000 __ram_rodata_start
00012e84 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00013e14 g     F .text	000000c4 alt_get_fd
00010730 g     F .text	000000c4 Control_TCXO_DAC
00010910 g     F .text	000000a8 change_ADC_tpat
000102b0 g     F .text	00000480 init_ADC
00013ef8 g     F .text	00000030 memcmp
00014790 g       *ABS*	00000000 __alt_stack_base
00013d0c g     F .text	00000108 alt_find_file
0001372c g     F .text	000000a4 alt_dev_llist_insert
000127f8 g     F .text	000000d0 get_pll_config
000146fc g       *ABS*	00000000 __bss_start
00012c58 g     F .text	00000020 memset
0001123c g     F .text	000015bc main
00014708 g     O .bss	00000004 alt_envp
00012ee4 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00010128 g     F .text	00000084 getFifoData
00012a08 g     F .text	00000074 start_Reconfig
000101ac g     F .text	00000104 Configure_LM75
00014410 g     O .rwdata	00000004 alt_errno
00012a7c g     F .text	00000084 .hidden __divsi3
00013438 g     F .text	00000094 I2C_read
00014108 g       *ABS*	00000000 __flash_rodata_start
00012e04 g     F .text	00000038 alt_irq_init
00013bd4 g     F .text	00000084 alt_release_fd
000143f8 g     O .rwdata	00000004 LMS_Ctrl_Packet_Rx
00014418 g     O .rwdata	00000004 _impure_ptr
00014700 g     O .bss	00000004 alt_argc
000143fc g     O .rwdata	00000008 alt_fs_list
000143f0 g     O .rwdata	00000002 dac_val
000132c0 g     F .text	000000b8 I2C_init
00010020 g       *ABS*	00000000 __ram_exceptions_start
0001298c g     F .text	0000007c set_Phase
0001441c g       *ABS*	00000000 _edata
00014790 g       *ABS*	00000000 _end
00010020 g       *ABS*	00000000 __ram_exceptions_end
000146fe g     O .bss	00000001 cmd_errors
00013ed8 g     F .text	00000020 exit
00012b00 g     F .text	00000074 .hidden __modsi3
00018000 g       *ABS*	00000000 __alt_data_end
000140d4 g     F .text	00000034 _exit
0001005c g     F .text	00000074 Check_many_blocks
00013f28 g     F .text	0000001c strlen
00013a78 g     F .text	0000015c open
000143f4 g     O .rwdata	00000004 LMS_Ctrl_Packet_Tx
000137d0 g     F .text	00000020 alt_icache_flush_all
000135cc g     F .text	000000d8 close
00012ce0 g     F .text	00000084 alt_load
000134cc g     F .text	000000c4 I2C_write
00014750 g     O .bss	00000040 glEp0Buffer_Rx



Disassembly of section .entry:

00010000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   10000:	00400074 	movhi	at,1
    ori r1, r1, %lo(_start)
   10004:	08400814 	ori	at,at,32
    jmp r1
   10008:	0800683a 	jmp	at
	...

Disassembly of section .text:

00010020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   10020:	06c00074 	movhi	sp,1
    ori sp, sp, %lo(__alt_stack_pointer)
   10024:	dee00014 	ori	sp,sp,32768
    movhi gp, %hi(_gp)
   10028:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
   1002c:	d6b0fc14 	ori	gp,gp,50160
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   10030:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
   10034:	1091bf14 	ori	r2,r2,18172

    movhi r3, %hi(__bss_end)
   10038:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
   1003c:	18d1e414 	ori	r3,r3,18320

    beq r2, r3, 1f
   10040:	10c00326 	beq	r2,r3,10050 <_start+0x30>

0:
    stw zero, (r2)
   10044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   10048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   1004c:	10fffd36 	bltu	r2,r3,10044 <_gp+0xffff3c54>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   10050:	0012ce00 	call	12ce0 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   10054:	0012d640 	call	12d64 <alt_main>

00010058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   10058:	003fff06 	br	10058 <_gp+0xffff3c68>

0001005c <Check_many_blocks>:


/**	This function checks if all blocks could fit in data field.
*	If blocks will not fit, function returns TRUE. */
unsigned char Check_many_blocks (unsigned char block_size)
{
   1005c:	defffc04 	addi	sp,sp,-16
   10060:	dfc00315 	stw	ra,12(sp)
   10064:	df000215 	stw	fp,8(sp)
   10068:	dc000115 	stw	r16,4(sp)
   1006c:	df000204 	addi	fp,sp,8
   10070:	2005883a 	mov	r2,r4
   10074:	e0bffe05 	stb	r2,-8(fp)
	if (LMS_Ctrl_Packet_Rx->Header.Data_blocks > (sizeof(LMS_Ctrl_Packet_Tx->Data_field)/block_size))
   10078:	d0a00217 	ldw	r2,-32760(gp)
   1007c:	14000083 	ldbu	r16,2(r2)
   10080:	e0bffe03 	ldbu	r2,-8(fp)
   10084:	100b883a 	mov	r5,r2
   10088:	01000e04 	movi	r4,56
   1008c:	0012b740 	call	12b74 <__udivsi3>
   10090:	1007883a 	mov	r3,r2
   10094:	80803fcc 	andi	r2,r16,255
   10098:	18c03fcc 	andi	r3,r3,255
   1009c:	1880052e 	bgeu	r3,r2,100b4 <Check_many_blocks+0x58>
	{
		LMS_Ctrl_Packet_Tx->Header.Status = STATUS_BLOCKS_ERROR_CMD;
   100a0:	d0a00117 	ldw	r2,-32764(gp)
   100a4:	00c00104 	movi	r3,4
   100a8:	10c00045 	stb	r3,1(r2)
		return 1;
   100ac:	00800044 	movi	r2,1
   100b0:	00000106 	br	100b8 <Check_many_blocks+0x5c>
	}
	else return 0;
   100b4:	0005883a 	mov	r2,zero
	return 1;
}
   100b8:	e6ffff04 	addi	sp,fp,-4
   100bc:	dfc00217 	ldw	ra,8(sp)
   100c0:	df000117 	ldw	fp,4(sp)
   100c4:	dc000017 	ldw	r16,0(sp)
   100c8:	dec00304 	addi	sp,sp,12
   100cc:	f800283a 	ret

000100d0 <Check_Periph_ID>:

/** Cchecks if peripheral ID is valid.
 Returns 1 if valid, else 0. */
unsigned char Check_Periph_ID (unsigned char max_periph_id, unsigned char Periph_ID)
{
   100d0:	defffd04 	addi	sp,sp,-12
   100d4:	df000215 	stw	fp,8(sp)
   100d8:	df000204 	addi	fp,sp,8
   100dc:	2007883a 	mov	r3,r4
   100e0:	2805883a 	mov	r2,r5
   100e4:	e0fffe05 	stb	r3,-8(fp)
   100e8:	e0bfff05 	stb	r2,-4(fp)
		if (LMS_Ctrl_Packet_Rx->Header.Periph_ID > max_periph_id)
   100ec:	d0a00217 	ldw	r2,-32760(gp)
   100f0:	108000c3 	ldbu	r2,3(r2)
   100f4:	10803fcc 	andi	r2,r2,255
   100f8:	e0fffe03 	ldbu	r3,-8(fp)
   100fc:	1880052e 	bgeu	r3,r2,10114 <Check_Periph_ID+0x44>
		{
		LMS_Ctrl_Packet_Tx->Header.Status = STATUS_INVALID_PERIPH_ID_CMD;
   10100:	d0a00117 	ldw	r2,-32764(gp)
   10104:	00c00204 	movi	r3,8
   10108:	10c00045 	stb	r3,1(r2)
		return 0;
   1010c:	0005883a 	mov	r2,zero
   10110:	00000106 	br	10118 <Check_Periph_ID+0x48>
		}
	else return 1;
   10114:	00800044 	movi	r2,1
}
   10118:	e037883a 	mov	sp,fp
   1011c:	df000017 	ldw	fp,0(sp)
   10120:	dec00104 	addi	sp,sp,4
   10124:	f800283a 	ret

00010128 <getFifoData>:

/**
 * Gets 64 bytes packet from FIFO.
 */
void getFifoData(uint8_t *buf, uint8_t k)
{
   10128:	defffb04 	addi	sp,sp,-20
   1012c:	df000415 	stw	fp,16(sp)
   10130:	df000404 	addi	fp,sp,16
   10134:	e13ffe15 	stw	r4,-8(fp)
   10138:	2805883a 	mov	r2,r5
   1013c:	e0bfff05 	stb	r2,-4(fp)
	uint8_t cnt = 0;
   10140:	e03ffc05 	stb	zero,-16(fp)
	uint32_t* dest = (uint32_t*)buf;
   10144:	e0bffe17 	ldw	r2,-8(fp)
   10148:	e0bffd15 	stw	r2,-12(fp)
	for(cnt=0; cnt<k/sizeof(uint32_t); ++cnt)
   1014c:	e03ffc05 	stb	zero,-16(fp)
   10150:	00000c06 	br	10184 <getFifoData+0x5c>
	{
		dest[cnt] = IORD(AV_FIFO_INT_0_BASE, 1);	// Read Data from FIFO
   10154:	e0bffc03 	ldbu	r2,-16(fp)
   10158:	1085883a 	add	r2,r2,r2
   1015c:	1085883a 	add	r2,r2,r2
   10160:	1007883a 	mov	r3,r2
   10164:	e0bffd17 	ldw	r2,-12(fp)
   10168:	10c5883a 	add	r2,r2,r3
   1016c:	00c1b504 	movi	r3,1748
   10170:	18c00037 	ldwio	r3,0(r3)
   10174:	10c00015 	stw	r3,0(r2)
 */
void getFifoData(uint8_t *buf, uint8_t k)
{
	uint8_t cnt = 0;
	uint32_t* dest = (uint32_t*)buf;
	for(cnt=0; cnt<k/sizeof(uint32_t); ++cnt)
   10178:	e0bffc03 	ldbu	r2,-16(fp)
   1017c:	10800044 	addi	r2,r2,1
   10180:	e0bffc05 	stb	r2,-16(fp)
   10184:	e0bfff03 	ldbu	r2,-4(fp)
   10188:	1004d0ba 	srli	r2,r2,2
   1018c:	10803fcc 	andi	r2,r2,255
   10190:	e0fffc03 	ldbu	r3,-16(fp)
   10194:	18bfef36 	bltu	r3,r2,10154 <_gp+0xffff3d64>
	{
		dest[cnt] = IORD(AV_FIFO_INT_0_BASE, 1);	// Read Data from FIFO
	};
}
   10198:	0001883a 	nop
   1019c:	e037883a 	mov	sp,fp
   101a0:	df000017 	ldw	fp,0(sp)
   101a4:	dec00104 	addi	sp,sp,4
   101a8:	f800283a 	ret

000101ac <Configure_LM75>:
/**
 * Configures LM75
 */

void Configure_LM75(void)
{
   101ac:	defffd04 	addi	sp,sp,-12
   101b0:	dfc00215 	stw	ra,8(sp)
   101b4:	df000115 	stw	fp,4(sp)
   101b8:	df000104 	addi	fp,sp,4
	int spirez;

	// OS polarity configuration
	spirez = I2C_start(I2C_OPENCORES_0_BASE, LM75_I2C_ADDR, 0);
   101bc:	000d883a 	mov	r6,zero
   101c0:	01401204 	movi	r5,72
   101c4:	01019804 	movi	r4,1632
   101c8:	00133780 	call	13378 <I2C_start>
   101cc:	e0bfff15 	stw	r2,-4(fp)
	spirez = I2C_write(I2C_OPENCORES_0_BASE, 0x01, 0);				// Pointer = configuration register
   101d0:	000d883a 	mov	r6,zero
   101d4:	01400044 	movi	r5,1
   101d8:	01019804 	movi	r4,1632
   101dc:	00134cc0 	call	134cc <I2C_write>
   101e0:	e0bfff15 	stw	r2,-4(fp)
	//spirez = I2C_start(I2C_OPENCORES_0_BASE, LM75_I2C_ADDR, 1);
	spirez = I2C_write(I2C_OPENCORES_0_BASE, 0x04, 1);				//Configuration value: OS polarity = 1, Comparator/int = 0, Shutdown = 0
   101e4:	01800044 	movi	r6,1
   101e8:	01400104 	movi	r5,4
   101ec:	01019804 	movi	r4,1632
   101f0:	00134cc0 	call	134cc <I2C_write>
   101f4:	e0bfff15 	stw	r2,-4(fp)

	// THYST configuration
	spirez = I2C_start(I2C_OPENCORES_0_BASE, LM75_I2C_ADDR, 0);
   101f8:	000d883a 	mov	r6,zero
   101fc:	01401204 	movi	r5,72
   10200:	01019804 	movi	r4,1632
   10204:	00133780 	call	13378 <I2C_start>
   10208:	e0bfff15 	stw	r2,-4(fp)
	spirez = I2C_write(I2C_OPENCORES_0_BASE, 0x02, 0);				// Pointer = THYST register
   1020c:	000d883a 	mov	r6,zero
   10210:	01400084 	movi	r5,2
   10214:	01019804 	movi	r4,1632
   10218:	00134cc0 	call	134cc <I2C_write>
   1021c:	e0bfff15 	stw	r2,-4(fp)
	//spirez = I2C_start(I2C_OPENCORES_0_BASE, LM75_I2C_ADDR, 1);
	spirez = I2C_write(I2C_OPENCORES_0_BASE, 45, 0);				// Set THYST H
   10220:	000d883a 	mov	r6,zero
   10224:	01400b44 	movi	r5,45
   10228:	01019804 	movi	r4,1632
   1022c:	00134cc0 	call	134cc <I2C_write>
   10230:	e0bfff15 	stw	r2,-4(fp)
	spirez = I2C_write(I2C_OPENCORES_0_BASE,  0, 1);				// Set THYST L
   10234:	01800044 	movi	r6,1
   10238:	000b883a 	mov	r5,zero
   1023c:	01019804 	movi	r4,1632
   10240:	00134cc0 	call	134cc <I2C_write>
   10244:	e0bfff15 	stw	r2,-4(fp)

	// TOS configuration
	spirez = I2C_start(I2C_OPENCORES_0_BASE, LM75_I2C_ADDR, 0);
   10248:	000d883a 	mov	r6,zero
   1024c:	01401204 	movi	r5,72
   10250:	01019804 	movi	r4,1632
   10254:	00133780 	call	13378 <I2C_start>
   10258:	e0bfff15 	stw	r2,-4(fp)
	spirez = I2C_write(I2C_OPENCORES_0_BASE, 0x03, 0);				// Pointer = TOS register
   1025c:	000d883a 	mov	r6,zero
   10260:	014000c4 	movi	r5,3
   10264:	01019804 	movi	r4,1632
   10268:	00134cc0 	call	134cc <I2C_write>
   1026c:	e0bfff15 	stw	r2,-4(fp)
	//spirez = I2C_start(I2C_OPENCORES_0_BASE, LM75_I2C_ADDR, 1);
	spirez = I2C_write(I2C_OPENCORES_0_BASE, 55, 0);				// Set TOS H
   10270:	000d883a 	mov	r6,zero
   10274:	01400dc4 	movi	r5,55
   10278:	01019804 	movi	r4,1632
   1027c:	00134cc0 	call	134cc <I2C_write>
   10280:	e0bfff15 	stw	r2,-4(fp)
	spirez = I2C_write(I2C_OPENCORES_0_BASE,  0, 1);				// Set TOS L
   10284:	01800044 	movi	r6,1
   10288:	000b883a 	mov	r5,zero
   1028c:	01019804 	movi	r4,1632
   10290:	00134cc0 	call	134cc <I2C_write>
   10294:	e0bfff15 	stw	r2,-4(fp)
}
   10298:	0001883a 	nop
   1029c:	e037883a 	mov	sp,fp
   102a0:	dfc00117 	ldw	ra,4(sp)
   102a4:	df000017 	ldw	fp,0(sp)
   102a8:	dec00204 	addi	sp,sp,8
   102ac:	f800283a 	ret

000102b0 <init_ADC>:

void init_ADC()
{
   102b0:	defff904 	addi	sp,sp,-28
   102b4:	dfc00615 	stw	ra,24(sp)
   102b8:	df000515 	stw	fp,20(sp)
   102bc:	df000504 	addi	fp,sp,20
    //asm("nop"); asm("nop"); asm("nop");
    //IOWR(GPIO_0_BASE, 0x00, ui32_tmp & 0xFFFFFFFE);	//Set to 0


	// Disable ADC readout and reset
	wr_buf[0] = 0x00;	//Address
   102c0:	e03fff05 	stb	zero,-4(fp)
	wr_buf[1] = 0x02;	//Data
   102c4:	00800084 	movi	r2,2
   102c8:	e0bfff45 	stb	r2,-3(fp)
	//wr_buf[1] = 0x00;	//Data
	spirez = alt_avalon_spi_command(FPGA_SPI0_BASE, SPI_NR_EXTADC, 2, wr_buf, 0, NULL, 0);
   102cc:	e0bfff04 	addi	r2,fp,-4
   102d0:	d8000215 	stw	zero,8(sp)
   102d4:	d8000115 	stw	zero,4(sp)
   102d8:	d8000015 	stw	zero,0(sp)
   102dc:	100f883a 	mov	r7,r2
   102e0:	01800084 	movi	r6,2
   102e4:	01400144 	movi	r5,5
   102e8:	01019004 	movi	r4,1600
   102ec:	00130c40 	call	130c4 <alt_avalon_spi_command>
   102f0:	e0bffe15 	stw	r2,-8(fp)

	// 0x01
	wr_buf[0] = 0x01;	//Address
   102f4:	00800044 	movi	r2,1
   102f8:	e0bfff05 	stb	r2,-4(fp)
	wr_buf[1] = 0x00;	//Data
   102fc:	e03fff45 	stb	zero,-3(fp)
	spirez = alt_avalon_spi_command(FPGA_SPI0_BASE, SPI_NR_EXTADC, 2, wr_buf, 0, NULL, 0);
   10300:	e0bfff04 	addi	r2,fp,-4
   10304:	d8000215 	stw	zero,8(sp)
   10308:	d8000115 	stw	zero,4(sp)
   1030c:	d8000015 	stw	zero,0(sp)
   10310:	100f883a 	mov	r7,r2
   10314:	01800084 	movi	r6,2
   10318:	01400144 	movi	r5,5
   1031c:	01019004 	movi	r4,1600
   10320:	00130c40 	call	130c4 <alt_avalon_spi_command>
   10324:	e0bffe15 	stw	r2,-8(fp)

	// 0x03
	wr_buf[0] = 0x03;	//Address
   10328:	008000c4 	movi	r2,3
   1032c:	e0bfff05 	stb	r2,-4(fp)
	//wr_buf[1] = 0x53;	//Data
	wr_buf[1] = 0x00;	//Data
   10330:	e03fff45 	stb	zero,-3(fp)
	spirez = alt_avalon_spi_command(FPGA_SPI0_BASE, SPI_NR_EXTADC, 2, wr_buf, 0, NULL, 0);
   10334:	e0bfff04 	addi	r2,fp,-4
   10338:	d8000215 	stw	zero,8(sp)
   1033c:	d8000115 	stw	zero,4(sp)
   10340:	d8000015 	stw	zero,0(sp)
   10344:	100f883a 	mov	r7,r2
   10348:	01800084 	movi	r6,2
   1034c:	01400144 	movi	r5,5
   10350:	01019004 	movi	r4,1600
   10354:	00130c40 	call	130c4 <alt_avalon_spi_command>
   10358:	e0bffe15 	stw	r2,-8(fp)

	// 0x25
	wr_buf[0] = 0x25;	//Address
   1035c:	00800944 	movi	r2,37
   10360:	e0bfff05 	stb	r2,-4(fp)
	wr_buf[1] = 0x04;	//Data
   10364:	00800104 	movi	r2,4
   10368:	e0bfff45 	stb	r2,-3(fp)
	spirez = alt_avalon_spi_command(FPGA_SPI0_BASE, SPI_NR_EXTADC, 2, wr_buf, 0, NULL, 0);
   1036c:	e0bfff04 	addi	r2,fp,-4
   10370:	d8000215 	stw	zero,8(sp)
   10374:	d8000115 	stw	zero,4(sp)
   10378:	d8000015 	stw	zero,0(sp)
   1037c:	100f883a 	mov	r7,r2
   10380:	01800084 	movi	r6,2
   10384:	01400144 	movi	r5,5
   10388:	01019004 	movi	r4,1600
   1038c:	00130c40 	call	130c4 <alt_avalon_spi_command>
   10390:	e0bffe15 	stw	r2,-8(fp)

	// 0x29
	wr_buf[0] = 0x29;	//Address
   10394:	00800a44 	movi	r2,41
   10398:	e0bfff05 	stb	r2,-4(fp)
	wr_buf[1] = 0x00;	//Data
   1039c:	e03fff45 	stb	zero,-3(fp)
	spirez = alt_avalon_spi_command(FPGA_SPI0_BASE, SPI_NR_EXTADC, 2, wr_buf, 0, NULL, 0);
   103a0:	e0bfff04 	addi	r2,fp,-4
   103a4:	d8000215 	stw	zero,8(sp)
   103a8:	d8000115 	stw	zero,4(sp)
   103ac:	d8000015 	stw	zero,0(sp)
   103b0:	100f883a 	mov	r7,r2
   103b4:	01800084 	movi	r6,2
   103b8:	01400144 	movi	r5,5
   103bc:	01019004 	movi	r4,1600
   103c0:	00130c40 	call	130c4 <alt_avalon_spi_command>
   103c4:	e0bffe15 	stw	r2,-8(fp)

	// 0x2B
	wr_buf[0] = 0x2B;	//Address
   103c8:	00800ac4 	movi	r2,43
   103cc:	e0bfff05 	stb	r2,-4(fp)
	wr_buf[1] = 0x04;	//Data
   103d0:	00800104 	movi	r2,4
   103d4:	e0bfff45 	stb	r2,-3(fp)
	spirez = alt_avalon_spi_command(FPGA_SPI0_BASE, SPI_NR_EXTADC, 2, wr_buf, 0, NULL, 0);
   103d8:	e0bfff04 	addi	r2,fp,-4
   103dc:	d8000215 	stw	zero,8(sp)
   103e0:	d8000115 	stw	zero,4(sp)
   103e4:	d8000015 	stw	zero,0(sp)
   103e8:	100f883a 	mov	r7,r2
   103ec:	01800084 	movi	r6,2
   103f0:	01400144 	movi	r5,5
   103f4:	01019004 	movi	r4,1600
   103f8:	00130c40 	call	130c4 <alt_avalon_spi_command>
   103fc:	e0bffe15 	stw	r2,-8(fp)

	// 0x3D
	wr_buf[0] = 0x3D;	//Address
   10400:	00800f44 	movi	r2,61
   10404:	e0bfff05 	stb	r2,-4(fp)
	wr_buf[1] = 0x00;	//Data
   10408:	e03fff45 	stb	zero,-3(fp)
	spirez = alt_avalon_spi_command(FPGA_SPI0_BASE, SPI_NR_EXTADC, 2, wr_buf, 0, NULL, 0);
   1040c:	e0bfff04 	addi	r2,fp,-4
   10410:	d8000215 	stw	zero,8(sp)
   10414:	d8000115 	stw	zero,4(sp)
   10418:	d8000015 	stw	zero,0(sp)
   1041c:	100f883a 	mov	r7,r2
   10420:	01800084 	movi	r6,2
   10424:	01400144 	movi	r5,5
   10428:	01019004 	movi	r4,1600
   1042c:	00130c40 	call	130c4 <alt_avalon_spi_command>
   10430:	e0bffe15 	stw	r2,-8(fp)

	// 0x3F
	wr_buf[0] = 0x3F;	//Address
   10434:	00800fc4 	movi	r2,63
   10438:	e0bfff05 	stb	r2,-4(fp)
	wr_buf[1] = 0x00;	//Data
   1043c:	e03fff45 	stb	zero,-3(fp)
	spirez = alt_avalon_spi_command(FPGA_SPI0_BASE, SPI_NR_EXTADC, 2, wr_buf, 0, NULL, 0);
   10440:	e0bfff04 	addi	r2,fp,-4
   10444:	d8000215 	stw	zero,8(sp)
   10448:	d8000115 	stw	zero,4(sp)
   1044c:	d8000015 	stw	zero,0(sp)
   10450:	100f883a 	mov	r7,r2
   10454:	01800084 	movi	r6,2
   10458:	01400144 	movi	r5,5
   1045c:	01019004 	movi	r4,1600
   10460:	00130c40 	call	130c4 <alt_avalon_spi_command>
   10464:	e0bffe15 	stw	r2,-8(fp)

	// 0x40
	wr_buf[0] = 0x40;	//Address
   10468:	00801004 	movi	r2,64
   1046c:	e0bfff05 	stb	r2,-4(fp)
	wr_buf[1] = 0x00;	//Data
   10470:	e03fff45 	stb	zero,-3(fp)
	spirez = alt_avalon_spi_command(FPGA_SPI0_BASE, SPI_NR_EXTADC, 2, wr_buf, 0, NULL, 0);
   10474:	e0bfff04 	addi	r2,fp,-4
   10478:	d8000215 	stw	zero,8(sp)
   1047c:	d8000115 	stw	zero,4(sp)
   10480:	d8000015 	stw	zero,0(sp)
   10484:	100f883a 	mov	r7,r2
   10488:	01800084 	movi	r6,2
   1048c:	01400144 	movi	r5,5
   10490:	01019004 	movi	r4,1600
   10494:	00130c40 	call	130c4 <alt_avalon_spi_command>
   10498:	e0bffe15 	stw	r2,-8(fp)

	// 0x41
	wr_buf[0] = 0x41;	//Address
   1049c:	00801044 	movi	r2,65
   104a0:	e0bfff05 	stb	r2,-4(fp)
	wr_buf[1] = 0x00;	//Data
   104a4:	e03fff45 	stb	zero,-3(fp)
	spirez = alt_avalon_spi_command(FPGA_SPI0_BASE, SPI_NR_EXTADC, 2, wr_buf, 0, NULL, 0);
   104a8:	e0bfff04 	addi	r2,fp,-4
   104ac:	d8000215 	stw	zero,8(sp)
   104b0:	d8000115 	stw	zero,4(sp)
   104b4:	d8000015 	stw	zero,0(sp)
   104b8:	100f883a 	mov	r7,r2
   104bc:	01800084 	movi	r6,2
   104c0:	01400144 	movi	r5,5
   104c4:	01019004 	movi	r4,1600
   104c8:	00130c40 	call	130c4 <alt_avalon_spi_command>
   104cc:	e0bffe15 	stw	r2,-8(fp)

	// 0x42
	wr_buf[0] = 0x42;	//Address
   104d0:	00801084 	movi	r2,66
   104d4:	e0bfff05 	stb	r2,-4(fp)
	//wr_buf[1] = 0x08;	//Data
	wr_buf[1] = 0x00;	//Data
   104d8:	e03fff45 	stb	zero,-3(fp)
	spirez = alt_avalon_spi_command(FPGA_SPI0_BASE, SPI_NR_EXTADC, 2, wr_buf, 0, NULL, 0);
   104dc:	e0bfff04 	addi	r2,fp,-4
   104e0:	d8000215 	stw	zero,8(sp)
   104e4:	d8000115 	stw	zero,4(sp)
   104e8:	d8000015 	stw	zero,0(sp)
   104ec:	100f883a 	mov	r7,r2
   104f0:	01800084 	movi	r6,2
   104f4:	01400144 	movi	r5,5
   104f8:	01019004 	movi	r4,1600
   104fc:	00130c40 	call	130c4 <alt_avalon_spi_command>
   10500:	e0bffe15 	stw	r2,-8(fp)

	// 0x45
	wr_buf[0] = 0x45;	//Address
   10504:	00801144 	movi	r2,69
   10508:	e0bfff05 	stb	r2,-4(fp)
	wr_buf[1] = 0x00;	//Data
   1050c:	e03fff45 	stb	zero,-3(fp)
	spirez = alt_avalon_spi_command(FPGA_SPI0_BASE, SPI_NR_EXTADC, 2, wr_buf, 0, NULL, 0);
   10510:	e0bfff04 	addi	r2,fp,-4
   10514:	d8000215 	stw	zero,8(sp)
   10518:	d8000115 	stw	zero,4(sp)
   1051c:	d8000015 	stw	zero,0(sp)
   10520:	100f883a 	mov	r7,r2
   10524:	01800084 	movi	r6,2
   10528:	01400144 	movi	r5,5
   1052c:	01019004 	movi	r4,1600
   10530:	00130c40 	call	130c4 <alt_avalon_spi_command>
   10534:	e0bffe15 	stw	r2,-8(fp)

	// 0x4A
	wr_buf[0] = 0x4A;	//Address
   10538:	00801284 	movi	r2,74
   1053c:	e0bfff05 	stb	r2,-4(fp)
	wr_buf[1] = 0x00;	//Data
   10540:	e03fff45 	stb	zero,-3(fp)
	spirez = alt_avalon_spi_command(FPGA_SPI0_BASE, SPI_NR_EXTADC, 2, wr_buf, 0, NULL, 0);
   10544:	e0bfff04 	addi	r2,fp,-4
   10548:	d8000215 	stw	zero,8(sp)
   1054c:	d8000115 	stw	zero,4(sp)
   10550:	d8000015 	stw	zero,0(sp)
   10554:	100f883a 	mov	r7,r2
   10558:	01800084 	movi	r6,2
   1055c:	01400144 	movi	r5,5
   10560:	01019004 	movi	r4,1600
   10564:	00130c40 	call	130c4 <alt_avalon_spi_command>
   10568:	e0bffe15 	stw	r2,-8(fp)

	// 0x58
	wr_buf[0] = 0x58;	//Address
   1056c:	00801604 	movi	r2,88
   10570:	e0bfff05 	stb	r2,-4(fp)
	wr_buf[1] = 0x00;	//Data
   10574:	e03fff45 	stb	zero,-3(fp)
	spirez = alt_avalon_spi_command(FPGA_SPI0_BASE, SPI_NR_EXTADC, 2, wr_buf, 0, NULL, 0);
   10578:	e0bfff04 	addi	r2,fp,-4
   1057c:	d8000215 	stw	zero,8(sp)
   10580:	d8000115 	stw	zero,4(sp)
   10584:	d8000015 	stw	zero,0(sp)
   10588:	100f883a 	mov	r7,r2
   1058c:	01800084 	movi	r6,2
   10590:	01400144 	movi	r5,5
   10594:	01019004 	movi	r4,1600
   10598:	00130c40 	call	130c4 <alt_avalon_spi_command>
   1059c:	e0bffe15 	stw	r2,-8(fp)

	// 0xBF
	wr_buf[0] = 0xBF;	//Address
   105a0:	00bfefc4 	movi	r2,-65
   105a4:	e0bfff05 	stb	r2,-4(fp)
	wr_buf[1] = 0x00;	//Data
   105a8:	e03fff45 	stb	zero,-3(fp)
	spirez = alt_avalon_spi_command(FPGA_SPI0_BASE, SPI_NR_EXTADC, 2, wr_buf, 0, NULL, 0);
   105ac:	e0bfff04 	addi	r2,fp,-4
   105b0:	d8000215 	stw	zero,8(sp)
   105b4:	d8000115 	stw	zero,4(sp)
   105b8:	d8000015 	stw	zero,0(sp)
   105bc:	100f883a 	mov	r7,r2
   105c0:	01800084 	movi	r6,2
   105c4:	01400144 	movi	r5,5
   105c8:	01019004 	movi	r4,1600
   105cc:	00130c40 	call	130c4 <alt_avalon_spi_command>
   105d0:	e0bffe15 	stw	r2,-8(fp)

	// 0xC1
	wr_buf[0] = 0xC1;	//Address
   105d4:	00bff044 	movi	r2,-63
   105d8:	e0bfff05 	stb	r2,-4(fp)
	wr_buf[1] = 0x00;	//Data
   105dc:	e03fff45 	stb	zero,-3(fp)
	spirez = alt_avalon_spi_command(FPGA_SPI0_BASE, SPI_NR_EXTADC, 2, wr_buf, 0, NULL, 0);
   105e0:	e0bfff04 	addi	r2,fp,-4
   105e4:	d8000215 	stw	zero,8(sp)
   105e8:	d8000115 	stw	zero,4(sp)
   105ec:	d8000015 	stw	zero,0(sp)
   105f0:	100f883a 	mov	r7,r2
   105f4:	01800084 	movi	r6,2
   105f8:	01400144 	movi	r5,5
   105fc:	01019004 	movi	r4,1600
   10600:	00130c40 	call	130c4 <alt_avalon_spi_command>
   10604:	e0bffe15 	stw	r2,-8(fp)

	// 0xCF
	wr_buf[0] = 0xCF;	//Address
   10608:	00bff3c4 	movi	r2,-49
   1060c:	e0bfff05 	stb	r2,-4(fp)
	wr_buf[1] = 0x00;	//Data
   10610:	e03fff45 	stb	zero,-3(fp)
	spirez = alt_avalon_spi_command(FPGA_SPI0_BASE, SPI_NR_EXTADC, 2, wr_buf, 0, NULL, 0);
   10614:	e0bfff04 	addi	r2,fp,-4
   10618:	d8000215 	stw	zero,8(sp)
   1061c:	d8000115 	stw	zero,4(sp)
   10620:	d8000015 	stw	zero,0(sp)
   10624:	100f883a 	mov	r7,r2
   10628:	01800084 	movi	r6,2
   1062c:	01400144 	movi	r5,5
   10630:	01019004 	movi	r4,1600
   10634:	00130c40 	call	130c4 <alt_avalon_spi_command>
   10638:	e0bffe15 	stw	r2,-8(fp)

	// 0xDB
	wr_buf[0] = 0xDB;	//Address
   1063c:	00bff6c4 	movi	r2,-37
   10640:	e0bfff05 	stb	r2,-4(fp)
	wr_buf[1] = 0x01;	//Data (0x01 - Low Speed MODE CH B enabled, 0x00 - Low Speed MODE CH B disabled)
   10644:	00800044 	movi	r2,1
   10648:	e0bfff45 	stb	r2,-3(fp)
	spirez = alt_avalon_spi_command(FPGA_SPI0_BASE, SPI_NR_EXTADC, 2, wr_buf, 0, NULL, 0);
   1064c:	e0bfff04 	addi	r2,fp,-4
   10650:	d8000215 	stw	zero,8(sp)
   10654:	d8000115 	stw	zero,4(sp)
   10658:	d8000015 	stw	zero,0(sp)
   1065c:	100f883a 	mov	r7,r2
   10660:	01800084 	movi	r6,2
   10664:	01400144 	movi	r5,5
   10668:	01019004 	movi	r4,1600
   1066c:	00130c40 	call	130c4 <alt_avalon_spi_command>
   10670:	e0bffe15 	stw	r2,-8(fp)

	// 0xEF
	wr_buf[0] = 0xEF;	//Address
   10674:	00bffbc4 	movi	r2,-17
   10678:	e0bfff05 	stb	r2,-4(fp)
	wr_buf[1] = 0x10;	//Data (0x10 - Low Speed MODE enabled, 0x00 - Low Speed MODE disabled)
   1067c:	00800404 	movi	r2,16
   10680:	e0bfff45 	stb	r2,-3(fp)
	spirez = alt_avalon_spi_command(FPGA_SPI0_BASE, SPI_NR_EXTADC, 2, wr_buf, 0, NULL, 0);
   10684:	e0bfff04 	addi	r2,fp,-4
   10688:	d8000215 	stw	zero,8(sp)
   1068c:	d8000115 	stw	zero,4(sp)
   10690:	d8000015 	stw	zero,0(sp)
   10694:	100f883a 	mov	r7,r2
   10698:	01800084 	movi	r6,2
   1069c:	01400144 	movi	r5,5
   106a0:	01019004 	movi	r4,1600
   106a4:	00130c40 	call	130c4 <alt_avalon_spi_command>
   106a8:	e0bffe15 	stw	r2,-8(fp)

	// 0xF1
	wr_buf[0] = 0xF1;	//Address
   106ac:	00bffc44 	movi	r2,-15
   106b0:	e0bfff05 	stb	r2,-4(fp)
	wr_buf[1] = 0x00;	//Data
   106b4:	e03fff45 	stb	zero,-3(fp)
	spirez = alt_avalon_spi_command(FPGA_SPI0_BASE, SPI_NR_EXTADC, 2, wr_buf, 0, NULL, 0);
   106b8:	e0bfff04 	addi	r2,fp,-4
   106bc:	d8000215 	stw	zero,8(sp)
   106c0:	d8000115 	stw	zero,4(sp)
   106c4:	d8000015 	stw	zero,0(sp)
   106c8:	100f883a 	mov	r7,r2
   106cc:	01800084 	movi	r6,2
   106d0:	01400144 	movi	r5,5
   106d4:	01019004 	movi	r4,1600
   106d8:	00130c40 	call	130c4 <alt_avalon_spi_command>
   106dc:	e0bffe15 	stw	r2,-8(fp)

	// 0xF2
	wr_buf[0] = 0xF2;	//Address
   106e0:	00bffc84 	movi	r2,-14
   106e4:	e0bfff05 	stb	r2,-4(fp)
	wr_buf[1] = 0x08;	//Data (0x08 - Low Speed MODE CH A enabled, 0x00 - Low Speed MODE CH A disabled)
   106e8:	00800204 	movi	r2,8
   106ec:	e0bfff45 	stb	r2,-3(fp)
	spirez = alt_avalon_spi_command(FPGA_SPI0_BASE, SPI_NR_EXTADC, 2, wr_buf, 0, NULL, 0);
   106f0:	e0bfff04 	addi	r2,fp,-4
   106f4:	d8000215 	stw	zero,8(sp)
   106f8:	d8000115 	stw	zero,4(sp)
   106fc:	d8000015 	stw	zero,0(sp)
   10700:	100f883a 	mov	r7,r2
   10704:	01800084 	movi	r6,2
   10708:	01400144 	movi	r5,5
   1070c:	01019004 	movi	r4,1600
   10710:	00130c40 	call	130c4 <alt_avalon_spi_command>
   10714:	e0bffe15 	stw	r2,-8(fp)

}
   10718:	0001883a 	nop
   1071c:	e037883a 	mov	sp,fp
   10720:	dfc00117 	ldw	ra,4(sp)
   10724:	df000017 	ldw	fp,0(sp)
   10728:	dec00204 	addi	sp,sp,8
   1072c:	f800283a 	ret

00010730 <Control_TCXO_DAC>:
 *	@brief Function to control DAC for TCXO frequency control
 *	@param oe output enable control: 0 - output disabled, 1 - output enabled
 *	@param data pointer to DAC value (1 byte)
 */
void Control_TCXO_DAC (unsigned char oe, unsigned short int *data) //controls DAC (AD5601)
{
   10730:	defff704 	addi	sp,sp,-36
   10734:	dfc00815 	stw	ra,32(sp)
   10738:	df000715 	stw	fp,28(sp)
   1073c:	df000704 	addi	fp,sp,28
   10740:	2005883a 	mov	r2,r4
   10744:	e17fff15 	stw	r5,-4(fp)
   10748:	e0bffe05 	stb	r2,-8(fp)
	volatile int spirez;
	unsigned char DAC_data[3];

	if (oe == 0) //set DAC out to three-state
   1074c:	e0bffe03 	ldbu	r2,-8(fp)
   10750:	10000f1e 	bne	r2,zero,10790 <Control_TCXO_DAC+0x60>
	{
		DAC_data[0] = 0x03; //POWER-DOWN MODE = THREE-STATE (PD[1:0]([17:16]) = 11)
   10754:	008000c4 	movi	r2,3
   10758:	e0bffd05 	stb	r2,-12(fp)
		DAC_data[1] = 0x00;
   1075c:	e03ffd45 	stb	zero,-11(fp)
		DAC_data[2] = 0x00; //LSB data
   10760:	e03ffd85 	stb	zero,-10(fp)

		spirez = alt_avalon_spi_command(DAC_SPI1_BASE, SPI_NR_TCXO_DAC, 3, DAC_data, 0, NULL, 0);
   10764:	e0bffd04 	addi	r2,fp,-12
   10768:	d8000215 	stw	zero,8(sp)
   1076c:	d8000115 	stw	zero,4(sp)
   10770:	d8000015 	stw	zero,0(sp)
   10774:	100f883a 	mov	r7,r2
   10778:	018000c4 	movi	r6,3
   1077c:	000b883a 	mov	r5,zero
   10780:	01018004 	movi	r4,1536
   10784:	00130c40 	call	130c4 <alt_avalon_spi_command>
   10788:	e0bffc15 	stw	r2,-16(fp)
		DAC_data[1] = ((*data) >>8) & 0xFF;
		DAC_data[2] = ((*data) >>0) & 0xFF;

		spirez = alt_avalon_spi_command(DAC_SPI1_BASE, SPI_NR_TCXO_DAC, 3, DAC_data, 0, NULL, 0);
	}
}
   1078c:	00001306 	br	107dc <Control_TCXO_DAC+0xac>

		spirez = alt_avalon_spi_command(DAC_SPI1_BASE, SPI_NR_TCXO_DAC, 3, DAC_data, 0, NULL, 0);
	}
	else //enable DAC output, set new val
	{
		DAC_data[0] = 0; //POWER-DOWN MODE = NORMAL OPERATION PD[1:0]([17:16]) = 00)
   10790:	e03ffd05 	stb	zero,-12(fp)
		DAC_data[1] = ((*data) >>8) & 0xFF;
   10794:	e0bfff17 	ldw	r2,-4(fp)
   10798:	1080000b 	ldhu	r2,0(r2)
   1079c:	10bfffcc 	andi	r2,r2,65535
   107a0:	1004d23a 	srli	r2,r2,8
   107a4:	e0bffd45 	stb	r2,-11(fp)
		DAC_data[2] = ((*data) >>0) & 0xFF;
   107a8:	e0bfff17 	ldw	r2,-4(fp)
   107ac:	1080000b 	ldhu	r2,0(r2)
   107b0:	e0bffd85 	stb	r2,-10(fp)

		spirez = alt_avalon_spi_command(DAC_SPI1_BASE, SPI_NR_TCXO_DAC, 3, DAC_data, 0, NULL, 0);
   107b4:	e0bffd04 	addi	r2,fp,-12
   107b8:	d8000215 	stw	zero,8(sp)
   107bc:	d8000115 	stw	zero,4(sp)
   107c0:	d8000015 	stw	zero,0(sp)
   107c4:	100f883a 	mov	r7,r2
   107c8:	018000c4 	movi	r6,3
   107cc:	000b883a 	mov	r5,zero
   107d0:	01018004 	movi	r4,1536
   107d4:	00130c40 	call	130c4 <alt_avalon_spi_command>
   107d8:	e0bffc15 	stw	r2,-16(fp)
	}
}
   107dc:	0001883a 	nop
   107e0:	e037883a 	mov	sp,fp
   107e4:	dfc00117 	ldw	ra,4(sp)
   107e8:	df000017 	ldw	fp,0(sp)
   107ec:	dec00204 	addi	sp,sp,8
   107f0:	f800283a 	ret

000107f4 <Control_TCXO_ADF>:
 *	@brief Function to control ADF for TCXO frequency control
 *	@param oe output enable control: 0 - output disabled, 1 - output enabled
 *	@param data pointer to ADF data block (3 bytes)
 */
void Control_TCXO_ADF (unsigned char oe, unsigned char *data) //controls ADF4002
{
   107f4:	defff404 	addi	sp,sp,-48
   107f8:	dfc00b15 	stw	ra,44(sp)
   107fc:	df000a15 	stw	fp,40(sp)
   10800:	df000a04 	addi	fp,sp,40
   10804:	2005883a 	mov	r2,r4
   10808:	e17fff15 	stw	r5,-4(fp)
   1080c:	e0bffe05 	stb	r2,-8(fp)
	volatile int spirez;
	unsigned char ADF_data[12], ADF_block;

	if (oe == 0) //set ADF4002 CP to three-state and MUX_OUT to DGND
   10810:	e0bffe03 	ldbu	r2,-8(fp)
   10814:	10002f1e 	bne	r2,zero,108d4 <Control_TCXO_ADF+0xe0>
	{
		ADF_data[0] = 0x1f;
   10818:	008007c4 	movi	r2,31
   1081c:	e0bffb05 	stb	r2,-20(fp)
		ADF_data[1] = 0x81;
   10820:	00bfe044 	movi	r2,-127
   10824:	e0bffb45 	stb	r2,-19(fp)
		ADF_data[2] = 0xf3;
   10828:	00bffcc4 	movi	r2,-13
   1082c:	e0bffb85 	stb	r2,-18(fp)
		ADF_data[3] = 0x1f;
   10830:	008007c4 	movi	r2,31
   10834:	e0bffbc5 	stb	r2,-17(fp)
		ADF_data[4] = 0x81;
   10838:	00bfe044 	movi	r2,-127
   1083c:	e0bffc05 	stb	r2,-16(fp)
		ADF_data[5] = 0xf2;
   10840:	00bffc84 	movi	r2,-14
   10844:	e0bffc45 	stb	r2,-15(fp)
		ADF_data[6] = 0x00;
   10848:	e03ffc85 	stb	zero,-14(fp)
		ADF_data[7] = 0x01;
   1084c:	00800044 	movi	r2,1
   10850:	e0bffcc5 	stb	r2,-13(fp)
		ADF_data[8] = 0xf4;
   10854:	00bffd04 	movi	r2,-12
   10858:	e0bffd05 	stb	r2,-12(fp)
		ADF_data[9] = 0x01;
   1085c:	00800044 	movi	r2,1
   10860:	e0bffd45 	stb	r2,-11(fp)
		ADF_data[10] = 0x80;
   10864:	00bfe004 	movi	r2,-128
   10868:	e0bffd85 	stb	r2,-10(fp)
		ADF_data[11] = 0x01;
   1086c:	00800044 	movi	r2,1
   10870:	e0bffdc5 	stb	r2,-9(fp)

		//Reconfigure_SPI_for_LMS();

		//write data to ADF
		for(ADF_block = 0; ADF_block < 4; ADF_block++)
   10874:	e03ff905 	stb	zero,-28(fp)
   10878:	00001206 	br	108c4 <Control_TCXO_ADF+0xd0>
		{
			spirez = alt_avalon_spi_command(FPGA_SPI0_BASE, SPI_NR_TCXO_ADF4002, 3, &ADF_data[ADF_block*3], 0, NULL, 0);
   1087c:	e0fff903 	ldbu	r3,-28(fp)
   10880:	1805883a 	mov	r2,r3
   10884:	1085883a 	add	r2,r2,r2
   10888:	10c5883a 	add	r2,r2,r3
   1088c:	e0fffb04 	addi	r3,fp,-20
   10890:	1885883a 	add	r2,r3,r2
   10894:	d8000215 	stw	zero,8(sp)
   10898:	d8000115 	stw	zero,4(sp)
   1089c:	d8000015 	stw	zero,0(sp)
   108a0:	100f883a 	mov	r7,r2
   108a4:	018000c4 	movi	r6,3
   108a8:	01400084 	movi	r5,2
   108ac:	01019004 	movi	r4,1600
   108b0:	00130c40 	call	130c4 <alt_avalon_spi_command>
   108b4:	e0bffa15 	stw	r2,-24(fp)
		ADF_data[11] = 0x01;

		//Reconfigure_SPI_for_LMS();

		//write data to ADF
		for(ADF_block = 0; ADF_block < 4; ADF_block++)
   108b8:	e0bff903 	ldbu	r2,-28(fp)
   108bc:	10800044 	addi	r2,r2,1
   108c0:	e0bff905 	stb	r2,-28(fp)
   108c4:	e0bff903 	ldbu	r2,-28(fp)
   108c8:	10800130 	cmpltui	r2,r2,4
   108cc:	103feb1e 	bne	r2,zero,1087c <_gp+0xffff448c>
	}
	else //set PLL parameters, 4 blocks must be written
	{
		spirez = alt_avalon_spi_command(FPGA_SPI0_BASE, SPI_NR_TCXO_ADF4002, 3, data, 0, NULL, 0);
	}
}
   108d0:	00000906 	br	108f8 <Control_TCXO_ADF+0x104>
			spirez = alt_avalon_spi_command(FPGA_SPI0_BASE, SPI_NR_TCXO_ADF4002, 3, &ADF_data[ADF_block*3], 0, NULL, 0);
		}
	}
	else //set PLL parameters, 4 blocks must be written
	{
		spirez = alt_avalon_spi_command(FPGA_SPI0_BASE, SPI_NR_TCXO_ADF4002, 3, data, 0, NULL, 0);
   108d4:	d8000215 	stw	zero,8(sp)
   108d8:	d8000115 	stw	zero,4(sp)
   108dc:	d8000015 	stw	zero,0(sp)
   108e0:	e1ffff17 	ldw	r7,-4(fp)
   108e4:	018000c4 	movi	r6,3
   108e8:	01400084 	movi	r5,2
   108ec:	01019004 	movi	r4,1600
   108f0:	00130c40 	call	130c4 <alt_avalon_spi_command>
   108f4:	e0bffa15 	stw	r2,-24(fp)
	}
}
   108f8:	0001883a 	nop
   108fc:	e037883a 	mov	sp,fp
   10900:	dfc00117 	ldw	ra,4(sp)
   10904:	df000017 	ldw	fp,0(sp)
   10908:	dec00204 	addi	sp,sp,8
   1090c:	f800283a 	ret

00010910 <change_ADC_tpat>:

void change_ADC_tpat(uint8_t mode)
{
   10910:	defff804 	addi	sp,sp,-32
   10914:	dfc00715 	stw	ra,28(sp)
   10918:	df000615 	stw	fp,24(sp)
   1091c:	df000604 	addi	fp,sp,24
   10920:	2005883a 	mov	r2,r4
   10924:	e0bfff05 	stb	r2,-4(fp)
	uint8_t wr_buf[2];
	int spirez;

	if(mode)
   10928:	e0bfff03 	ldbu	r2,-4(fp)
   1092c:	10000f26 	beq	r2,zero,1096c <change_ADC_tpat+0x5c>
		wr_buf[1] = 0x55;	//Data
		spirez = alt_avalon_spi_command(FPGA_SPI0_BASE, SPI_NR_EXTADC, 2, wr_buf, 0, NULL, 0);
		*/

		// 0x42 Enable Digital functions
		wr_buf[0] = 0x42;	//Address
   10930:	00801084 	movi	r2,66
   10934:	e0bffe05 	stb	r2,-8(fp)
		wr_buf[1] = 0x08;	//Data
   10938:	00800204 	movi	r2,8
   1093c:	e0bffe45 	stb	r2,-7(fp)
		spirez = alt_avalon_spi_command(FPGA_SPI0_BASE, SPI_NR_EXTADC, 2, wr_buf, 0, NULL, 0);
   10940:	e0bffe04 	addi	r2,fp,-8
   10944:	d8000215 	stw	zero,8(sp)
   10948:	d8000115 	stw	zero,4(sp)
   1094c:	d8000015 	stw	zero,0(sp)
   10950:	100f883a 	mov	r7,r2
   10954:	01800084 	movi	r6,2
   10958:	01400144 	movi	r5,5
   1095c:	01019004 	movi	r4,1600
   10960:	00130c40 	call	130c4 <alt_avalon_spi_command>
   10964:	e0bffd15 	stw	r2,-12(fp)
		wr_buf[0] = 0x42;	//Address
		wr_buf[1] = 0x00;	//Data
		spirez = alt_avalon_spi_command(FPGA_SPI0_BASE, SPI_NR_EXTADC, 2, wr_buf, 0, NULL, 0);

	};
}
   10968:	00000d06 	br	109a0 <change_ADC_tpat+0x90>
		wr_buf[1] = 0x00;	//Data
		spirez = alt_avalon_spi_command(FPGA_SPI0_BASE, SPI_NR_EXTADC, 2, wr_buf, 0, NULL, 0);

		*/
		// 0x42 Disable Digital functions
		wr_buf[0] = 0x42;	//Address
   1096c:	00801084 	movi	r2,66
   10970:	e0bffe05 	stb	r2,-8(fp)
		wr_buf[1] = 0x00;	//Data
   10974:	e03ffe45 	stb	zero,-7(fp)
		spirez = alt_avalon_spi_command(FPGA_SPI0_BASE, SPI_NR_EXTADC, 2, wr_buf, 0, NULL, 0);
   10978:	e0bffe04 	addi	r2,fp,-8
   1097c:	d8000215 	stw	zero,8(sp)
   10980:	d8000115 	stw	zero,4(sp)
   10984:	d8000015 	stw	zero,0(sp)
   10988:	100f883a 	mov	r7,r2
   1098c:	01800084 	movi	r6,2
   10990:	01400144 	movi	r5,5
   10994:	01019004 	movi	r4,1600
   10998:	00130c40 	call	130c4 <alt_avalon_spi_command>
   1099c:	e0bffd15 	stw	r2,-12(fp)

	};
}
   109a0:	0001883a 	nop
   109a4:	e037883a 	mov	sp,fp
   109a8:	dfc00117 	ldw	ra,4(sp)
   109ac:	df000017 	ldw	fp,0(sp)
   109b0:	dec00204 	addi	sp,sp,8
   109b4:	f800283a 	ret

000109b8 <GetPLLCFG_Base>:

// Return PLL base address acoording to the PLL index
uint32_t GetPLLCFG_Base(uint8_t ind)
{
   109b8:	defffd04 	addi	sp,sp,-12
   109bc:	df000215 	stw	fp,8(sp)
   109c0:	df000204 	addi	fp,sp,8
   109c4:	2005883a 	mov	r2,r4
   109c8:	e0bfff05 	stb	r2,-4(fp)
	uint32_t PLL_BASE;

	switch ( ind )
   109cc:	e0bfff03 	ldbu	r2,-4(fp)
   109d0:	10c000a0 	cmpeqi	r3,r2,2
   109d4:	18000d1e 	bne	r3,zero,10a0c <GetPLLCFG_Base+0x54>
   109d8:	10c000c8 	cmpgei	r3,r2,3
   109dc:	1800031e 	bne	r3,zero,109ec <GetPLLCFG_Base+0x34>
   109e0:	10800060 	cmpeqi	r2,r2,1
   109e4:	1000061e 	bne	r2,zero,10a00 <GetPLLCFG_Base+0x48>
   109e8:	00001106 	br	10a30 <GetPLLCFG_Base+0x78>
   109ec:	10c000e0 	cmpeqi	r3,r2,3
   109f0:	1800091e 	bne	r3,zero,10a18 <GetPLLCFG_Base+0x60>
   109f4:	10800120 	cmpeqi	r2,r2,4
   109f8:	10000a1e 	bne	r2,zero,10a24 <GetPLLCFG_Base+0x6c>
   109fc:	00000c06 	br	10a30 <GetPLLCFG_Base+0x78>
	{
		case 1:
			PLL_BASE = PLL_RECONFIG_1_BASE;
   10a00:	00804004 	movi	r2,256
   10a04:	e0bffe15 	stw	r2,-8(fp)
	    break;
   10a08:	00000a06 	br	10a34 <GetPLLCFG_Base+0x7c>

		case 2:
			PLL_BASE = PLL_RECONFIG_2_BASE;
   10a0c:	00808004 	movi	r2,512
   10a10:	e0bffe15 	stw	r2,-8(fp)
		break;
   10a14:	00000706 	br	10a34 <GetPLLCFG_Base+0x7c>

		case 3:
			PLL_BASE = PLL_RECONFIG_3_BASE;
   10a18:	0080c004 	movi	r2,768
   10a1c:	e0bffe15 	stw	r2,-8(fp)
		break;
   10a20:	00000406 	br	10a34 <GetPLLCFG_Base+0x7c>

		case 4:
			PLL_BASE = PLL_RECONFIG_4_BASE;
   10a24:	00810004 	movi	r2,1024
   10a28:	e0bffe15 	stw	r2,-8(fp)
	    break;
   10a2c:	00000106 	br	10a34 <GetPLLCFG_Base+0x7c>

		default:
			PLL_BASE = PLL_RECONFIG_0_BASE;
   10a30:	e03ffe15 	stw	zero,-8(fp)
	}

	return PLL_BASE;
   10a34:	e0bffe17 	ldw	r2,-8(fp)
}
   10a38:	e037883a 	mov	sp,fp
   10a3c:	df000017 	ldw	fp,0(sp)
   10a40:	dec00104 	addi	sp,sp,4
   10a44:	f800283a 	ret

00010a48 <UpdatePLLCFG>:

// Updates PLL configuration
uint8_t UpdatePLLCFG(void)
{
   10a48:	deffee04 	addi	sp,sp,-72
   10a4c:	dfc01115 	stw	ra,68(sp)
   10a50:	df001015 	stw	fp,64(sp)
   10a54:	df001004 	addi	fp,sp,64
	int spirez, i;
	tPLL_CFG pll_cfg = {0};
   10a58:	e03ff715 	stw	zero,-36(fp)
   10a5c:	e03ff815 	stw	zero,-32(fp)
   10a60:	e03ff915 	stw	zero,-28(fp)
   10a64:	e03ffa15 	stw	zero,-24(fp)
   10a68:	e03ffb15 	stw	zero,-20(fp)
   10a6c:	e03ffc15 	stw	zero,-16(fp)
   10a70:	e03ffd15 	stw	zero,-12(fp)
   10a74:	e03ffe15 	stw	zero,-8(fp)
	uint32_t PLL_BASE;
	uint16_t div_byp;
	uint8_t pllcfgrez;

	// Read
	wr_buf[0] = 0x00;	// Command and Address
   10a78:	e03fff05 	stb	zero,-4(fp)
	wr_buf[1] = 0x23;	// Command and Address
   10a7c:	008008c4 	movi	r2,35
   10a80:	e0bfff45 	stb	r2,-3(fp)
	spirez = alt_avalon_spi_command(PLLCFG_SPI_BASE, 0, 2, wr_buf, 2, rd_buf, 0);
   10a84:	e0ffff04 	addi	r3,fp,-4
   10a88:	d8000215 	stw	zero,8(sp)
   10a8c:	e0bfff84 	addi	r2,fp,-2
   10a90:	d8800115 	stw	r2,4(sp)
   10a94:	00800084 	movi	r2,2
   10a98:	d8800015 	stw	r2,0(sp)
   10a9c:	180f883a 	mov	r7,r3
   10aa0:	01800084 	movi	r6,2
   10aa4:	000b883a 	mov	r5,zero
   10aa8:	01018804 	movi	r4,1568
   10aac:	00130c40 	call	130c4 <alt_avalon_spi_command>
   10ab0:	e0bff415 	stw	r2,-48(fp)

	// Get PLL base address
	PLL_BASE = GetPLLCFG_Base( PLL_IND(rd_buf[1]) );
   10ab4:	e0bfffc3 	ldbu	r2,-1(fp)
   10ab8:	10803fcc 	andi	r2,r2,255
   10abc:	1004d0fa 	srli	r2,r2,3
   10ac0:	10803fcc 	andi	r2,r2,255
   10ac4:	1009883a 	mov	r4,r2
   10ac8:	00109b80 	call	109b8 <GetPLLCFG_Base>
   10acc:	e0bff515 	stw	r2,-44(fp)

	//Write in Mode Register "0" for wait request mode, "1" for polling mode
	IOWR_32DIRECT(PLL_BASE, MODE, 0x01);
   10ad0:	e0bff517 	ldw	r2,-44(fp)
   10ad4:	00c00044 	movi	r3,1
   10ad8:	10c00035 	stwio	r3,0(r2)


	// Set M_ODDDIV, M_BYP, N_ODDDIV, N_BYP
	wr_buf[0] = 0x00;	// Command and Address
   10adc:	e03fff05 	stb	zero,-4(fp)
	wr_buf[1] = 0x26;	// Command and Address
   10ae0:	00800984 	movi	r2,38
   10ae4:	e0bfff45 	stb	r2,-3(fp)
	spirez = alt_avalon_spi_command(PLLCFG_SPI_BASE, 0, 2, wr_buf, 2, rd_buf, 0);
   10ae8:	e0ffff04 	addi	r3,fp,-4
   10aec:	d8000215 	stw	zero,8(sp)
   10af0:	e0bfff84 	addi	r2,fp,-2
   10af4:	d8800115 	stw	r2,4(sp)
   10af8:	00800084 	movi	r2,2
   10afc:	d8800015 	stw	r2,0(sp)
   10b00:	180f883a 	mov	r7,r3
   10b04:	01800084 	movi	r6,2
   10b08:	000b883a 	mov	r5,zero
   10b0c:	01018804 	movi	r4,1568
   10b10:	00130c40 	call	130c4 <alt_avalon_spi_command>
   10b14:	e0bff415 	stw	r2,-48(fp)
	pll_cfg.N_cnt = N_CNT_DIVBYP(rd_buf[1]); //(rd_buf[0] & 0x03) << 16;
   10b18:	e0bfffc3 	ldbu	r2,-1(fp)
   10b1c:	10803fcc 	andi	r2,r2,255
   10b20:	108000cc 	andi	r2,r2,3
   10b24:	1004943a 	slli	r2,r2,16
   10b28:	e0bff915 	stw	r2,-28(fp)
	pll_cfg.M_cnt = M_CNT_DIVBYP(rd_buf[1]); //(rd_buf[0] & 0x0C) << 14;
   10b2c:	e0bfffc3 	ldbu	r2,-1(fp)
   10b30:	10803fcc 	andi	r2,r2,255
   10b34:	1080030c 	andi	r2,r2,12
   10b38:	100493ba 	slli	r2,r2,14
   10b3c:	e0bff715 	stw	r2,-36(fp)

	// Set N_HCNT[15:8], N_LCNT[7:0]
	wr_buf[0] = 0x00;	// Command and Address
   10b40:	e03fff05 	stb	zero,-4(fp)
	wr_buf[1] = 0x2A;	// Command and Address
   10b44:	00800a84 	movi	r2,42
   10b48:	e0bfff45 	stb	r2,-3(fp)
	spirez = alt_avalon_spi_command(PLLCFG_SPI_BASE, 0, 2, wr_buf, 2, rd_buf, 0);
   10b4c:	e0ffff04 	addi	r3,fp,-4
   10b50:	d8000215 	stw	zero,8(sp)
   10b54:	e0bfff84 	addi	r2,fp,-2
   10b58:	d8800115 	stw	r2,4(sp)
   10b5c:	00800084 	movi	r2,2
   10b60:	d8800015 	stw	r2,0(sp)
   10b64:	180f883a 	mov	r7,r3
   10b68:	01800084 	movi	r6,2
   10b6c:	000b883a 	mov	r5,zero
   10b70:	01018804 	movi	r4,1568
   10b74:	00130c40 	call	130c4 <alt_avalon_spi_command>
   10b78:	e0bff415 	stw	r2,-48(fp)
	pll_cfg.N_cnt = pll_cfg.N_cnt | N_CNT(rd_buf[0], rd_buf[1]); //pll_cfg.N_cnt | (rd_buf[1] << 8) | rd_buf[0];
   10b7c:	e0bff917 	ldw	r2,-28(fp)
   10b80:	e0ffff83 	ldbu	r3,-2(fp)
   10b84:	18c03fcc 	andi	r3,r3,255
   10b88:	1808923a 	slli	r4,r3,8
   10b8c:	e0ffffc3 	ldbu	r3,-1(fp)
   10b90:	18c03fcc 	andi	r3,r3,255
   10b94:	20c6b03a 	or	r3,r4,r3
   10b98:	10c4b03a 	or	r2,r2,r3
   10b9c:	e0bff915 	stw	r2,-28(fp)

	// Set M_HCNT[15:8], M_LCNT[7:0]
	wr_buf[0] = 0x00;	// Command and Address
   10ba0:	e03fff05 	stb	zero,-4(fp)
	wr_buf[1] = 0x2B;	// Command and Address
   10ba4:	00800ac4 	movi	r2,43
   10ba8:	e0bfff45 	stb	r2,-3(fp)
	spirez = alt_avalon_spi_command(PLLCFG_SPI_BASE, 0, 2, wr_buf, 2, rd_buf, 0);
   10bac:	e0ffff04 	addi	r3,fp,-4
   10bb0:	d8000215 	stw	zero,8(sp)
   10bb4:	e0bfff84 	addi	r2,fp,-2
   10bb8:	d8800115 	stw	r2,4(sp)
   10bbc:	00800084 	movi	r2,2
   10bc0:	d8800015 	stw	r2,0(sp)
   10bc4:	180f883a 	mov	r7,r3
   10bc8:	01800084 	movi	r6,2
   10bcc:	000b883a 	mov	r5,zero
   10bd0:	01018804 	movi	r4,1568
   10bd4:	00130c40 	call	130c4 <alt_avalon_spi_command>
   10bd8:	e0bff415 	stw	r2,-48(fp)
	pll_cfg.M_cnt = pll_cfg.M_cnt | M_CNT(rd_buf[0], rd_buf[1]); //pll_cfg.M_cnt | (rd_buf[1] << 8) | rd_buf[0];
   10bdc:	e0bff717 	ldw	r2,-36(fp)
   10be0:	e0ffff83 	ldbu	r3,-2(fp)
   10be4:	18c03fcc 	andi	r3,r3,255
   10be8:	1808923a 	slli	r4,r3,8
   10bec:	e0ffffc3 	ldbu	r3,-1(fp)
   10bf0:	18c03fcc 	andi	r3,r3,255
   10bf4:	20c6b03a 	or	r3,r4,r3
   10bf8:	10c4b03a 	or	r2,r2,r3
   10bfc:	e0bff715 	stw	r2,-36(fp)

	// Set M_FRAC[15:0]
	wr_buf[0] = 0x00;	// Command and Address
   10c00:	e03fff05 	stb	zero,-4(fp)
	wr_buf[1] = 0x2C;	// Command and Address
   10c04:	00800b04 	movi	r2,44
   10c08:	e0bfff45 	stb	r2,-3(fp)
	spirez = alt_avalon_spi_command(PLLCFG_SPI_BASE, 0, 2, wr_buf, 2, rd_buf, 0);
   10c0c:	e0ffff04 	addi	r3,fp,-4
   10c10:	d8000215 	stw	zero,8(sp)
   10c14:	e0bfff84 	addi	r2,fp,-2
   10c18:	d8800115 	stw	r2,4(sp)
   10c1c:	00800084 	movi	r2,2
   10c20:	d8800015 	stw	r2,0(sp)
   10c24:	180f883a 	mov	r7,r3
   10c28:	01800084 	movi	r6,2
   10c2c:	000b883a 	mov	r5,zero
   10c30:	01018804 	movi	r4,1568
   10c34:	00130c40 	call	130c4 <alt_avalon_spi_command>
   10c38:	e0bff415 	stw	r2,-48(fp)
	pll_cfg.MFrac_cnt = MFRAC_CNT_LSB(rd_buf[0], rd_buf[1]); //(rd_buf[1] << 8) | rd_buf[0];
   10c3c:	e0bfff83 	ldbu	r2,-2(fp)
   10c40:	10803fcc 	andi	r2,r2,255
   10c44:	1006923a 	slli	r3,r2,8
   10c48:	e0bfffc3 	ldbu	r2,-1(fp)
   10c4c:	10803fcc 	andi	r2,r2,255
   10c50:	1884b03a 	or	r2,r3,r2
   10c54:	e0bff815 	stw	r2,-32(fp)

	// Set M_FRAC[31:16]
	wr_buf[0] = 0x00;	// Command and Address
   10c58:	e03fff05 	stb	zero,-4(fp)
	wr_buf[1] = 0x2D;	// Command and Address
   10c5c:	00800b44 	movi	r2,45
   10c60:	e0bfff45 	stb	r2,-3(fp)
	spirez = alt_avalon_spi_command(PLLCFG_SPI_BASE, 0, 2, wr_buf, 2, rd_buf, 0);
   10c64:	e0ffff04 	addi	r3,fp,-4
   10c68:	d8000215 	stw	zero,8(sp)
   10c6c:	e0bfff84 	addi	r2,fp,-2
   10c70:	d8800115 	stw	r2,4(sp)
   10c74:	00800084 	movi	r2,2
   10c78:	d8800015 	stw	r2,0(sp)
   10c7c:	180f883a 	mov	r7,r3
   10c80:	01800084 	movi	r6,2
   10c84:	000b883a 	mov	r5,zero
   10c88:	01018804 	movi	r4,1568
   10c8c:	00130c40 	call	130c4 <alt_avalon_spi_command>
   10c90:	e0bff415 	stw	r2,-48(fp)
	pll_cfg.MFrac_cnt = pll_cfg.MFrac_cnt | MFRAC_CNT_MSB(rd_buf[0], rd_buf[1]); //pll_cfg.MFrac_cnt | ( ((rd_buf[1] << 8) | rd_buf[0]) << 16 );
   10c94:	e0bff817 	ldw	r2,-32(fp)
   10c98:	e0ffff83 	ldbu	r3,-2(fp)
   10c9c:	18c03fcc 	andi	r3,r3,255
   10ca0:	1808923a 	slli	r4,r3,8
   10ca4:	e0ffffc3 	ldbu	r3,-1(fp)
   10ca8:	18c03fcc 	andi	r3,r3,255
   10cac:	20c6b03a 	or	r3,r4,r3
   10cb0:	1806943a 	slli	r3,r3,16
   10cb4:	10c4b03a 	or	r2,r2,r3
   10cb8:	e0bff815 	stw	r2,-32(fp)

	// Set PLLCFG_BS[3:0] (for Cyclone V), CHP_CURR[2:0], PLLCFG_VCODIV
	wr_buf[0] = 0x00;	// Command and Address
   10cbc:	e03fff05 	stb	zero,-4(fp)
	wr_buf[1] = 0x25;	// Command and Address
   10cc0:	00800944 	movi	r2,37
   10cc4:	e0bfff45 	stb	r2,-3(fp)
	spirez = alt_avalon_spi_command(PLLCFG_SPI_BASE, 0, 2, wr_buf, 2, rd_buf, 0);
   10cc8:	e0ffff04 	addi	r3,fp,-4
   10ccc:	d8000215 	stw	zero,8(sp)
   10cd0:	e0bfff84 	addi	r2,fp,-2
   10cd4:	d8800115 	stw	r2,4(sp)
   10cd8:	00800084 	movi	r2,2
   10cdc:	d8800015 	stw	r2,0(sp)
   10ce0:	180f883a 	mov	r7,r3
   10ce4:	01800084 	movi	r6,2
   10ce8:	000b883a 	mov	r5,zero
   10cec:	01018804 	movi	r4,1568
   10cf0:	00130c40 	call	130c4 <alt_avalon_spi_command>
   10cf4:	e0bff415 	stw	r2,-48(fp)
	pll_cfg.BS_cnt = BS_CNT(rd_buf[0]); //(rd_buf[1] >> 3) & 0x0F;
   10cf8:	e0bfff83 	ldbu	r2,-2(fp)
   10cfc:	10803fcc 	andi	r2,r2,255
   10d00:	1004d0fa 	srli	r2,r2,3
   10d04:	10803fcc 	andi	r2,r2,255
   10d08:	108003cc 	andi	r2,r2,15
   10d0c:	e0bffc15 	stw	r2,-16(fp)
	pll_cfg.CPS_cnt = CPS_CNT(rd_buf[0]); //rd_buf[1] & 0x07;
   10d10:	e0bfff83 	ldbu	r2,-2(fp)
   10d14:	10803fcc 	andi	r2,r2,255
   10d18:	108001cc 	andi	r2,r2,7
   10d1c:	e0bffd15 	stw	r2,-12(fp)
	pll_cfg.VCO_div = VCO_DIVSEL(rd_buf[1]); //(rd_buf[0] >> 7) & 0x01;
   10d20:	e0bfffc3 	ldbu	r2,-1(fp)
   10d24:	10803fcc 	andi	r2,r2,255
   10d28:	1004d1fa 	srli	r2,r2,7
   10d2c:	10803fcc 	andi	r2,r2,255
   10d30:	1080004c 	andi	r2,r2,1
   10d34:	e0bffe15 	stw	r2,-8(fp)


	// Update PLL configuration;
	pllcfgrez = set_pll_config(PLL_BASE, &pll_cfg);
   10d38:	e0bff704 	addi	r2,fp,-36
   10d3c:	100b883a 	mov	r5,r2
   10d40:	e13ff517 	ldw	r4,-44(fp)
   10d44:	00128c80 	call	128c8 <set_pll_config>
   10d48:	e0bff605 	stb	r2,-40(fp)
	if(pllcfgrez) return pllcfgrez;
   10d4c:	e0bff603 	ldbu	r2,-40(fp)
   10d50:	10000226 	beq	r2,zero,10d5c <UpdatePLLCFG+0x314>
   10d54:	e0bff603 	ldbu	r2,-40(fp)
   10d58:	00004e06 	br	10e94 <UpdatePLLCFG+0x44c>


	//// Set Cx counters (first eight for now)

	// Read ODDDIV and BYP values for first 8 counters
	wr_buf[0] = 0x00;	// Command and Address
   10d5c:	e03fff05 	stb	zero,-4(fp)
	wr_buf[1] = 0x27;	// Command and Address
   10d60:	008009c4 	movi	r2,39
   10d64:	e0bfff45 	stb	r2,-3(fp)
	spirez = alt_avalon_spi_command(PLLCFG_SPI_BASE, 0, 2, wr_buf, 2, rd_buf, 0);
   10d68:	e0ffff04 	addi	r3,fp,-4
   10d6c:	d8000215 	stw	zero,8(sp)
   10d70:	e0bfff84 	addi	r2,fp,-2
   10d74:	d8800115 	stw	r2,4(sp)
   10d78:	00800084 	movi	r2,2
   10d7c:	d8800015 	stw	r2,0(sp)
   10d80:	180f883a 	mov	r7,r3
   10d84:	01800084 	movi	r6,2
   10d88:	000b883a 	mov	r5,zero
   10d8c:	01018804 	movi	r4,1568
   10d90:	00130c40 	call	130c4 <alt_avalon_spi_command>
   10d94:	e0bff415 	stw	r2,-48(fp)
	div_byp = CX_DIVBYP(rd_buf[0], rd_buf[1]); //(rd_buf[1] << 8) | rd_buf[0];
   10d98:	e0bfff83 	ldbu	r2,-2(fp)
   10d9c:	10803fcc 	andi	r2,r2,255
   10da0:	1004923a 	slli	r2,r2,8
   10da4:	1007883a 	mov	r3,r2
   10da8:	e0bfffc3 	ldbu	r2,-1(fp)
   10dac:	10803fcc 	andi	r2,r2,255
   10db0:	1884b03a 	or	r2,r3,r2
   10db4:	e0bff68d 	sth	r2,-38(fp)


	for(i=0; i<8; i++)
   10db8:	e03ff315 	stw	zero,-52(fp)
   10dbc:	00002d06 	br	10e74 <UpdatePLLCFG+0x42c>
	{
		// Read Cx value
		wr_buf[0] = 0x00;	// Command and Address
   10dc0:	e03fff05 	stb	zero,-4(fp)
		wr_buf[1] = 0x2E + i;	// Command and Address
   10dc4:	e0bff317 	ldw	r2,-52(fp)
   10dc8:	10800b84 	addi	r2,r2,46
   10dcc:	e0bfff45 	stb	r2,-3(fp)
		spirez = alt_avalon_spi_command(PLLCFG_SPI_BASE, 0, 2, wr_buf, 2, rd_buf, 0);
   10dd0:	e0ffff04 	addi	r3,fp,-4
   10dd4:	d8000215 	stw	zero,8(sp)
   10dd8:	e0bfff84 	addi	r2,fp,-2
   10ddc:	d8800115 	stw	r2,4(sp)
   10de0:	00800084 	movi	r2,2
   10de4:	d8800015 	stw	r2,0(sp)
   10de8:	180f883a 	mov	r7,r3
   10dec:	01800084 	movi	r6,2
   10df0:	000b883a 	mov	r5,zero
   10df4:	01018804 	movi	r4,1568
   10df8:	00130c40 	call	130c4 <alt_avalon_spi_command>
   10dfc:	e0bff415 	stw	r2,-48(fp)
		pll_cfg.C_cnt = (i << 18) | ( ((div_byp >> 2*i) & 0x03) << 16 ) | C_CNT(rd_buf[0], rd_buf[1]); //(rd_buf[1] << 8) | rd_buf[0];
   10e00:	e0bff317 	ldw	r2,-52(fp)
   10e04:	100694ba 	slli	r3,r2,18
   10e08:	e13ff68b 	ldhu	r4,-38(fp)
   10e0c:	e0bff317 	ldw	r2,-52(fp)
   10e10:	1085883a 	add	r2,r2,r2
   10e14:	2085d83a 	sra	r2,r4,r2
   10e18:	108000cc 	andi	r2,r2,3
   10e1c:	1004943a 	slli	r2,r2,16
   10e20:	1886b03a 	or	r3,r3,r2
   10e24:	e0bfff83 	ldbu	r2,-2(fp)
   10e28:	10803fcc 	andi	r2,r2,255
   10e2c:	1008923a 	slli	r4,r2,8
   10e30:	e0bfffc3 	ldbu	r2,-1(fp)
   10e34:	10803fcc 	andi	r2,r2,255
   10e38:	2084b03a 	or	r2,r4,r2
   10e3c:	1884b03a 	or	r2,r3,r2
   10e40:	e0bffa15 	stw	r2,-24(fp)

		// Set Cx register
		pllcfgrez = set_CxCnt(PLL_BASE, pll_cfg.C_cnt);
   10e44:	e0bffa17 	ldw	r2,-24(fp)
   10e48:	100b883a 	mov	r5,r2
   10e4c:	e13ff517 	ldw	r4,-44(fp)
   10e50:	00129500 	call	12950 <set_CxCnt>
   10e54:	e0bff605 	stb	r2,-40(fp)
		if(pllcfgrez) return pllcfgrez;
   10e58:	e0bff603 	ldbu	r2,-40(fp)
   10e5c:	10000226 	beq	r2,zero,10e68 <UpdatePLLCFG+0x420>
   10e60:	e0bff603 	ldbu	r2,-40(fp)
   10e64:	00000b06 	br	10e94 <UpdatePLLCFG+0x44c>
	wr_buf[1] = 0x27;	// Command and Address
	spirez = alt_avalon_spi_command(PLLCFG_SPI_BASE, 0, 2, wr_buf, 2, rd_buf, 0);
	div_byp = CX_DIVBYP(rd_buf[0], rd_buf[1]); //(rd_buf[1] << 8) | rd_buf[0];


	for(i=0; i<8; i++)
   10e68:	e0bff317 	ldw	r2,-52(fp)
   10e6c:	10800044 	addi	r2,r2,1
   10e70:	e0bff315 	stw	r2,-52(fp)
   10e74:	e0bff317 	ldw	r2,-52(fp)
   10e78:	10800210 	cmplti	r2,r2,8
   10e7c:	103fd01e 	bne	r2,zero,10dc0 <_gp+0xffff49d0>
		//set_Phase(PLL_BASE, i, 0, 1);
		//if(pllcfgrez) return pllcfgrez;
	}

	// Apply PLL configuration
	pllcfgrez = start_Reconfig(PLL_BASE);
   10e80:	e13ff517 	ldw	r4,-44(fp)
   10e84:	0012a080 	call	12a08 <start_Reconfig>
   10e88:	e0bff605 	stb	r2,-40(fp)

	ResetPLL();
   10e8c:	0010fd80 	call	10fd8 <ResetPLL>

	return pllcfgrez;
   10e90:	e0bff603 	ldbu	r2,-40(fp)

}
   10e94:	e037883a 	mov	sp,fp
   10e98:	dfc00117 	ldw	ra,4(sp)
   10e9c:	df000017 	ldw	fp,0(sp)
   10ea0:	dec00204 	addi	sp,sp,8
   10ea4:	f800283a 	ret

00010ea8 <UpdatePHCFG>:

// Change PLL phase
uint8_t UpdatePHCFG(void)
{
   10ea8:	defff404 	addi	sp,sp,-48
   10eac:	dfc00b15 	stw	ra,44(sp)
   10eb0:	df000a15 	stw	fp,40(sp)
   10eb4:	df000a04 	addi	fp,sp,40
	uint8_t rd_buf[2];
	int spirez;
	uint8_t pllcfgrez;

	// Read
	wr_buf[0] = 0x00;	// Command and Address
   10eb8:	e03ffe45 	stb	zero,-7(fp)
	wr_buf[1] = 0x23;	// Command and Address
   10ebc:	008008c4 	movi	r2,35
   10ec0:	e0bffe85 	stb	r2,-6(fp)
	spirez = alt_avalon_spi_command(PLLCFG_SPI_BASE, 0, 2, wr_buf, 2, rd_buf, 0);
   10ec4:	e0fffe44 	addi	r3,fp,-7
   10ec8:	d8000215 	stw	zero,8(sp)
   10ecc:	e0bffec4 	addi	r2,fp,-5
   10ed0:	d8800115 	stw	r2,4(sp)
   10ed4:	00800084 	movi	r2,2
   10ed8:	d8800015 	stw	r2,0(sp)
   10edc:	180f883a 	mov	r7,r3
   10ee0:	01800084 	movi	r6,2
   10ee4:	000b883a 	mov	r5,zero
   10ee8:	01018804 	movi	r4,1568
   10eec:	00130c40 	call	130c4 <alt_avalon_spi_command>
   10ef0:	e0bff915 	stw	r2,-28(fp)

	// Get PLL base address
	PLL_BASE = GetPLLCFG_Base( PLL_IND(rd_buf[1]) );
   10ef4:	e0bfff03 	ldbu	r2,-4(fp)
   10ef8:	10803fcc 	andi	r2,r2,255
   10efc:	1004d0fa 	srli	r2,r2,3
   10f00:	10803fcc 	andi	r2,r2,255
   10f04:	1009883a 	mov	r4,r2
   10f08:	00109b80 	call	109b8 <GetPLLCFG_Base>
   10f0c:	e0bffa15 	stw	r2,-24(fp)

	//Write in Mode Register "0" for waitrequest mode, "1" for polling mode
	IOWR_32DIRECT(PLL_BASE, MODE, 0x01);
   10f10:	e0bffa17 	ldw	r2,-24(fp)
   10f14:	00c00044 	movi	r3,1
   10f18:	10c00035 	stwio	r3,0(r2)

	// Set Up/Down
	Dir = PH_DIR(rd_buf[0]); //(rd_buf[1] >> 5) & 0x01;
   10f1c:	e0bffec3 	ldbu	r2,-5(fp)
   10f20:	10803fcc 	andi	r2,r2,255
   10f24:	1004d17a 	srli	r2,r2,5
   10f28:	10803fcc 	andi	r2,r2,255
   10f2c:	1080004c 	andi	r2,r2,1
   10f30:	e0bffb15 	stw	r2,-20(fp)

	// Set Cx
	Cx = CX_IND(rd_buf[0]) - 2; //(rd_buf[1] & 0x1F);
   10f34:	e0bffec3 	ldbu	r2,-5(fp)
   10f38:	10803fcc 	andi	r2,r2,255
   10f3c:	108007cc 	andi	r2,r2,31
   10f40:	10bfff84 	addi	r2,r2,-2
   10f44:	e0bffc15 	stw	r2,-16(fp)

	// Set Phase Cnt
	wr_buf[0] = 0x00;	// Command and Address
   10f48:	e03ffe45 	stb	zero,-7(fp)
	wr_buf[1] = 0x24;	// Command and Address
   10f4c:	00800904 	movi	r2,36
   10f50:	e0bffe85 	stb	r2,-6(fp)
	spirez = alt_avalon_spi_command(PLLCFG_SPI_BASE, 0, 2, wr_buf, 2, rd_buf, 0);
   10f54:	e0fffe44 	addi	r3,fp,-7
   10f58:	d8000215 	stw	zero,8(sp)
   10f5c:	e0bffec4 	addi	r2,fp,-5
   10f60:	d8800115 	stw	r2,4(sp)
   10f64:	00800084 	movi	r2,2
   10f68:	d8800015 	stw	r2,0(sp)
   10f6c:	180f883a 	mov	r7,r3
   10f70:	01800084 	movi	r6,2
   10f74:	000b883a 	mov	r5,zero
   10f78:	01018804 	movi	r4,1568
   10f7c:	00130c40 	call	130c4 <alt_avalon_spi_command>
   10f80:	e0bff915 	stw	r2,-28(fp)
	Val = CX_PHASE(rd_buf[0], rd_buf[1]); //(rd_buf[1] << 8) | rd_buf[0];
   10f84:	e0bffec3 	ldbu	r2,-5(fp)
   10f88:	10803fcc 	andi	r2,r2,255
   10f8c:	1006923a 	slli	r3,r2,8
   10f90:	e0bfff03 	ldbu	r2,-4(fp)
   10f94:	10803fcc 	andi	r2,r2,255
   10f98:	1884b03a 	or	r2,r3,r2
   10f9c:	e0bffd15 	stw	r2,-12(fp)

	// Set Phase shift register
	set_Phase(PLL_BASE, Cx, Val, Dir);
   10fa0:	e1fffb17 	ldw	r7,-20(fp)
   10fa4:	e1bffd17 	ldw	r6,-12(fp)
   10fa8:	e17ffc17 	ldw	r5,-16(fp)
   10fac:	e13ffa17 	ldw	r4,-24(fp)
   10fb0:	001298c0 	call	1298c <set_Phase>
	// Apply PLL configuration
	pllcfgrez = start_Reconfig(PLL_BASE);
   10fb4:	e13ffa17 	ldw	r4,-24(fp)
   10fb8:	0012a080 	call	12a08 <start_Reconfig>
   10fbc:	e0bffe05 	stb	r2,-8(fp)
	return pllcfgrez;
   10fc0:	e0bffe03 	ldbu	r2,-8(fp)
}
   10fc4:	e037883a 	mov	sp,fp
   10fc8:	dfc00117 	ldw	ra,4(sp)
   10fcc:	df000017 	ldw	fp,0(sp)
   10fd0:	dec00204 	addi	sp,sp,8
   10fd4:	f800283a 	ret

00010fd8 <ResetPLL>:

//
void ResetPLL(void)
{
   10fd8:	defff804 	addi	sp,sp,-32
   10fdc:	dfc00715 	stw	ra,28(sp)
   10fe0:	df000615 	stw	fp,24(sp)
   10fe4:	df000604 	addi	fp,sp,24
	uint8_t wr_buf[2];
	uint8_t rd_buf[2];
	int pll_ind, spirez;

	// Read
	wr_buf[0] = 0x00;	// Command and Address
   10fe8:	e03fff05 	stb	zero,-4(fp)
	wr_buf[1] = 0x23;	// Command and Address
   10fec:	008008c4 	movi	r2,35
   10ff0:	e0bfff45 	stb	r2,-3(fp)
	spirez = alt_avalon_spi_command(PLLCFG_SPI_BASE, 0, 2, wr_buf, 2, rd_buf, 0);
   10ff4:	e0ffff04 	addi	r3,fp,-4
   10ff8:	d8000215 	stw	zero,8(sp)
   10ffc:	e0bfff84 	addi	r2,fp,-2
   11000:	d8800115 	stw	r2,4(sp)
   11004:	00800084 	movi	r2,2
   11008:	d8800015 	stw	r2,0(sp)
   1100c:	180f883a 	mov	r7,r3
   11010:	01800084 	movi	r6,2
   11014:	000b883a 	mov	r5,zero
   11018:	01018804 	movi	r4,1568
   1101c:	00130c40 	call	130c4 <alt_avalon_spi_command>
   11020:	e0bffd15 	stw	r2,-12(fp)

	// Get PLL index
	pll_ind = PLL_IND(rd_buf[1]); //(rd_buf[0] >> 3) & 0x3F;
   11024:	e0bfffc3 	ldbu	r2,-1(fp)
   11028:	10803fcc 	andi	r2,r2,255
   1102c:	1004d0fa 	srli	r2,r2,3
   11030:	10803fcc 	andi	r2,r2,255
   11034:	108007cc 	andi	r2,r2,31
   11038:	e0bffe15 	stw	r2,-8(fp)

	// Toggle reset line of appropriate PLL
    IOWR(PLL_RST_BASE, 0x00, 0x01 << pll_ind);	//Set to 1
   1103c:	00c00044 	movi	r3,1
   11040:	e0bffe17 	ldw	r2,-8(fp)
   11044:	1886983a 	sll	r3,r3,r2
   11048:	0081a004 	movi	r2,1664
   1104c:	10c00035 	stwio	r3,0(r2)
    asm("nop"); asm("nop");
   11050:	0001883a 	nop
   11054:	0001883a 	nop
    IOWR(PLL_RST_BASE, 0x00, 0x00);	//Set to 0
   11058:	0007883a 	mov	r3,zero
   1105c:	0081a004 	movi	r2,1664
   11060:	10c00035 	stwio	r3,0(r2)
}
   11064:	0001883a 	nop
   11068:	e037883a 	mov	sp,fp
   1106c:	dfc00117 	ldw	ra,4(sp)
   11070:	df000017 	ldw	fp,0(sp)
   11074:	dec00204 	addi	sp,sp,8
   11078:	f800283a 	ret

0001107c <Modify_BRDSPI16_Reg_bits>:
 *	@param SPI_reg_addr register address
 *	@param MSB_bit MSB bit of range that will be modified
 *	@param LSB_bit LSB bit of range that will be modified
 */
void Modify_BRDSPI16_Reg_bits (unsigned short int SPI_reg_addr, unsigned char MSB_bit, unsigned char LSB_bit, unsigned short int new_bits_data)
{
   1107c:	defff304 	addi	sp,sp,-52
   11080:	dfc00c15 	stw	ra,48(sp)
   11084:	df000b15 	stw	fp,44(sp)
   11088:	df000b04 	addi	fp,sp,44
   1108c:	2011883a 	mov	r8,r4
   11090:	2809883a 	mov	r4,r5
   11094:	3007883a 	mov	r3,r6
   11098:	3805883a 	mov	r2,r7
   1109c:	e23ffc0d 	sth	r8,-16(fp)
   110a0:	e13ffd05 	stb	r4,-12(fp)
   110a4:	e0fffe05 	stb	r3,-8(fp)
   110a8:	e0bfff0d 	sth	r2,-4(fp)
	unsigned char RdBuff[2];
	int spirez;

	//**Reconfigure_SPI_for_LMS();

	bits_number = MSB_bit - LSB_bit + 1;
   110ac:	e0fffd03 	ldbu	r3,-12(fp)
   110b0:	e0bffe03 	ldbu	r2,-8(fp)
   110b4:	1885c83a 	sub	r2,r3,r2
   110b8:	10800044 	addi	r2,r2,1
   110bc:	e0bff805 	stb	r2,-32(fp)

	mask = 0xFFFF;
   110c0:	00bfffc4 	movi	r2,-1
   110c4:	e0bff88d 	sth	r2,-30(fp)

	//removing unnecessary bits from mask
	mask = mask << (16 - bits_number);
   110c8:	e0fff88b 	ldhu	r3,-30(fp)
   110cc:	e0bff803 	ldbu	r2,-32(fp)
   110d0:	01000404 	movi	r4,16
   110d4:	2085c83a 	sub	r2,r4,r2
   110d8:	1884983a 	sll	r2,r3,r2
   110dc:	e0bff88d 	sth	r2,-30(fp)
	mask = mask >> (16 - bits_number);
   110e0:	e0fff88b 	ldhu	r3,-30(fp)
   110e4:	e0bff803 	ldbu	r2,-32(fp)
   110e8:	01000404 	movi	r4,16
   110ec:	2085c83a 	sub	r2,r4,r2
   110f0:	1885d83a 	sra	r2,r3,r2
   110f4:	e0bff88d 	sth	r2,-30(fp)

	new_bits_data &= mask; //mask new data
   110f8:	e0ffff0b 	ldhu	r3,-4(fp)
   110fc:	e0bff88b 	ldhu	r2,-30(fp)
   11100:	1884703a 	and	r2,r3,r2
   11104:	e0bfff0d 	sth	r2,-4(fp)

	new_bits_data = new_bits_data << LSB_bit; //shift new data
   11108:	e0ffff0b 	ldhu	r3,-4(fp)
   1110c:	e0bffe03 	ldbu	r2,-8(fp)
   11110:	1884983a 	sll	r2,r3,r2
   11114:	e0bfff0d 	sth	r2,-4(fp)

	mask = mask << LSB_bit; //shift mask
   11118:	e0fff88b 	ldhu	r3,-30(fp)
   1111c:	e0bffe03 	ldbu	r2,-8(fp)
   11120:	1884983a 	sll	r2,r3,r2
   11124:	e0bff88d 	sth	r2,-30(fp)
	mask =~ mask;//invert mask
   11128:	e0bff88b 	ldhu	r2,-30(fp)
   1112c:	0084303a 	nor	r2,zero,r2
   11130:	e0bff88d 	sth	r2,-30(fp)

	// Read original data
	WrBuff[0] = (SPI_reg_addr >> 8 ) & 0xFF; //MSB_byte
   11134:	e0bffc0b 	ldhu	r2,-16(fp)
   11138:	1004d23a 	srli	r2,r2,8
   1113c:	e0bffa85 	stb	r2,-22(fp)
	WrBuff[1] = SPI_reg_addr & 0xFF; //LSB_byte
   11140:	e0bffc0b 	ldhu	r2,-16(fp)
   11144:	e0bffac5 	stb	r2,-21(fp)
	cbi(WrBuff[0], 7);  //clear write bit
   11148:	e0bffa83 	ldbu	r2,-22(fp)
   1114c:	10801fcc 	andi	r2,r2,127
   11150:	e0bffa85 	stb	r2,-22(fp)
	spirez = alt_avalon_spi_command(FPGA_SPI0_BASE, SPI_NR_FPGA, 2, WrBuff, 2, RdBuff, 0);
   11154:	e0fffa84 	addi	r3,fp,-22
   11158:	d8000215 	stw	zero,8(sp)
   1115c:	e0bffb84 	addi	r2,fp,-18
   11160:	d8800115 	stw	r2,4(sp)
   11164:	00800084 	movi	r2,2
   11168:	d8800015 	stw	r2,0(sp)
   1116c:	180f883a 	mov	r7,r3
   11170:	01800084 	movi	r6,2
   11174:	01400184 	movi	r5,6
   11178:	01019004 	movi	r4,1600
   1117c:	00130c40 	call	130c4 <alt_avalon_spi_command>
   11180:	e0bff915 	stw	r2,-28(fp)

	SPI_reg_data = (RdBuff[0] << 8) + RdBuff[1]; //read current SPI reg data
   11184:	e0bffb83 	ldbu	r2,-18(fp)
   11188:	10803fcc 	andi	r2,r2,255
   1118c:	1004923a 	slli	r2,r2,8
   11190:	1007883a 	mov	r3,r2
   11194:	e0bffbc3 	ldbu	r2,-17(fp)
   11198:	10803fcc 	andi	r2,r2,255
   1119c:	1885883a 	add	r2,r3,r2
   111a0:	e0bffa0d 	sth	r2,-24(fp)

	//modify reg data
	SPI_reg_data &= mask;//clear bits
   111a4:	e0fffa0b 	ldhu	r3,-24(fp)
   111a8:	e0bff88b 	ldhu	r2,-30(fp)
   111ac:	1884703a 	and	r2,r3,r2
   111b0:	e0bffa0d 	sth	r2,-24(fp)
	SPI_reg_data |= new_bits_data; //set bits with new data
   111b4:	e0fffa0b 	ldhu	r3,-24(fp)
   111b8:	e0bfff0b 	ldhu	r2,-4(fp)
   111bc:	1884b03a 	or	r2,r3,r2
   111c0:	e0bffa0d 	sth	r2,-24(fp)

	//write reg addr
	WrBuff[0] = (SPI_reg_addr >> 8 ) & 0xFF; //MSB_byte
   111c4:	e0bffc0b 	ldhu	r2,-16(fp)
   111c8:	1004d23a 	srli	r2,r2,8
   111cc:	e0bffa85 	stb	r2,-22(fp)
	WrBuff[1] = SPI_reg_addr & 0xFF; //LSB_byte
   111d0:	e0bffc0b 	ldhu	r2,-16(fp)
   111d4:	e0bffac5 	stb	r2,-21(fp)
	//modified data to be written to SPI reg
	WrBuff[2] = (SPI_reg_data >> 8 ) & 0xFF;
   111d8:	e0bffa0b 	ldhu	r2,-24(fp)
   111dc:	1004d23a 	srli	r2,r2,8
   111e0:	e0bffb05 	stb	r2,-20(fp)
	WrBuff[3] = SPI_reg_data & 0xFF;
   111e4:	e0bffa0b 	ldhu	r2,-24(fp)
   111e8:	e0bffb45 	stb	r2,-19(fp)
	sbi(WrBuff[0], 7); //set write bit
   111ec:	e0fffa83 	ldbu	r3,-22(fp)
   111f0:	00bfe004 	movi	r2,-128
   111f4:	1884b03a 	or	r2,r3,r2
   111f8:	e0bffa85 	stb	r2,-22(fp)
	spirez = alt_avalon_spi_command(FPGA_SPI0_BASE, SPI_NR_FPGA, 4, WrBuff, 0, NULL, 0);
   111fc:	e0bffa84 	addi	r2,fp,-22
   11200:	d8000215 	stw	zero,8(sp)
   11204:	d8000115 	stw	zero,4(sp)
   11208:	d8000015 	stw	zero,0(sp)
   1120c:	100f883a 	mov	r7,r2
   11210:	01800104 	movi	r6,4
   11214:	01400184 	movi	r5,6
   11218:	01019004 	movi	r4,1600
   1121c:	00130c40 	call	130c4 <alt_avalon_spi_command>
   11220:	e0bff915 	stw	r2,-28(fp)
}
   11224:	0001883a 	nop
   11228:	e037883a 	mov	sp,fp
   1122c:	dfc00117 	ldw	ra,4(sp)
   11230:	df000017 	ldw	fp,0(sp)
   11234:	dec00204 	addi	sp,sp,8
   11238:	f800283a 	ret

0001123c <main>:

int main(void)
{
   1123c:	defff004 	addi	sp,sp,-64
   11240:	dfc00f15 	stw	ra,60(sp)
   11244:	df000e15 	stw	fp,56(sp)
   11248:	dc400d15 	stw	r17,52(sp)
   1124c:	dc000c15 	stw	r16,48(sp)
   11250:	df000e04 	addi	fp,sp,56
	uint8_t pllcfgrez;

	uint8_t wr_buf[2];
	uint8_t rd_buf[2];
	int spirez;
	char cnt = 0;
   11254:	e03ff745 	stb	zero,-35(fp)
	uint32_t* dest = (uint32_t*)glEp0Buffer_Tx;
   11258:	00800074 	movhi	r2,1
   1125c:	1091c404 	addi	r2,r2,18192
   11260:	e0bff815 	stw	r2,-32(fp)
	unsigned char MCP_data[2];
	uint16_t wiper_pos[2];


    // I2C initialiazation
    I2C_init(I2C_OPENCORES_0_BASE, ALT_CPU_FREQ, 100000);
   11264:	018000b4 	movhi	r6,2
   11268:	31a1a804 	addi	r6,r6,-31072
   1126c:	01407574 	movhi	r5,469
   11270:	29700004 	addi	r5,r5,-16384
   11274:	01019804 	movi	r4,1632
   11278:	00132c00 	call	132c0 <I2C_init>

    // Configure LM75
    Configure_LM75();
   1127c:	00101ac0 	call	101ac <Configure_LM75>


	// Initialize variables to detect PLL phase change and PLL config update request
	phcfg_start_old = 0; phcfg_start = 0;
   11280:	e03ff585 	stb	zero,-42(fp)
   11284:	e03ff5c5 	stb	zero,-41(fp)
	pllcfg_start_old = 0; pllcfg_start = 0;
   11288:	e03ff605 	stb	zero,-40(fp)
   1128c:	e03ff645 	stb	zero,-39(fp)
	pllrst_start_old = 0; pllrst_start = 0;
   11290:	e03ff685 	stb	zero,-38(fp)
   11294:	e03ff6c5 	stb	zero,-37(fp)

	// Initialize PLL configuration status
	IOWR(PLLCFG_STATUS_BASE, 0x00, PLLCFG_DONE);
   11298:	00c00044 	movi	r3,1
   1129c:	0081a404 	movi	r2,1680
   112a0:	10c00035 	stwio	r3,0(r2)

	// Initialize ADC
	init_ADC();
   112a4:	00102b00 	call	102b0 <init_ADC>

	//write default TCXO DAC value
	Control_TCXO_ADF (0, NULL); //set ADF4002 CP to three-state
   112a8:	000b883a 	mov	r5,zero
   112ac:	0009883a 	mov	r4,zero
   112b0:	00107f40 	call	107f4 <Control_TCXO_ADF>
	dac_val = 30714; //default DAC value
   112b4:	009dfe84 	movi	r2,30714
   112b8:	d0a0000d 	sth	r2,-32768(gp)
	Control_TCXO_DAC (1, &dac_val); //enable DAC output, set new val
   112bc:	d1600004 	addi	r5,gp,-32768
   112c0:	01000044 	movi	r4,1
   112c4:	00107300 	call	10730 <Control_TCXO_DAC>

	//default dig pot wiper values
	wiper_pos[0] = wiper_pos[1] = 0x80;
   112c8:	00802004 	movi	r2,128
   112cc:	e0bffd0d 	sth	r2,-12(fp)
   112d0:	e0bffd0b 	ldhu	r2,-12(fp)
   112d4:	e0bffc8d 	sth	r2,-14(fp)

	// Initialize switch for ADC test pattern change detection
	sw2 = IORD(GPI_0_BASE, 0x00) & 0x01;
   112d8:	0081ac04 	movi	r2,1712
   112dc:	10800037 	ldwio	r2,0(r2)
   112e0:	1080004c 	andi	r2,r2,1
   112e4:	e0bff545 	stb	r2,-43(fp)
	sw2_old = 0x00;
   112e8:	e03ff505 	stb	zero,-44(fp)

	//get_pll_config(PLL_RECONFIG_0_BASE, &pll_config);

    IOWR(AV_FIFO_INT_0_BASE, 3, 1);		// Toggle FIFO reset
   112ec:	00c00044 	movi	r3,1
   112f0:	0081b704 	movi	r2,1756
   112f4:	10c00035 	stwio	r3,0(r2)
    IOWR(AV_FIFO_INT_0_BASE, 3, 0); // Toggle FIFO reset
   112f8:	0007883a 	mov	r3,zero
   112fc:	0081b704 	movi	r2,1756
   11300:	10c00035 	stwio	r3,0(r2)
	    IOWR(GPIO_0_BASE, 0x00, ui32_tmp & 0xFFFFFF7F);	//Set to 0
	    asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop");
	    asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop");
*/
	    // Check if ADC test pattern must be changed
	    if(sw2_old != sw2)
   11304:	e0fff503 	ldbu	r3,-44(fp)
   11308:	e0bff543 	ldbu	r2,-43(fp)
   1130c:	18800326 	beq	r3,r2,1131c <main+0xe0>
	    {
	    	change_ADC_tpat(sw2);
   11310:	e0bff543 	ldbu	r2,-43(fp)
   11314:	1009883a 	mov	r4,r2
   11318:	00109100 	call	10910 <change_ADC_tpat>
	    }

	    // Update switch status for ADC test pattern change detection
	    sw2_old = sw2;
   1131c:	e0bff543 	ldbu	r2,-43(fp)
   11320:	e0bff505 	stb	r2,-44(fp)
	    sw2 = IORD(GPI_0_BASE, 0x00) & 0x01;
   11324:	0081ac04 	movi	r2,1712
   11328:	10800037 	ldwio	r2,0(r2)
   1132c:	1080004c 	andi	r2,r2,1
   11330:	e0bff545 	stb	r2,-43(fp)


	    // Check if there is a request for PLL phase update
	    if((phcfg_start_old == 0) && (phcfg_start != 0))
   11334:	e0bff583 	ldbu	r2,-42(fp)
   11338:	1000141e 	bne	r2,zero,1138c <main+0x150>
   1133c:	e0bff5c3 	ldbu	r2,-41(fp)
   11340:	10001226 	beq	r2,zero,1138c <main+0x150>
	    {
	    	IOWR(PLLCFG_STATUS_BASE, 0x00, PLLCFG_BUSY);
   11344:	00c00084 	movi	r3,2
   11348:	0081a404 	movi	r2,1680
   1134c:	10c00035 	stwio	r3,0(r2)
	    	phcfg_mode = (IORD(PLLCFG_COMMAND_BASE, 0x00) & 0x08) >> 3;
   11350:	0081a804 	movi	r2,1696
   11354:	10800037 	ldwio	r2,0(r2)
   11358:	1080020c 	andi	r2,r2,8
   1135c:	1005d0fa 	srai	r2,r2,3
   11360:	e0bff905 	stb	r2,-28(fp)
	    	if (phcfg_mode){
   11364:	e0bff903 	ldbu	r2,-28(fp)
   11368:	1000021e 	bne	r2,zero,11374 <main+0x138>

	    	}
	    	else{
	    		pllcfgrez = UpdatePHCFG();
   1136c:	0010ea80 	call	10ea8 <UpdatePHCFG>
   11370:	e0bff705 	stb	r2,-36(fp)

	    	};

	    	IOWR(PLLCFG_STATUS_BASE, 0x00, (pllcfgrez << 2) | PLLCFG_DONE);
   11374:	e0bff703 	ldbu	r2,-36(fp)
   11378:	1085883a 	add	r2,r2,r2
   1137c:	1085883a 	add	r2,r2,r2
   11380:	10c00054 	ori	r3,r2,1
   11384:	0081a404 	movi	r2,1680
   11388:	10c00035 	stwio	r3,0(r2)
	    }

	    // Check if there is a request for PLL configuration update
	    if((pllcfg_start_old == 0) && (pllcfg_start != 0))
   1138c:	e0bff603 	ldbu	r2,-40(fp)
   11390:	10000d1e 	bne	r2,zero,113c8 <main+0x18c>
   11394:	e0bff643 	ldbu	r2,-39(fp)
   11398:	10000b26 	beq	r2,zero,113c8 <main+0x18c>
	    {
	    	IOWR(PLLCFG_STATUS_BASE, 0x00, PLLCFG_BUSY);
   1139c:	00c00084 	movi	r3,2
   113a0:	0081a404 	movi	r2,1680
   113a4:	10c00035 	stwio	r3,0(r2)
	    	pllcfgrez = UpdatePLLCFG();
   113a8:	0010a480 	call	10a48 <UpdatePLLCFG>
   113ac:	e0bff705 	stb	r2,-36(fp)
	    	IOWR(PLLCFG_STATUS_BASE, 0x00, (pllcfgrez << 2) | PLLCFG_DONE);
   113b0:	e0bff703 	ldbu	r2,-36(fp)
   113b4:	1085883a 	add	r2,r2,r2
   113b8:	1085883a 	add	r2,r2,r2
   113bc:	10c00054 	ori	r3,r2,1
   113c0:	0081a404 	movi	r2,1680
   113c4:	10c00035 	stwio	r3,0(r2)
	    }

	    // Check if there is a request for PLL configuration update
	    if((pllrst_start_old == 0) && (pllrst_start != 0))
   113c8:	e0bff683 	ldbu	r2,-38(fp)
   113cc:	1000091e 	bne	r2,zero,113f4 <main+0x1b8>
   113d0:	e0bff6c3 	ldbu	r2,-37(fp)
   113d4:	10000726 	beq	r2,zero,113f4 <main+0x1b8>
	    {
	    	IOWR(PLLCFG_STATUS_BASE, 0x00, PLLCFG_BUSY);
   113d8:	00c00084 	movi	r3,2
   113dc:	0081a404 	movi	r2,1680
   113e0:	10c00035 	stwio	r3,0(r2)
	    	ResetPLL();
   113e4:	0010fd80 	call	10fd8 <ResetPLL>
	    	IOWR(PLLCFG_STATUS_BASE, 0x00, PLLCFG_DONE);
   113e8:	00c00044 	movi	r3,1
   113ec:	0081a404 	movi	r2,1680
   113f0:	10c00035 	stwio	r3,0(r2)
	    }

	    // Update PLL configuration command status
	    pllrst_start_old = pllrst_start;
   113f4:	e0bff6c3 	ldbu	r2,-37(fp)
   113f8:	e0bff685 	stb	r2,-38(fp)
	    pllrst_start = (IORD(PLLCFG_COMMAND_BASE, 0x00) & 0x04) >> 2;
   113fc:	0081a804 	movi	r2,1696
   11400:	10800037 	ldwio	r2,0(r2)
   11404:	1080010c 	andi	r2,r2,4
   11408:	1005d0ba 	srai	r2,r2,2
   1140c:	e0bff6c5 	stb	r2,-37(fp)
	    phcfg_start_old = phcfg_start;
   11410:	e0bff5c3 	ldbu	r2,-41(fp)
   11414:	e0bff585 	stb	r2,-42(fp)
	    phcfg_start = (IORD(PLLCFG_COMMAND_BASE, 0x00) & 0x02) >> 1;
   11418:	0081a804 	movi	r2,1696
   1141c:	10800037 	ldwio	r2,0(r2)
   11420:	1080008c 	andi	r2,r2,2
   11424:	1005d07a 	srai	r2,r2,1
   11428:	e0bff5c5 	stb	r2,-41(fp)
	    pllcfg_start_old = pllcfg_start;
   1142c:	e0bff643 	ldbu	r2,-39(fp)
   11430:	e0bff605 	stb	r2,-40(fp)
	    pllcfg_start = IORD(PLLCFG_COMMAND_BASE, 0x00) & 0x01;
   11434:	0081a804 	movi	r2,1696
   11438:	10800037 	ldwio	r2,0(r2)
   1143c:	1080004c 	andi	r2,r2,1
   11440:	e0bff645 	stb	r2,-39(fp)



        spirez = IORD(AV_FIFO_INT_0_BASE, 2);	// Read FIFO Status
   11444:	0081b604 	movi	r2,1752
   11448:	10800037 	ldwio	r2,0(r2)
   1144c:	e0bffa15 	stw	r2,-24(fp)
        if(!(spirez & 0x01))
   11450:	e0bffa17 	ldw	r2,-24(fp)
   11454:	1080004c 	andi	r2,r2,1
   11458:	103faa1e 	bne	r2,zero,11304 <_gp+0xffff4f14>
        {
            IOWR(AV_FIFO_INT_0_BASE, 3, 1);		// Toggle FIFO reset
   1145c:	00c00044 	movi	r3,1
   11460:	0081b704 	movi	r2,1756
   11464:	10c00035 	stwio	r3,0(r2)
            IOWR(AV_FIFO_INT_0_BASE, 3, 0); // Toggle FIFO reset
   11468:	0007883a 	mov	r3,zero
   1146c:	0081b704 	movi	r2,1756
   11470:	10c00035 	stwio	r3,0(r2)

        	getFifoData(glEp0Buffer_Rx, 64);
   11474:	01401004 	movi	r5,64
   11478:	01000074 	movhi	r4,1
   1147c:	2111d404 	addi	r4,r4,18256
   11480:	00101280 	call	10128 <getFifoData>

         	memset (glEp0Buffer_Tx, 0, sizeof(glEp0Buffer_Tx)); //fill whole tx buffer with zeros
   11484:	01801004 	movi	r6,64
   11488:	000b883a 	mov	r5,zero
   1148c:	01000074 	movhi	r4,1
   11490:	2111c404 	addi	r4,r4,18192
   11494:	0012c580 	call	12c58 <memset>
         	cmd_errors = 0;
   11498:	d020c385 	stb	zero,-31986(gp)

     		LMS_Ctrl_Packet_Tx->Header.Command = LMS_Ctrl_Packet_Rx->Header.Command;
   1149c:	d0a00117 	ldw	r2,-32764(gp)
   114a0:	d0e00217 	ldw	r3,-32760(gp)
   114a4:	18c00003 	ldbu	r3,0(r3)
   114a8:	10c00005 	stb	r3,0(r2)
     		LMS_Ctrl_Packet_Tx->Header.Data_blocks = LMS_Ctrl_Packet_Rx->Header.Data_blocks;
   114ac:	d0a00117 	ldw	r2,-32764(gp)
   114b0:	d0e00217 	ldw	r3,-32760(gp)
   114b4:	18c00083 	ldbu	r3,2(r3)
   114b8:	10c00085 	stb	r3,2(r2)
     		LMS_Ctrl_Packet_Tx->Header.Periph_ID = LMS_Ctrl_Packet_Rx->Header.Periph_ID;
   114bc:	d0a00117 	ldw	r2,-32764(gp)
   114c0:	d0e00217 	ldw	r3,-32760(gp)
   114c4:	18c000c3 	ldbu	r3,3(r3)
   114c8:	10c000c5 	stb	r3,3(r2)
     		LMS_Ctrl_Packet_Tx->Header.Status = STATUS_BUSY_CMD;
   114cc:	d0a00117 	ldw	r2,-32764(gp)
   114d0:	00c000c4 	movi	r3,3
   114d4:	10c00045 	stb	r3,1(r2)


     		switch(LMS_Ctrl_Packet_Rx->Header.Command)
   114d8:	d0a00217 	ldw	r2,-32760(gp)
   114dc:	10800003 	ldbu	r2,0(r2)
   114e0:	10803fcc 	andi	r2,r2,255
   114e4:	10c018e8 	cmpgeui	r3,r2,99
   114e8:	1804981e 	bne	r3,zero,1274c <main+0x1510>
   114ec:	100690ba 	slli	r3,r2,2
   114f0:	00800074 	movhi	r2,1
   114f4:	10854104 	addi	r2,r2,5380
   114f8:	1885883a 	add	r2,r3,r2
   114fc:	10800017 	ldw	r2,0(r2)
   11500:	1000683a 	jmp	r2
   11504:	00011690 	cmplti	zero,zero,1114
   11508:	0001274c 	andi	zero,zero,1181
   1150c:	0001274c 	andi	zero,zero,1181
   11510:	0001274c 	andi	zero,zero,1181
   11514:	0001274c 	andi	zero,zero,1181
   11518:	0001274c 	andi	zero,zero,1181
   1151c:	0001274c 	andi	zero,zero,1181
   11520:	0001274c 	andi	zero,zero,1181
   11524:	0001274c 	andi	zero,zero,1181
   11528:	0001274c 	andi	zero,zero,1181
   1152c:	0001274c 	andi	zero,zero,1181
   11530:	0001274c 	andi	zero,zero,1181
   11534:	0001274c 	andi	zero,zero,1181
   11538:	0001274c 	andi	zero,zero,1181
   1153c:	0001274c 	andi	zero,zero,1181
   11540:	0001274c 	andi	zero,zero,1181
   11544:	0001274c 	andi	zero,zero,1181
   11548:	0001274c 	andi	zero,zero,1181
   1154c:	0001274c 	andi	zero,zero,1181
   11550:	000124f4 	movhi	zero,1171
   11554:	00012600 	call	1260 <__alt_mem_oc_mem-0xeda0>
   11558:	0001274c 	andi	zero,zero,1181
   1155c:	0001274c 	andi	zero,zero,1181
   11560:	0001274c 	andi	zero,zero,1181
   11564:	0001274c 	andi	zero,zero,1181
   11568:	0001274c 	andi	zero,zero,1181
   1156c:	0001274c 	andi	zero,zero,1181
   11570:	0001274c 	andi	zero,zero,1181
   11574:	0001274c 	andi	zero,zero,1181
   11578:	0001274c 	andi	zero,zero,1181
   1157c:	0001274c 	andi	zero,zero,1181
   11580:	0001274c 	andi	zero,zero,1181
   11584:	000116d8 	cmpnei	zero,zero,1115
   11588:	00011838 	rdprs	zero,zero,1120
   1158c:	00011948 	cmpgei	zero,zero,1125
   11590:	0001274c 	andi	zero,zero,1181
   11594:	0001274c 	andi	zero,zero,1181
   11598:	0001274c 	andi	zero,zero,1181
   1159c:	0001274c 	andi	zero,zero,1181
   115a0:	0001274c 	andi	zero,zero,1181
   115a4:	0001274c 	andi	zero,zero,1181
   115a8:	0001274c 	andi	zero,zero,1181
   115ac:	0001274c 	andi	zero,zero,1181
   115b0:	0001274c 	andi	zero,zero,1181
   115b4:	0001274c 	andi	zero,zero,1181
   115b8:	0001274c 	andi	zero,zero,1181
   115bc:	0001274c 	andi	zero,zero,1181
   115c0:	0001274c 	andi	zero,zero,1181
   115c4:	0001274c 	andi	zero,zero,1181
   115c8:	00011c18 	cmpnei	zero,zero,1136
   115cc:	0001274c 	andi	zero,zero,1181
   115d0:	0001274c 	andi	zero,zero,1181
   115d4:	0001274c 	andi	zero,zero,1181
   115d8:	0001274c 	andi	zero,zero,1181
   115dc:	0001274c 	andi	zero,zero,1181
   115e0:	0001274c 	andi	zero,zero,1181
   115e4:	0001274c 	andi	zero,zero,1181
   115e8:	0001274c 	andi	zero,zero,1181
   115ec:	0001274c 	andi	zero,zero,1181
   115f0:	0001274c 	andi	zero,zero,1181
   115f4:	0001274c 	andi	zero,zero,1181
   115f8:	0001274c 	andi	zero,zero,1181
   115fc:	0001274c 	andi	zero,zero,1181
   11600:	0001274c 	andi	zero,zero,1181
   11604:	0001274c 	andi	zero,zero,1181
   11608:	0001274c 	andi	zero,zero,1181
   1160c:	0001274c 	andi	zero,zero,1181
   11610:	0001274c 	andi	zero,zero,1181
   11614:	0001274c 	andi	zero,zero,1181
   11618:	0001274c 	andi	zero,zero,1181
   1161c:	0001274c 	andi	zero,zero,1181
   11620:	0001274c 	andi	zero,zero,1181
   11624:	0001274c 	andi	zero,zero,1181
   11628:	0001274c 	andi	zero,zero,1181
   1162c:	0001274c 	andi	zero,zero,1181
   11630:	0001274c 	andi	zero,zero,1181
   11634:	0001274c 	andi	zero,zero,1181
   11638:	0001274c 	andi	zero,zero,1181
   1163c:	0001274c 	andi	zero,zero,1181
   11640:	0001274c 	andi	zero,zero,1181
   11644:	0001274c 	andi	zero,zero,1181
   11648:	0001274c 	andi	zero,zero,1181
   1164c:	0001274c 	andi	zero,zero,1181
   11650:	0001274c 	andi	zero,zero,1181
   11654:	0001274c 	andi	zero,zero,1181
   11658:	00011a4c 	andi	zero,zero,1129
   1165c:	00011b28 	cmpgeui	zero,zero,1132
   11660:	0001274c 	andi	zero,zero,1181
   11664:	0001274c 	andi	zero,zero,1181
   11668:	0001274c 	andi	zero,zero,1181
   1166c:	0001274c 	andi	zero,zero,1181
   11670:	0001274c 	andi	zero,zero,1181
   11674:	0001274c 	andi	zero,zero,1181
   11678:	0001274c 	andi	zero,zero,1181
   1167c:	0001274c 	andi	zero,zero,1181
   11680:	0001274c 	andi	zero,zero,1181
   11684:	0001274c 	andi	zero,zero,1181
   11688:	000120f8 	rdprs	zero,zero,1155
   1168c:	00011cb8 	rdprs	zero,zero,1138
     		{
 				case CMD_GET_INFO:

 					LMS_Ctrl_Packet_Tx->Data_field[0] = FW_VER;
   11690:	d0a00117 	ldw	r2,-32764(gp)
   11694:	00c00084 	movi	r3,2
   11698:	10c00205 	stb	r3,8(r2)
 					LMS_Ctrl_Packet_Tx->Data_field[1] = DEV_TYPE;
   1169c:	d0a00117 	ldw	r2,-32764(gp)
   116a0:	00c00404 	movi	r3,16
   116a4:	10c00245 	stb	r3,9(r2)
 					LMS_Ctrl_Packet_Tx->Data_field[2] = LMS_PROTOCOL_VER;
   116a8:	d0a00117 	ldw	r2,-32764(gp)
   116ac:	00c00044 	movi	r3,1
   116b0:	10c00285 	stb	r3,10(r2)
 					LMS_Ctrl_Packet_Tx->Data_field[3] = HW_VER;
   116b4:	d0a00117 	ldw	r2,-32764(gp)
   116b8:	100002c5 	stb	zero,11(r2)
 					LMS_Ctrl_Packet_Tx->Data_field[4] = EXP_BOARD;
   116bc:	d0a00117 	ldw	r2,-32764(gp)
   116c0:	00c00044 	movi	r3,1
   116c4:	10c00305 	stb	r3,12(r2)

 					LMS_Ctrl_Packet_Tx->Header.Status = STATUS_COMPLETED_CMD;
   116c8:	d0a00117 	ldw	r2,-32764(gp)
   116cc:	00c00044 	movi	r3,1
   116d0:	10c00045 	stb	r3,1(r2)
 				break;
   116d4:	00043406 	br	127a8 <main+0x156c>
				

 				case CMD_LMS_RST:

 					if(!Check_Periph_ID(MAX_ID_LMS7, LMS_Ctrl_Packet_Rx->Header.Periph_ID)) break;
   116d8:	d0a00217 	ldw	r2,-32760(gp)
   116dc:	108000c3 	ldbu	r2,3(r2)
   116e0:	10803fcc 	andi	r2,r2,255
   116e4:	100b883a 	mov	r5,r2
   116e8:	01000044 	movi	r4,1
   116ec:	00100d00 	call	100d0 <Check_Periph_ID>
   116f0:	10803fcc 	andi	r2,r2,255
   116f4:	10041926 	beq	r2,zero,1275c <main+0x1520>

 					switch (LMS_Ctrl_Packet_Rx->Data_field[0])
   116f8:	d0a00217 	ldw	r2,-32760(gp)
   116fc:	10800203 	ldbu	r2,8(r2)
   11700:	10803fcc 	andi	r2,r2,255
   11704:	10c00060 	cmpeqi	r3,r2,1
   11708:	1800151e 	bne	r3,zero,11760 <main+0x524>
   1170c:	10c000a0 	cmpeqi	r3,r2,2
   11710:	1800251e 	bne	r3,zero,117a8 <main+0x56c>
   11714:	1000401e 	bne	r2,zero,11818 <main+0x5dc>
 					{
 						case LMS_RST_DEACTIVATE:

 		 					switch(LMS_Ctrl_Packet_Rx->Header.Periph_ID)
   11718:	d0a00217 	ldw	r2,-32760(gp)
   1171c:	108000c3 	ldbu	r2,3(r2)
   11720:	10803fcc 	andi	r2,r2,255
   11724:	10800060 	cmpeqi	r2,r2,1
   11728:	1000061e 	bne	r2,zero,11744 <main+0x508>
 		 					{
 		 						default:
 		 						case 0:
 		 							Modify_BRDSPI16_Reg_bits (BRD_SPI_REG_LMS1_LMS2_CTRL, LMS1_RESET, LMS1_RESET, 1); //high level
   1172c:	01c00044 	movi	r7,1
   11730:	01800044 	movi	r6,1
   11734:	01400044 	movi	r5,1
   11738:	010004c4 	movi	r4,19
   1173c:	001107c0 	call	1107c <Modify_BRDSPI16_Reg_bits>
 		 						break;
   11740:	00000606 	br	1175c <main+0x520>
 		 						case 1:
 		 							Modify_BRDSPI16_Reg_bits (BRD_SPI_REG_LMS1_LMS2_CTRL, LMS2_RESET, LMS2_RESET, 1); //high level
   11744:	01c00044 	movi	r7,1
   11748:	01800244 	movi	r6,9
   1174c:	01400244 	movi	r5,9
   11750:	010004c4 	movi	r4,19
   11754:	001107c0 	call	1107c <Modify_BRDSPI16_Reg_bits>
 		 						break;
   11758:	0001883a 	nop
 		 					}

 						break;
   1175c:	00003206 	br	11828 <main+0x5ec>

 						case LMS_RST_ACTIVATE:

 		 					switch(LMS_Ctrl_Packet_Rx->Header.Periph_ID)
   11760:	d0a00217 	ldw	r2,-32760(gp)
   11764:	108000c3 	ldbu	r2,3(r2)
   11768:	10803fcc 	andi	r2,r2,255
   1176c:	10800060 	cmpeqi	r2,r2,1
   11770:	1000061e 	bne	r2,zero,1178c <main+0x550>
 		 					{
 		 						default:
 		 						case 0:
 		 							Modify_BRDSPI16_Reg_bits (BRD_SPI_REG_LMS1_LMS2_CTRL, LMS1_RESET, LMS1_RESET, 0); //low level
   11774:	000f883a 	mov	r7,zero
   11778:	01800044 	movi	r6,1
   1177c:	01400044 	movi	r5,1
   11780:	010004c4 	movi	r4,19
   11784:	001107c0 	call	1107c <Modify_BRDSPI16_Reg_bits>
 		 						break;
   11788:	00000606 	br	117a4 <main+0x568>
 		 						case 1:
 		 							Modify_BRDSPI16_Reg_bits (BRD_SPI_REG_LMS1_LMS2_CTRL, LMS2_RESET, LMS2_RESET, 0); //low level
   1178c:	000f883a 	mov	r7,zero
   11790:	01800244 	movi	r6,9
   11794:	01400244 	movi	r5,9
   11798:	010004c4 	movi	r4,19
   1179c:	001107c0 	call	1107c <Modify_BRDSPI16_Reg_bits>
 		 						break;
   117a0:	0001883a 	nop
 		 					}

 						break;
   117a4:	00002006 	br	11828 <main+0x5ec>

 						case LMS_RST_PULSE:
 		 					switch(LMS_Ctrl_Packet_Rx->Header.Periph_ID)
   117a8:	d0a00217 	ldw	r2,-32760(gp)
   117ac:	108000c3 	ldbu	r2,3(r2)
   117b0:	10803fcc 	andi	r2,r2,255
   117b4:	10800060 	cmpeqi	r2,r2,1
   117b8:	10000b1e 	bne	r2,zero,117e8 <main+0x5ac>
 		 					{
 		 						default:
 		 						case 0:
 		 							Modify_BRDSPI16_Reg_bits (BRD_SPI_REG_LMS1_LMS2_CTRL, LMS1_RESET, LMS1_RESET, 0); //low level
   117bc:	000f883a 	mov	r7,zero
   117c0:	01800044 	movi	r6,1
   117c4:	01400044 	movi	r5,1
   117c8:	010004c4 	movi	r4,19
   117cc:	001107c0 	call	1107c <Modify_BRDSPI16_Reg_bits>
 		 							Modify_BRDSPI16_Reg_bits (BRD_SPI_REG_LMS1_LMS2_CTRL, LMS1_RESET, LMS1_RESET, 1); //high level
   117d0:	01c00044 	movi	r7,1
   117d4:	01800044 	movi	r6,1
   117d8:	01400044 	movi	r5,1
   117dc:	010004c4 	movi	r4,19
   117e0:	001107c0 	call	1107c <Modify_BRDSPI16_Reg_bits>
 		 						break;
   117e4:	00000b06 	br	11814 <main+0x5d8>
 		 						case 1:
 		 							Modify_BRDSPI16_Reg_bits (BRD_SPI_REG_LMS1_LMS2_CTRL, LMS2_RESET, LMS2_RESET, 0); //low level
   117e8:	000f883a 	mov	r7,zero
   117ec:	01800244 	movi	r6,9
   117f0:	01400244 	movi	r5,9
   117f4:	010004c4 	movi	r4,19
   117f8:	001107c0 	call	1107c <Modify_BRDSPI16_Reg_bits>
 		 							Modify_BRDSPI16_Reg_bits (BRD_SPI_REG_LMS1_LMS2_CTRL, LMS2_RESET, LMS2_RESET, 1); //high level
   117fc:	01c00044 	movi	r7,1
   11800:	01800244 	movi	r6,9
   11804:	01400244 	movi	r5,9
   11808:	010004c4 	movi	r4,19
   1180c:	001107c0 	call	1107c <Modify_BRDSPI16_Reg_bits>
 		 						break;
   11810:	0001883a 	nop
 		 					}

 						break;
   11814:	00000406 	br	11828 <main+0x5ec>

 						default:
 							cmd_errors++;
   11818:	d0a0c383 	ldbu	r2,-31986(gp)
   1181c:	10800044 	addi	r2,r2,1
   11820:	d0a0c385 	stb	r2,-31986(gp)
 						break;
   11824:	0001883a 	nop
 					}

 					LMS_Ctrl_Packet_Tx->Header.Status = STATUS_COMPLETED_CMD;
   11828:	d0a00117 	ldw	r2,-32764(gp)
   1182c:	00c00044 	movi	r3,1
   11830:	10c00045 	stb	r3,1(r2)
 				break;
   11834:	0003dc06 	br	127a8 <main+0x156c>


 				case CMD_LMS7002_WR:
 					if(!Check_Periph_ID(MAX_ID_LMS7, LMS_Ctrl_Packet_Rx->Header.Periph_ID)) break;
   11838:	d0a00217 	ldw	r2,-32760(gp)
   1183c:	108000c3 	ldbu	r2,3(r2)
   11840:	10803fcc 	andi	r2,r2,255
   11844:	100b883a 	mov	r5,r2
   11848:	01000044 	movi	r4,1
   1184c:	00100d00 	call	100d0 <Check_Periph_ID>
   11850:	10803fcc 	andi	r2,r2,255
   11854:	1003c326 	beq	r2,zero,12764 <main+0x1528>
 					if(Check_many_blocks (4)) break;
   11858:	01000104 	movi	r4,4
   1185c:	001005c0 	call	1005c <Check_many_blocks>
   11860:	10803fcc 	andi	r2,r2,255
   11864:	1003c11e 	bne	r2,zero,1276c <main+0x1530>

 					for(block = 0; block < LMS_Ctrl_Packet_Rx->Header.Data_blocks; block++)
   11868:	d020c305 	stb	zero,-31988(gp)
   1186c:	00002c06 	br	11920 <main+0x6e4>
 					{
 						//Write LMS7 register
 						sbi(LMS_Ctrl_Packet_Rx->Data_field[0 + (block * 4)], 7); //set write bit
   11870:	d0e00217 	ldw	r3,-32760(gp)
   11874:	d0a0c303 	ldbu	r2,-31988(gp)
   11878:	10803fcc 	andi	r2,r2,255
   1187c:	1085883a 	add	r2,r2,r2
   11880:	1085883a 	add	r2,r2,r2
   11884:	100b883a 	mov	r5,r2
   11888:	d1200217 	ldw	r4,-32760(gp)
   1188c:	d0a0c303 	ldbu	r2,-31988(gp)
   11890:	10803fcc 	andi	r2,r2,255
   11894:	1085883a 	add	r2,r2,r2
   11898:	1085883a 	add	r2,r2,r2
   1189c:	2085883a 	add	r2,r4,r2
   118a0:	10800204 	addi	r2,r2,8
   118a4:	11000003 	ldbu	r4,0(r2)
   118a8:	00bfe004 	movi	r2,-128
   118ac:	2084b03a 	or	r2,r4,r2
   118b0:	1009883a 	mov	r4,r2
   118b4:	1945883a 	add	r2,r3,r5
   118b8:	10800204 	addi	r2,r2,8
   118bc:	11000005 	stb	r4,0(r2)
 						spirez = alt_avalon_spi_command(FPGA_SPI0_BASE, LMS_Ctrl_Packet_Rx->Header.Periph_ID == 1 ? SPI_NR_LMS7002M_1 : SPI_NR_LMS7002M_0,
   118c0:	d0a00217 	ldw	r2,-32760(gp)
   118c4:	108000c3 	ldbu	r2,3(r2)
   118c8:	10803fcc 	andi	r2,r2,255
   118cc:	10800060 	cmpeqi	r2,r2,1
   118d0:	11003fcc 	andi	r4,r2,255
 								4, &LMS_Ctrl_Packet_Rx->Data_field[0 + (block * 4)], 0, NULL, 0);
   118d4:	d0e00217 	ldw	r3,-32760(gp)
   118d8:	d0a0c303 	ldbu	r2,-31988(gp)
   118dc:	10803fcc 	andi	r2,r2,255
   118e0:	1085883a 	add	r2,r2,r2
   118e4:	1085883a 	add	r2,r2,r2
   118e8:	10800204 	addi	r2,r2,8
   118ec:	1885883a 	add	r2,r3,r2

 					for(block = 0; block < LMS_Ctrl_Packet_Rx->Header.Data_blocks; block++)
 					{
 						//Write LMS7 register
 						sbi(LMS_Ctrl_Packet_Rx->Data_field[0 + (block * 4)], 7); //set write bit
 						spirez = alt_avalon_spi_command(FPGA_SPI0_BASE, LMS_Ctrl_Packet_Rx->Header.Periph_ID == 1 ? SPI_NR_LMS7002M_1 : SPI_NR_LMS7002M_0,
   118f0:	d8000215 	stw	zero,8(sp)
   118f4:	d8000115 	stw	zero,4(sp)
   118f8:	d8000015 	stw	zero,0(sp)
   118fc:	100f883a 	mov	r7,r2
   11900:	01800104 	movi	r6,4
   11904:	200b883a 	mov	r5,r4
   11908:	01019004 	movi	r4,1600
   1190c:	00130c40 	call	130c4 <alt_avalon_spi_command>
   11910:	e0bffa15 	stw	r2,-24(fp)

 				case CMD_LMS7002_WR:
 					if(!Check_Periph_ID(MAX_ID_LMS7, LMS_Ctrl_Packet_Rx->Header.Periph_ID)) break;
 					if(Check_many_blocks (4)) break;

 					for(block = 0; block < LMS_Ctrl_Packet_Rx->Header.Data_blocks; block++)
   11914:	d0a0c303 	ldbu	r2,-31988(gp)
   11918:	10800044 	addi	r2,r2,1
   1191c:	d0a0c305 	stb	r2,-31988(gp)
   11920:	d0a00217 	ldw	r2,-32760(gp)
   11924:	10800083 	ldbu	r2,2(r2)
   11928:	d0e0c303 	ldbu	r3,-31988(gp)
   1192c:	10803fcc 	andi	r2,r2,255
   11930:	18c03fcc 	andi	r3,r3,255
   11934:	18bfce36 	bltu	r3,r2,11870 <_gp+0xffff5480>
 						sbi(LMS_Ctrl_Packet_Rx->Data_field[0 + (block * 4)], 7); //set write bit
 						spirez = alt_avalon_spi_command(FPGA_SPI0_BASE, LMS_Ctrl_Packet_Rx->Header.Periph_ID == 1 ? SPI_NR_LMS7002M_1 : SPI_NR_LMS7002M_0,
 								4, &LMS_Ctrl_Packet_Rx->Data_field[0 + (block * 4)], 0, NULL, 0);
 					}

 					LMS_Ctrl_Packet_Tx->Header.Status = STATUS_COMPLETED_CMD;
   11938:	d0a00117 	ldw	r2,-32764(gp)
   1193c:	00c00044 	movi	r3,1
   11940:	10c00045 	stb	r3,1(r2)
 				break;
   11944:	00039806 	br	127a8 <main+0x156c>


 				case CMD_LMS7002_RD:
 					if(Check_many_blocks (4)) break;
   11948:	01000104 	movi	r4,4
   1194c:	001005c0 	call	1005c <Check_many_blocks>
   11950:	10803fcc 	andi	r2,r2,255
   11954:	1003871e 	bne	r2,zero,12774 <main+0x1538>

 					for(block = 0; block < LMS_Ctrl_Packet_Rx->Header.Data_blocks; block++)
   11958:	d020c305 	stb	zero,-31988(gp)
   1195c:	00003106 	br	11a24 <main+0x7e8>
 					{
 						//Read LMS7 register
 						cbi(LMS_Ctrl_Packet_Rx->Data_field[0 + (block * 2)], 7);  //clear write bit
   11960:	d0e00217 	ldw	r3,-32760(gp)
   11964:	d0a0c303 	ldbu	r2,-31988(gp)
   11968:	10803fcc 	andi	r2,r2,255
   1196c:	1085883a 	add	r2,r2,r2
   11970:	100b883a 	mov	r5,r2
   11974:	d1200217 	ldw	r4,-32760(gp)
   11978:	d0a0c303 	ldbu	r2,-31988(gp)
   1197c:	10803fcc 	andi	r2,r2,255
   11980:	1085883a 	add	r2,r2,r2
   11984:	2085883a 	add	r2,r4,r2
   11988:	10800204 	addi	r2,r2,8
   1198c:	10800003 	ldbu	r2,0(r2)
   11990:	10801fcc 	andi	r2,r2,127
   11994:	1009883a 	mov	r4,r2
   11998:	1945883a 	add	r2,r3,r5
   1199c:	10800204 	addi	r2,r2,8
   119a0:	11000005 	stb	r4,0(r2)
 						spirez = alt_avalon_spi_command(FPGA_SPI0_BASE, LMS_Ctrl_Packet_Rx->Header.Periph_ID == 1 ? SPI_NR_LMS7002M_1 : SPI_NR_LMS7002M_0,
   119a4:	d0a00217 	ldw	r2,-32760(gp)
   119a8:	108000c3 	ldbu	r2,3(r2)
   119ac:	10803fcc 	andi	r2,r2,255
   119b0:	10800060 	cmpeqi	r2,r2,1
   119b4:	11003fcc 	andi	r4,r2,255
 								2, &LMS_Ctrl_Packet_Rx->Data_field[0 + (block * 2)], 2, &LMS_Ctrl_Packet_Tx->Data_field[2 + (block * 4)], 0);
   119b8:	d0e00217 	ldw	r3,-32760(gp)
   119bc:	d0a0c303 	ldbu	r2,-31988(gp)
   119c0:	10803fcc 	andi	r2,r2,255
   119c4:	1085883a 	add	r2,r2,r2
   119c8:	10800204 	addi	r2,r2,8
   119cc:	188b883a 	add	r5,r3,r2
   119d0:	d0e00117 	ldw	r3,-32764(gp)
   119d4:	d0a0c303 	ldbu	r2,-31988(gp)
   119d8:	10803fcc 	andi	r2,r2,255
   119dc:	1085883a 	add	r2,r2,r2
   119e0:	1085883a 	add	r2,r2,r2
   119e4:	10800084 	addi	r2,r2,2
   119e8:	10800204 	addi	r2,r2,8
   119ec:	1885883a 	add	r2,r3,r2

 					for(block = 0; block < LMS_Ctrl_Packet_Rx->Header.Data_blocks; block++)
 					{
 						//Read LMS7 register
 						cbi(LMS_Ctrl_Packet_Rx->Data_field[0 + (block * 2)], 7);  //clear write bit
 						spirez = alt_avalon_spi_command(FPGA_SPI0_BASE, LMS_Ctrl_Packet_Rx->Header.Periph_ID == 1 ? SPI_NR_LMS7002M_1 : SPI_NR_LMS7002M_0,
   119f0:	d8000215 	stw	zero,8(sp)
   119f4:	d8800115 	stw	r2,4(sp)
   119f8:	00800084 	movi	r2,2
   119fc:	d8800015 	stw	r2,0(sp)
   11a00:	280f883a 	mov	r7,r5
   11a04:	01800084 	movi	r6,2
   11a08:	200b883a 	mov	r5,r4
   11a0c:	01019004 	movi	r4,1600
   11a10:	00130c40 	call	130c4 <alt_avalon_spi_command>
   11a14:	e0bffa15 	stw	r2,-24(fp)


 				case CMD_LMS7002_RD:
 					if(Check_many_blocks (4)) break;

 					for(block = 0; block < LMS_Ctrl_Packet_Rx->Header.Data_blocks; block++)
   11a18:	d0a0c303 	ldbu	r2,-31988(gp)
   11a1c:	10800044 	addi	r2,r2,1
   11a20:	d0a0c305 	stb	r2,-31988(gp)
   11a24:	d0a00217 	ldw	r2,-32760(gp)
   11a28:	10800083 	ldbu	r2,2(r2)
   11a2c:	d0e0c303 	ldbu	r3,-31988(gp)
   11a30:	10803fcc 	andi	r2,r2,255
   11a34:	18c03fcc 	andi	r3,r3,255
   11a38:	18bfc936 	bltu	r3,r2,11960 <_gp+0xffff5570>
 						cbi(LMS_Ctrl_Packet_Rx->Data_field[0 + (block * 2)], 7);  //clear write bit
 						spirez = alt_avalon_spi_command(FPGA_SPI0_BASE, LMS_Ctrl_Packet_Rx->Header.Periph_ID == 1 ? SPI_NR_LMS7002M_1 : SPI_NR_LMS7002M_0,
 								2, &LMS_Ctrl_Packet_Rx->Data_field[0 + (block * 2)], 2, &LMS_Ctrl_Packet_Tx->Data_field[2 + (block * 4)], 0);
 					}

 					LMS_Ctrl_Packet_Tx->Header.Status = STATUS_COMPLETED_CMD;
   11a3c:	d0a00117 	ldw	r2,-32764(gp)
   11a40:	00c00044 	movi	r3,1
   11a44:	10c00045 	stb	r3,1(r2)
 				break;
   11a48:	00035706 	br	127a8 <main+0x156c>


 	 			case CMD_BRDSPI16_WR:
 	 				if(Check_many_blocks (4)) break;
   11a4c:	01000104 	movi	r4,4
   11a50:	001005c0 	call	1005c <Check_many_blocks>
   11a54:	10803fcc 	andi	r2,r2,255
   11a58:	1003481e 	bne	r2,zero,1277c <main+0x1540>

 	 				for(block = 0; block < LMS_Ctrl_Packet_Rx->Header.Data_blocks; block++)
   11a5c:	d020c305 	stb	zero,-31988(gp)
   11a60:	00002706 	br	11b00 <main+0x8c4>
 	 				{
 	 					//write reg addr
 	 					sbi(LMS_Ctrl_Packet_Rx->Data_field[0 + (block * 4)], 7); //set write bit
   11a64:	d0e00217 	ldw	r3,-32760(gp)
   11a68:	d0a0c303 	ldbu	r2,-31988(gp)
   11a6c:	10803fcc 	andi	r2,r2,255
   11a70:	1085883a 	add	r2,r2,r2
   11a74:	1085883a 	add	r2,r2,r2
   11a78:	100b883a 	mov	r5,r2
   11a7c:	d1200217 	ldw	r4,-32760(gp)
   11a80:	d0a0c303 	ldbu	r2,-31988(gp)
   11a84:	10803fcc 	andi	r2,r2,255
   11a88:	1085883a 	add	r2,r2,r2
   11a8c:	1085883a 	add	r2,r2,r2
   11a90:	2085883a 	add	r2,r4,r2
   11a94:	10800204 	addi	r2,r2,8
   11a98:	11000003 	ldbu	r4,0(r2)
   11a9c:	00bfe004 	movi	r2,-128
   11aa0:	2084b03a 	or	r2,r4,r2
   11aa4:	1009883a 	mov	r4,r2
   11aa8:	1945883a 	add	r2,r3,r5
   11aac:	10800204 	addi	r2,r2,8
   11ab0:	11000005 	stb	r4,0(r2)

 	 					spirez = alt_avalon_spi_command(FPGA_SPI0_BASE, SPI_NR_FPGA, 4, &LMS_Ctrl_Packet_Rx->Data_field[0 + (block * 4)], 0, NULL, 0);
   11ab4:	d0e00217 	ldw	r3,-32760(gp)
   11ab8:	d0a0c303 	ldbu	r2,-31988(gp)
   11abc:	10803fcc 	andi	r2,r2,255
   11ac0:	1085883a 	add	r2,r2,r2
   11ac4:	1085883a 	add	r2,r2,r2
   11ac8:	10800204 	addi	r2,r2,8
   11acc:	1885883a 	add	r2,r3,r2
   11ad0:	d8000215 	stw	zero,8(sp)
   11ad4:	d8000115 	stw	zero,4(sp)
   11ad8:	d8000015 	stw	zero,0(sp)
   11adc:	100f883a 	mov	r7,r2
   11ae0:	01800104 	movi	r6,4
   11ae4:	01400184 	movi	r5,6
   11ae8:	01019004 	movi	r4,1600
   11aec:	00130c40 	call	130c4 <alt_avalon_spi_command>
   11af0:	e0bffa15 	stw	r2,-24(fp)


 	 			case CMD_BRDSPI16_WR:
 	 				if(Check_many_blocks (4)) break;

 	 				for(block = 0; block < LMS_Ctrl_Packet_Rx->Header.Data_blocks; block++)
   11af4:	d0a0c303 	ldbu	r2,-31988(gp)
   11af8:	10800044 	addi	r2,r2,1
   11afc:	d0a0c305 	stb	r2,-31988(gp)
   11b00:	d0a00217 	ldw	r2,-32760(gp)
   11b04:	10800083 	ldbu	r2,2(r2)
   11b08:	d0e0c303 	ldbu	r3,-31988(gp)
   11b0c:	10803fcc 	andi	r2,r2,255
   11b10:	18c03fcc 	andi	r3,r3,255
   11b14:	18bfd336 	bltu	r3,r2,11a64 <_gp+0xffff5674>
 	 					sbi(LMS_Ctrl_Packet_Rx->Data_field[0 + (block * 4)], 7); //set write bit

 	 					spirez = alt_avalon_spi_command(FPGA_SPI0_BASE, SPI_NR_FPGA, 4, &LMS_Ctrl_Packet_Rx->Data_field[0 + (block * 4)], 0, NULL, 0);
 	 				}

 	 				LMS_Ctrl_Packet_Tx->Header.Status = STATUS_COMPLETED_CMD;
   11b18:	d0a00117 	ldw	r2,-32764(gp)
   11b1c:	00c00044 	movi	r3,1
   11b20:	10c00045 	stb	r3,1(r2)
 	 			break;
   11b24:	00032006 	br	127a8 <main+0x156c>


 				case CMD_BRDSPI16_RD:
 					if(Check_many_blocks (4)) break;
   11b28:	01000104 	movi	r4,4
   11b2c:	001005c0 	call	1005c <Check_many_blocks>
   11b30:	10803fcc 	andi	r2,r2,255
   11b34:	1003131e 	bne	r2,zero,12784 <main+0x1548>

 					for(block = 0; block < LMS_Ctrl_Packet_Rx->Header.Data_blocks; block++)
   11b38:	d020c305 	stb	zero,-31988(gp)
   11b3c:	00002c06 	br	11bf0 <main+0x9b4>
 					{

 						//write reg addr
 						cbi(LMS_Ctrl_Packet_Rx->Data_field[0 + (block * 2)], 7);  //clear write bit
   11b40:	d0e00217 	ldw	r3,-32760(gp)
   11b44:	d0a0c303 	ldbu	r2,-31988(gp)
   11b48:	10803fcc 	andi	r2,r2,255
   11b4c:	1085883a 	add	r2,r2,r2
   11b50:	100b883a 	mov	r5,r2
   11b54:	d1200217 	ldw	r4,-32760(gp)
   11b58:	d0a0c303 	ldbu	r2,-31988(gp)
   11b5c:	10803fcc 	andi	r2,r2,255
   11b60:	1085883a 	add	r2,r2,r2
   11b64:	2085883a 	add	r2,r4,r2
   11b68:	10800204 	addi	r2,r2,8
   11b6c:	10800003 	ldbu	r2,0(r2)
   11b70:	10801fcc 	andi	r2,r2,127
   11b74:	1009883a 	mov	r4,r2
   11b78:	1945883a 	add	r2,r3,r5
   11b7c:	10800204 	addi	r2,r2,8
   11b80:	11000005 	stb	r4,0(r2)

 						spirez = alt_avalon_spi_command(FPGA_SPI0_BASE, SPI_NR_FPGA, 2, &LMS_Ctrl_Packet_Rx->Data_field[0 + (block * 2)], 2, &LMS_Ctrl_Packet_Tx->Data_field[2 + (block * 4)], 0);
   11b84:	d0e00217 	ldw	r3,-32760(gp)
   11b88:	d0a0c303 	ldbu	r2,-31988(gp)
   11b8c:	10803fcc 	andi	r2,r2,255
   11b90:	1085883a 	add	r2,r2,r2
   11b94:	10800204 	addi	r2,r2,8
   11b98:	1889883a 	add	r4,r3,r2
   11b9c:	d0e00117 	ldw	r3,-32764(gp)
   11ba0:	d0a0c303 	ldbu	r2,-31988(gp)
   11ba4:	10803fcc 	andi	r2,r2,255
   11ba8:	1085883a 	add	r2,r2,r2
   11bac:	1085883a 	add	r2,r2,r2
   11bb0:	10800084 	addi	r2,r2,2
   11bb4:	10800204 	addi	r2,r2,8
   11bb8:	1885883a 	add	r2,r3,r2
   11bbc:	d8000215 	stw	zero,8(sp)
   11bc0:	d8800115 	stw	r2,4(sp)
   11bc4:	00800084 	movi	r2,2
   11bc8:	d8800015 	stw	r2,0(sp)
   11bcc:	200f883a 	mov	r7,r4
   11bd0:	01800084 	movi	r6,2
   11bd4:	01400184 	movi	r5,6
   11bd8:	01019004 	movi	r4,1600
   11bdc:	00130c40 	call	130c4 <alt_avalon_spi_command>
   11be0:	e0bffa15 	stw	r2,-24(fp)


 				case CMD_BRDSPI16_RD:
 					if(Check_many_blocks (4)) break;

 					for(block = 0; block < LMS_Ctrl_Packet_Rx->Header.Data_blocks; block++)
   11be4:	d0a0c303 	ldbu	r2,-31988(gp)
   11be8:	10800044 	addi	r2,r2,1
   11bec:	d0a0c305 	stb	r2,-31988(gp)
   11bf0:	d0a00217 	ldw	r2,-32760(gp)
   11bf4:	10800083 	ldbu	r2,2(r2)
   11bf8:	d0e0c303 	ldbu	r3,-31988(gp)
   11bfc:	10803fcc 	andi	r2,r2,255
   11c00:	18c03fcc 	andi	r3,r3,255
   11c04:	18bfce36 	bltu	r3,r2,11b40 <_gp+0xffff5750>
 						cbi(LMS_Ctrl_Packet_Rx->Data_field[0 + (block * 2)], 7);  //clear write bit

 						spirez = alt_avalon_spi_command(FPGA_SPI0_BASE, SPI_NR_FPGA, 2, &LMS_Ctrl_Packet_Rx->Data_field[0 + (block * 2)], 2, &LMS_Ctrl_Packet_Tx->Data_field[2 + (block * 4)], 0);
 					}

 					LMS_Ctrl_Packet_Tx->Header.Status = STATUS_COMPLETED_CMD;
   11c08:	d0a00117 	ldw	r2,-32764(gp)
   11c0c:	00c00044 	movi	r3,1
   11c10:	10c00045 	stb	r3,1(r2)
 				break;
   11c14:	0002e406 	br	127a8 <main+0x156c>


 				case CMD_ADF4002_WR:
 					if(Check_many_blocks (3)) break;
   11c18:	010000c4 	movi	r4,3
   11c1c:	001005c0 	call	1005c <Check_many_blocks>
   11c20:	10803fcc 	andi	r2,r2,255
   11c24:	1002d91e 	bne	r2,zero,1278c <main+0x1550>

 					Control_TCXO_DAC (0, NULL); //set DAC out to three-state
   11c28:	000b883a 	mov	r5,zero
   11c2c:	0009883a 	mov	r4,zero
   11c30:	00107300 	call	10730 <Control_TCXO_DAC>

 					for(block = 0; block < LMS_Ctrl_Packet_Rx->Header.Data_blocks; block++)
   11c34:	d020c305 	stb	zero,-31988(gp)
   11c38:	00000e06 	br	11c74 <main+0xa38>
 					{
 						Control_TCXO_ADF (1, &LMS_Ctrl_Packet_Rx->Data_field[0 + (block*3)]); //write data to ADF
   11c3c:	d1200217 	ldw	r4,-32760(gp)
   11c40:	d0a0c303 	ldbu	r2,-31988(gp)
   11c44:	10c03fcc 	andi	r3,r2,255
   11c48:	1805883a 	mov	r2,r3
   11c4c:	1085883a 	add	r2,r2,r2
   11c50:	10c5883a 	add	r2,r2,r3
   11c54:	10800204 	addi	r2,r2,8
   11c58:	2085883a 	add	r2,r4,r2
   11c5c:	100b883a 	mov	r5,r2
   11c60:	01000044 	movi	r4,1
   11c64:	00107f40 	call	107f4 <Control_TCXO_ADF>
 				case CMD_ADF4002_WR:
 					if(Check_many_blocks (3)) break;

 					Control_TCXO_DAC (0, NULL); //set DAC out to three-state

 					for(block = 0; block < LMS_Ctrl_Packet_Rx->Header.Data_blocks; block++)
   11c68:	d0a0c303 	ldbu	r2,-31988(gp)
   11c6c:	10800044 	addi	r2,r2,1
   11c70:	d0a0c305 	stb	r2,-31988(gp)
   11c74:	d0a00217 	ldw	r2,-32760(gp)
   11c78:	10800083 	ldbu	r2,2(r2)
   11c7c:	d0e0c303 	ldbu	r3,-31988(gp)
   11c80:	10803fcc 	andi	r2,r2,255
   11c84:	18c03fcc 	andi	r3,r3,255
   11c88:	18bfec36 	bltu	r3,r2,11c3c <_gp+0xffff584c>
 					{
 						Control_TCXO_ADF (1, &LMS_Ctrl_Packet_Rx->Data_field[0 + (block*3)]); //write data to ADF
 					}

 					if(cmd_errors) LMS_Ctrl_Packet_Tx->Header.Status = STATUS_INVALID_PERIPH_ID_CMD;
   11c8c:	d0a0c383 	ldbu	r2,-31986(gp)
   11c90:	10803fcc 	andi	r2,r2,255
   11c94:	10000426 	beq	r2,zero,11ca8 <main+0xa6c>
   11c98:	d0a00117 	ldw	r2,-32764(gp)
   11c9c:	00c00204 	movi	r3,8
   11ca0:	10c00045 	stb	r3,1(r2)
 					else LMS_Ctrl_Packet_Tx->Header.Status = STATUS_COMPLETED_CMD;
 				break;
   11ca4:	0002c006 	br	127a8 <main+0x156c>
 					{
 						Control_TCXO_ADF (1, &LMS_Ctrl_Packet_Rx->Data_field[0 + (block*3)]); //write data to ADF
 					}

 					if(cmd_errors) LMS_Ctrl_Packet_Tx->Header.Status = STATUS_INVALID_PERIPH_ID_CMD;
 					else LMS_Ctrl_Packet_Tx->Header.Status = STATUS_COMPLETED_CMD;
   11ca8:	d0a00117 	ldw	r2,-32764(gp)
   11cac:	00c00044 	movi	r3,1
   11cb0:	10c00045 	stb	r3,1(r2)
 				break;
   11cb4:	0002bc06 	br	127a8 <main+0x156c>


				case CMD_ANALOG_VAL_RD:

					for(block = 0; block < LMS_Ctrl_Packet_Rx->Header.Data_blocks; block++)
   11cb8:	d020c305 	stb	zero,-31988(gp)
   11cbc:	00010406 	br	120d0 <main+0xe94>
					{
						switch (LMS_Ctrl_Packet_Rx->Data_field[0 + (block)])//ch
   11cc0:	d0e00217 	ldw	r3,-32760(gp)
   11cc4:	d0a0c303 	ldbu	r2,-31988(gp)
   11cc8:	10803fcc 	andi	r2,r2,255
   11ccc:	1885883a 	add	r2,r3,r2
   11cd0:	10800204 	addi	r2,r2,8
   11cd4:	10800003 	ldbu	r2,0(r2)
   11cd8:	10803fcc 	andi	r2,r2,255
   11cdc:	10c00060 	cmpeqi	r3,r2,1
   11ce0:	1800381e 	bne	r3,zero,11dc4 <main+0xb88>
   11ce4:	10c00088 	cmpgei	r3,r2,2
   11ce8:	1800021e 	bne	r3,zero,11cf4 <main+0xab8>
   11cec:	10000626 	beq	r2,zero,11d08 <main+0xacc>
   11cf0:	0000f006 	br	120b4 <main+0xe78>
   11cf4:	10c000a0 	cmpeqi	r3,r2,2
   11cf8:	1800901e 	bne	r3,zero,11f3c <main+0xd00>
   11cfc:	108000e0 	cmpeqi	r2,r2,3
   11d00:	1000bd1e 	bne	r2,zero,11ff8 <main+0xdbc>
   11d04:	0000eb06 	br	120b4 <main+0xe78>
						{
							case 0://dac val

								LMS_Ctrl_Packet_Tx->Data_field[0 + (block * 4)] = LMS_Ctrl_Packet_Rx->Data_field[block]; //ch
   11d08:	d1200117 	ldw	r4,-32764(gp)
   11d0c:	d0a0c303 	ldbu	r2,-31988(gp)
   11d10:	10803fcc 	andi	r2,r2,255
   11d14:	1085883a 	add	r2,r2,r2
   11d18:	1085883a 	add	r2,r2,r2
   11d1c:	100b883a 	mov	r5,r2
   11d20:	d0e00217 	ldw	r3,-32760(gp)
   11d24:	d0a0c303 	ldbu	r2,-31988(gp)
   11d28:	10803fcc 	andi	r2,r2,255
   11d2c:	1885883a 	add	r2,r3,r2
   11d30:	10800204 	addi	r2,r2,8
   11d34:	10c00003 	ldbu	r3,0(r2)
   11d38:	2145883a 	add	r2,r4,r5
   11d3c:	10800204 	addi	r2,r2,8
   11d40:	10c00005 	stb	r3,0(r2)
								LMS_Ctrl_Packet_Tx->Data_field[1 + (block * 4)] = 0x00; //RAW //unit, power
   11d44:	d0e00117 	ldw	r3,-32764(gp)
   11d48:	d0a0c303 	ldbu	r2,-31988(gp)
   11d4c:	10803fcc 	andi	r2,r2,255
   11d50:	1085883a 	add	r2,r2,r2
   11d54:	1085883a 	add	r2,r2,r2
   11d58:	10800044 	addi	r2,r2,1
   11d5c:	1885883a 	add	r2,r3,r2
   11d60:	10800204 	addi	r2,r2,8
   11d64:	10000005 	stb	zero,0(r2)

								//LMS_Ctrl_Packet_Tx->Data_field[2 + (block * 4)] = 0; //signed val, MSB byte
								//LMS_Ctrl_Packet_Tx->Data_field[3 + (block * 4)] = dac_val; //signed val, LSB byte
								LMS_Ctrl_Packet_Tx->Data_field[2 + (block * 4)] = (dac_val >> 8) & 0xFF; //unsigned val, MSB byte
   11d68:	d0e00117 	ldw	r3,-32764(gp)
   11d6c:	d0a0c303 	ldbu	r2,-31988(gp)
   11d70:	10803fcc 	andi	r2,r2,255
   11d74:	1085883a 	add	r2,r2,r2
   11d78:	1085883a 	add	r2,r2,r2
   11d7c:	10800084 	addi	r2,r2,2
   11d80:	d120000b 	ldhu	r4,-32768(gp)
   11d84:	213fffcc 	andi	r4,r4,65535
   11d88:	2008d23a 	srli	r4,r4,8
   11d8c:	1885883a 	add	r2,r3,r2
   11d90:	10800204 	addi	r2,r2,8
   11d94:	11000005 	stb	r4,0(r2)
								LMS_Ctrl_Packet_Tx->Data_field[3 + (block * 4)] = dac_val & 0xFF; //unsigned val, LSB byte
   11d98:	d0e00117 	ldw	r3,-32764(gp)
   11d9c:	d0a0c303 	ldbu	r2,-31988(gp)
   11da0:	10803fcc 	andi	r2,r2,255
   11da4:	1085883a 	add	r2,r2,r2
   11da8:	1085883a 	add	r2,r2,r2
   11dac:	108000c4 	addi	r2,r2,3
   11db0:	d120000b 	ldhu	r4,-32768(gp)
   11db4:	1885883a 	add	r2,r3,r2
   11db8:	10800204 	addi	r2,r2,8
   11dbc:	11000005 	stb	r4,0(r2)

							break;
   11dc0:	0000c006 	br	120c4 <main+0xe88>

							case 1: //temperature

								spirez = I2C_start(I2C_OPENCORES_0_BASE, LM75_I2C_ADDR, 0);
   11dc4:	000d883a 	mov	r6,zero
   11dc8:	01401204 	movi	r5,72
   11dcc:	01019804 	movi	r4,1632
   11dd0:	00133780 	call	13378 <I2C_start>
   11dd4:	e0bffa15 	stw	r2,-24(fp)
								spirez = I2C_write(I2C_OPENCORES_0_BASE, 0x00, 1);				// Pointer = temperature register
   11dd8:	01800044 	movi	r6,1
   11ddc:	000b883a 	mov	r5,zero
   11de0:	01019804 	movi	r4,1632
   11de4:	00134cc0 	call	134cc <I2C_write>
   11de8:	e0bffa15 	stw	r2,-24(fp)
								spirez = I2C_start(I2C_OPENCORES_0_BASE, LM75_I2C_ADDR, 1);
   11dec:	01800044 	movi	r6,1
   11df0:	01401204 	movi	r5,72
   11df4:	01019804 	movi	r4,1632
   11df8:	00133780 	call	13378 <I2C_start>
   11dfc:	e0bffa15 	stw	r2,-24(fp)

								// Read temperature and recalculate
								converted_val = (signed short int)I2C_read(I2C_OPENCORES_0_BASE, 0);
   11e00:	000b883a 	mov	r5,zero
   11e04:	01019804 	movi	r4,1632
   11e08:	00134380 	call	13438 <I2C_read>
   11e0c:	d0a0008d 	sth	r2,-32766(gp)
								converted_val = converted_val << 8;
   11e10:	d0a0008b 	ldhu	r2,-32766(gp)
   11e14:	10bfffcc 	andi	r2,r2,65535
   11e18:	10a0001c 	xori	r2,r2,32768
   11e1c:	10a00004 	addi	r2,r2,-32768
   11e20:	1004923a 	slli	r2,r2,8
   11e24:	d0a0008d 	sth	r2,-32766(gp)
								converted_val = 10 * (converted_val >> 8);
   11e28:	d0a0008b 	ldhu	r2,-32766(gp)
   11e2c:	10bfffcc 	andi	r2,r2,65535
   11e30:	10a0001c 	xori	r2,r2,32768
   11e34:	10a00004 	addi	r2,r2,-32768
   11e38:	1005d23a 	srai	r2,r2,8
   11e3c:	01400284 	movi	r5,10
   11e40:	1009883a 	mov	r4,r2
   11e44:	0012c300 	call	12c30 <__mulsi3>
   11e48:	d0a0008d 	sth	r2,-32766(gp)
								spirez = I2C_read(I2C_OPENCORES_0_BASE, 1);
   11e4c:	01400044 	movi	r5,1
   11e50:	01019804 	movi	r4,1632
   11e54:	00134380 	call	13438 <I2C_read>
   11e58:	e0bffa15 	stw	r2,-24(fp)
								if(spirez & 0x80) converted_val = converted_val + 5;
   11e5c:	e0bffa17 	ldw	r2,-24(fp)
   11e60:	1080200c 	andi	r2,r2,128
   11e64:	10000326 	beq	r2,zero,11e74 <main+0xc38>
   11e68:	d0a0008b 	ldhu	r2,-32766(gp)
   11e6c:	10800144 	addi	r2,r2,5
   11e70:	d0a0008d 	sth	r2,-32766(gp)

								LMS_Ctrl_Packet_Tx->Data_field[0 + (block * 4)] = LMS_Ctrl_Packet_Rx->Data_field[block]; //ch
   11e74:	d1200117 	ldw	r4,-32764(gp)
   11e78:	d0a0c303 	ldbu	r2,-31988(gp)
   11e7c:	10803fcc 	andi	r2,r2,255
   11e80:	1085883a 	add	r2,r2,r2
   11e84:	1085883a 	add	r2,r2,r2
   11e88:	100b883a 	mov	r5,r2
   11e8c:	d0e00217 	ldw	r3,-32760(gp)
   11e90:	d0a0c303 	ldbu	r2,-31988(gp)
   11e94:	10803fcc 	andi	r2,r2,255
   11e98:	1885883a 	add	r2,r3,r2
   11e9c:	10800204 	addi	r2,r2,8
   11ea0:	10c00003 	ldbu	r3,0(r2)
   11ea4:	2145883a 	add	r2,r4,r5
   11ea8:	10800204 	addi	r2,r2,8
   11eac:	10c00005 	stb	r3,0(r2)
								LMS_Ctrl_Packet_Tx->Data_field[1 + (block * 4)] = 0x50; //mC //unit, power
   11eb0:	d0e00117 	ldw	r3,-32764(gp)
   11eb4:	d0a0c303 	ldbu	r2,-31988(gp)
   11eb8:	10803fcc 	andi	r2,r2,255
   11ebc:	1085883a 	add	r2,r2,r2
   11ec0:	1085883a 	add	r2,r2,r2
   11ec4:	10800044 	addi	r2,r2,1
   11ec8:	1885883a 	add	r2,r3,r2
   11ecc:	10800204 	addi	r2,r2,8
   11ed0:	00c01404 	movi	r3,80
   11ed4:	10c00005 	stb	r3,0(r2)

								LMS_Ctrl_Packet_Tx->Data_field[2 + (block * 4)] = (converted_val >> 8); //signed val, MSB byte
   11ed8:	d0e00117 	ldw	r3,-32764(gp)
   11edc:	d0a0c303 	ldbu	r2,-31988(gp)
   11ee0:	10803fcc 	andi	r2,r2,255
   11ee4:	1085883a 	add	r2,r2,r2
   11ee8:	1085883a 	add	r2,r2,r2
   11eec:	10800084 	addi	r2,r2,2
   11ef0:	d120008b 	ldhu	r4,-32766(gp)
   11ef4:	213fffcc 	andi	r4,r4,65535
   11ef8:	2120001c 	xori	r4,r4,32768
   11efc:	21200004 	addi	r4,r4,-32768
   11f00:	2009d23a 	srai	r4,r4,8
   11f04:	1885883a 	add	r2,r3,r2
   11f08:	10800204 	addi	r2,r2,8
   11f0c:	11000005 	stb	r4,0(r2)
								LMS_Ctrl_Packet_Tx->Data_field[3 + (block * 4)] = converted_val; //signed val, LSB byte
   11f10:	d0e00117 	ldw	r3,-32764(gp)
   11f14:	d0a0c303 	ldbu	r2,-31988(gp)
   11f18:	10803fcc 	andi	r2,r2,255
   11f1c:	1085883a 	add	r2,r2,r2
   11f20:	1085883a 	add	r2,r2,r2
   11f24:	108000c4 	addi	r2,r2,3
   11f28:	d120008b 	ldhu	r4,-32766(gp)
   11f2c:	1885883a 	add	r2,r3,r2
   11f30:	10800204 	addi	r2,r2,8
   11f34:	11000005 	stb	r4,0(r2)

							break;
   11f38:	00006206 	br	120c4 <main+0xe88>

							case 2://wiper 0 position
								LMS_Ctrl_Packet_Tx->Data_field[0 + (block * 4)] = LMS_Ctrl_Packet_Rx->Data_field[block]; //ch
   11f3c:	d1200117 	ldw	r4,-32764(gp)
   11f40:	d0a0c303 	ldbu	r2,-31988(gp)
   11f44:	10803fcc 	andi	r2,r2,255
   11f48:	1085883a 	add	r2,r2,r2
   11f4c:	1085883a 	add	r2,r2,r2
   11f50:	100b883a 	mov	r5,r2
   11f54:	d0e00217 	ldw	r3,-32760(gp)
   11f58:	d0a0c303 	ldbu	r2,-31988(gp)
   11f5c:	10803fcc 	andi	r2,r2,255
   11f60:	1885883a 	add	r2,r3,r2
   11f64:	10800204 	addi	r2,r2,8
   11f68:	10c00003 	ldbu	r3,0(r2)
   11f6c:	2145883a 	add	r2,r4,r5
   11f70:	10800204 	addi	r2,r2,8
   11f74:	10c00005 	stb	r3,0(r2)
								LMS_Ctrl_Packet_Tx->Data_field[1 + (block * 4)] = 0x00; //RAW //unit, power
   11f78:	d0e00117 	ldw	r3,-32764(gp)
   11f7c:	d0a0c303 	ldbu	r2,-31988(gp)
   11f80:	10803fcc 	andi	r2,r2,255
   11f84:	1085883a 	add	r2,r2,r2
   11f88:	1085883a 	add	r2,r2,r2
   11f8c:	10800044 	addi	r2,r2,1
   11f90:	1885883a 	add	r2,r3,r2
   11f94:	10800204 	addi	r2,r2,8
   11f98:	10000005 	stb	zero,0(r2)

								LMS_Ctrl_Packet_Tx->Data_field[2 + (block * 4)] = (wiper_pos[0] >> 8) & 0xFF; //signed val, MSB byte
   11f9c:	d0e00117 	ldw	r3,-32764(gp)
   11fa0:	d0a0c303 	ldbu	r2,-31988(gp)
   11fa4:	10803fcc 	andi	r2,r2,255
   11fa8:	1085883a 	add	r2,r2,r2
   11fac:	1085883a 	add	r2,r2,r2
   11fb0:	10800084 	addi	r2,r2,2
   11fb4:	e13ffc8b 	ldhu	r4,-14(fp)
   11fb8:	213fffcc 	andi	r4,r4,65535
   11fbc:	2008d23a 	srli	r4,r4,8
   11fc0:	1885883a 	add	r2,r3,r2
   11fc4:	10800204 	addi	r2,r2,8
   11fc8:	11000005 	stb	r4,0(r2)
								LMS_Ctrl_Packet_Tx->Data_field[3 + (block * 4)] = wiper_pos[0] & 0xFF; //signed val, LSB byte
   11fcc:	d0e00117 	ldw	r3,-32764(gp)
   11fd0:	d0a0c303 	ldbu	r2,-31988(gp)
   11fd4:	10803fcc 	andi	r2,r2,255
   11fd8:	1085883a 	add	r2,r2,r2
   11fdc:	1085883a 	add	r2,r2,r2
   11fe0:	108000c4 	addi	r2,r2,3
   11fe4:	e13ffc8b 	ldhu	r4,-14(fp)
   11fe8:	1885883a 	add	r2,r3,r2
   11fec:	10800204 	addi	r2,r2,8
   11ff0:	11000005 	stb	r4,0(r2)
							break;
   11ff4:	00003306 	br	120c4 <main+0xe88>

							case 3://wiper 1 position
								LMS_Ctrl_Packet_Tx->Data_field[0 + (block * 4)] = LMS_Ctrl_Packet_Rx->Data_field[block]; //ch
   11ff8:	d1200117 	ldw	r4,-32764(gp)
   11ffc:	d0a0c303 	ldbu	r2,-31988(gp)
   12000:	10803fcc 	andi	r2,r2,255
   12004:	1085883a 	add	r2,r2,r2
   12008:	1085883a 	add	r2,r2,r2
   1200c:	100b883a 	mov	r5,r2
   12010:	d0e00217 	ldw	r3,-32760(gp)
   12014:	d0a0c303 	ldbu	r2,-31988(gp)
   12018:	10803fcc 	andi	r2,r2,255
   1201c:	1885883a 	add	r2,r3,r2
   12020:	10800204 	addi	r2,r2,8
   12024:	10c00003 	ldbu	r3,0(r2)
   12028:	2145883a 	add	r2,r4,r5
   1202c:	10800204 	addi	r2,r2,8
   12030:	10c00005 	stb	r3,0(r2)
								LMS_Ctrl_Packet_Tx->Data_field[1 + (block * 4)] = 0x00; //RAW //unit, power
   12034:	d0e00117 	ldw	r3,-32764(gp)
   12038:	d0a0c303 	ldbu	r2,-31988(gp)
   1203c:	10803fcc 	andi	r2,r2,255
   12040:	1085883a 	add	r2,r2,r2
   12044:	1085883a 	add	r2,r2,r2
   12048:	10800044 	addi	r2,r2,1
   1204c:	1885883a 	add	r2,r3,r2
   12050:	10800204 	addi	r2,r2,8
   12054:	10000005 	stb	zero,0(r2)

								LMS_Ctrl_Packet_Tx->Data_field[2 + (block * 4)] = (wiper_pos[1] >> 8) & 0xFF; //signed val, MSB byte
   12058:	d0e00117 	ldw	r3,-32764(gp)
   1205c:	d0a0c303 	ldbu	r2,-31988(gp)
   12060:	10803fcc 	andi	r2,r2,255
   12064:	1085883a 	add	r2,r2,r2
   12068:	1085883a 	add	r2,r2,r2
   1206c:	10800084 	addi	r2,r2,2
   12070:	e13ffd0b 	ldhu	r4,-12(fp)
   12074:	213fffcc 	andi	r4,r4,65535
   12078:	2008d23a 	srli	r4,r4,8
   1207c:	1885883a 	add	r2,r3,r2
   12080:	10800204 	addi	r2,r2,8
   12084:	11000005 	stb	r4,0(r2)
								LMS_Ctrl_Packet_Tx->Data_field[3 + (block * 4)] = wiper_pos[1] & 0xFF; //signed val, LSB byte
   12088:	d0e00117 	ldw	r3,-32764(gp)
   1208c:	d0a0c303 	ldbu	r2,-31988(gp)
   12090:	10803fcc 	andi	r2,r2,255
   12094:	1085883a 	add	r2,r2,r2
   12098:	1085883a 	add	r2,r2,r2
   1209c:	108000c4 	addi	r2,r2,3
   120a0:	e13ffd0b 	ldhu	r4,-12(fp)
   120a4:	1885883a 	add	r2,r3,r2
   120a8:	10800204 	addi	r2,r2,8
   120ac:	11000005 	stb	r4,0(r2)
							break;
   120b0:	00000406 	br	120c4 <main+0xe88>

							default:
								cmd_errors++;
   120b4:	d0a0c383 	ldbu	r2,-31986(gp)
   120b8:	10800044 	addi	r2,r2,1
   120bc:	d0a0c385 	stb	r2,-31986(gp)
							break;
   120c0:	0001883a 	nop
 				break;


				case CMD_ANALOG_VAL_RD:

					for(block = 0; block < LMS_Ctrl_Packet_Rx->Header.Data_blocks; block++)
   120c4:	d0a0c303 	ldbu	r2,-31988(gp)
   120c8:	10800044 	addi	r2,r2,1
   120cc:	d0a0c305 	stb	r2,-31988(gp)
   120d0:	d0a00217 	ldw	r2,-32760(gp)
   120d4:	10800083 	ldbu	r2,2(r2)
   120d8:	d0e0c303 	ldbu	r3,-31988(gp)
   120dc:	10803fcc 	andi	r2,r2,255
   120e0:	18c03fcc 	andi	r3,r3,255
   120e4:	18bef636 	bltu	r3,r2,11cc0 <_gp+0xffff58d0>
								cmd_errors++;
							break;
						}
					}

					LMS_Ctrl_Packet_Tx->Header.Status = STATUS_COMPLETED_CMD;
   120e8:	d0a00117 	ldw	r2,-32764(gp)
   120ec:	00c00044 	movi	r3,1
   120f0:	10c00045 	stb	r3,1(r2)

				break;
   120f4:	0001ac06 	br	127a8 <main+0x156c>


				case CMD_ANALOG_VAL_WR:
					if(Check_many_blocks (4)) break;
   120f8:	01000104 	movi	r4,4
   120fc:	001005c0 	call	1005c <Check_many_blocks>
   12100:	10803fcc 	andi	r2,r2,255
   12104:	1001a31e 	bne	r2,zero,12794 <main+0x1558>

					for(block = 0; block < LMS_Ctrl_Packet_Rx->Header.Data_blocks; block++)
   12108:	d020c305 	stb	zero,-31988(gp)
   1210c:	0000e806 	br	124b0 <main+0x1274>
					{
						switch (LMS_Ctrl_Packet_Rx->Data_field[0 + (block * 4)]) //do something according to channel
   12110:	d0e00217 	ldw	r3,-32760(gp)
   12114:	d0a0c303 	ldbu	r2,-31988(gp)
   12118:	10803fcc 	andi	r2,r2,255
   1211c:	1085883a 	add	r2,r2,r2
   12120:	1085883a 	add	r2,r2,r2
   12124:	1885883a 	add	r2,r3,r2
   12128:	10800204 	addi	r2,r2,8
   1212c:	10800003 	ldbu	r2,0(r2)
   12130:	10803fcc 	andi	r2,r2,255
   12134:	10c000a0 	cmpeqi	r3,r2,2
   12138:	1800311e 	bne	r3,zero,12200 <main+0xfc4>
   1213c:	10c000e0 	cmpeqi	r3,r2,3
   12140:	1800811e 	bne	r3,zero,12348 <main+0x110c>
   12144:	1000d31e 	bne	r2,zero,12494 <main+0x1258>
						{
							case 0: //TCXO DAC
								if (LMS_Ctrl_Packet_Rx->Data_field[1 + (block * 4)] == 0) //RAW units?
   12148:	d0e00217 	ldw	r3,-32760(gp)
   1214c:	d0a0c303 	ldbu	r2,-31988(gp)
   12150:	10803fcc 	andi	r2,r2,255
   12154:	1085883a 	add	r2,r2,r2
   12158:	1085883a 	add	r2,r2,r2
   1215c:	10800044 	addi	r2,r2,1
   12160:	1885883a 	add	r2,r3,r2
   12164:	10800204 	addi	r2,r2,8
   12168:	10800003 	ldbu	r2,0(r2)
   1216c:	10803fcc 	andi	r2,r2,255
   12170:	10001f1e 	bne	r2,zero,121f0 <main+0xfb4>
								{
									Control_TCXO_ADF(0, NULL); //set ADF4002 CP to three-state
   12174:	000b883a 	mov	r5,zero
   12178:	0009883a 	mov	r4,zero
   1217c:	00107f40 	call	107f4 <Control_TCXO_ADF>

									//write data to DAC
									//dac_val = LMS_Ctrl_Packet_Rx->Data_field[3 + (block * 4)];
									dac_val = (LMS_Ctrl_Packet_Rx->Data_field[2 + (block * 4)] << 8 ) + LMS_Ctrl_Packet_Rx->Data_field[3 + (block * 4)];
   12180:	d0e00217 	ldw	r3,-32760(gp)
   12184:	d0a0c303 	ldbu	r2,-31988(gp)
   12188:	10803fcc 	andi	r2,r2,255
   1218c:	1085883a 	add	r2,r2,r2
   12190:	1085883a 	add	r2,r2,r2
   12194:	10800084 	addi	r2,r2,2
   12198:	1885883a 	add	r2,r3,r2
   1219c:	10800204 	addi	r2,r2,8
   121a0:	10800003 	ldbu	r2,0(r2)
   121a4:	10803fcc 	andi	r2,r2,255
   121a8:	1004923a 	slli	r2,r2,8
   121ac:	1009883a 	mov	r4,r2
   121b0:	d0e00217 	ldw	r3,-32760(gp)
   121b4:	d0a0c303 	ldbu	r2,-31988(gp)
   121b8:	10803fcc 	andi	r2,r2,255
   121bc:	1085883a 	add	r2,r2,r2
   121c0:	1085883a 	add	r2,r2,r2
   121c4:	108000c4 	addi	r2,r2,3
   121c8:	1885883a 	add	r2,r3,r2
   121cc:	10800204 	addi	r2,r2,8
   121d0:	10800003 	ldbu	r2,0(r2)
   121d4:	10803fcc 	andi	r2,r2,255
   121d8:	2085883a 	add	r2,r4,r2
   121dc:	d0a0000d 	sth	r2,-32768(gp)
									Control_TCXO_DAC(1, &dac_val); //enable DAC output, set new val
   121e0:	d1600004 	addi	r5,gp,-32768
   121e4:	01000044 	movi	r4,1
   121e8:	00107300 	call	10730 <Control_TCXO_DAC>
								}
								else cmd_errors++;

							break;
   121ec:	0000ad06 	br	124a4 <main+0x1268>
									//write data to DAC
									//dac_val = LMS_Ctrl_Packet_Rx->Data_field[3 + (block * 4)];
									dac_val = (LMS_Ctrl_Packet_Rx->Data_field[2 + (block * 4)] << 8 ) + LMS_Ctrl_Packet_Rx->Data_field[3 + (block * 4)];
									Control_TCXO_DAC(1, &dac_val); //enable DAC output, set new val
								}
								else cmd_errors++;
   121f0:	d0a0c383 	ldbu	r2,-31986(gp)
   121f4:	10800044 	addi	r2,r2,1
   121f8:	d0a0c385 	stb	r2,-31986(gp)

							break;
   121fc:	0000a906 	br	124a4 <main+0x1268>

							case 2: //MCP4261 wiper 0 control

								if (LMS_Ctrl_Packet_Rx->Data_field[1 + (block * 4)] == 0) //RAW units?
   12200:	d0e00217 	ldw	r3,-32760(gp)
   12204:	d0a0c303 	ldbu	r2,-31988(gp)
   12208:	10803fcc 	andi	r2,r2,255
   1220c:	1085883a 	add	r2,r2,r2
   12210:	1085883a 	add	r2,r2,r2
   12214:	10800044 	addi	r2,r2,1
   12218:	1885883a 	add	r2,r3,r2
   1221c:	10800204 	addi	r2,r2,8
   12220:	10800003 	ldbu	r2,0(r2)
   12224:	10803fcc 	andi	r2,r2,255
   12228:	1000431e 	bne	r2,zero,12338 <main+0x10fc>
								{
									wiper_pos[0] = (LMS_Ctrl_Packet_Rx->Data_field[2 + (block * 4)] << 8) + LMS_Ctrl_Packet_Rx->Data_field[3 + (block * 4)];
   1222c:	d0e00217 	ldw	r3,-32760(gp)
   12230:	d0a0c303 	ldbu	r2,-31988(gp)
   12234:	10803fcc 	andi	r2,r2,255
   12238:	1085883a 	add	r2,r2,r2
   1223c:	1085883a 	add	r2,r2,r2
   12240:	10800084 	addi	r2,r2,2
   12244:	1885883a 	add	r2,r3,r2
   12248:	10800204 	addi	r2,r2,8
   1224c:	10800003 	ldbu	r2,0(r2)
   12250:	10803fcc 	andi	r2,r2,255
   12254:	1004923a 	slli	r2,r2,8
   12258:	1009883a 	mov	r4,r2
   1225c:	d0e00217 	ldw	r3,-32760(gp)
   12260:	d0a0c303 	ldbu	r2,-31988(gp)
   12264:	10803fcc 	andi	r2,r2,255
   12268:	1085883a 	add	r2,r2,r2
   1226c:	1085883a 	add	r2,r2,r2
   12270:	108000c4 	addi	r2,r2,3
   12274:	1885883a 	add	r2,r3,r2
   12278:	10800204 	addi	r2,r2,8
   1227c:	10800003 	ldbu	r2,0(r2)
   12280:	10803fcc 	andi	r2,r2,255
   12284:	2085883a 	add	r2,r4,r2
   12288:	e0bffc8d 	sth	r2,-14(fp)
									if(wiper_pos[0] <= 256)
   1228c:	e0bffc8b 	ldhu	r2,-14(fp)
   12290:	10bfffcc 	andi	r2,r2,65535
   12294:	10804068 	cmpgeui	r2,r2,257
   12298:	1000231e 	bne	r2,zero,12328 <main+0x10ec>
									{
										MCP_data[0] = MCP_data[1] = 0;
   1229c:	e03ffc45 	stb	zero,-15(fp)
   122a0:	e0bffc43 	ldbu	r2,-15(fp)
   122a4:	e0bffc05 	stb	r2,-16(fp)

										MCP_data[0] |= (0x00 << 4); //Memory addr [16:13] = Volatile Wiper 0 (0x00)
   122a8:	e0bffc03 	ldbu	r2,-16(fp)
   122ac:	e0bffc05 	stb	r2,-16(fp)
										MCP_data[0] |= (0x00 << 2); //Command bits [11:10] = CMD  Write data (0x00)
   122b0:	e0bffc03 	ldbu	r2,-16(fp)
   122b4:	e0bffc05 	stb	r2,-16(fp)

										if (wiper_pos[0] > 255)	MCP_data[0] |= (0x01); //Full Scale (W = A)
   122b8:	e0bffc8b 	ldhu	r2,-14(fp)
   122bc:	10bfffcc 	andi	r2,r2,65535
   122c0:	10804030 	cmpltui	r2,r2,256
   122c4:	1000031e 	bne	r2,zero,122d4 <main+0x1098>
   122c8:	e0bffc03 	ldbu	r2,-16(fp)
   122cc:	10800054 	ori	r2,r2,1
   122d0:	e0bffc05 	stb	r2,-16(fp)

										MCP_data[1] = LMS_Ctrl_Packet_Rx->Data_field[3 + (block * 4)];
   122d4:	d0e00217 	ldw	r3,-32760(gp)
   122d8:	d0a0c303 	ldbu	r2,-31988(gp)
   122dc:	10803fcc 	andi	r2,r2,255
   122e0:	1085883a 	add	r2,r2,r2
   122e4:	1085883a 	add	r2,r2,r2
   122e8:	108000c4 	addi	r2,r2,3
   122ec:	1885883a 	add	r2,r3,r2
   122f0:	10800204 	addi	r2,r2,8
   122f4:	10800003 	ldbu	r2,0(r2)
   122f8:	e0bffc45 	stb	r2,-15(fp)

										spirez = alt_avalon_spi_command(FPGA_SPI0_BASE, SPI_NR_POT, 2, MCP_data, 0, NULL, 0);
   122fc:	e0bffc04 	addi	r2,fp,-16
   12300:	d8000215 	stw	zero,8(sp)
   12304:	d8000115 	stw	zero,4(sp)
   12308:	d8000015 	stw	zero,0(sp)
   1230c:	100f883a 	mov	r7,r2
   12310:	01800084 	movi	r6,2
   12314:	01400104 	movi	r5,4
   12318:	01019004 	movi	r4,1600
   1231c:	00130c40 	call	130c4 <alt_avalon_spi_command>
   12320:	e0bffa15 	stw	r2,-24(fp)
									}
									else cmd_errors++;
								}
								else cmd_errors++;
							break;
   12324:	00005f06 	br	124a4 <main+0x1268>

										MCP_data[1] = LMS_Ctrl_Packet_Rx->Data_field[3 + (block * 4)];

										spirez = alt_avalon_spi_command(FPGA_SPI0_BASE, SPI_NR_POT, 2, MCP_data, 0, NULL, 0);
									}
									else cmd_errors++;
   12328:	d0a0c383 	ldbu	r2,-31986(gp)
   1232c:	10800044 	addi	r2,r2,1
   12330:	d0a0c385 	stb	r2,-31986(gp)
								}
								else cmd_errors++;
							break;
   12334:	00005b06 	br	124a4 <main+0x1268>

										spirez = alt_avalon_spi_command(FPGA_SPI0_BASE, SPI_NR_POT, 2, MCP_data, 0, NULL, 0);
									}
									else cmd_errors++;
								}
								else cmd_errors++;
   12338:	d0a0c383 	ldbu	r2,-31986(gp)
   1233c:	10800044 	addi	r2,r2,1
   12340:	d0a0c385 	stb	r2,-31986(gp)
							break;
   12344:	00005706 	br	124a4 <main+0x1268>

							case 3: //MCP4261 wiper 1 control

								if (LMS_Ctrl_Packet_Rx->Data_field[1 + (block * 4)] == 0) //RAW units?
   12348:	d0e00217 	ldw	r3,-32760(gp)
   1234c:	d0a0c303 	ldbu	r2,-31988(gp)
   12350:	10803fcc 	andi	r2,r2,255
   12354:	1085883a 	add	r2,r2,r2
   12358:	1085883a 	add	r2,r2,r2
   1235c:	10800044 	addi	r2,r2,1
   12360:	1885883a 	add	r2,r3,r2
   12364:	10800204 	addi	r2,r2,8
   12368:	10800003 	ldbu	r2,0(r2)
   1236c:	10803fcc 	andi	r2,r2,255
   12370:	1000441e 	bne	r2,zero,12484 <main+0x1248>
								{
									wiper_pos[1] = (LMS_Ctrl_Packet_Rx->Data_field[2 + (block * 4)] << 8) + LMS_Ctrl_Packet_Rx->Data_field[3 + (block * 4)];
   12374:	d0e00217 	ldw	r3,-32760(gp)
   12378:	d0a0c303 	ldbu	r2,-31988(gp)
   1237c:	10803fcc 	andi	r2,r2,255
   12380:	1085883a 	add	r2,r2,r2
   12384:	1085883a 	add	r2,r2,r2
   12388:	10800084 	addi	r2,r2,2
   1238c:	1885883a 	add	r2,r3,r2
   12390:	10800204 	addi	r2,r2,8
   12394:	10800003 	ldbu	r2,0(r2)
   12398:	10803fcc 	andi	r2,r2,255
   1239c:	1004923a 	slli	r2,r2,8
   123a0:	1009883a 	mov	r4,r2
   123a4:	d0e00217 	ldw	r3,-32760(gp)
   123a8:	d0a0c303 	ldbu	r2,-31988(gp)
   123ac:	10803fcc 	andi	r2,r2,255
   123b0:	1085883a 	add	r2,r2,r2
   123b4:	1085883a 	add	r2,r2,r2
   123b8:	108000c4 	addi	r2,r2,3
   123bc:	1885883a 	add	r2,r3,r2
   123c0:	10800204 	addi	r2,r2,8
   123c4:	10800003 	ldbu	r2,0(r2)
   123c8:	10803fcc 	andi	r2,r2,255
   123cc:	2085883a 	add	r2,r4,r2
   123d0:	e0bffd0d 	sth	r2,-12(fp)
									if(wiper_pos[1] <= 256)
   123d4:	e0bffd0b 	ldhu	r2,-12(fp)
   123d8:	10bfffcc 	andi	r2,r2,65535
   123dc:	10804068 	cmpgeui	r2,r2,257
   123e0:	1000241e 	bne	r2,zero,12474 <main+0x1238>
									{
										MCP_data[0] = MCP_data[1] = 0;
   123e4:	e03ffc45 	stb	zero,-15(fp)
   123e8:	e0bffc43 	ldbu	r2,-15(fp)
   123ec:	e0bffc05 	stb	r2,-16(fp)

										MCP_data[0] |= (0x01 << 4); //Memory addr [16:13] = Volatile Wiper 1 (0x01)
   123f0:	e0bffc03 	ldbu	r2,-16(fp)
   123f4:	10800414 	ori	r2,r2,16
   123f8:	e0bffc05 	stb	r2,-16(fp)
										MCP_data[0] |= (0x00 << 2); //Command bits [11:10] = CMD  Write data (0x00)
   123fc:	e0bffc03 	ldbu	r2,-16(fp)
   12400:	e0bffc05 	stb	r2,-16(fp)

										if (wiper_pos[1] > 255)	MCP_data[0] |= (0x01); //Full Scale (W = A)
   12404:	e0bffd0b 	ldhu	r2,-12(fp)
   12408:	10bfffcc 	andi	r2,r2,65535
   1240c:	10804030 	cmpltui	r2,r2,256
   12410:	1000031e 	bne	r2,zero,12420 <main+0x11e4>
   12414:	e0bffc03 	ldbu	r2,-16(fp)
   12418:	10800054 	ori	r2,r2,1
   1241c:	e0bffc05 	stb	r2,-16(fp)

										MCP_data[1] = LMS_Ctrl_Packet_Rx->Data_field[3 + (block * 4)];
   12420:	d0e00217 	ldw	r3,-32760(gp)
   12424:	d0a0c303 	ldbu	r2,-31988(gp)
   12428:	10803fcc 	andi	r2,r2,255
   1242c:	1085883a 	add	r2,r2,r2
   12430:	1085883a 	add	r2,r2,r2
   12434:	108000c4 	addi	r2,r2,3
   12438:	1885883a 	add	r2,r3,r2
   1243c:	10800204 	addi	r2,r2,8
   12440:	10800003 	ldbu	r2,0(r2)
   12444:	e0bffc45 	stb	r2,-15(fp)

										spirez = alt_avalon_spi_command(FPGA_SPI0_BASE, SPI_NR_POT, 2, MCP_data, 0, NULL, 0);
   12448:	e0bffc04 	addi	r2,fp,-16
   1244c:	d8000215 	stw	zero,8(sp)
   12450:	d8000115 	stw	zero,4(sp)
   12454:	d8000015 	stw	zero,0(sp)
   12458:	100f883a 	mov	r7,r2
   1245c:	01800084 	movi	r6,2
   12460:	01400104 	movi	r5,4
   12464:	01019004 	movi	r4,1600
   12468:	00130c40 	call	130c4 <alt_avalon_spi_command>
   1246c:	e0bffa15 	stw	r2,-24(fp)
									}
									else cmd_errors++;
								}
								else cmd_errors++;
							break;
   12470:	00000c06 	br	124a4 <main+0x1268>

										MCP_data[1] = LMS_Ctrl_Packet_Rx->Data_field[3 + (block * 4)];

										spirez = alt_avalon_spi_command(FPGA_SPI0_BASE, SPI_NR_POT, 2, MCP_data, 0, NULL, 0);
									}
									else cmd_errors++;
   12474:	d0a0c383 	ldbu	r2,-31986(gp)
   12478:	10800044 	addi	r2,r2,1
   1247c:	d0a0c385 	stb	r2,-31986(gp)
								}
								else cmd_errors++;
							break;
   12480:	00000806 	br	124a4 <main+0x1268>

										spirez = alt_avalon_spi_command(FPGA_SPI0_BASE, SPI_NR_POT, 2, MCP_data, 0, NULL, 0);
									}
									else cmd_errors++;
								}
								else cmd_errors++;
   12484:	d0a0c383 	ldbu	r2,-31986(gp)
   12488:	10800044 	addi	r2,r2,1
   1248c:	d0a0c385 	stb	r2,-31986(gp)
							break;
   12490:	00000406 	br	124a4 <main+0x1268>

							default:
								cmd_errors++;
   12494:	d0a0c383 	ldbu	r2,-31986(gp)
   12498:	10800044 	addi	r2,r2,1
   1249c:	d0a0c385 	stb	r2,-31986(gp)
							break;
   124a0:	0001883a 	nop


				case CMD_ANALOG_VAL_WR:
					if(Check_many_blocks (4)) break;

					for(block = 0; block < LMS_Ctrl_Packet_Rx->Header.Data_blocks; block++)
   124a4:	d0a0c303 	ldbu	r2,-31988(gp)
   124a8:	10800044 	addi	r2,r2,1
   124ac:	d0a0c305 	stb	r2,-31988(gp)
   124b0:	d0a00217 	ldw	r2,-32760(gp)
   124b4:	10800083 	ldbu	r2,2(r2)
   124b8:	d0e0c303 	ldbu	r3,-31988(gp)
   124bc:	10803fcc 	andi	r2,r2,255
   124c0:	18c03fcc 	andi	r3,r3,255
   124c4:	18bf1236 	bltu	r3,r2,12110 <_gp+0xffff5d20>
								cmd_errors++;
							break;
						}
					}

					if(cmd_errors) LMS_Ctrl_Packet_Tx->Header.Status = STATUS_ERROR_CMD;
   124c8:	d0a0c383 	ldbu	r2,-31986(gp)
   124cc:	10803fcc 	andi	r2,r2,255
   124d0:	10000426 	beq	r2,zero,124e4 <main+0x12a8>
   124d4:	d0a00117 	ldw	r2,-32764(gp)
   124d8:	00c00144 	movi	r3,5
   124dc:	10c00045 	stb	r3,1(r2)
					else LMS_Ctrl_Packet_Tx->Header.Status = STATUS_COMPLETED_CMD;

				break;
   124e0:	0000b106 	br	127a8 <main+0x156c>
							break;
						}
					}

					if(cmd_errors) LMS_Ctrl_Packet_Tx->Header.Status = STATUS_ERROR_CMD;
					else LMS_Ctrl_Packet_Tx->Header.Status = STATUS_COMPLETED_CMD;
   124e4:	d0a00117 	ldw	r2,-32764(gp)
   124e8:	00c00044 	movi	r3,1
   124ec:	10c00045 	stb	r3,1(r2)

				break;
   124f0:	0000ad06 	br	127a8 <main+0x156c>


	 			case CMD_SI5351_WR:
	 				if(Check_many_blocks(2)) break;
   124f4:	01000084 	movi	r4,2
   124f8:	001005c0 	call	1005c <Check_many_blocks>
   124fc:	10803fcc 	andi	r2,r2,255
   12500:	1000a61e 	bne	r2,zero,1279c <main+0x1560>

	 				for(block = 0; block < LMS_Ctrl_Packet_Rx->Header.Data_blocks; block++)
   12504:	d020c305 	stb	zero,-31988(gp)
   12508:	00002c06 	br	125bc <main+0x1380>
	 				{
	 					cmd_errors += I2C_start(I2C_OPENCORES_0_BASE, SI5351_I2C_ADDR, 0);
   1250c:	000d883a 	mov	r6,zero
   12510:	01401804 	movi	r5,96
   12514:	01019804 	movi	r4,1632
   12518:	00133780 	call	13378 <I2C_start>
   1251c:	1007883a 	mov	r3,r2
   12520:	d0a0c383 	ldbu	r2,-31986(gp)
   12524:	1885883a 	add	r2,r3,r2
   12528:	d0a0c385 	stb	r2,-31986(gp)
	 					cmd_errors += I2C_write(I2C_OPENCORES_0_BASE, LMS_Ctrl_Packet_Rx->Data_field[block * 2    ], 0);
   1252c:	d0e00217 	ldw	r3,-32760(gp)
   12530:	d0a0c303 	ldbu	r2,-31988(gp)
   12534:	10803fcc 	andi	r2,r2,255
   12538:	1085883a 	add	r2,r2,r2
   1253c:	1885883a 	add	r2,r3,r2
   12540:	10800204 	addi	r2,r2,8
   12544:	10800003 	ldbu	r2,0(r2)
   12548:	10803fcc 	andi	r2,r2,255
   1254c:	000d883a 	mov	r6,zero
   12550:	100b883a 	mov	r5,r2
   12554:	01019804 	movi	r4,1632
   12558:	00134cc0 	call	134cc <I2C_write>
   1255c:	1007883a 	mov	r3,r2
   12560:	d0a0c383 	ldbu	r2,-31986(gp)
   12564:	1885883a 	add	r2,r3,r2
   12568:	d0a0c385 	stb	r2,-31986(gp)
	 					cmd_errors += I2C_write(I2C_OPENCORES_0_BASE, LMS_Ctrl_Packet_Rx->Data_field[block * 2 + 1], 1);
   1256c:	d0e00217 	ldw	r3,-32760(gp)
   12570:	d0a0c303 	ldbu	r2,-31988(gp)
   12574:	10803fcc 	andi	r2,r2,255
   12578:	1085883a 	add	r2,r2,r2
   1257c:	10800044 	addi	r2,r2,1
   12580:	1885883a 	add	r2,r3,r2
   12584:	10800204 	addi	r2,r2,8
   12588:	10800003 	ldbu	r2,0(r2)
   1258c:	10803fcc 	andi	r2,r2,255
   12590:	01800044 	movi	r6,1
   12594:	100b883a 	mov	r5,r2
   12598:	01019804 	movi	r4,1632
   1259c:	00134cc0 	call	134cc <I2C_write>
   125a0:	1007883a 	mov	r3,r2
   125a4:	d0a0c383 	ldbu	r2,-31986(gp)
   125a8:	1885883a 	add	r2,r3,r2
   125ac:	d0a0c385 	stb	r2,-31986(gp)


	 			case CMD_SI5351_WR:
	 				if(Check_many_blocks(2)) break;

	 				for(block = 0; block < LMS_Ctrl_Packet_Rx->Header.Data_blocks; block++)
   125b0:	d0a0c303 	ldbu	r2,-31988(gp)
   125b4:	10800044 	addi	r2,r2,1
   125b8:	d0a0c305 	stb	r2,-31988(gp)
   125bc:	d0a00217 	ldw	r2,-32760(gp)
   125c0:	10800083 	ldbu	r2,2(r2)
   125c4:	d0e0c303 	ldbu	r3,-31988(gp)
   125c8:	10803fcc 	andi	r2,r2,255
   125cc:	18c03fcc 	andi	r3,r3,255
   125d0:	18bfce36 	bltu	r3,r2,1250c <_gp+0xffff611c>
	 					cmd_errors += I2C_start(I2C_OPENCORES_0_BASE, SI5351_I2C_ADDR, 0);
	 					cmd_errors += I2C_write(I2C_OPENCORES_0_BASE, LMS_Ctrl_Packet_Rx->Data_field[block * 2    ], 0);
	 					cmd_errors += I2C_write(I2C_OPENCORES_0_BASE, LMS_Ctrl_Packet_Rx->Data_field[block * 2 + 1], 1);
	 				}

	 				if(cmd_errors) LMS_Ctrl_Packet_Tx->Header.Status = STATUS_ERROR_CMD;
   125d4:	d0a0c383 	ldbu	r2,-31986(gp)
   125d8:	10803fcc 	andi	r2,r2,255
   125dc:	10000426 	beq	r2,zero,125f0 <main+0x13b4>
   125e0:	d0a00117 	ldw	r2,-32764(gp)
   125e4:	00c00144 	movi	r3,5
   125e8:	10c00045 	stb	r3,1(r2)
	 				else LMS_Ctrl_Packet_Tx->Header.Status = STATUS_COMPLETED_CMD;

	 			break;
   125ec:	00006e06 	br	127a8 <main+0x156c>
	 					cmd_errors += I2C_write(I2C_OPENCORES_0_BASE, LMS_Ctrl_Packet_Rx->Data_field[block * 2    ], 0);
	 					cmd_errors += I2C_write(I2C_OPENCORES_0_BASE, LMS_Ctrl_Packet_Rx->Data_field[block * 2 + 1], 1);
	 				}

	 				if(cmd_errors) LMS_Ctrl_Packet_Tx->Header.Status = STATUS_ERROR_CMD;
	 				else LMS_Ctrl_Packet_Tx->Header.Status = STATUS_COMPLETED_CMD;
   125f0:	d0a00117 	ldw	r2,-32764(gp)
   125f4:	00c00044 	movi	r3,1
   125f8:	10c00045 	stb	r3,1(r2)

	 			break;
   125fc:	00006a06 	br	127a8 <main+0x156c>


 				case CMD_SI5351_RD:
 					if(Check_many_blocks (2)) break;
   12600:	01000084 	movi	r4,2
   12604:	001005c0 	call	1005c <Check_many_blocks>
   12608:	10803fcc 	andi	r2,r2,255
   1260c:	1000651e 	bne	r2,zero,127a4 <main+0x1568>

 					for(block = 0; block < LMS_Ctrl_Packet_Rx->Header.Data_blocks; block++)
   12610:	d020c305 	stb	zero,-31988(gp)
   12614:	00003c06 	br	12708 <main+0x14cc>
 					{
 						cmd_errors += I2C_start(I2C_OPENCORES_0_BASE, SI5351_I2C_ADDR, 0);
   12618:	000d883a 	mov	r6,zero
   1261c:	01401804 	movi	r5,96
   12620:	01019804 	movi	r4,1632
   12624:	00133780 	call	13378 <I2C_start>
   12628:	1007883a 	mov	r3,r2
   1262c:	d0a0c383 	ldbu	r2,-31986(gp)
   12630:	1885883a 	add	r2,r3,r2
   12634:	d0a0c385 	stb	r2,-31986(gp)
 						cmd_errors += I2C_write(I2C_OPENCORES_0_BASE, LMS_Ctrl_Packet_Rx->Data_field[block], 1);
   12638:	d0e00217 	ldw	r3,-32760(gp)
   1263c:	d0a0c303 	ldbu	r2,-31988(gp)
   12640:	10803fcc 	andi	r2,r2,255
   12644:	1885883a 	add	r2,r3,r2
   12648:	10800204 	addi	r2,r2,8
   1264c:	10800003 	ldbu	r2,0(r2)
   12650:	10803fcc 	andi	r2,r2,255
   12654:	01800044 	movi	r6,1
   12658:	100b883a 	mov	r5,r2
   1265c:	01019804 	movi	r4,1632
   12660:	00134cc0 	call	134cc <I2C_write>
   12664:	1007883a 	mov	r3,r2
   12668:	d0a0c383 	ldbu	r2,-31986(gp)
   1266c:	1885883a 	add	r2,r3,r2
   12670:	d0a0c385 	stb	r2,-31986(gp)
 						cmd_errors += I2C_start(I2C_OPENCORES_0_BASE, SI5351_I2C_ADDR, 1);
   12674:	01800044 	movi	r6,1
   12678:	01401804 	movi	r5,96
   1267c:	01019804 	movi	r4,1632
   12680:	00133780 	call	13378 <I2C_start>
   12684:	1007883a 	mov	r3,r2
   12688:	d0a0c383 	ldbu	r2,-31986(gp)
   1268c:	1885883a 	add	r2,r3,r2
   12690:	d0a0c385 	stb	r2,-31986(gp)

 						LMS_Ctrl_Packet_Tx->Data_field[block * 2    ] = LMS_Ctrl_Packet_Rx->Data_field[block];
   12694:	d1200117 	ldw	r4,-32764(gp)
   12698:	d0a0c303 	ldbu	r2,-31988(gp)
   1269c:	10803fcc 	andi	r2,r2,255
   126a0:	1085883a 	add	r2,r2,r2
   126a4:	100b883a 	mov	r5,r2
   126a8:	d0e00217 	ldw	r3,-32760(gp)
   126ac:	d0a0c303 	ldbu	r2,-31988(gp)
   126b0:	10803fcc 	andi	r2,r2,255
   126b4:	1885883a 	add	r2,r3,r2
   126b8:	10800204 	addi	r2,r2,8
   126bc:	10c00003 	ldbu	r3,0(r2)
   126c0:	2145883a 	add	r2,r4,r5
   126c4:	10800204 	addi	r2,r2,8
   126c8:	10c00005 	stb	r3,0(r2)
 						LMS_Ctrl_Packet_Tx->Data_field[block * 2 + 1] = I2C_read(I2C_OPENCORES_0_BASE, 1);
   126cc:	d4600117 	ldw	r17,-32764(gp)
   126d0:	d0a0c303 	ldbu	r2,-31988(gp)
   126d4:	10803fcc 	andi	r2,r2,255
   126d8:	1085883a 	add	r2,r2,r2
   126dc:	14000044 	addi	r16,r2,1
   126e0:	01400044 	movi	r5,1
   126e4:	01019804 	movi	r4,1632
   126e8:	00134380 	call	13438 <I2C_read>
   126ec:	1007883a 	mov	r3,r2
   126f0:	8c05883a 	add	r2,r17,r16
   126f4:	10800204 	addi	r2,r2,8
   126f8:	10c00005 	stb	r3,0(r2)


 				case CMD_SI5351_RD:
 					if(Check_many_blocks (2)) break;

 					for(block = 0; block < LMS_Ctrl_Packet_Rx->Header.Data_blocks; block++)
   126fc:	d0a0c303 	ldbu	r2,-31988(gp)
   12700:	10800044 	addi	r2,r2,1
   12704:	d0a0c305 	stb	r2,-31988(gp)
   12708:	d0a00217 	ldw	r2,-32760(gp)
   1270c:	10800083 	ldbu	r2,2(r2)
   12710:	d0e0c303 	ldbu	r3,-31988(gp)
   12714:	10803fcc 	andi	r2,r2,255
   12718:	18c03fcc 	andi	r3,r3,255
   1271c:	18bfbe36 	bltu	r3,r2,12618 <_gp+0xffff6228>

 						LMS_Ctrl_Packet_Tx->Data_field[block * 2    ] = LMS_Ctrl_Packet_Rx->Data_field[block];
 						LMS_Ctrl_Packet_Tx->Data_field[block * 2 + 1] = I2C_read(I2C_OPENCORES_0_BASE, 1);
 					}

 					if(cmd_errors) LMS_Ctrl_Packet_Tx->Header.Status = STATUS_ERROR_CMD;
   12720:	d0a0c383 	ldbu	r2,-31986(gp)
   12724:	10803fcc 	andi	r2,r2,255
   12728:	10000426 	beq	r2,zero,1273c <main+0x1500>
   1272c:	d0a00117 	ldw	r2,-32764(gp)
   12730:	00c00144 	movi	r3,5
   12734:	10c00045 	stb	r3,1(r2)
 					else LMS_Ctrl_Packet_Tx->Header.Status = STATUS_COMPLETED_CMD;

 				break;
   12738:	00001b06 	br	127a8 <main+0x156c>
 						LMS_Ctrl_Packet_Tx->Data_field[block * 2    ] = LMS_Ctrl_Packet_Rx->Data_field[block];
 						LMS_Ctrl_Packet_Tx->Data_field[block * 2 + 1] = I2C_read(I2C_OPENCORES_0_BASE, 1);
 					}

 					if(cmd_errors) LMS_Ctrl_Packet_Tx->Header.Status = STATUS_ERROR_CMD;
 					else LMS_Ctrl_Packet_Tx->Header.Status = STATUS_COMPLETED_CMD;
   1273c:	d0a00117 	ldw	r2,-32764(gp)
   12740:	00c00044 	movi	r3,1
   12744:	10c00045 	stb	r3,1(r2)

 				break;
   12748:	00001706 	br	127a8 <main+0x156c>


 				default:
 					/* This is unknown request. */
 					//isHandled = CyFalse;
 					LMS_Ctrl_Packet_Tx->Header.Status = STATUS_UNKNOWN_CMD;
   1274c:	d0a00117 	ldw	r2,-32764(gp)
   12750:	00c00084 	movi	r3,2
   12754:	10c00045 	stb	r3,1(r2)
 				break;
   12758:	00001306 	br	127a8 <main+0x156c>
 				break;
				

 				case CMD_LMS_RST:

 					if(!Check_Periph_ID(MAX_ID_LMS7, LMS_Ctrl_Packet_Rx->Header.Periph_ID)) break;
   1275c:	0001883a 	nop
   12760:	00001106 	br	127a8 <main+0x156c>
 					LMS_Ctrl_Packet_Tx->Header.Status = STATUS_COMPLETED_CMD;
 				break;


 				case CMD_LMS7002_WR:
 					if(!Check_Periph_ID(MAX_ID_LMS7, LMS_Ctrl_Packet_Rx->Header.Periph_ID)) break;
   12764:	0001883a 	nop
   12768:	00000f06 	br	127a8 <main+0x156c>
 					if(Check_many_blocks (4)) break;
   1276c:	0001883a 	nop
   12770:	00000d06 	br	127a8 <main+0x156c>
 					LMS_Ctrl_Packet_Tx->Header.Status = STATUS_COMPLETED_CMD;
 				break;


 				case CMD_LMS7002_RD:
 					if(Check_many_blocks (4)) break;
   12774:	0001883a 	nop
   12778:	00000b06 	br	127a8 <main+0x156c>
 					LMS_Ctrl_Packet_Tx->Header.Status = STATUS_COMPLETED_CMD;
 				break;


 	 			case CMD_BRDSPI16_WR:
 	 				if(Check_many_blocks (4)) break;
   1277c:	0001883a 	nop
   12780:	00000906 	br	127a8 <main+0x156c>
 	 				LMS_Ctrl_Packet_Tx->Header.Status = STATUS_COMPLETED_CMD;
 	 			break;


 				case CMD_BRDSPI16_RD:
 					if(Check_many_blocks (4)) break;
   12784:	0001883a 	nop
   12788:	00000706 	br	127a8 <main+0x156c>
 					LMS_Ctrl_Packet_Tx->Header.Status = STATUS_COMPLETED_CMD;
 				break;


 				case CMD_ADF4002_WR:
 					if(Check_many_blocks (3)) break;
   1278c:	0001883a 	nop
   12790:	00000506 	br	127a8 <main+0x156c>

				break;


				case CMD_ANALOG_VAL_WR:
					if(Check_many_blocks (4)) break;
   12794:	0001883a 	nop
   12798:	00000306 	br	127a8 <main+0x156c>

				break;


	 			case CMD_SI5351_WR:
	 				if(Check_many_blocks(2)) break;
   1279c:	0001883a 	nop
   127a0:	00000106 	br	127a8 <main+0x156c>

	 			break;


 				case CMD_SI5351_RD:
 					if(Check_many_blocks (2)) break;
   127a4:	0001883a 	nop
			};



     		//Send response to the command
        	for(cnt=0; cnt<64/sizeof(uint32_t); ++cnt)
   127a8:	e03ff745 	stb	zero,-35(fp)
   127ac:	00000d06 	br	127e4 <main+0x15a8>
        	{
        		IOWR(AV_FIFO_INT_0_BASE, 0, dest[cnt]);
   127b0:	e0bff747 	ldb	r2,-35(fp)
   127b4:	1085883a 	add	r2,r2,r2
   127b8:	1085883a 	add	r2,r2,r2
   127bc:	1007883a 	mov	r3,r2
   127c0:	e0bff817 	ldw	r2,-32(fp)
   127c4:	10c5883a 	add	r2,r2,r3
   127c8:	10800017 	ldw	r2,0(r2)
   127cc:	1007883a 	mov	r3,r2
   127d0:	0081b404 	movi	r2,1744
   127d4:	10c00035 	stwio	r3,0(r2)
			};



     		//Send response to the command
        	for(cnt=0; cnt<64/sizeof(uint32_t); ++cnt)
   127d8:	e0bff743 	ldbu	r2,-35(fp)
   127dc:	10800044 	addi	r2,r2,1
   127e0:	e0bff745 	stb	r2,-35(fp)
   127e4:	e0bff743 	ldbu	r2,-35(fp)
   127e8:	10803fcc 	andi	r2,r2,255
   127ec:	10800430 	cmpltui	r2,r2,16
   127f0:	103fef1e 	bne	r2,zero,127b0 <_gp+0xffff63c0>
	    	spirez = alt_avalon_spi_command(PLLCFG_SPI_BASE, 0, 2, wr_buf, 2, rd_buf, 0);
	    }
*/


	}
   127f4:	003ac306 	br	11304 <_gp+0xffff4f14>

000127f8 <get_pll_config>:
#include "pll_rcfg.h"
#include "system.h"

// Reads main PLL configuration
void get_pll_config(uint32_t PLL_BASE, tPLL_CFG *pll_cfg)
{
   127f8:	defffd04 	addi	sp,sp,-12
   127fc:	df000215 	stw	fp,8(sp)
   12800:	df000204 	addi	fp,sp,8
   12804:	e13ffe15 	stw	r4,-8(fp)
   12808:	e17fff15 	stw	r5,-4(fp)
	pll_cfg->M_cnt = IORD_32DIRECT(PLL_BASE, M_COUNTER);
   1280c:	e0bffe17 	ldw	r2,-8(fp)
   12810:	10800404 	addi	r2,r2,16
   12814:	10800037 	ldwio	r2,0(r2)
   12818:	1007883a 	mov	r3,r2
   1281c:	e0bfff17 	ldw	r2,-4(fp)
   12820:	10c00015 	stw	r3,0(r2)

	pll_cfg->MFrac_cnt = IORD_32DIRECT(PLL_BASE, FRAC_COUNTER);
   12824:	e0bffe17 	ldw	r2,-8(fp)
   12828:	10800704 	addi	r2,r2,28
   1282c:	10800037 	ldwio	r2,0(r2)
   12830:	1007883a 	mov	r3,r2
   12834:	e0bfff17 	ldw	r2,-4(fp)
   12838:	10c00115 	stw	r3,4(r2)

	pll_cfg->N_cnt = IORD_32DIRECT(PLL_BASE, N_COUNTER);
   1283c:	e0bffe17 	ldw	r2,-8(fp)
   12840:	10800304 	addi	r2,r2,12
   12844:	10800037 	ldwio	r2,0(r2)
   12848:	1007883a 	mov	r3,r2
   1284c:	e0bfff17 	ldw	r2,-4(fp)
   12850:	10c00215 	stw	r3,8(r2)

	pll_cfg->DPS_cnt = IORD_32DIRECT(PLL_BASE, DPS_COUNTER);
   12854:	e0bffe17 	ldw	r2,-8(fp)
   12858:	10800604 	addi	r2,r2,24
   1285c:	10800037 	ldwio	r2,0(r2)
   12860:	1007883a 	mov	r3,r2
   12864:	e0bfff17 	ldw	r2,-4(fp)
   12868:	10c00415 	stw	r3,16(r2)

	pll_cfg->BS_cnt = IORD_32DIRECT(PLL_BASE, BS_COUNTER);
   1286c:	e0bffe17 	ldw	r2,-8(fp)
   12870:	10800804 	addi	r2,r2,32
   12874:	10800037 	ldwio	r2,0(r2)
   12878:	1007883a 	mov	r3,r2
   1287c:	e0bfff17 	ldw	r2,-4(fp)
   12880:	10c00515 	stw	r3,20(r2)

	pll_cfg->CPS_cnt = IORD_32DIRECT(PLL_BASE, CPS_COUNTER);
   12884:	e0bffe17 	ldw	r2,-8(fp)
   12888:	10800904 	addi	r2,r2,36
   1288c:	10800037 	ldwio	r2,0(r2)
   12890:	1007883a 	mov	r3,r2
   12894:	e0bfff17 	ldw	r2,-4(fp)
   12898:	10c00615 	stw	r3,24(r2)

	pll_cfg->VCO_div = IORD_32DIRECT(PLL_BASE, VCO_DIV);
   1289c:	e0bffe17 	ldw	r2,-8(fp)
   128a0:	10801c04 	addi	r2,r2,112
   128a4:	10800037 	ldwio	r2,0(r2)
   128a8:	1007883a 	mov	r3,r2
   128ac:	e0bfff17 	ldw	r2,-4(fp)
   128b0:	10c00715 	stw	r3,28(r2)
}
   128b4:	0001883a 	nop
   128b8:	e037883a 	mov	sp,fp
   128bc:	df000017 	ldw	fp,0(sp)
   128c0:	dec00104 	addi	sp,sp,4
   128c4:	f800283a 	ret

000128c8 <set_pll_config>:

// Writes main PLL configuration
uint8_t set_pll_config(uint32_t PLL_BASE, tPLL_CFG *pll_cfg)
{
   128c8:	defffd04 	addi	sp,sp,-12
   128cc:	df000215 	stw	fp,8(sp)
   128d0:	df000204 	addi	fp,sp,8
   128d4:	e13ffe15 	stw	r4,-8(fp)
   128d8:	e17fff15 	stw	r5,-4(fp)

	//printf(" \n Full Reconfiguration Selected \n");

	//M
	IOWR_32DIRECT(PLL_BASE, M_COUNTER, pll_cfg->M_cnt);
   128dc:	e0bffe17 	ldw	r2,-8(fp)
   128e0:	10800404 	addi	r2,r2,16
   128e4:	1007883a 	mov	r3,r2
   128e8:	e0bfff17 	ldw	r2,-4(fp)
   128ec:	10800017 	ldw	r2,0(r2)
   128f0:	18800035 	stwio	r2,0(r3)

	//MFrac
	IOWR_32DIRECT(PLL_BASE, FRAC_COUNTER, pll_cfg->MFrac_cnt);
   128f4:	e0bffe17 	ldw	r2,-8(fp)
   128f8:	10800704 	addi	r2,r2,28
   128fc:	1007883a 	mov	r3,r2
   12900:	e0bfff17 	ldw	r2,-4(fp)
   12904:	10800117 	ldw	r2,4(r2)
   12908:	18800035 	stwio	r2,0(r3)

	//N
	IOWR_32DIRECT(PLL_BASE, N_COUNTER, pll_cfg->N_cnt);
   1290c:	e0bffe17 	ldw	r2,-8(fp)
   12910:	10800304 	addi	r2,r2,12
   12914:	1007883a 	mov	r3,r2
   12918:	e0bfff17 	ldw	r2,-4(fp)
   1291c:	10800217 	ldw	r2,8(r2)
   12920:	18800035 	stwio	r2,0(r3)

	//Charge Pump Setting
	//IOWR_32DIRECT(PLL_BASE, CPS_COUNTER, pll_cfg->CPS_cnt);

	//
	IOWR_32DIRECT(PLL_BASE, VCO_DIV, pll_cfg->VCO_div);
   12924:	e0bffe17 	ldw	r2,-8(fp)
   12928:	10801c04 	addi	r2,r2,112
   1292c:	1007883a 	mov	r3,r2
   12930:	e0bfff17 	ldw	r2,-4(fp)
   12934:	10800717 	ldw	r2,28(r2)
   12938:	18800035 	stwio	r2,0(r3)


	return PLLCFG_NOERR; //start_Reconfig(PLL_BASE);
   1293c:	0005883a 	mov	r2,zero

	//printf(" \n Full configuration is completed !! Verify with Scope \n");
}
   12940:	e037883a 	mov	sp,fp
   12944:	df000017 	ldw	fp,0(sp)
   12948:	dec00104 	addi	sp,sp,4
   1294c:	f800283a 	ret

00012950 <set_CxCnt>:


uint8_t set_CxCnt(uint32_t PLL_BASE, uint32_t CxVal)
{
   12950:	defffd04 	addi	sp,sp,-12
   12954:	df000215 	stw	fp,8(sp)
   12958:	df000204 	addi	fp,sp,8
   1295c:	e13ffe15 	stw	r4,-8(fp)
   12960:	e17fff15 	stw	r5,-4(fp)

 	//IOWR_32DIRECT(PLL_BASE, C_COUNTER, val | (Cx << 18));
	IOWR_32DIRECT(PLL_BASE, C_COUNTER, CxVal);
   12964:	e0bffe17 	ldw	r2,-8(fp)
   12968:	10800504 	addi	r2,r2,20
   1296c:	1007883a 	mov	r3,r2
   12970:	e0bfff17 	ldw	r2,-4(fp)
   12974:	18800035 	stwio	r2,0(r3)

	return PLLCFG_NOERR;
   12978:	0005883a 	mov	r2,zero
}
   1297c:	e037883a 	mov	sp,fp
   12980:	df000017 	ldw	fp,0(sp)
   12984:	dec00104 	addi	sp,sp,4
   12988:	f800283a 	ret

0001298c <set_Phase>:

uint8_t set_Phase(uint32_t PLL_BASE, uint32_t Cx, uint32_t val, uint32_t dir)
{
   1298c:	defffa04 	addi	sp,sp,-24
   12990:	df000515 	stw	fp,20(sp)
   12994:	df000504 	addi	fp,sp,20
   12998:	e13ffc15 	stw	r4,-16(fp)
   1299c:	e17ffd15 	stw	r5,-12(fp)
   129a0:	e1bffe15 	stw	r6,-8(fp)
   129a4:	e1ffff15 	stw	r7,-4(fp)
	uint32_t dps;

	dps = val;
   129a8:	e0bffe17 	ldw	r2,-8(fp)
   129ac:	e0bffb15 	stw	r2,-20(fp)
	dps = dps | ((Cx & 0x1F) << 16);
   129b0:	e0bffd17 	ldw	r2,-12(fp)
   129b4:	108007cc 	andi	r2,r2,31
   129b8:	1004943a 	slli	r2,r2,16
   129bc:	e0fffb17 	ldw	r3,-20(fp)
   129c0:	1884b03a 	or	r2,r3,r2
   129c4:	e0bffb15 	stw	r2,-20(fp)
	dps = dps | ((dir & 0x01) << 21);
   129c8:	e0bfff17 	ldw	r2,-4(fp)
   129cc:	1080004c 	andi	r2,r2,1
   129d0:	1004957a 	slli	r2,r2,21
   129d4:	e0fffb17 	ldw	r3,-20(fp)
   129d8:	1884b03a 	or	r2,r3,r2
   129dc:	e0bffb15 	stw	r2,-20(fp)

 	IOWR_32DIRECT(PLL_BASE, DPS_COUNTER, dps);
   129e0:	e0bffc17 	ldw	r2,-16(fp)
   129e4:	10800604 	addi	r2,r2,24
   129e8:	1007883a 	mov	r3,r2
   129ec:	e0bffb17 	ldw	r2,-20(fp)
   129f0:	18800035 	stwio	r2,0(r3)

	return PLLCFG_NOERR;
   129f4:	0005883a 	mov	r2,zero
}
   129f8:	e037883a 	mov	sp,fp
   129fc:	df000017 	ldw	fp,0(sp)
   12a00:	dec00104 	addi	sp,sp,4
   12a04:	f800283a 	ret

00012a08 <start_Reconfig>:

uint8_t start_Reconfig(uint32_t PLL_BASE)
{
   12a08:	defffc04 	addi	sp,sp,-16
   12a0c:	df000315 	stw	fp,12(sp)
   12a10:	df000304 	addi	fp,sp,12
   12a14:	e13fff15 	stw	r4,-4(fp)
	unsigned int status_reconfig, timeout;

	//Write anything to Start Register to Reconfiguration
	IOWR_32DIRECT(PLL_BASE, START, 0x01);
   12a18:	e0bfff17 	ldw	r2,-4(fp)
   12a1c:	10800204 	addi	r2,r2,8
   12a20:	1007883a 	mov	r3,r2
   12a24:	00800044 	movi	r2,1
   12a28:	18800035 	stwio	r2,0(r3)

	timeout = 0;
   12a2c:	e03ffd15 	stw	zero,-12(fp)
	do
	{
	  	status_reconfig = IORD_32DIRECT(PLL_BASE, STATUS);
   12a30:	e0bfff17 	ldw	r2,-4(fp)
   12a34:	10800104 	addi	r2,r2,4
   12a38:	10800037 	ldwio	r2,0(r2)
   12a3c:	e0bffe15 	stw	r2,-8(fp)
	  	if (timeout++ > PLLCFG_TIMEOUT) return PLLCFG_CX_TIMEOUT;
   12a40:	e0fffd17 	ldw	r3,-12(fp)
   12a44:	18800044 	addi	r2,r3,1
   12a48:	e0bffd15 	stw	r2,-12(fp)
   12a4c:	008000b4 	movhi	r2,2
   12a50:	10a1a804 	addi	r2,r2,-31072
   12a54:	10c0022e 	bgeu	r2,r3,12a60 <start_Reconfig+0x58>
   12a58:	00800284 	movi	r2,10
   12a5c:	00000306 	br	12a6c <start_Reconfig+0x64>
	}
	while ((!status_reconfig) & 0x01);
   12a60:	e0bffe17 	ldw	r2,-8(fp)
   12a64:	103ff226 	beq	r2,zero,12a30 <_gp+0xffff6640>

	return PLLCFG_NOERR;
   12a68:	0005883a 	mov	r2,zero
}
   12a6c:	e037883a 	mov	sp,fp
   12a70:	df000017 	ldw	fp,0(sp)
   12a74:	dec00104 	addi	sp,sp,4
   12a78:	f800283a 	ret

00012a7c <__divsi3>:
   12a7c:	20001b16 	blt	r4,zero,12aec <__divsi3+0x70>
   12a80:	000f883a 	mov	r7,zero
   12a84:	28001616 	blt	r5,zero,12ae0 <__divsi3+0x64>
   12a88:	200d883a 	mov	r6,r4
   12a8c:	29001a2e 	bgeu	r5,r4,12af8 <__divsi3+0x7c>
   12a90:	00800804 	movi	r2,32
   12a94:	00c00044 	movi	r3,1
   12a98:	00000106 	br	12aa0 <__divsi3+0x24>
   12a9c:	10000d26 	beq	r2,zero,12ad4 <__divsi3+0x58>
   12aa0:	294b883a 	add	r5,r5,r5
   12aa4:	10bfffc4 	addi	r2,r2,-1
   12aa8:	18c7883a 	add	r3,r3,r3
   12aac:	293ffb36 	bltu	r5,r4,12a9c <_gp+0xffff66ac>
   12ab0:	0005883a 	mov	r2,zero
   12ab4:	18000726 	beq	r3,zero,12ad4 <__divsi3+0x58>
   12ab8:	0005883a 	mov	r2,zero
   12abc:	31400236 	bltu	r6,r5,12ac8 <__divsi3+0x4c>
   12ac0:	314dc83a 	sub	r6,r6,r5
   12ac4:	10c4b03a 	or	r2,r2,r3
   12ac8:	1806d07a 	srli	r3,r3,1
   12acc:	280ad07a 	srli	r5,r5,1
   12ad0:	183ffa1e 	bne	r3,zero,12abc <_gp+0xffff66cc>
   12ad4:	38000126 	beq	r7,zero,12adc <__divsi3+0x60>
   12ad8:	0085c83a 	sub	r2,zero,r2
   12adc:	f800283a 	ret
   12ae0:	014bc83a 	sub	r5,zero,r5
   12ae4:	39c0005c 	xori	r7,r7,1
   12ae8:	003fe706 	br	12a88 <_gp+0xffff6698>
   12aec:	0109c83a 	sub	r4,zero,r4
   12af0:	01c00044 	movi	r7,1
   12af4:	003fe306 	br	12a84 <_gp+0xffff6694>
   12af8:	00c00044 	movi	r3,1
   12afc:	003fee06 	br	12ab8 <_gp+0xffff66c8>

00012b00 <__modsi3>:
   12b00:	20001716 	blt	r4,zero,12b60 <__modsi3+0x60>
   12b04:	000f883a 	mov	r7,zero
   12b08:	2005883a 	mov	r2,r4
   12b0c:	28001216 	blt	r5,zero,12b58 <__modsi3+0x58>
   12b10:	2900162e 	bgeu	r5,r4,12b6c <__modsi3+0x6c>
   12b14:	01800804 	movi	r6,32
   12b18:	00c00044 	movi	r3,1
   12b1c:	00000106 	br	12b24 <__modsi3+0x24>
   12b20:	30000a26 	beq	r6,zero,12b4c <__modsi3+0x4c>
   12b24:	294b883a 	add	r5,r5,r5
   12b28:	31bfffc4 	addi	r6,r6,-1
   12b2c:	18c7883a 	add	r3,r3,r3
   12b30:	293ffb36 	bltu	r5,r4,12b20 <_gp+0xffff6730>
   12b34:	18000526 	beq	r3,zero,12b4c <__modsi3+0x4c>
   12b38:	1806d07a 	srli	r3,r3,1
   12b3c:	11400136 	bltu	r2,r5,12b44 <__modsi3+0x44>
   12b40:	1145c83a 	sub	r2,r2,r5
   12b44:	280ad07a 	srli	r5,r5,1
   12b48:	183ffb1e 	bne	r3,zero,12b38 <_gp+0xffff6748>
   12b4c:	38000126 	beq	r7,zero,12b54 <__modsi3+0x54>
   12b50:	0085c83a 	sub	r2,zero,r2
   12b54:	f800283a 	ret
   12b58:	014bc83a 	sub	r5,zero,r5
   12b5c:	003fec06 	br	12b10 <_gp+0xffff6720>
   12b60:	0109c83a 	sub	r4,zero,r4
   12b64:	01c00044 	movi	r7,1
   12b68:	003fe706 	br	12b08 <_gp+0xffff6718>
   12b6c:	00c00044 	movi	r3,1
   12b70:	003ff106 	br	12b38 <_gp+0xffff6748>

00012b74 <__udivsi3>:
   12b74:	200d883a 	mov	r6,r4
   12b78:	2900152e 	bgeu	r5,r4,12bd0 <__udivsi3+0x5c>
   12b7c:	28001416 	blt	r5,zero,12bd0 <__udivsi3+0x5c>
   12b80:	00800804 	movi	r2,32
   12b84:	00c00044 	movi	r3,1
   12b88:	00000206 	br	12b94 <__udivsi3+0x20>
   12b8c:	10000e26 	beq	r2,zero,12bc8 <__udivsi3+0x54>
   12b90:	28000516 	blt	r5,zero,12ba8 <__udivsi3+0x34>
   12b94:	294b883a 	add	r5,r5,r5
   12b98:	10bfffc4 	addi	r2,r2,-1
   12b9c:	18c7883a 	add	r3,r3,r3
   12ba0:	293ffa36 	bltu	r5,r4,12b8c <_gp+0xffff679c>
   12ba4:	18000826 	beq	r3,zero,12bc8 <__udivsi3+0x54>
   12ba8:	0005883a 	mov	r2,zero
   12bac:	31400236 	bltu	r6,r5,12bb8 <__udivsi3+0x44>
   12bb0:	314dc83a 	sub	r6,r6,r5
   12bb4:	10c4b03a 	or	r2,r2,r3
   12bb8:	1806d07a 	srli	r3,r3,1
   12bbc:	280ad07a 	srli	r5,r5,1
   12bc0:	183ffa1e 	bne	r3,zero,12bac <_gp+0xffff67bc>
   12bc4:	f800283a 	ret
   12bc8:	0005883a 	mov	r2,zero
   12bcc:	f800283a 	ret
   12bd0:	00c00044 	movi	r3,1
   12bd4:	003ff406 	br	12ba8 <_gp+0xffff67b8>

00012bd8 <__umodsi3>:
   12bd8:	2005883a 	mov	r2,r4
   12bdc:	2900122e 	bgeu	r5,r4,12c28 <__umodsi3+0x50>
   12be0:	28001116 	blt	r5,zero,12c28 <__umodsi3+0x50>
   12be4:	01800804 	movi	r6,32
   12be8:	00c00044 	movi	r3,1
   12bec:	00000206 	br	12bf8 <__umodsi3+0x20>
   12bf0:	30000c26 	beq	r6,zero,12c24 <__umodsi3+0x4c>
   12bf4:	28000516 	blt	r5,zero,12c0c <__umodsi3+0x34>
   12bf8:	294b883a 	add	r5,r5,r5
   12bfc:	31bfffc4 	addi	r6,r6,-1
   12c00:	18c7883a 	add	r3,r3,r3
   12c04:	293ffa36 	bltu	r5,r4,12bf0 <_gp+0xffff6800>
   12c08:	18000626 	beq	r3,zero,12c24 <__umodsi3+0x4c>
   12c0c:	1806d07a 	srli	r3,r3,1
   12c10:	11400136 	bltu	r2,r5,12c18 <__umodsi3+0x40>
   12c14:	1145c83a 	sub	r2,r2,r5
   12c18:	280ad07a 	srli	r5,r5,1
   12c1c:	183ffb1e 	bne	r3,zero,12c0c <_gp+0xffff681c>
   12c20:	f800283a 	ret
   12c24:	f800283a 	ret
   12c28:	00c00044 	movi	r3,1
   12c2c:	003ff706 	br	12c0c <_gp+0xffff681c>

00012c30 <__mulsi3>:
   12c30:	0005883a 	mov	r2,zero
   12c34:	20000726 	beq	r4,zero,12c54 <__mulsi3+0x24>
   12c38:	20c0004c 	andi	r3,r4,1
   12c3c:	2008d07a 	srli	r4,r4,1
   12c40:	18000126 	beq	r3,zero,12c48 <__mulsi3+0x18>
   12c44:	1145883a 	add	r2,r2,r5
   12c48:	294b883a 	add	r5,r5,r5
   12c4c:	203ffa1e 	bne	r4,zero,12c38 <_gp+0xffff6848>
   12c50:	f800283a 	ret
   12c54:	f800283a 	ret

00012c58 <memset>:
   12c58:	2005883a 	mov	r2,r4
   12c5c:	2007883a 	mov	r3,r4
   12c60:	218d883a 	add	r6,r4,r6
   12c64:	19800326 	beq	r3,r6,12c74 <memset+0x1c>
   12c68:	19400005 	stb	r5,0(r3)
   12c6c:	18c00044 	addi	r3,r3,1
   12c70:	003ffc06 	br	12c64 <_gp+0xffff6874>
   12c74:	f800283a 	ret

00012c78 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   12c78:	defffc04 	addi	sp,sp,-16
   12c7c:	df000315 	stw	fp,12(sp)
   12c80:	df000304 	addi	fp,sp,12
   12c84:	e13ffd15 	stw	r4,-12(fp)
   12c88:	e17ffe15 	stw	r5,-8(fp)
   12c8c:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   12c90:	e0fffe17 	ldw	r3,-8(fp)
   12c94:	e0bffd17 	ldw	r2,-12(fp)
   12c98:	18800c26 	beq	r3,r2,12ccc <alt_load_section+0x54>
  {
    while( to != end )
   12c9c:	00000806 	br	12cc0 <alt_load_section+0x48>
    {
      *to++ = *from++;
   12ca0:	e0bffe17 	ldw	r2,-8(fp)
   12ca4:	10c00104 	addi	r3,r2,4
   12ca8:	e0fffe15 	stw	r3,-8(fp)
   12cac:	e0fffd17 	ldw	r3,-12(fp)
   12cb0:	19000104 	addi	r4,r3,4
   12cb4:	e13ffd15 	stw	r4,-12(fp)
   12cb8:	18c00017 	ldw	r3,0(r3)
   12cbc:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   12cc0:	e0fffe17 	ldw	r3,-8(fp)
   12cc4:	e0bfff17 	ldw	r2,-4(fp)
   12cc8:	18bff51e 	bne	r3,r2,12ca0 <_gp+0xffff68b0>
    {
      *to++ = *from++;
    }
  }
}
   12ccc:	0001883a 	nop
   12cd0:	e037883a 	mov	sp,fp
   12cd4:	df000017 	ldw	fp,0(sp)
   12cd8:	dec00104 	addi	sp,sp,4
   12cdc:	f800283a 	ret

00012ce0 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   12ce0:	defffe04 	addi	sp,sp,-8
   12ce4:	dfc00115 	stw	ra,4(sp)
   12ce8:	df000015 	stw	fp,0(sp)
   12cec:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   12cf0:	01800074 	movhi	r6,1
   12cf4:	31910704 	addi	r6,r6,17436
   12cf8:	01400074 	movhi	r5,1
   12cfc:	29504f04 	addi	r5,r5,16700
   12d00:	01000074 	movhi	r4,1
   12d04:	21110704 	addi	r4,r4,17436
   12d08:	0012c780 	call	12c78 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   12d0c:	01800074 	movhi	r6,1
   12d10:	31800804 	addi	r6,r6,32
   12d14:	01400074 	movhi	r5,1
   12d18:	29400804 	addi	r5,r5,32
   12d1c:	01000074 	movhi	r4,1
   12d20:	21000804 	addi	r4,r4,32
   12d24:	0012c780 	call	12c78 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   12d28:	01800074 	movhi	r6,1
   12d2c:	31904f04 	addi	r6,r6,16700
   12d30:	01400074 	movhi	r5,1
   12d34:	29504204 	addi	r5,r5,16648
   12d38:	01000074 	movhi	r4,1
   12d3c:	21104204 	addi	r4,r4,16648
   12d40:	0012c780 	call	12c78 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   12d44:	00136a40 	call	136a4 <alt_dcache_flush_all>
  alt_icache_flush_all();
   12d48:	00137d00 	call	137d0 <alt_icache_flush_all>
}
   12d4c:	0001883a 	nop
   12d50:	e037883a 	mov	sp,fp
   12d54:	dfc00117 	ldw	ra,4(sp)
   12d58:	df000017 	ldw	fp,0(sp)
   12d5c:	dec00204 	addi	sp,sp,8
   12d60:	f800283a 	ret

00012d64 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   12d64:	defffd04 	addi	sp,sp,-12
   12d68:	dfc00215 	stw	ra,8(sp)
   12d6c:	df000115 	stw	fp,4(sp)
   12d70:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   12d74:	0009883a 	mov	r4,zero
   12d78:	0012e040 	call	12e04 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   12d7c:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   12d80:	0012e3c0 	call	12e3c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   12d84:	01800074 	movhi	r6,1
   12d88:	31904204 	addi	r6,r6,16648
   12d8c:	01400074 	movhi	r5,1
   12d90:	29504204 	addi	r5,r5,16648
   12d94:	01000074 	movhi	r4,1
   12d98:	21104204 	addi	r4,r4,16648
   12d9c:	00138d40 	call	138d4 <alt_io_redirect>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   12da0:	d0a0c417 	ldw	r2,-31984(gp)
   12da4:	d0e0c517 	ldw	r3,-31980(gp)
   12da8:	d120c617 	ldw	r4,-31976(gp)
   12dac:	200d883a 	mov	r6,r4
   12db0:	180b883a 	mov	r5,r3
   12db4:	1009883a 	mov	r4,r2
   12db8:	001123c0 	call	1123c <main>
   12dbc:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   12dc0:	01000044 	movi	r4,1
   12dc4:	00135cc0 	call	135cc <close>
  exit (result);
   12dc8:	e13fff17 	ldw	r4,-4(fp)
   12dcc:	0013ed80 	call	13ed8 <exit>

00012dd0 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   12dd0:	defffd04 	addi	sp,sp,-12
   12dd4:	dfc00215 	stw	ra,8(sp)
   12dd8:	df000115 	stw	fp,4(sp)
   12ddc:	df000104 	addi	fp,sp,4
   12de0:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   12de4:	d1600504 	addi	r5,gp,-32748
   12de8:	e13fff17 	ldw	r4,-4(fp)
   12dec:	001372c0 	call	1372c <alt_dev_llist_insert>
}
   12df0:	e037883a 	mov	sp,fp
   12df4:	dfc00117 	ldw	ra,4(sp)
   12df8:	df000017 	ldw	fp,0(sp)
   12dfc:	dec00204 	addi	sp,sp,8
   12e00:	f800283a 	ret

00012e04 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   12e04:	defffd04 	addi	sp,sp,-12
   12e08:	dfc00215 	stw	ra,8(sp)
   12e0c:	df000115 	stw	fp,4(sp)
   12e10:	df000104 	addi	fp,sp,4
   12e14:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_CPU, nios2_cpu);
   12e18:	0013c580 	call	13c58 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   12e1c:	00800044 	movi	r2,1
   12e20:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   12e24:	0001883a 	nop
   12e28:	e037883a 	mov	sp,fp
   12e2c:	dfc00117 	ldw	ra,4(sp)
   12e30:	df000017 	ldw	fp,0(sp)
   12e34:	dec00204 	addi	sp,sp,8
   12e38:	f800283a 	ret

00012e3c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   12e3c:	defffe04 	addi	sp,sp,-8
   12e40:	dfc00115 	stw	ra,4(sp)
   12e44:	df000015 	stw	fp,0(sp)
   12e48:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
   12e4c:	01000074 	movhi	r4,1
   12e50:	21104f04 	addi	r4,r4,16700
   12e54:	0012dd00 	call	12dd0 <alt_dev_reg>
    ALTERA_AVALON_SPI_INIT ( DAC_SPI1, dac_spi1);
   12e58:	0001883a 	nop
    ALTERA_AVALON_SPI_INIT ( FPGA_SPI0, fpga_spi0);
   12e5c:	0001883a 	nop
    ALTERA_AVALON_SPI_INIT ( PLLCFG_SPI, PLLCFG_SPI);
   12e60:	0001883a 	nop
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
   12e64:	0001883a 	nop
    I2C_OPENCORES_INIT ( I2C_OPENCORES_0, i2c_opencores_0);
   12e68:	0001883a 	nop
}
   12e6c:	0001883a 	nop
   12e70:	e037883a 	mov	sp,fp
   12e74:	dfc00117 	ldw	ra,4(sp)
   12e78:	df000017 	ldw	fp,0(sp)
   12e7c:	dec00204 	addi	sp,sp,8
   12e80:	f800283a 	ret

00012e84 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   12e84:	defffa04 	addi	sp,sp,-24
   12e88:	dfc00515 	stw	ra,20(sp)
   12e8c:	df000415 	stw	fp,16(sp)
   12e90:	df000404 	addi	fp,sp,16
   12e94:	e13ffd15 	stw	r4,-12(fp)
   12e98:	e17ffe15 	stw	r5,-8(fp)
   12e9c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   12ea0:	e0bffd17 	ldw	r2,-12(fp)
   12ea4:	10800017 	ldw	r2,0(r2)
   12ea8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   12eac:	e0bffc17 	ldw	r2,-16(fp)
   12eb0:	10c00a04 	addi	r3,r2,40
   12eb4:	e0bffd17 	ldw	r2,-12(fp)
   12eb8:	10800217 	ldw	r2,8(r2)
   12ebc:	100f883a 	mov	r7,r2
   12ec0:	e1bfff17 	ldw	r6,-4(fp)
   12ec4:	e17ffe17 	ldw	r5,-8(fp)
   12ec8:	1809883a 	mov	r4,r3
   12ecc:	0012f440 	call	12f44 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   12ed0:	e037883a 	mov	sp,fp
   12ed4:	dfc00117 	ldw	ra,4(sp)
   12ed8:	df000017 	ldw	fp,0(sp)
   12edc:	dec00204 	addi	sp,sp,8
   12ee0:	f800283a 	ret

00012ee4 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   12ee4:	defffa04 	addi	sp,sp,-24
   12ee8:	dfc00515 	stw	ra,20(sp)
   12eec:	df000415 	stw	fp,16(sp)
   12ef0:	df000404 	addi	fp,sp,16
   12ef4:	e13ffd15 	stw	r4,-12(fp)
   12ef8:	e17ffe15 	stw	r5,-8(fp)
   12efc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   12f00:	e0bffd17 	ldw	r2,-12(fp)
   12f04:	10800017 	ldw	r2,0(r2)
   12f08:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   12f0c:	e0bffc17 	ldw	r2,-16(fp)
   12f10:	10c00a04 	addi	r3,r2,40
   12f14:	e0bffd17 	ldw	r2,-12(fp)
   12f18:	10800217 	ldw	r2,8(r2)
   12f1c:	100f883a 	mov	r7,r2
   12f20:	e1bfff17 	ldw	r6,-4(fp)
   12f24:	e17ffe17 	ldw	r5,-8(fp)
   12f28:	1809883a 	mov	r4,r3
   12f2c:	00130300 	call	13030 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   12f30:	e037883a 	mov	sp,fp
   12f34:	dfc00117 	ldw	ra,4(sp)
   12f38:	df000017 	ldw	fp,0(sp)
   12f3c:	dec00204 	addi	sp,sp,8
   12f40:	f800283a 	ret

00012f44 <altera_avalon_jtag_uart_read>:
 */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
   12f44:	defff704 	addi	sp,sp,-36
   12f48:	df000815 	stw	fp,32(sp)
   12f4c:	df000804 	addi	fp,sp,32
   12f50:	e13ffc15 	stw	r4,-16(fp)
   12f54:	e17ffd15 	stw	r5,-12(fp)
   12f58:	e1bffe15 	stw	r6,-8(fp)
   12f5c:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
   12f60:	e0bffc17 	ldw	r2,-16(fp)
   12f64:	10800017 	ldw	r2,0(r2)
   12f68:	e0bff915 	stw	r2,-28(fp)

  char * ptr = buffer;
   12f6c:	e0bffd17 	ldw	r2,-12(fp)
   12f70:	e0bff815 	stw	r2,-32(fp)
  char * end = buffer + space;
   12f74:	e0bffe17 	ldw	r2,-8(fp)
   12f78:	e0fffd17 	ldw	r3,-12(fp)
   12f7c:	1885883a 	add	r2,r3,r2
   12f80:	e0bffa15 	stw	r2,-24(fp)

  while (ptr < end)
   12f84:	00001206 	br	12fd0 <altera_avalon_jtag_uart_read+0x8c>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   12f88:	e0bff917 	ldw	r2,-28(fp)
   12f8c:	10800037 	ldwio	r2,0(r2)
   12f90:	e0bffb15 	stw	r2,-20(fp)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
   12f94:	e0bffb17 	ldw	r2,-20(fp)
   12f98:	10a0000c 	andi	r2,r2,32768
   12f9c:	10000626 	beq	r2,zero,12fb8 <altera_avalon_jtag_uart_read+0x74>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   12fa0:	e0bff817 	ldw	r2,-32(fp)
   12fa4:	10c00044 	addi	r3,r2,1
   12fa8:	e0fff815 	stw	r3,-32(fp)
   12fac:	e0fffb17 	ldw	r3,-20(fp)
   12fb0:	10c00005 	stb	r3,0(r2)
   12fb4:	00000606 	br	12fd0 <altera_avalon_jtag_uart_read+0x8c>
    else if (ptr != buffer)
   12fb8:	e0fff817 	ldw	r3,-32(fp)
   12fbc:	e0bffd17 	ldw	r2,-12(fp)
   12fc0:	1880071e 	bne	r3,r2,12fe0 <altera_avalon_jtag_uart_read+0x9c>
      break;
    else if(flags & O_NONBLOCK)
   12fc4:	e0bfff17 	ldw	r2,-4(fp)
   12fc8:	1090000c 	andi	r2,r2,16384
   12fcc:	1000061e 	bne	r2,zero,12fe8 <altera_avalon_jtag_uart_read+0xa4>
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
   12fd0:	e0fff817 	ldw	r3,-32(fp)
   12fd4:	e0bffa17 	ldw	r2,-24(fp)
   12fd8:	18bfeb36 	bltu	r3,r2,12f88 <_gp+0xffff6b98>
   12fdc:	00000306 	br	12fec <altera_avalon_jtag_uart_read+0xa8>
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
   12fe0:	0001883a 	nop
   12fe4:	00000106 	br	12fec <altera_avalon_jtag_uart_read+0xa8>
    else if(flags & O_NONBLOCK)
      break;   
   12fe8:	0001883a 	nop
    
  }

  if (ptr != buffer)
   12fec:	e0fff817 	ldw	r3,-32(fp)
   12ff0:	e0bffd17 	ldw	r2,-12(fp)
   12ff4:	18800426 	beq	r3,r2,13008 <altera_avalon_jtag_uart_read+0xc4>
    return ptr - buffer;
   12ff8:	e0fff817 	ldw	r3,-32(fp)
   12ffc:	e0bffd17 	ldw	r2,-12(fp)
   13000:	1885c83a 	sub	r2,r3,r2
   13004:	00000606 	br	13020 <altera_avalon_jtag_uart_read+0xdc>
  else if (flags & O_NONBLOCK)
   13008:	e0bfff17 	ldw	r2,-4(fp)
   1300c:	1090000c 	andi	r2,r2,16384
   13010:	10000226 	beq	r2,zero,1301c <altera_avalon_jtag_uart_read+0xd8>
    return -EWOULDBLOCK;
   13014:	00bffd44 	movi	r2,-11
   13018:	00000106 	br	13020 <altera_avalon_jtag_uart_read+0xdc>
  else
    return -EIO;
   1301c:	00bffec4 	movi	r2,-5
}
   13020:	e037883a 	mov	sp,fp
   13024:	df000017 	ldw	fp,0(sp)
   13028:	dec00104 	addi	sp,sp,4
   1302c:	f800283a 	ret

00013030 <altera_avalon_jtag_uart_write>:
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   13030:	defff904 	addi	sp,sp,-28
   13034:	df000615 	stw	fp,24(sp)
   13038:	df000604 	addi	fp,sp,24
   1303c:	e13ffc15 	stw	r4,-16(fp)
   13040:	e17ffd15 	stw	r5,-12(fp)
   13044:	e1bffe15 	stw	r6,-8(fp)
   13048:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
   1304c:	e0bffc17 	ldw	r2,-16(fp)
   13050:	10800017 	ldw	r2,0(r2)
   13054:	e0bffa15 	stw	r2,-24(fp)

  const char * end = ptr + count;
   13058:	e0bffe17 	ldw	r2,-8(fp)
   1305c:	e0fffd17 	ldw	r3,-12(fp)
   13060:	1885883a 	add	r2,r3,r2
   13064:	e0bffb15 	stw	r2,-20(fp)

  while (ptr < end)
   13068:	00000e06 	br	130a4 <altera_avalon_jtag_uart_write+0x74>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
   1306c:	e0bffa17 	ldw	r2,-24(fp)
   13070:	10800104 	addi	r2,r2,4
   13074:	10800037 	ldwio	r2,0(r2)
   13078:	10bfffec 	andhi	r2,r2,65535
   1307c:	10000926 	beq	r2,zero,130a4 <altera_avalon_jtag_uart_write+0x74>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
   13080:	e0fffa17 	ldw	r3,-24(fp)
   13084:	e0bffd17 	ldw	r2,-12(fp)
   13088:	11000044 	addi	r4,r2,1
   1308c:	e13ffd15 	stw	r4,-12(fp)
   13090:	10800003 	ldbu	r2,0(r2)
   13094:	10803fcc 	andi	r2,r2,255
   13098:	1080201c 	xori	r2,r2,128
   1309c:	10bfe004 	addi	r2,r2,-128
   130a0:	18800035 	stwio	r2,0(r3)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
   130a4:	e0fffd17 	ldw	r3,-12(fp)
   130a8:	e0bffb17 	ldw	r2,-20(fp)
   130ac:	18bfef36 	bltu	r3,r2,1306c <_gp+0xffff6c7c>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
   130b0:	e0bffe17 	ldw	r2,-8(fp)
}
   130b4:	e037883a 	mov	sp,fp
   130b8:	df000017 	ldw	fp,0(sp)
   130bc:	dec00104 	addi	sp,sp,4
   130c0:	f800283a 	ret

000130c4 <alt_avalon_spi_command>:

int alt_avalon_spi_command(alt_u32 base, alt_u32 slave,
                           alt_u32 write_length, const alt_u8 * write_data,
                           alt_u32 read_length, alt_u8 * read_data,
                           alt_u32 flags)
{
   130c4:	defff404 	addi	sp,sp,-48
   130c8:	df000b15 	stw	fp,44(sp)
   130cc:	df000b04 	addi	fp,sp,44
   130d0:	e13ffc15 	stw	r4,-16(fp)
   130d4:	e17ffd15 	stw	r5,-12(fp)
   130d8:	e1bffe15 	stw	r6,-8(fp)
   130dc:	e1ffff15 	stw	r7,-4(fp)
  const alt_u8 * write_end = write_data + write_length;
   130e0:	e0ffff17 	ldw	r3,-4(fp)
   130e4:	e0bffe17 	ldw	r2,-8(fp)
   130e8:	1885883a 	add	r2,r3,r2
   130ec:	e0bff815 	stw	r2,-32(fp)
  alt_u8 * read_end = read_data + read_length;
   130f0:	e0c00217 	ldw	r3,8(fp)
   130f4:	e0800117 	ldw	r2,4(fp)
   130f8:	1885883a 	add	r2,r3,r2
   130fc:	e0bff915 	stw	r2,-28(fp)

  alt_u32 write_zeros = read_length;
   13100:	e0800117 	ldw	r2,4(fp)
   13104:	e0bff515 	stw	r2,-44(fp)
  alt_u32 read_ignore = write_length;
   13108:	e0bffe17 	ldw	r2,-8(fp)
   1310c:	e0bff615 	stw	r2,-40(fp)

  /* We must not send more than two bytes to the target before it has
   * returned any as otherwise it will overflow. */
  /* Unfortunately the hardware does not seem to work with credits > 1,
   * leave it at 1 for now. */
  alt_32 credits = 1;
   13110:	00800044 	movi	r2,1
   13114:	e0bff715 	stw	r2,-36(fp)
  /* Warning: this function is not currently safe if called in a multi-threaded
   * environment, something above must perform locking to make it safe if more
   * than one thread intends to use it.
   */

  IOWR_ALTERA_AVALON_SPI_SLAVE_SEL(base, 1 << slave);
   13118:	e0bffc17 	ldw	r2,-16(fp)
   1311c:	10800504 	addi	r2,r2,20
   13120:	1009883a 	mov	r4,r2
   13124:	00c00044 	movi	r3,1
   13128:	e0bffd17 	ldw	r2,-12(fp)
   1312c:	1884983a 	sll	r2,r3,r2
   13130:	20800035 	stwio	r2,0(r4)
  
  /* Set the SSO bit (force chipselect) only if the toggle flag is not set */
  if ((flags & ALT_AVALON_SPI_COMMAND_TOGGLE_SS_N) == 0) {
   13134:	e0800317 	ldw	r2,12(fp)
   13138:	1080008c 	andi	r2,r2,2
   1313c:	1000051e 	bne	r2,zero,13154 <alt_avalon_spi_command+0x90>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, ALTERA_AVALON_SPI_CONTROL_SSO_MSK);
   13140:	e0bffc17 	ldw	r2,-16(fp)
   13144:	10800304 	addi	r2,r2,12
   13148:	1007883a 	mov	r3,r2
   1314c:	00810004 	movi	r2,1024
   13150:	18800035 	stwio	r2,0(r3)
  /*
   * Discard any stale data present in the RXDATA register, in case
   * previous communication was interrupted and stale data was left
   * behind.
   */
  IORD_ALTERA_AVALON_SPI_RXDATA(base);
   13154:	e0bffc17 	ldw	r2,-16(fp)
   13158:	10800037 	ldwio	r2,0(r2)
  for ( ; ; )
  {
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
   1315c:	e0bffc17 	ldw	r2,-16(fp)
   13160:	10800204 	addi	r2,r2,8
   13164:	10800037 	ldwio	r2,0(r2)
   13168:	e0bffa15 	stw	r2,-24(fp)
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
   1316c:	e0bffa17 	ldw	r2,-24(fp)
   13170:	1080100c 	andi	r2,r2,64
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
   13174:	10000226 	beq	r2,zero,13180 <alt_avalon_spi_command+0xbc>
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
   13178:	e0bff717 	ldw	r2,-36(fp)
   1317c:	1000031e 	bne	r2,zero,1318c <alt_avalon_spi_command+0xc8>
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
   13180:	e0bffa17 	ldw	r2,-24(fp)
   13184:	1080200c 	andi	r2,r2,128
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
   13188:	103ff426 	beq	r2,zero,1315c <_gp+0xffff6d6c>
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);

    if ((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) != 0 && credits > 0)
   1318c:	e0bffa17 	ldw	r2,-24(fp)
   13190:	1080100c 	andi	r2,r2,64
   13194:	10001e26 	beq	r2,zero,13210 <alt_avalon_spi_command+0x14c>
   13198:	e0bff717 	ldw	r2,-36(fp)
   1319c:	00801c0e 	bge	zero,r2,13210 <alt_avalon_spi_command+0x14c>
    {
      credits--;
   131a0:	e0bff717 	ldw	r2,-36(fp)
   131a4:	10bfffc4 	addi	r2,r2,-1
   131a8:	e0bff715 	stw	r2,-36(fp)

      if (write_data < write_end)
   131ac:	e0ffff17 	ldw	r3,-4(fp)
   131b0:	e0bff817 	ldw	r2,-32(fp)
   131b4:	18800a2e 	bgeu	r3,r2,131e0 <alt_avalon_spi_command+0x11c>
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, *write_data++);
   131b8:	e0bffc17 	ldw	r2,-16(fp)
   131bc:	10800104 	addi	r2,r2,4
   131c0:	1009883a 	mov	r4,r2
   131c4:	e0bfff17 	ldw	r2,-4(fp)
   131c8:	10c00044 	addi	r3,r2,1
   131cc:	e0ffff15 	stw	r3,-4(fp)
   131d0:	10800003 	ldbu	r2,0(r2)
   131d4:	10803fcc 	andi	r2,r2,255
   131d8:	20800035 	stwio	r2,0(r4)
   131dc:	00000c06 	br	13210 <alt_avalon_spi_command+0x14c>
      else if (write_zeros > 0)
   131e0:	e0bff517 	ldw	r2,-44(fp)
   131e4:	10000826 	beq	r2,zero,13208 <alt_avalon_spi_command+0x144>
      {
        write_zeros--;
   131e8:	e0bff517 	ldw	r2,-44(fp)
   131ec:	10bfffc4 	addi	r2,r2,-1
   131f0:	e0bff515 	stw	r2,-44(fp)
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, 0);
   131f4:	e0bffc17 	ldw	r2,-16(fp)
   131f8:	10800104 	addi	r2,r2,4
   131fc:	0007883a 	mov	r3,zero
   13200:	10c00035 	stwio	r3,0(r2)
   13204:	00000206 	br	13210 <alt_avalon_spi_command+0x14c>
      }
      else
        credits = -1024;
   13208:	00bf0004 	movi	r2,-1024
   1320c:	e0bff715 	stw	r2,-36(fp)
    };

    if ((status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) != 0)
   13210:	e0bffa17 	ldw	r2,-24(fp)
   13214:	1080200c 	andi	r2,r2,128
   13218:	103fd026 	beq	r2,zero,1315c <_gp+0xffff6d6c>
    {
      alt_u32 rxdata = IORD_ALTERA_AVALON_SPI_RXDATA(base);
   1321c:	e0bffc17 	ldw	r2,-16(fp)
   13220:	10800037 	ldwio	r2,0(r2)
   13224:	e0bffb15 	stw	r2,-20(fp)

      if (read_ignore > 0)
   13228:	e0bff617 	ldw	r2,-40(fp)
   1322c:	10000426 	beq	r2,zero,13240 <alt_avalon_spi_command+0x17c>
        read_ignore--;
   13230:	e0bff617 	ldw	r2,-40(fp)
   13234:	10bfffc4 	addi	r2,r2,-1
   13238:	e0bff615 	stw	r2,-40(fp)
   1323c:	00000506 	br	13254 <alt_avalon_spi_command+0x190>
      else
        *read_data++ = (alt_u8)rxdata;
   13240:	e0800217 	ldw	r2,8(fp)
   13244:	10c00044 	addi	r3,r2,1
   13248:	e0c00215 	stw	r3,8(fp)
   1324c:	e0fffb17 	ldw	r3,-20(fp)
   13250:	10c00005 	stb	r3,0(r2)
      credits++;
   13254:	e0bff717 	ldw	r2,-36(fp)
   13258:	10800044 	addi	r2,r2,1
   1325c:	e0bff715 	stw	r2,-36(fp)

      if (read_ignore == 0 && read_data == read_end)
   13260:	e0bff617 	ldw	r2,-40(fp)
   13264:	103fbd1e 	bne	r2,zero,1315c <_gp+0xffff6d6c>
   13268:	e0c00217 	ldw	r3,8(fp)
   1326c:	e0bff917 	ldw	r2,-28(fp)
   13270:	18bfba1e 	bne	r3,r2,1315c <_gp+0xffff6d6c>
  }

  /* Wait until the interface has finished transmitting */
  do
  {
    status = IORD_ALTERA_AVALON_SPI_STATUS(base);
   13274:	e0bffc17 	ldw	r2,-16(fp)
   13278:	10800204 	addi	r2,r2,8
   1327c:	10800037 	ldwio	r2,0(r2)
   13280:	e0bffa15 	stw	r2,-24(fp)
  }
  while ((status & ALTERA_AVALON_SPI_STATUS_TMT_MSK) == 0);
   13284:	e0bffa17 	ldw	r2,-24(fp)
   13288:	1080080c 	andi	r2,r2,32
   1328c:	103ff926 	beq	r2,zero,13274 <_gp+0xffff6e84>

  /* Clear SSO (release chipselect) unless the caller is going to
   * keep using this chip
   */
  if ((flags & ALT_AVALON_SPI_COMMAND_MERGE) == 0)
   13290:	e0800317 	ldw	r2,12(fp)
   13294:	1080004c 	andi	r2,r2,1
   13298:	1000041e 	bne	r2,zero,132ac <alt_avalon_spi_command+0x1e8>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, 0);
   1329c:	e0bffc17 	ldw	r2,-16(fp)
   132a0:	10800304 	addi	r2,r2,12
   132a4:	0007883a 	mov	r3,zero
   132a8:	10c00035 	stwio	r3,0(r2)

  return read_length;
   132ac:	e0800117 	ldw	r2,4(fp)
}
   132b0:	e037883a 	mov	sp,fp
   132b4:	df000017 	ldw	fp,0(sp)
   132b8:	dec00104 	addi	sp,sp,4
   132bc:	f800283a 	ret

000132c0 <I2C_init>:
      clk = freuqency of the clock driving this component  ( in Hz)
      speed = SCL speed ie 100K, 400K ...            (in Hz)
15-OCT-07 initial release
*****************************************************************/
void I2C_init(alt_u32 base,alt_u32 clk,alt_u32 speed)
{
   132c0:	defffa04 	addi	sp,sp,-24
   132c4:	dfc00515 	stw	ra,20(sp)
   132c8:	df000415 	stw	fp,16(sp)
   132cc:	df000404 	addi	fp,sp,16
   132d0:	e13ffd15 	stw	r4,-12(fp)
   132d4:	e17ffe15 	stw	r5,-8(fp)
   132d8:	e1bfff15 	stw	r6,-4(fp)
  alt_u32 prescale = (clk/( 5 * speed))-1;
   132dc:	01400144 	movi	r5,5
   132e0:	e13fff17 	ldw	r4,-4(fp)
   132e4:	0012c300 	call	12c30 <__mulsi3>
   132e8:	100b883a 	mov	r5,r2
   132ec:	e13ffe17 	ldw	r4,-8(fp)
   132f0:	0012b740 	call	12b74 <__udivsi3>
   132f4:	10bfffc4 	addi	r2,r2,-1
   132f8:	e0bffc15 	stw	r2,-16(fp)
#ifdef  I2C_DEBUG
        printf(" Initializing  I2C at 0x%x, \n\twith clock speed 0x%x \n\tand SCL speed 0x%x \n\tand prescale 0x%x\n",base,clk,speed,prescale);
#endif
  IOWR_I2C_OPENCORES_CTR(base, 0x00); /* turn off the core*/
   132fc:	e0bffd17 	ldw	r2,-12(fp)
   13300:	10800204 	addi	r2,r2,8
   13304:	0007883a 	mov	r3,zero
   13308:	10c00035 	stwio	r3,0(r2)

  IOWR_I2C_OPENCORES_CR(base, I2C_OPENCORES_CR_IACK_MSK); /* clearn any pening IRQ*/
   1330c:	e0bffd17 	ldw	r2,-12(fp)
   13310:	10800404 	addi	r2,r2,16
   13314:	1007883a 	mov	r3,r2
   13318:	00800044 	movi	r2,1
   1331c:	18800035 	stwio	r2,0(r3)

  IOWR_I2C_OPENCORES_PRERLO(base, (0xff & prescale));  /* load low presacle bit*/
   13320:	e0bffd17 	ldw	r2,-12(fp)
   13324:	e0fffc17 	ldw	r3,-16(fp)
   13328:	18c03fcc 	andi	r3,r3,255
   1332c:	10c00035 	stwio	r3,0(r2)

  IOWR_I2C_OPENCORES_PRERHI(base, (0xff & (prescale>>8)));  /* load upper prescale bit */
   13330:	e0bffd17 	ldw	r2,-12(fp)
   13334:	10800104 	addi	r2,r2,4
   13338:	1007883a 	mov	r3,r2
   1333c:	e0bffc17 	ldw	r2,-16(fp)
   13340:	1004d23a 	srli	r2,r2,8
   13344:	10803fcc 	andi	r2,r2,255
   13348:	18800035 	stwio	r2,0(r3)

  IOWR_I2C_OPENCORES_CTR(base, I2C_OPENCORES_CTR_EN_MSK); /* turn on the core*/
   1334c:	e0bffd17 	ldw	r2,-12(fp)
   13350:	10800204 	addi	r2,r2,8
   13354:	1007883a 	mov	r3,r2
   13358:	00802004 	movi	r2,128
   1335c:	18800035 	stwio	r2,0(r3)

}
   13360:	0001883a 	nop
   13364:	e037883a 	mov	sp,fp
   13368:	dfc00117 	ldw	ra,4(sp)
   1336c:	df000017 	ldw	fp,0(sp)
   13370:	dec00204 	addi	sp,sp,8
   13374:	f800283a 	ret

00013378 <I2C_start>:
       0 if address is acknowledged
       1 if address was not acknowledged
15-OCT-07 initial release
*****************************************************************/
int I2C_start(alt_u32 base, alt_u32 add, alt_u32 read)
{
   13378:	defffb04 	addi	sp,sp,-20
   1337c:	df000415 	stw	fp,16(sp)
   13380:	df000404 	addi	fp,sp,16
   13384:	e13ffd15 	stw	r4,-12(fp)
   13388:	e17ffe15 	stw	r5,-8(fp)
   1338c:	e1bfff15 	stw	r6,-4(fp)
	int retries = 0;
   13390:	e03ffc15 	stw	zero,-16(fp)
#ifdef  I2C_DEBUG
        printf(" Start  I2C at 0x%x, \n\twith address 0x%x \n\tand read 0x%x \n\tand prescale 0x%x\n",base,add,read);
#endif

          /* transmit the address shifted by one and the read/write bit*/
  IOWR_I2C_OPENCORES_TXR(base, ((add<<1) + (0x1 & read)));
   13394:	e0bffd17 	ldw	r2,-12(fp)
   13398:	10800304 	addi	r2,r2,12
   1339c:	1007883a 	mov	r3,r2
   133a0:	e0bffe17 	ldw	r2,-8(fp)
   133a4:	1085883a 	add	r2,r2,r2
   133a8:	1009883a 	mov	r4,r2
   133ac:	e0bfff17 	ldw	r2,-4(fp)
   133b0:	1080004c 	andi	r2,r2,1
   133b4:	2085883a 	add	r2,r4,r2
   133b8:	18800035 	stwio	r2,0(r3)

          /* set start and write  bits which will start the transaction*/
  IOWR_I2C_OPENCORES_CR(base, I2C_OPENCORES_CR_STA_MSK | I2C_OPENCORES_CR_WR_MSK );
   133bc:	e0bffd17 	ldw	r2,-12(fp)
   133c0:	10800404 	addi	r2,r2,16
   133c4:	1007883a 	mov	r3,r2
   133c8:	00802404 	movi	r2,144
   133cc:	18800035 	stwio	r2,0(r3)

          /* wait for the trnasaction to be over.*/
  while( (IORD_I2C_OPENCORES_SR(base) & I2C_OPENCORES_SR_TIP_MSK) && (retries++ < MAX_RETRIES));
   133d0:	0001883a 	nop
   133d4:	e0bffd17 	ldw	r2,-12(fp)
   133d8:	10800404 	addi	r2,r2,16
   133dc:	10800037 	ldwio	r2,0(r2)
   133e0:	1080008c 	andi	r2,r2,2
   133e4:	10000526 	beq	r2,zero,133fc <I2C_start+0x84>
   133e8:	e0bffc17 	ldw	r2,-16(fp)
   133ec:	10c00044 	addi	r3,r2,1
   133f0:	e0fffc15 	stw	r3,-16(fp)
   133f4:	1080fa10 	cmplti	r2,r2,1000
   133f8:	103ff61e 	bne	r2,zero,133d4 <_gp+0xffff6fe4>

         /* now check to see if the address was acknowledged */
   if((IORD_I2C_OPENCORES_SR(base) & I2C_OPENCORES_SR_RXNACK_MSK) || retries >= MAX_RETRIES)
   133fc:	e0bffd17 	ldw	r2,-12(fp)
   13400:	10800404 	addi	r2,r2,16
   13404:	10800037 	ldwio	r2,0(r2)
   13408:	1080200c 	andi	r2,r2,128
   1340c:	1000031e 	bne	r2,zero,1341c <I2C_start+0xa4>
   13410:	e0bffc17 	ldw	r2,-16(fp)
   13414:	1080fa10 	cmplti	r2,r2,1000
   13418:	1000021e 	bne	r2,zero,13424 <I2C_start+0xac>
   {
#ifdef  I2C_DEBUG
        printf("\tNOACK\n");
#endif
        return (I2C_NOACK);
   1341c:	00800044 	movi	r2,1
   13420:	00000106 	br	13428 <I2C_start+0xb0>
   else
   {
#ifdef  I2C_DEBUG
        printf("\tACK\n");
#endif
       return (I2C_ACK);
   13424:	0005883a 	mov	r2,zero
   }
}
   13428:	e037883a 	mov	sp,fp
   1342c:	df000017 	ldw	fp,0(sp)
   13430:	dec00104 	addi	sp,sp,4
   13434:	f800283a 	ret

00013438 <I2C_read>:
return value
       byte read back.
15-OCT-07 initial release
*****************************************************************/
alt_u32 I2C_read(alt_u32 base,alt_u32 last)
{
   13438:	defffc04 	addi	sp,sp,-16
   1343c:	df000315 	stw	fp,12(sp)
   13440:	df000304 	addi	fp,sp,12
   13444:	e13ffe15 	stw	r4,-8(fp)
   13448:	e17fff15 	stw	r5,-4(fp)
	int retries = 0;
   1344c:	e03ffd15 	stw	zero,-12(fp)
#ifdef  I2C_DEBUG
        printf(" Read I2C at 0x%x, \n\twith last0x%x\n",base,last);
#endif
  if( last)
   13450:	e0bfff17 	ldw	r2,-4(fp)
   13454:	10000626 	beq	r2,zero,13470 <I2C_read+0x38>
  {
               /* start a read and no ack and stop bit*/
           IOWR_I2C_OPENCORES_CR(base, I2C_OPENCORES_CR_RD_MSK |
   13458:	e0bffe17 	ldw	r2,-8(fp)
   1345c:	10800404 	addi	r2,r2,16
   13460:	1007883a 	mov	r3,r2
   13464:	00801a04 	movi	r2,104
   13468:	18800035 	stwio	r2,0(r3)
   1346c:	00000506 	br	13484 <I2C_read+0x4c>
               I2C_OPENCORES_CR_NACK_MSK | I2C_OPENCORES_CR_STO_MSK);
  }
  else
  {
          /* start read*/
          IOWR_I2C_OPENCORES_CR(base, I2C_OPENCORES_CR_RD_MSK );
   13470:	e0bffe17 	ldw	r2,-8(fp)
   13474:	10800404 	addi	r2,r2,16
   13478:	1007883a 	mov	r3,r2
   1347c:	00800804 	movi	r2,32
   13480:	18800035 	stwio	r2,0(r3)
  }
          /* wait for the trnasaction to be over.*/
  while( (IORD_I2C_OPENCORES_SR(base) & I2C_OPENCORES_SR_TIP_MSK) && (retries++ < MAX_RETRIES));
   13484:	0001883a 	nop
   13488:	e0bffe17 	ldw	r2,-8(fp)
   1348c:	10800404 	addi	r2,r2,16
   13490:	10800037 	ldwio	r2,0(r2)
   13494:	1080008c 	andi	r2,r2,2
   13498:	10000526 	beq	r2,zero,134b0 <I2C_read+0x78>
   1349c:	e0bffd17 	ldw	r2,-12(fp)
   134a0:	10c00044 	addi	r3,r2,1
   134a4:	e0fffd15 	stw	r3,-12(fp)
   134a8:	1080fa10 	cmplti	r2,r2,1000
   134ac:	103ff61e 	bne	r2,zero,13488 <_gp+0xffff7098>

         /* now read the data */
        return (IORD_I2C_OPENCORES_RXR(base));
   134b0:	e0bffe17 	ldw	r2,-8(fp)
   134b4:	10800304 	addi	r2,r2,12
   134b8:	10800037 	ldwio	r2,0(r2)

}
   134bc:	e037883a 	mov	sp,fp
   134c0:	df000017 	ldw	fp,0(sp)
   134c4:	dec00104 	addi	sp,sp,4
   134c8:	f800283a 	ret

000134cc <I2C_write>:
       0 if address is acknowledged
       1 if address was not acknowledged
15-OCT-07 initial release
*****************************************************************/
alt_u32 I2C_write(alt_u32 base,alt_u8 data, alt_u32 last)
{
   134cc:	defffb04 	addi	sp,sp,-20
   134d0:	df000415 	stw	fp,16(sp)
   134d4:	df000404 	addi	fp,sp,16
   134d8:	e13ffd15 	stw	r4,-12(fp)
   134dc:	2805883a 	mov	r2,r5
   134e0:	e1bfff15 	stw	r6,-4(fp)
   134e4:	e0bffe05 	stb	r2,-8(fp)
	int retries = 0;
   134e8:	e03ffc15 	stw	zero,-16(fp)
  #ifdef  I2C_DEBUG
        printf(" Read I2C at 0x%x, \n\twith data 0x%x,\n\twith last0x%x\n",base,data,last);
#endif
                 /* transmit the data*/
  IOWR_I2C_OPENCORES_TXR(base, data);
   134ec:	e0bffd17 	ldw	r2,-12(fp)
   134f0:	10800304 	addi	r2,r2,12
   134f4:	1007883a 	mov	r3,r2
   134f8:	e0bffe03 	ldbu	r2,-8(fp)
   134fc:	18800035 	stwio	r2,0(r3)

  if( last)
   13500:	e0bfff17 	ldw	r2,-4(fp)
   13504:	10000626 	beq	r2,zero,13520 <I2C_write+0x54>
  {
               /* start a read and no ack and stop bit*/
           IOWR_I2C_OPENCORES_CR(base, I2C_OPENCORES_CR_WR_MSK |
   13508:	e0bffd17 	ldw	r2,-12(fp)
   1350c:	10800404 	addi	r2,r2,16
   13510:	1007883a 	mov	r3,r2
   13514:	00801404 	movi	r2,80
   13518:	18800035 	stwio	r2,0(r3)
   1351c:	00000506 	br	13534 <I2C_write+0x68>
               I2C_OPENCORES_CR_STO_MSK);
  }
  else
  {
          /* start read*/
          IOWR_I2C_OPENCORES_CR(base, I2C_OPENCORES_CR_WR_MSK );
   13520:	e0bffd17 	ldw	r2,-12(fp)
   13524:	10800404 	addi	r2,r2,16
   13528:	1007883a 	mov	r3,r2
   1352c:	00800404 	movi	r2,16
   13530:	18800035 	stwio	r2,0(r3)
  }
           /* wait for the trnasaction to be over.*/
  while( (IORD_I2C_OPENCORES_SR(base) & I2C_OPENCORES_SR_TIP_MSK) && (retries++ < MAX_RETRIES));
   13534:	0001883a 	nop
   13538:	e0bffd17 	ldw	r2,-12(fp)
   1353c:	10800404 	addi	r2,r2,16
   13540:	10800037 	ldwio	r2,0(r2)
   13544:	1080008c 	andi	r2,r2,2
   13548:	10000526 	beq	r2,zero,13560 <I2C_write+0x94>
   1354c:	e0bffc17 	ldw	r2,-16(fp)
   13550:	10c00044 	addi	r3,r2,1
   13554:	e0fffc15 	stw	r3,-16(fp)
   13558:	1080fa10 	cmplti	r2,r2,1000
   1355c:	103ff61e 	bne	r2,zero,13538 <_gp+0xffff7148>

         /* now check to see if the address was acknowledged */
   if(IORD_I2C_OPENCORES_SR(base) & I2C_OPENCORES_SR_RXNACK_MSK)
   13560:	e0bffd17 	ldw	r2,-12(fp)
   13564:	10800404 	addi	r2,r2,16
   13568:	10800037 	ldwio	r2,0(r2)
   1356c:	1080200c 	andi	r2,r2,128
   13570:	10000226 	beq	r2,zero,1357c <I2C_write+0xb0>
   {
#ifdef  I2C_DEBUG
        printf("\tNOACK\n");
#endif
        return (I2C_NOACK);
   13574:	00800044 	movi	r2,1
   13578:	00000106 	br	13580 <I2C_write+0xb4>
   else
   {
#ifdef  I2C_DEBUG
        printf("\tACK\n");
#endif
       return (I2C_ACK);
   1357c:	0005883a 	mov	r2,zero
   }

}
   13580:	e037883a 	mov	sp,fp
   13584:	df000017 	ldw	fp,0(sp)
   13588:	dec00104 	addi	sp,sp,4
   1358c:	f800283a 	ret

00013590 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   13590:	defffe04 	addi	sp,sp,-8
   13594:	dfc00115 	stw	ra,4(sp)
   13598:	df000015 	stw	fp,0(sp)
   1359c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   135a0:	d0a00817 	ldw	r2,-32736(gp)
   135a4:	10000326 	beq	r2,zero,135b4 <alt_get_errno+0x24>
   135a8:	d0a00817 	ldw	r2,-32736(gp)
   135ac:	103ee83a 	callr	r2
   135b0:	00000106 	br	135b8 <alt_get_errno+0x28>
   135b4:	d0a0c704 	addi	r2,gp,-31972
}
   135b8:	e037883a 	mov	sp,fp
   135bc:	dfc00117 	ldw	ra,4(sp)
   135c0:	df000017 	ldw	fp,0(sp)
   135c4:	dec00204 	addi	sp,sp,8
   135c8:	f800283a 	ret

000135cc <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   135cc:	defffb04 	addi	sp,sp,-20
   135d0:	dfc00415 	stw	ra,16(sp)
   135d4:	df000315 	stw	fp,12(sp)
   135d8:	df000304 	addi	fp,sp,12
   135dc:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   135e0:	e0bfff17 	ldw	r2,-4(fp)
   135e4:	10000816 	blt	r2,zero,13608 <close+0x3c>
   135e8:	01400304 	movi	r5,12
   135ec:	e13fff17 	ldw	r4,-4(fp)
   135f0:	0012c300 	call	12c30 <__mulsi3>
   135f4:	1007883a 	mov	r3,r2
   135f8:	00800074 	movhi	r2,1
   135fc:	10906404 	addi	r2,r2,16784
   13600:	1885883a 	add	r2,r3,r2
   13604:	00000106 	br	1360c <close+0x40>
   13608:	0005883a 	mov	r2,zero
   1360c:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   13610:	e0bffd17 	ldw	r2,-12(fp)
   13614:	10001926 	beq	r2,zero,1367c <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   13618:	e0bffd17 	ldw	r2,-12(fp)
   1361c:	10800017 	ldw	r2,0(r2)
   13620:	10800417 	ldw	r2,16(r2)
   13624:	10000626 	beq	r2,zero,13640 <close+0x74>
   13628:	e0bffd17 	ldw	r2,-12(fp)
   1362c:	10800017 	ldw	r2,0(r2)
   13630:	10800417 	ldw	r2,16(r2)
   13634:	e13ffd17 	ldw	r4,-12(fp)
   13638:	103ee83a 	callr	r2
   1363c:	00000106 	br	13644 <close+0x78>
   13640:	0005883a 	mov	r2,zero
   13644:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   13648:	e13fff17 	ldw	r4,-4(fp)
   1364c:	0013bd40 	call	13bd4 <alt_release_fd>
    if (rval < 0)
   13650:	e0bffe17 	ldw	r2,-8(fp)
   13654:	1000070e 	bge	r2,zero,13674 <close+0xa8>
    {
      ALT_ERRNO = -rval;
   13658:	00135900 	call	13590 <alt_get_errno>
   1365c:	1007883a 	mov	r3,r2
   13660:	e0bffe17 	ldw	r2,-8(fp)
   13664:	0085c83a 	sub	r2,zero,r2
   13668:	18800015 	stw	r2,0(r3)
      return -1;
   1366c:	00bfffc4 	movi	r2,-1
   13670:	00000706 	br	13690 <close+0xc4>
    }
    return 0;
   13674:	0005883a 	mov	r2,zero
   13678:	00000506 	br	13690 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   1367c:	00135900 	call	13590 <alt_get_errno>
   13680:	1007883a 	mov	r3,r2
   13684:	00801444 	movi	r2,81
   13688:	18800015 	stw	r2,0(r3)
    return -1;
   1368c:	00bfffc4 	movi	r2,-1
  }
}
   13690:	e037883a 	mov	sp,fp
   13694:	dfc00117 	ldw	ra,4(sp)
   13698:	df000017 	ldw	fp,0(sp)
   1369c:	dec00204 	addi	sp,sp,8
   136a0:	f800283a 	ret

000136a4 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   136a4:	deffff04 	addi	sp,sp,-4
   136a8:	df000015 	stw	fp,0(sp)
   136ac:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   136b0:	0001883a 	nop
   136b4:	e037883a 	mov	sp,fp
   136b8:	df000017 	ldw	fp,0(sp)
   136bc:	dec00104 	addi	sp,sp,4
   136c0:	f800283a 	ret

000136c4 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   136c4:	defffc04 	addi	sp,sp,-16
   136c8:	df000315 	stw	fp,12(sp)
   136cc:	df000304 	addi	fp,sp,12
   136d0:	e13ffd15 	stw	r4,-12(fp)
   136d4:	e17ffe15 	stw	r5,-8(fp)
   136d8:	e1bfff15 	stw	r6,-4(fp)
  return len;
   136dc:	e0bfff17 	ldw	r2,-4(fp)
}
   136e0:	e037883a 	mov	sp,fp
   136e4:	df000017 	ldw	fp,0(sp)
   136e8:	dec00104 	addi	sp,sp,4
   136ec:	f800283a 	ret

000136f0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   136f0:	defffe04 	addi	sp,sp,-8
   136f4:	dfc00115 	stw	ra,4(sp)
   136f8:	df000015 	stw	fp,0(sp)
   136fc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   13700:	d0a00817 	ldw	r2,-32736(gp)
   13704:	10000326 	beq	r2,zero,13714 <alt_get_errno+0x24>
   13708:	d0a00817 	ldw	r2,-32736(gp)
   1370c:	103ee83a 	callr	r2
   13710:	00000106 	br	13718 <alt_get_errno+0x28>
   13714:	d0a0c704 	addi	r2,gp,-31972
}
   13718:	e037883a 	mov	sp,fp
   1371c:	dfc00117 	ldw	ra,4(sp)
   13720:	df000017 	ldw	fp,0(sp)
   13724:	dec00204 	addi	sp,sp,8
   13728:	f800283a 	ret

0001372c <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   1372c:	defffa04 	addi	sp,sp,-24
   13730:	dfc00515 	stw	ra,20(sp)
   13734:	df000415 	stw	fp,16(sp)
   13738:	df000404 	addi	fp,sp,16
   1373c:	e13ffe15 	stw	r4,-8(fp)
   13740:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   13744:	e0bffe17 	ldw	r2,-8(fp)
   13748:	10000326 	beq	r2,zero,13758 <alt_dev_llist_insert+0x2c>
   1374c:	e0bffe17 	ldw	r2,-8(fp)
   13750:	10800217 	ldw	r2,8(r2)
   13754:	1000061e 	bne	r2,zero,13770 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   13758:	00136f00 	call	136f0 <alt_get_errno>
   1375c:	1007883a 	mov	r3,r2
   13760:	00800584 	movi	r2,22
   13764:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   13768:	00bffa84 	movi	r2,-22
   1376c:	00001306 	br	137bc <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   13770:	e0bffe17 	ldw	r2,-8(fp)
   13774:	e0ffff17 	ldw	r3,-4(fp)
   13778:	e0fffc15 	stw	r3,-16(fp)
   1377c:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   13780:	e0bffd17 	ldw	r2,-12(fp)
   13784:	e0fffc17 	ldw	r3,-16(fp)
   13788:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   1378c:	e0bffc17 	ldw	r2,-16(fp)
   13790:	10c00017 	ldw	r3,0(r2)
   13794:	e0bffd17 	ldw	r2,-12(fp)
   13798:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   1379c:	e0bffc17 	ldw	r2,-16(fp)
   137a0:	10800017 	ldw	r2,0(r2)
   137a4:	e0fffd17 	ldw	r3,-12(fp)
   137a8:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   137ac:	e0bffc17 	ldw	r2,-16(fp)
   137b0:	e0fffd17 	ldw	r3,-12(fp)
   137b4:	10c00015 	stw	r3,0(r2)

  return 0;  
   137b8:	0005883a 	mov	r2,zero
}
   137bc:	e037883a 	mov	sp,fp
   137c0:	dfc00117 	ldw	ra,4(sp)
   137c4:	df000017 	ldw	fp,0(sp)
   137c8:	dec00204 	addi	sp,sp,8
   137cc:	f800283a 	ret

000137d0 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   137d0:	deffff04 	addi	sp,sp,-4
   137d4:	df000015 	stw	fp,0(sp)
   137d8:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   137dc:	0001883a 	nop
   137e0:	e037883a 	mov	sp,fp
   137e4:	df000017 	ldw	fp,0(sp)
   137e8:	dec00104 	addi	sp,sp,4
   137ec:	f800283a 	ret

000137f0 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   137f0:	defff804 	addi	sp,sp,-32
   137f4:	dfc00715 	stw	ra,28(sp)
   137f8:	df000615 	stw	fp,24(sp)
   137fc:	dc000515 	stw	r16,20(sp)
   13800:	df000604 	addi	fp,sp,24
   13804:	e13ffb15 	stw	r4,-20(fp)
   13808:	e17ffc15 	stw	r5,-16(fp)
   1380c:	e1bffd15 	stw	r6,-12(fp)
   13810:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
   13814:	e1bffe17 	ldw	r6,-8(fp)
   13818:	e17ffd17 	ldw	r5,-12(fp)
   1381c:	e13ffc17 	ldw	r4,-16(fp)
   13820:	0013a780 	call	13a78 <open>
   13824:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
   13828:	e0bffa17 	ldw	r2,-24(fp)
   1382c:	10002216 	blt	r2,zero,138b8 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
   13830:	04000074 	movhi	r16,1
   13834:	84106404 	addi	r16,r16,16784
   13838:	e0bffa17 	ldw	r2,-24(fp)
   1383c:	01400304 	movi	r5,12
   13840:	1009883a 	mov	r4,r2
   13844:	0012c300 	call	12c30 <__mulsi3>
   13848:	8085883a 	add	r2,r16,r2
   1384c:	10c00017 	ldw	r3,0(r2)
   13850:	e0bffb17 	ldw	r2,-20(fp)
   13854:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   13858:	04000074 	movhi	r16,1
   1385c:	84106404 	addi	r16,r16,16784
   13860:	e0bffa17 	ldw	r2,-24(fp)
   13864:	01400304 	movi	r5,12
   13868:	1009883a 	mov	r4,r2
   1386c:	0012c300 	call	12c30 <__mulsi3>
   13870:	8085883a 	add	r2,r16,r2
   13874:	10800104 	addi	r2,r2,4
   13878:	10c00017 	ldw	r3,0(r2)
   1387c:	e0bffb17 	ldw	r2,-20(fp)
   13880:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   13884:	04000074 	movhi	r16,1
   13888:	84106404 	addi	r16,r16,16784
   1388c:	e0bffa17 	ldw	r2,-24(fp)
   13890:	01400304 	movi	r5,12
   13894:	1009883a 	mov	r4,r2
   13898:	0012c300 	call	12c30 <__mulsi3>
   1389c:	8085883a 	add	r2,r16,r2
   138a0:	10800204 	addi	r2,r2,8
   138a4:	10c00017 	ldw	r3,0(r2)
   138a8:	e0bffb17 	ldw	r2,-20(fp)
   138ac:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   138b0:	e13ffa17 	ldw	r4,-24(fp)
   138b4:	0013bd40 	call	13bd4 <alt_release_fd>
  }
} 
   138b8:	0001883a 	nop
   138bc:	e6ffff04 	addi	sp,fp,-4
   138c0:	dfc00217 	ldw	ra,8(sp)
   138c4:	df000117 	ldw	fp,4(sp)
   138c8:	dc000017 	ldw	r16,0(sp)
   138cc:	dec00304 	addi	sp,sp,12
   138d0:	f800283a 	ret

000138d4 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   138d4:	defffb04 	addi	sp,sp,-20
   138d8:	dfc00415 	stw	ra,16(sp)
   138dc:	df000315 	stw	fp,12(sp)
   138e0:	df000304 	addi	fp,sp,12
   138e4:	e13ffd15 	stw	r4,-12(fp)
   138e8:	e17ffe15 	stw	r5,-8(fp)
   138ec:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   138f0:	01c07fc4 	movi	r7,511
   138f4:	01800044 	movi	r6,1
   138f8:	e17ffd17 	ldw	r5,-12(fp)
   138fc:	01000074 	movhi	r4,1
   13900:	21106704 	addi	r4,r4,16796
   13904:	00137f00 	call	137f0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   13908:	01c07fc4 	movi	r7,511
   1390c:	000d883a 	mov	r6,zero
   13910:	e17ffe17 	ldw	r5,-8(fp)
   13914:	01000074 	movhi	r4,1
   13918:	21106404 	addi	r4,r4,16784
   1391c:	00137f00 	call	137f0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   13920:	01c07fc4 	movi	r7,511
   13924:	01800044 	movi	r6,1
   13928:	e17fff17 	ldw	r5,-4(fp)
   1392c:	01000074 	movhi	r4,1
   13930:	21106a04 	addi	r4,r4,16808
   13934:	00137f00 	call	137f0 <alt_open_fd>
}  
   13938:	0001883a 	nop
   1393c:	e037883a 	mov	sp,fp
   13940:	dfc00117 	ldw	ra,4(sp)
   13944:	df000017 	ldw	fp,0(sp)
   13948:	dec00204 	addi	sp,sp,8
   1394c:	f800283a 	ret

00013950 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   13950:	defffe04 	addi	sp,sp,-8
   13954:	dfc00115 	stw	ra,4(sp)
   13958:	df000015 	stw	fp,0(sp)
   1395c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   13960:	d0a00817 	ldw	r2,-32736(gp)
   13964:	10000326 	beq	r2,zero,13974 <alt_get_errno+0x24>
   13968:	d0a00817 	ldw	r2,-32736(gp)
   1396c:	103ee83a 	callr	r2
   13970:	00000106 	br	13978 <alt_get_errno+0x28>
   13974:	d0a0c704 	addi	r2,gp,-31972
}
   13978:	e037883a 	mov	sp,fp
   1397c:	dfc00117 	ldw	ra,4(sp)
   13980:	df000017 	ldw	fp,0(sp)
   13984:	dec00204 	addi	sp,sp,8
   13988:	f800283a 	ret

0001398c <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   1398c:	defffb04 	addi	sp,sp,-20
   13990:	dfc00415 	stw	ra,16(sp)
   13994:	df000315 	stw	fp,12(sp)
   13998:	dc000215 	stw	r16,8(sp)
   1399c:	df000304 	addi	fp,sp,12
   139a0:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   139a4:	e0bffe17 	ldw	r2,-8(fp)
   139a8:	10800217 	ldw	r2,8(r2)
   139ac:	10d00034 	orhi	r3,r2,16384
   139b0:	e0bffe17 	ldw	r2,-8(fp)
   139b4:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   139b8:	e03ffd15 	stw	zero,-12(fp)
   139bc:	00002306 	br	13a4c <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   139c0:	04000074 	movhi	r16,1
   139c4:	84106404 	addi	r16,r16,16784
   139c8:	e0bffd17 	ldw	r2,-12(fp)
   139cc:	01400304 	movi	r5,12
   139d0:	1009883a 	mov	r4,r2
   139d4:	0012c300 	call	12c30 <__mulsi3>
   139d8:	8085883a 	add	r2,r16,r2
   139dc:	10c00017 	ldw	r3,0(r2)
   139e0:	e0bffe17 	ldw	r2,-8(fp)
   139e4:	10800017 	ldw	r2,0(r2)
   139e8:	1880151e 	bne	r3,r2,13a40 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   139ec:	04000074 	movhi	r16,1
   139f0:	84106404 	addi	r16,r16,16784
   139f4:	e0bffd17 	ldw	r2,-12(fp)
   139f8:	01400304 	movi	r5,12
   139fc:	1009883a 	mov	r4,r2
   13a00:	0012c300 	call	12c30 <__mulsi3>
   13a04:	8085883a 	add	r2,r16,r2
   13a08:	10800204 	addi	r2,r2,8
   13a0c:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   13a10:	10000b0e 	bge	r2,zero,13a40 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   13a14:	01400304 	movi	r5,12
   13a18:	e13ffd17 	ldw	r4,-12(fp)
   13a1c:	0012c300 	call	12c30 <__mulsi3>
   13a20:	1007883a 	mov	r3,r2
   13a24:	00800074 	movhi	r2,1
   13a28:	10906404 	addi	r2,r2,16784
   13a2c:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   13a30:	e0bffe17 	ldw	r2,-8(fp)
   13a34:	18800226 	beq	r3,r2,13a40 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   13a38:	00bffcc4 	movi	r2,-13
   13a3c:	00000806 	br	13a60 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   13a40:	e0bffd17 	ldw	r2,-12(fp)
   13a44:	10800044 	addi	r2,r2,1
   13a48:	e0bffd15 	stw	r2,-12(fp)
   13a4c:	d0a00717 	ldw	r2,-32740(gp)
   13a50:	1007883a 	mov	r3,r2
   13a54:	e0bffd17 	ldw	r2,-12(fp)
   13a58:	18bfd92e 	bgeu	r3,r2,139c0 <_gp+0xffff75d0>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   13a5c:	0005883a 	mov	r2,zero
}
   13a60:	e6ffff04 	addi	sp,fp,-4
   13a64:	dfc00217 	ldw	ra,8(sp)
   13a68:	df000117 	ldw	fp,4(sp)
   13a6c:	dc000017 	ldw	r16,0(sp)
   13a70:	dec00304 	addi	sp,sp,12
   13a74:	f800283a 	ret

00013a78 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   13a78:	defff604 	addi	sp,sp,-40
   13a7c:	dfc00915 	stw	ra,36(sp)
   13a80:	df000815 	stw	fp,32(sp)
   13a84:	df000804 	addi	fp,sp,32
   13a88:	e13ffd15 	stw	r4,-12(fp)
   13a8c:	e17ffe15 	stw	r5,-8(fp)
   13a90:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   13a94:	00bfffc4 	movi	r2,-1
   13a98:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   13a9c:	00bffb44 	movi	r2,-19
   13aa0:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   13aa4:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   13aa8:	d1600504 	addi	r5,gp,-32748
   13aac:	e13ffd17 	ldw	r4,-12(fp)
   13ab0:	0013c7c0 	call	13c7c <alt_find_dev>
   13ab4:	e0bff815 	stw	r2,-32(fp)
   13ab8:	e0bff817 	ldw	r2,-32(fp)
   13abc:	1000051e 	bne	r2,zero,13ad4 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   13ac0:	e13ffd17 	ldw	r4,-12(fp)
   13ac4:	0013d0c0 	call	13d0c <alt_find_file>
   13ac8:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   13acc:	00800044 	movi	r2,1
   13ad0:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   13ad4:	e0bff817 	ldw	r2,-32(fp)
   13ad8:	10002b26 	beq	r2,zero,13b88 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
   13adc:	e13ff817 	ldw	r4,-32(fp)
   13ae0:	0013e140 	call	13e14 <alt_get_fd>
   13ae4:	e0bff915 	stw	r2,-28(fp)
   13ae8:	e0bff917 	ldw	r2,-28(fp)
   13aec:	1000030e 	bge	r2,zero,13afc <open+0x84>
    {
      status = index;
   13af0:	e0bff917 	ldw	r2,-28(fp)
   13af4:	e0bffa15 	stw	r2,-24(fp)
   13af8:	00002506 	br	13b90 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
   13afc:	01400304 	movi	r5,12
   13b00:	e13ff917 	ldw	r4,-28(fp)
   13b04:	0012c300 	call	12c30 <__mulsi3>
   13b08:	1007883a 	mov	r3,r2
   13b0c:	00800074 	movhi	r2,1
   13b10:	10906404 	addi	r2,r2,16784
   13b14:	1885883a 	add	r2,r3,r2
   13b18:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   13b1c:	e0fffe17 	ldw	r3,-8(fp)
   13b20:	00900034 	movhi	r2,16384
   13b24:	10bfffc4 	addi	r2,r2,-1
   13b28:	1886703a 	and	r3,r3,r2
   13b2c:	e0bffc17 	ldw	r2,-16(fp)
   13b30:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   13b34:	e0bffb17 	ldw	r2,-20(fp)
   13b38:	1000051e 	bne	r2,zero,13b50 <open+0xd8>
   13b3c:	e13ffc17 	ldw	r4,-16(fp)
   13b40:	001398c0 	call	1398c <alt_file_locked>
   13b44:	e0bffa15 	stw	r2,-24(fp)
   13b48:	e0bffa17 	ldw	r2,-24(fp)
   13b4c:	10001016 	blt	r2,zero,13b90 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   13b50:	e0bff817 	ldw	r2,-32(fp)
   13b54:	10800317 	ldw	r2,12(r2)
   13b58:	10000826 	beq	r2,zero,13b7c <open+0x104>
   13b5c:	e0bff817 	ldw	r2,-32(fp)
   13b60:	10800317 	ldw	r2,12(r2)
   13b64:	e1ffff17 	ldw	r7,-4(fp)
   13b68:	e1bffe17 	ldw	r6,-8(fp)
   13b6c:	e17ffd17 	ldw	r5,-12(fp)
   13b70:	e13ffc17 	ldw	r4,-16(fp)
   13b74:	103ee83a 	callr	r2
   13b78:	00000106 	br	13b80 <open+0x108>
   13b7c:	0005883a 	mov	r2,zero
   13b80:	e0bffa15 	stw	r2,-24(fp)
   13b84:	00000206 	br	13b90 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
   13b88:	00bffb44 	movi	r2,-19
   13b8c:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   13b90:	e0bffa17 	ldw	r2,-24(fp)
   13b94:	1000090e 	bge	r2,zero,13bbc <open+0x144>
  {
    alt_release_fd (index);  
   13b98:	e13ff917 	ldw	r4,-28(fp)
   13b9c:	0013bd40 	call	13bd4 <alt_release_fd>
    ALT_ERRNO = -status;
   13ba0:	00139500 	call	13950 <alt_get_errno>
   13ba4:	1007883a 	mov	r3,r2
   13ba8:	e0bffa17 	ldw	r2,-24(fp)
   13bac:	0085c83a 	sub	r2,zero,r2
   13bb0:	18800015 	stw	r2,0(r3)
    return -1;
   13bb4:	00bfffc4 	movi	r2,-1
   13bb8:	00000106 	br	13bc0 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
   13bbc:	e0bff917 	ldw	r2,-28(fp)
}
   13bc0:	e037883a 	mov	sp,fp
   13bc4:	dfc00117 	ldw	ra,4(sp)
   13bc8:	df000017 	ldw	fp,0(sp)
   13bcc:	dec00204 	addi	sp,sp,8
   13bd0:	f800283a 	ret

00013bd4 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   13bd4:	defffc04 	addi	sp,sp,-16
   13bd8:	dfc00315 	stw	ra,12(sp)
   13bdc:	df000215 	stw	fp,8(sp)
   13be0:	dc000115 	stw	r16,4(sp)
   13be4:	df000204 	addi	fp,sp,8
   13be8:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
   13bec:	e0bffe17 	ldw	r2,-8(fp)
   13bf0:	108000d0 	cmplti	r2,r2,3
   13bf4:	1000111e 	bne	r2,zero,13c3c <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
   13bf8:	04000074 	movhi	r16,1
   13bfc:	84106404 	addi	r16,r16,16784
   13c00:	e0bffe17 	ldw	r2,-8(fp)
   13c04:	01400304 	movi	r5,12
   13c08:	1009883a 	mov	r4,r2
   13c0c:	0012c300 	call	12c30 <__mulsi3>
   13c10:	8085883a 	add	r2,r16,r2
   13c14:	10800204 	addi	r2,r2,8
   13c18:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   13c1c:	04000074 	movhi	r16,1
   13c20:	84106404 	addi	r16,r16,16784
   13c24:	e0bffe17 	ldw	r2,-8(fp)
   13c28:	01400304 	movi	r5,12
   13c2c:	1009883a 	mov	r4,r2
   13c30:	0012c300 	call	12c30 <__mulsi3>
   13c34:	8085883a 	add	r2,r16,r2
   13c38:	10000015 	stw	zero,0(r2)
  }
}
   13c3c:	0001883a 	nop
   13c40:	e6ffff04 	addi	sp,fp,-4
   13c44:	dfc00217 	ldw	ra,8(sp)
   13c48:	df000117 	ldw	fp,4(sp)
   13c4c:	dc000017 	ldw	r16,0(sp)
   13c50:	dec00304 	addi	sp,sp,12
   13c54:	f800283a 	ret

00013c58 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   13c58:	deffff04 	addi	sp,sp,-4
   13c5c:	df000015 	stw	fp,0(sp)
   13c60:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   13c64:	000170fa 	wrctl	ienable,zero
}
   13c68:	0001883a 	nop
   13c6c:	e037883a 	mov	sp,fp
   13c70:	df000017 	ldw	fp,0(sp)
   13c74:	dec00104 	addi	sp,sp,4
   13c78:	f800283a 	ret

00013c7c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   13c7c:	defffa04 	addi	sp,sp,-24
   13c80:	dfc00515 	stw	ra,20(sp)
   13c84:	df000415 	stw	fp,16(sp)
   13c88:	df000404 	addi	fp,sp,16
   13c8c:	e13ffe15 	stw	r4,-8(fp)
   13c90:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   13c94:	e0bfff17 	ldw	r2,-4(fp)
   13c98:	10800017 	ldw	r2,0(r2)
   13c9c:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   13ca0:	e13ffe17 	ldw	r4,-8(fp)
   13ca4:	0013f280 	call	13f28 <strlen>
   13ca8:	10800044 	addi	r2,r2,1
   13cac:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   13cb0:	00000d06 	br	13ce8 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   13cb4:	e0bffc17 	ldw	r2,-16(fp)
   13cb8:	10800217 	ldw	r2,8(r2)
   13cbc:	e0fffd17 	ldw	r3,-12(fp)
   13cc0:	180d883a 	mov	r6,r3
   13cc4:	e17ffe17 	ldw	r5,-8(fp)
   13cc8:	1009883a 	mov	r4,r2
   13ccc:	0013ef80 	call	13ef8 <memcmp>
   13cd0:	1000021e 	bne	r2,zero,13cdc <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   13cd4:	e0bffc17 	ldw	r2,-16(fp)
   13cd8:	00000706 	br	13cf8 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   13cdc:	e0bffc17 	ldw	r2,-16(fp)
   13ce0:	10800017 	ldw	r2,0(r2)
   13ce4:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   13ce8:	e0fffc17 	ldw	r3,-16(fp)
   13cec:	e0bfff17 	ldw	r2,-4(fp)
   13cf0:	18bff01e 	bne	r3,r2,13cb4 <_gp+0xffff78c4>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   13cf4:	0005883a 	mov	r2,zero
}
   13cf8:	e037883a 	mov	sp,fp
   13cfc:	dfc00117 	ldw	ra,4(sp)
   13d00:	df000017 	ldw	fp,0(sp)
   13d04:	dec00204 	addi	sp,sp,8
   13d08:	f800283a 	ret

00013d0c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   13d0c:	defffb04 	addi	sp,sp,-20
   13d10:	dfc00415 	stw	ra,16(sp)
   13d14:	df000315 	stw	fp,12(sp)
   13d18:	df000304 	addi	fp,sp,12
   13d1c:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   13d20:	d0a00317 	ldw	r2,-32756(gp)
   13d24:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   13d28:	00003106 	br	13df0 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   13d2c:	e0bffd17 	ldw	r2,-12(fp)
   13d30:	10800217 	ldw	r2,8(r2)
   13d34:	1009883a 	mov	r4,r2
   13d38:	0013f280 	call	13f28 <strlen>
   13d3c:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   13d40:	e0bffd17 	ldw	r2,-12(fp)
   13d44:	10c00217 	ldw	r3,8(r2)
   13d48:	e0bffe17 	ldw	r2,-8(fp)
   13d4c:	10bfffc4 	addi	r2,r2,-1
   13d50:	1885883a 	add	r2,r3,r2
   13d54:	10800003 	ldbu	r2,0(r2)
   13d58:	10803fcc 	andi	r2,r2,255
   13d5c:	1080201c 	xori	r2,r2,128
   13d60:	10bfe004 	addi	r2,r2,-128
   13d64:	10800bd8 	cmpnei	r2,r2,47
   13d68:	1000031e 	bne	r2,zero,13d78 <alt_find_file+0x6c>
    {
      len -= 1;
   13d6c:	e0bffe17 	ldw	r2,-8(fp)
   13d70:	10bfffc4 	addi	r2,r2,-1
   13d74:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   13d78:	e0bffe17 	ldw	r2,-8(fp)
   13d7c:	e0ffff17 	ldw	r3,-4(fp)
   13d80:	1885883a 	add	r2,r3,r2
   13d84:	10800003 	ldbu	r2,0(r2)
   13d88:	10803fcc 	andi	r2,r2,255
   13d8c:	1080201c 	xori	r2,r2,128
   13d90:	10bfe004 	addi	r2,r2,-128
   13d94:	10800be0 	cmpeqi	r2,r2,47
   13d98:	1000081e 	bne	r2,zero,13dbc <alt_find_file+0xb0>
   13d9c:	e0bffe17 	ldw	r2,-8(fp)
   13da0:	e0ffff17 	ldw	r3,-4(fp)
   13da4:	1885883a 	add	r2,r3,r2
   13da8:	10800003 	ldbu	r2,0(r2)
   13dac:	10803fcc 	andi	r2,r2,255
   13db0:	1080201c 	xori	r2,r2,128
   13db4:	10bfe004 	addi	r2,r2,-128
   13db8:	10000a1e 	bne	r2,zero,13de4 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   13dbc:	e0bffd17 	ldw	r2,-12(fp)
   13dc0:	10800217 	ldw	r2,8(r2)
   13dc4:	e0fffe17 	ldw	r3,-8(fp)
   13dc8:	180d883a 	mov	r6,r3
   13dcc:	e17fff17 	ldw	r5,-4(fp)
   13dd0:	1009883a 	mov	r4,r2
   13dd4:	0013ef80 	call	13ef8 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   13dd8:	1000021e 	bne	r2,zero,13de4 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   13ddc:	e0bffd17 	ldw	r2,-12(fp)
   13de0:	00000706 	br	13e00 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   13de4:	e0bffd17 	ldw	r2,-12(fp)
   13de8:	10800017 	ldw	r2,0(r2)
   13dec:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   13df0:	e0fffd17 	ldw	r3,-12(fp)
   13df4:	d0a00304 	addi	r2,gp,-32756
   13df8:	18bfcc1e 	bne	r3,r2,13d2c <_gp+0xffff793c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   13dfc:	0005883a 	mov	r2,zero
}
   13e00:	e037883a 	mov	sp,fp
   13e04:	dfc00117 	ldw	ra,4(sp)
   13e08:	df000017 	ldw	fp,0(sp)
   13e0c:	dec00204 	addi	sp,sp,8
   13e10:	f800283a 	ret

00013e14 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   13e14:	defffa04 	addi	sp,sp,-24
   13e18:	dfc00515 	stw	ra,20(sp)
   13e1c:	df000415 	stw	fp,16(sp)
   13e20:	dc000315 	stw	r16,12(sp)
   13e24:	df000404 	addi	fp,sp,16
   13e28:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
   13e2c:	00bffa04 	movi	r2,-24
   13e30:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   13e34:	e03ffc15 	stw	zero,-16(fp)
   13e38:	00001d06 	br	13eb0 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
   13e3c:	04000074 	movhi	r16,1
   13e40:	84106404 	addi	r16,r16,16784
   13e44:	e0bffc17 	ldw	r2,-16(fp)
   13e48:	01400304 	movi	r5,12
   13e4c:	1009883a 	mov	r4,r2
   13e50:	0012c300 	call	12c30 <__mulsi3>
   13e54:	8085883a 	add	r2,r16,r2
   13e58:	10800017 	ldw	r2,0(r2)
   13e5c:	1000111e 	bne	r2,zero,13ea4 <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
   13e60:	04000074 	movhi	r16,1
   13e64:	84106404 	addi	r16,r16,16784
   13e68:	e0bffc17 	ldw	r2,-16(fp)
   13e6c:	01400304 	movi	r5,12
   13e70:	1009883a 	mov	r4,r2
   13e74:	0012c300 	call	12c30 <__mulsi3>
   13e78:	8085883a 	add	r2,r16,r2
   13e7c:	e0fffe17 	ldw	r3,-8(fp)
   13e80:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   13e84:	d0e00717 	ldw	r3,-32740(gp)
   13e88:	e0bffc17 	ldw	r2,-16(fp)
   13e8c:	1880020e 	bge	r3,r2,13e98 <alt_get_fd+0x84>
      {
        alt_max_fd = i;
   13e90:	e0bffc17 	ldw	r2,-16(fp)
   13e94:	d0a00715 	stw	r2,-32740(gp)
      }
      rc = i;
   13e98:	e0bffc17 	ldw	r2,-16(fp)
   13e9c:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
   13ea0:	00000606 	br	13ebc <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   13ea4:	e0bffc17 	ldw	r2,-16(fp)
   13ea8:	10800044 	addi	r2,r2,1
   13eac:	e0bffc15 	stw	r2,-16(fp)
   13eb0:	e0bffc17 	ldw	r2,-16(fp)
   13eb4:	10800810 	cmplti	r2,r2,32
   13eb8:	103fe01e 	bne	r2,zero,13e3c <_gp+0xffff7a4c>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   13ebc:	e0bffd17 	ldw	r2,-12(fp)
}
   13ec0:	e6ffff04 	addi	sp,fp,-4
   13ec4:	dfc00217 	ldw	ra,8(sp)
   13ec8:	df000117 	ldw	fp,4(sp)
   13ecc:	dc000017 	ldw	r16,0(sp)
   13ed0:	dec00304 	addi	sp,sp,12
   13ed4:	f800283a 	ret

00013ed8 <exit>:
   13ed8:	defffe04 	addi	sp,sp,-8
   13edc:	000b883a 	mov	r5,zero
   13ee0:	dc000015 	stw	r16,0(sp)
   13ee4:	dfc00115 	stw	ra,4(sp)
   13ee8:	2021883a 	mov	r16,r4
   13eec:	0013f440 	call	13f44 <__call_exitprocs>
   13ef0:	8009883a 	mov	r4,r16
   13ef4:	00140d40 	call	140d4 <_exit>

00013ef8 <memcmp>:
   13ef8:	218d883a 	add	r6,r4,r6
   13efc:	21800826 	beq	r4,r6,13f20 <memcmp+0x28>
   13f00:	20800003 	ldbu	r2,0(r4)
   13f04:	28c00003 	ldbu	r3,0(r5)
   13f08:	10c00226 	beq	r2,r3,13f14 <memcmp+0x1c>
   13f0c:	10c5c83a 	sub	r2,r2,r3
   13f10:	f800283a 	ret
   13f14:	21000044 	addi	r4,r4,1
   13f18:	29400044 	addi	r5,r5,1
   13f1c:	003ff706 	br	13efc <_gp+0xffff7b0c>
   13f20:	0005883a 	mov	r2,zero
   13f24:	f800283a 	ret

00013f28 <strlen>:
   13f28:	2005883a 	mov	r2,r4
   13f2c:	10c00007 	ldb	r3,0(r2)
   13f30:	18000226 	beq	r3,zero,13f3c <strlen+0x14>
   13f34:	10800044 	addi	r2,r2,1
   13f38:	003ffc06 	br	13f2c <_gp+0xffff7b3c>
   13f3c:	1105c83a 	sub	r2,r2,r4
   13f40:	f800283a 	ret

00013f44 <__call_exitprocs>:
   13f44:	defff504 	addi	sp,sp,-44
   13f48:	dd000515 	stw	r20,20(sp)
   13f4c:	05000074 	movhi	r20,1
   13f50:	dc800315 	stw	r18,12(sp)
   13f54:	dfc00a15 	stw	ra,40(sp)
   13f58:	df000915 	stw	fp,36(sp)
   13f5c:	ddc00815 	stw	r23,32(sp)
   13f60:	dd800715 	stw	r22,28(sp)
   13f64:	dd400615 	stw	r21,24(sp)
   13f68:	dcc00415 	stw	r19,16(sp)
   13f6c:	dc400215 	stw	r17,8(sp)
   13f70:	dc000115 	stw	r16,4(sp)
   13f74:	d9000015 	stw	r4,0(sp)
   13f78:	2825883a 	mov	r18,r5
   13f7c:	a5110504 	addi	r20,r20,17428
   13f80:	a4400017 	ldw	r17,0(r20)
   13f84:	8cc00c17 	ldw	r19,48(r17)
   13f88:	8c400c04 	addi	r17,r17,48
   13f8c:	98004526 	beq	r19,zero,140a4 <__call_exitprocs+0x160>
   13f90:	9c000117 	ldw	r16,4(r19)
   13f94:	00900034 	movhi	r2,16384
   13f98:	10bfffc4 	addi	r2,r2,-1
   13f9c:	9d402217 	ldw	r21,136(r19)
   13fa0:	85bfffc4 	addi	r22,r16,-1
   13fa4:	80a1883a 	add	r16,r16,r2
   13fa8:	8421883a 	add	r16,r16,r16
   13fac:	8421883a 	add	r16,r16,r16
   13fb0:	ac2f883a 	add	r23,r21,r16
   13fb4:	84000204 	addi	r16,r16,8
   13fb8:	9c21883a 	add	r16,r19,r16
   13fbc:	b0002716 	blt	r22,zero,1405c <__call_exitprocs+0x118>
   13fc0:	90000726 	beq	r18,zero,13fe0 <__call_exitprocs+0x9c>
   13fc4:	a800041e 	bne	r21,zero,13fd8 <__call_exitprocs+0x94>
   13fc8:	b5bfffc4 	addi	r22,r22,-1
   13fcc:	bdffff04 	addi	r23,r23,-4
   13fd0:	843fff04 	addi	r16,r16,-4
   13fd4:	003ff906 	br	13fbc <_gp+0xffff7bcc>
   13fd8:	b9002017 	ldw	r4,128(r23)
   13fdc:	913ffa1e 	bne	r18,r4,13fc8 <_gp+0xffff7bd8>
   13fe0:	99000117 	ldw	r4,4(r19)
   13fe4:	82000017 	ldw	r8,0(r16)
   13fe8:	213fffc4 	addi	r4,r4,-1
   13fec:	b100021e 	bne	r22,r4,13ff8 <__call_exitprocs+0xb4>
   13ff0:	9d800115 	stw	r22,4(r19)
   13ff4:	00000106 	br	13ffc <__call_exitprocs+0xb8>
   13ff8:	80000015 	stw	zero,0(r16)
   13ffc:	403ff226 	beq	r8,zero,13fc8 <_gp+0xffff7bd8>
   14000:	9f000117 	ldw	fp,4(r19)
   14004:	a8000526 	beq	r21,zero,1401c <__call_exitprocs+0xd8>
   14008:	00800044 	movi	r2,1
   1400c:	1592983a 	sll	r9,r2,r22
   14010:	a9404017 	ldw	r5,256(r21)
   14014:	494a703a 	and	r5,r9,r5
   14018:	2800021e 	bne	r5,zero,14024 <__call_exitprocs+0xe0>
   1401c:	403ee83a 	callr	r8
   14020:	00000906 	br	14048 <__call_exitprocs+0x104>
   14024:	a9004117 	ldw	r4,260(r21)
   14028:	4908703a 	and	r4,r9,r4
   1402c:	2000041e 	bne	r4,zero,14040 <__call_exitprocs+0xfc>
   14030:	b9400017 	ldw	r5,0(r23)
   14034:	d9000017 	ldw	r4,0(sp)
   14038:	403ee83a 	callr	r8
   1403c:	00000206 	br	14048 <__call_exitprocs+0x104>
   14040:	b9000017 	ldw	r4,0(r23)
   14044:	403ee83a 	callr	r8
   14048:	99000117 	ldw	r4,4(r19)
   1404c:	e13fcc1e 	bne	fp,r4,13f80 <_gp+0xffff7b90>
   14050:	89000017 	ldw	r4,0(r17)
   14054:	993fdc26 	beq	r19,r4,13fc8 <_gp+0xffff7bd8>
   14058:	003fc906 	br	13f80 <_gp+0xffff7b90>
   1405c:	00800034 	movhi	r2,0
   14060:	10800004 	addi	r2,r2,0
   14064:	10000f26 	beq	r2,zero,140a4 <__call_exitprocs+0x160>
   14068:	99400117 	ldw	r5,4(r19)
   1406c:	99000017 	ldw	r4,0(r19)
   14070:	2800091e 	bne	r5,zero,14098 <__call_exitprocs+0x154>
   14074:	20000826 	beq	r4,zero,14098 <__call_exitprocs+0x154>
   14078:	89000015 	stw	r4,0(r17)
   1407c:	a8000226 	beq	r21,zero,14088 <__call_exitprocs+0x144>
   14080:	a809883a 	mov	r4,r21
   14084:	00000000 	call	0 <__alt_mem_oc_mem-0x10000>
   14088:	9809883a 	mov	r4,r19
   1408c:	00000000 	call	0 <__alt_mem_oc_mem-0x10000>
   14090:	8cc00017 	ldw	r19,0(r17)
   14094:	003fbd06 	br	13f8c <_gp+0xffff7b9c>
   14098:	9823883a 	mov	r17,r19
   1409c:	2027883a 	mov	r19,r4
   140a0:	003fba06 	br	13f8c <_gp+0xffff7b9c>
   140a4:	dfc00a17 	ldw	ra,40(sp)
   140a8:	df000917 	ldw	fp,36(sp)
   140ac:	ddc00817 	ldw	r23,32(sp)
   140b0:	dd800717 	ldw	r22,28(sp)
   140b4:	dd400617 	ldw	r21,24(sp)
   140b8:	dd000517 	ldw	r20,20(sp)
   140bc:	dcc00417 	ldw	r19,16(sp)
   140c0:	dc800317 	ldw	r18,12(sp)
   140c4:	dc400217 	ldw	r17,8(sp)
   140c8:	dc000117 	ldw	r16,4(sp)
   140cc:	dec00b04 	addi	sp,sp,44
   140d0:	f800283a 	ret

000140d4 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   140d4:	defffd04 	addi	sp,sp,-12
   140d8:	df000215 	stw	fp,8(sp)
   140dc:	df000204 	addi	fp,sp,8
   140e0:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   140e4:	0001883a 	nop
   140e8:	e0bfff17 	ldw	r2,-4(fp)
   140ec:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   140f0:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   140f4:	10000226 	beq	r2,zero,14100 <_exit+0x2c>
    ALT_SIM_FAIL();
   140f8:	002af070 	cmpltui	zero,zero,43969
   140fc:	00000106 	br	14104 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   14100:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   14104:	003fff06 	br	14104 <_gp+0xffff7d14>
