
nios4usb_app.elf:     file format elf32-littlenios2
nios4usb_app.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00008020

Program Header:
    LOAD off    0x00001000 vaddr 0x00008000 paddr 0x00008000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00008020 paddr 0x00008020 align 2**12
         filesz 0x000046d0 memsz 0x000046d0 flags r-x
    LOAD off    0x000056f0 vaddr 0x0000c6f0 paddr 0x0000c9d0 align 2**12
         filesz 0x000002e0 memsz 0x000002e0 flags rw-
    LOAD off    0x00005cb0 vaddr 0x0000ccb0 paddr 0x0000ccb0 align 2**12
         filesz 0x00000000 memsz 0x00000094 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00008000  00008000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00008020  00008020  000059d0  2**0
                  CONTENTS
  2 .text         0000469c  00008020  00008020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000034  0000c6bc  0000c6bc  000056bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000002e0  0000c6f0  0000c9d0  000056f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000094  0000ccb0  0000ccb0  00005cb0  2**2
                  ALLOC, SMALL_DATA
  6 .oc_mem       00000000  0000cd44  0000cd44  000059d0  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  000059d0  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000430  00000000  00000000  000059f8  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000052cc  00000000  00000000  00005e28  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001bca  00000000  00000000  0000b0f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000246d  00000000  00000000  0000ccbe  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000ad8  00000000  00000000  0000f12c  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00001913  00000000  00000000  0000fc04  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000082d  00000000  00000000  00011517  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  00011d44  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000100  00000000  00000000  00011d58  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  000136f6  2**0
                  CONTENTS, READONLY
 18 .cpu          00000009  00000000  00000000  000136f9  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00013702  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00013703  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  00013704  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  00013708  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  0001370c  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   0000000b  00000000  00000000  00013710  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    0000000b  00000000  00000000  0001371b  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   0000000b  00000000  00000000  00013726  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000008  00000000  00000000  00013731  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000056  00000000  00000000  00013739  2**0
                  CONTENTS, READONLY
 29 .jdi          00006fd3  00000000  00000000  0001378f  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     000ac871  00000000  00000000  0001a762  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00008000 l    d  .entry	00000000 .entry
00008020 l    d  .exceptions	00000000 .exceptions
00008020 l    d  .text	00000000 .text
0000c6bc l    d  .rodata	00000000 .rodata
0000c6f0 l    d  .rwdata	00000000 .rwdata
0000ccb0 l    d  .bss	00000000 .bss
0000cd44 l    d  .oc_mem	00000000 .oc_mem
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../nios4usb_bsp//obj/HAL/src/crt0.o
00008058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 pll_rcfg.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 alt_load.c
0000b22c l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
0000b384 l     F .text	00000034 alt_dev_reg
0000c6f0 l     O .rwdata	0000002c jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_spi.c
00000000 l    df *ABS*	00000000 i2c_opencores.c
00000000 l    df *ABS*	00000000 alt_close.c
0000bb44 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
0000bc78 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0000bca4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0000bda4 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
0000bf04 l     F .text	0000003c alt_get_errno
0000bf40 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 impure.c
0000c8c4 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 alt_exit.c
0000b318 g     F .text	0000006c alt_main
000080d0 g     F .text	00000058 Check_Periph_ID
0000c9d0 g       *ABS*	00000000 __flash_rwdata_start
0000ccb0 g     O .bss	00000001 block
0000ccc4 g     O .bss	00000040 glEp0Buffer_Tx
0000c9a6 g     O .rwdata	00000002 converted_val
0000c20c g     F .text	00000024 altera_nios2_gen2_irq_init
00008000 g     F .entry	0000000c __reset
00008880 g     F .text	00000124 Control_TCXO_ADF
00008020 g       *ABS*	00000000 __flash_exceptions_start
0000ccc0 g     O .bss	00000004 errno
0000ccb8 g     O .bss	00000004 alt_argv
000149a4 g       *ABS*	00000000 _gp
0000c744 g     O .rwdata	00000180 alt_fd_list
0000c230 g     F .text	00000090 alt_find_dev
000090b8 g     F .text	000000b4 smpl_cmp
0000be88 g     F .text	0000007c alt_io_redirect
0000b92c g     F .text	000000c0 I2C_start
00009534 g     F .text	000001c8 Modify_BRDSPI16_Reg_bits
0000b4f8 g     F .text	000000ec altera_avalon_jtag_uart_read
0000b128 g     F .text	00000064 .hidden __udivsi3
00008a54 g     F .text	000000a8 GetPLLCFG_Base
0000c9c0 g     O .rwdata	00000004 alt_max_fd
00009484 g     F .text	000000b0 ResetPLL
00008afc g     F .text	00000484 UpdatePLLCFG
0000c9c8 g     O .rwdata	00000004 _global_impure_ptr
0000cd44 g       *ABS*	00000000 __bss_end
0000c71c g     O .rwdata	00000028 alt_dev_null
0000ae7c g     F .text	00000088 set_pll_config
0000bc58 g     F .text	00000020 alt_dcache_flush_all
00008f80 g     F .text	00000138 UpdatePHCFG
00008000 g       *ABS*	00000000 __alt_mem_oc_mem
0000c9d0 g       *ABS*	00000000 __ram_rwdata_end
0000c9b8 g     O .rwdata	00000008 alt_dev_list
0000c6f0 g       *ABS*	00000000 __ram_rodata_end
0000b18c g     F .text	00000058 .hidden __umodsi3
0000cd44 g       *ABS*	00000000 end
00010000 g       *ABS*	00000000 __alt_stack_pointer
0000b5e4 g     F .text	00000094 altera_avalon_jtag_uart_write
0000af04 g     F .text	0000003c set_CxCnt
0000c4f8 g     F .text	00000190 __call_exitprocs
0000ccb1 g     O .bss	00000001 test
00008020 g     F .text	0000003c _start
0000b678 g     F .text	000001fc alt_avalon_spi_command
0000b3f0 g     F .text	00000048 alt_sys_init
0000b1e4 g     F .text	00000028 .hidden __mulsi3
0000c6f0 g       *ABS*	00000000 __ram_rwdata_start
0000c6bc g       *ABS*	00000000 __ram_rodata_start
0000b438 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0000c3c8 g     F .text	000000c4 alt_get_fd
000087b4 g     F .text	000000cc Control_TCXO_DAC
000089a4 g     F .text	000000b0 change_ADC_tpat
000082e0 g     F .text	000004d4 init_ADC
0000c4ac g     F .text	00000030 memcmp
0000cd44 g       *ABS*	00000000 __alt_stack_base
0000c2c0 g     F .text	00000108 alt_find_file
0000bce0 g     F .text	000000a4 alt_dev_llist_insert
0000adac g     F .text	000000d0 get_pll_config
0000ccb0 g       *ABS*	00000000 __bss_start
0000b20c g     F .text	00000020 memset
000096fc g     F .text	000016b0 main
0000ccbc g     O .bss	00000004 alt_envp
0000b498 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00008128 g     F .text	00000088 getFifoData
0000afbc g     F .text	00000074 start_Reconfig
000081b0 g     F .text	00000130 Configure_LM75
0000c9c4 g     O .rwdata	00000004 alt_errno
0000b030 g     F .text	00000084 .hidden __divsi3
0000b9ec g     F .text	00000094 I2C_read
0000c6bc g       *ABS*	00000000 __flash_rodata_start
0000b3b8 g     F .text	00000038 alt_irq_init
0000c188 g     F .text	00000084 alt_release_fd
0000c9ac g     O .rwdata	00000004 LMS_Ctrl_Packet_Rx
0000c9cc g     O .rwdata	00000004 _impure_ptr
0000ccb4 g     O .bss	00000004 alt_argc
0000916c g     F .text	00000318 AutoPHCFG
0000c9b0 g     O .rwdata	00000008 alt_fs_list
0000c9a4 g     O .rwdata	00000002 dac_val
0000b874 g     F .text	000000b8 I2C_init
00008020 g       *ABS*	00000000 __ram_exceptions_start
0000af40 g     F .text	0000007c set_Phase
0000c9d0 g       *ABS*	00000000 _edata
0000cd44 g       *ABS*	00000000 _end
00008020 g       *ABS*	00000000 __ram_exceptions_end
0000ccb2 g     O .bss	00000001 cmd_errors
0000c48c g     F .text	00000020 exit
0000b0b4 g     F .text	00000074 .hidden __modsi3
00010000 g       *ABS*	00000000 __alt_data_end
0000c688 g     F .text	00000034 _exit
0000805c g     F .text	00000074 Check_many_blocks
0000c4dc g     F .text	0000001c strlen
0000c02c g     F .text	0000015c open
0000c9a8 g     O .rwdata	00000004 LMS_Ctrl_Packet_Tx
0000bd84 g     F .text	00000020 alt_icache_flush_all
0000bb80 g     F .text	000000d8 close
0000b294 g     F .text	00000084 alt_load
0000ba80 g     F .text	000000c4 I2C_write
0000cd04 g     O .bss	00000040 glEp0Buffer_Rx



Disassembly of section .entry:

00008000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    8000:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    8004:	08600814 	ori	at,at,32800
    jmp r1
    8008:	0800683a 	jmp	at
	...

Disassembly of section .text:

00008020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    8020:	06c00074 	movhi	sp,1
    ori sp, sp, %lo(__alt_stack_pointer)
    8024:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
    8028:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
    802c:	d6926914 	ori	gp,gp,18852
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    8030:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    8034:	10b32c14 	ori	r2,r2,52400

    movhi r3, %hi(__bss_end)
    8038:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    803c:	18f35114 	ori	r3,r3,52548

    beq r2, r3, 1f
    8040:	10c00326 	beq	r2,r3,8050 <_start+0x30>

0:
    stw zero, (r2)
    8044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    8048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    804c:	10fffd36 	bltu	r2,r3,8044 <_gp+0xffff36a0>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    8050:	000b2940 	call	b294 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    8054:	000b3180 	call	b318 <alt_main>

00008058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    8058:	003fff06 	br	8058 <_gp+0xffff36b4>

0000805c <Check_many_blocks>:


/**	This function checks if all blocks could fit in data field.
*	If blocks will not fit, function returns TRUE. */
unsigned char Check_many_blocks (unsigned char block_size)
{
    805c:	defffc04 	addi	sp,sp,-16
    8060:	dfc00315 	stw	ra,12(sp)
    8064:	df000215 	stw	fp,8(sp)
    8068:	dc000115 	stw	r16,4(sp)
    806c:	df000204 	addi	fp,sp,8
    8070:	2005883a 	mov	r2,r4
    8074:	e0bffe05 	stb	r2,-8(fp)
	if (LMS_Ctrl_Packet_Rx->Header.Data_blocks > (sizeof(LMS_Ctrl_Packet_Tx->Data_field)/block_size))
    8078:	d0a00217 	ldw	r2,-32760(gp)
    807c:	14000083 	ldbu	r16,2(r2)
    8080:	e0bffe03 	ldbu	r2,-8(fp)
    8084:	100b883a 	mov	r5,r2
    8088:	01000e04 	movi	r4,56
    808c:	000b1280 	call	b128 <__udivsi3>
    8090:	1007883a 	mov	r3,r2
    8094:	80803fcc 	andi	r2,r16,255
    8098:	18c03fcc 	andi	r3,r3,255
    809c:	1880052e 	bgeu	r3,r2,80b4 <Check_many_blocks+0x58>
	{
		LMS_Ctrl_Packet_Tx->Header.Status = STATUS_BLOCKS_ERROR_CMD;
    80a0:	d0a00117 	ldw	r2,-32764(gp)
    80a4:	00c00104 	movi	r3,4
    80a8:	10c00045 	stb	r3,1(r2)
		return 1;
    80ac:	00800044 	movi	r2,1
    80b0:	00000106 	br	80b8 <Check_many_blocks+0x5c>
	}
	else return 0;
    80b4:	0005883a 	mov	r2,zero
	return 1;
}
    80b8:	e6ffff04 	addi	sp,fp,-4
    80bc:	dfc00217 	ldw	ra,8(sp)
    80c0:	df000117 	ldw	fp,4(sp)
    80c4:	dc000017 	ldw	r16,0(sp)
    80c8:	dec00304 	addi	sp,sp,12
    80cc:	f800283a 	ret

000080d0 <Check_Periph_ID>:

/** Cchecks if peripheral ID is valid.
 Returns 1 if valid, else 0. */
unsigned char Check_Periph_ID (unsigned char max_periph_id, unsigned char Periph_ID)
{
    80d0:	defffd04 	addi	sp,sp,-12
    80d4:	df000215 	stw	fp,8(sp)
    80d8:	df000204 	addi	fp,sp,8
    80dc:	2007883a 	mov	r3,r4
    80e0:	2805883a 	mov	r2,r5
    80e4:	e0fffe05 	stb	r3,-8(fp)
    80e8:	e0bfff05 	stb	r2,-4(fp)
		if (LMS_Ctrl_Packet_Rx->Header.Periph_ID > max_periph_id)
    80ec:	d0a00217 	ldw	r2,-32760(gp)
    80f0:	108000c3 	ldbu	r2,3(r2)
    80f4:	10803fcc 	andi	r2,r2,255
    80f8:	e0fffe03 	ldbu	r3,-8(fp)
    80fc:	1880052e 	bgeu	r3,r2,8114 <Check_Periph_ID+0x44>
		{
		LMS_Ctrl_Packet_Tx->Header.Status = STATUS_INVALID_PERIPH_ID_CMD;
    8100:	d0a00117 	ldw	r2,-32764(gp)
    8104:	00c00204 	movi	r3,8
    8108:	10c00045 	stb	r3,1(r2)
		return 0;
    810c:	0005883a 	mov	r2,zero
    8110:	00000106 	br	8118 <Check_Periph_ID+0x48>
		}
	else return 1;
    8114:	00800044 	movi	r2,1
}
    8118:	e037883a 	mov	sp,fp
    811c:	df000017 	ldw	fp,0(sp)
    8120:	dec00104 	addi	sp,sp,4
    8124:	f800283a 	ret

00008128 <getFifoData>:

/**
 * Gets 64 bytes packet from FIFO.
 */
void getFifoData(uint8_t *buf, uint8_t k)
{
    8128:	defffb04 	addi	sp,sp,-20
    812c:	df000415 	stw	fp,16(sp)
    8130:	df000404 	addi	fp,sp,16
    8134:	e13ffe15 	stw	r4,-8(fp)
    8138:	2805883a 	mov	r2,r5
    813c:	e0bfff05 	stb	r2,-4(fp)
	uint8_t cnt = 0;
    8140:	e03ffc05 	stb	zero,-16(fp)
	uint32_t* dest = (uint32_t*)buf;
    8144:	e0bffe17 	ldw	r2,-8(fp)
    8148:	e0bffd15 	stw	r2,-12(fp)
	for(cnt=0; cnt<k/sizeof(uint32_t); ++cnt)
    814c:	e03ffc05 	stb	zero,-16(fp)
    8150:	00000d06 	br	8188 <getFifoData+0x60>
	{
		dest[cnt] = IORD(AV_FIFO_INT_0_BASE, 1);	// Read Data from FIFO
    8154:	e0bffc03 	ldbu	r2,-16(fp)
    8158:	1085883a 	add	r2,r2,r2
    815c:	1085883a 	add	r2,r2,r2
    8160:	1007883a 	mov	r3,r2
    8164:	e0bffd17 	ldw	r2,-12(fp)
    8168:	10c7883a 	add	r3,r2,r3
    816c:	00800074 	movhi	r2,1
    8170:	1085c504 	addi	r2,r2,5908
    8174:	10800037 	ldwio	r2,0(r2)
    8178:	18800015 	stw	r2,0(r3)
 */
void getFifoData(uint8_t *buf, uint8_t k)
{
	uint8_t cnt = 0;
	uint32_t* dest = (uint32_t*)buf;
	for(cnt=0; cnt<k/sizeof(uint32_t); ++cnt)
    817c:	e0bffc03 	ldbu	r2,-16(fp)
    8180:	10800044 	addi	r2,r2,1
    8184:	e0bffc05 	stb	r2,-16(fp)
    8188:	e0bfff03 	ldbu	r2,-4(fp)
    818c:	1004d0ba 	srli	r2,r2,2
    8190:	10803fcc 	andi	r2,r2,255
    8194:	e0fffc03 	ldbu	r3,-16(fp)
    8198:	18bfee36 	bltu	r3,r2,8154 <_gp+0xffff37b0>
	{
		dest[cnt] = IORD(AV_FIFO_INT_0_BASE, 1);	// Read Data from FIFO
	};
}
    819c:	0001883a 	nop
    81a0:	e037883a 	mov	sp,fp
    81a4:	df000017 	ldw	fp,0(sp)
    81a8:	dec00104 	addi	sp,sp,4
    81ac:	f800283a 	ret

000081b0 <Configure_LM75>:
/**
 * Configures LM75
 */

void Configure_LM75(void)
{
    81b0:	defffd04 	addi	sp,sp,-12
    81b4:	dfc00215 	stw	ra,8(sp)
    81b8:	df000115 	stw	fp,4(sp)
    81bc:	df000104 	addi	fp,sp,4
	int spirez;

	// OS polarity configuration
	spirez = I2C_start(I2C_OPENCORES_0_BASE, LM75_I2C_ADDR, 0);
    81c0:	000d883a 	mov	r6,zero
    81c4:	01401204 	movi	r5,72
    81c8:	01000074 	movhi	r4,1
    81cc:	21059804 	addi	r4,r4,5728
    81d0:	000b92c0 	call	b92c <I2C_start>
    81d4:	e0bfff15 	stw	r2,-4(fp)
	spirez = I2C_write(I2C_OPENCORES_0_BASE, 0x01, 0);				// Pointer = configuration register
    81d8:	000d883a 	mov	r6,zero
    81dc:	01400044 	movi	r5,1
    81e0:	01000074 	movhi	r4,1
    81e4:	21059804 	addi	r4,r4,5728
    81e8:	000ba800 	call	ba80 <I2C_write>
    81ec:	e0bfff15 	stw	r2,-4(fp)
	//spirez = I2C_start(I2C_OPENCORES_0_BASE, LM75_I2C_ADDR, 1);
	spirez = I2C_write(I2C_OPENCORES_0_BASE, 0x04, 1);				//Configuration value: OS polarity = 1, Comparator/int = 0, Shutdown = 0
    81f0:	01800044 	movi	r6,1
    81f4:	01400104 	movi	r5,4
    81f8:	01000074 	movhi	r4,1
    81fc:	21059804 	addi	r4,r4,5728
    8200:	000ba800 	call	ba80 <I2C_write>
    8204:	e0bfff15 	stw	r2,-4(fp)

	// THYST configuration
	spirez = I2C_start(I2C_OPENCORES_0_BASE, LM75_I2C_ADDR, 0);
    8208:	000d883a 	mov	r6,zero
    820c:	01401204 	movi	r5,72
    8210:	01000074 	movhi	r4,1
    8214:	21059804 	addi	r4,r4,5728
    8218:	000b92c0 	call	b92c <I2C_start>
    821c:	e0bfff15 	stw	r2,-4(fp)
	spirez = I2C_write(I2C_OPENCORES_0_BASE, 0x02, 0);				// Pointer = THYST register
    8220:	000d883a 	mov	r6,zero
    8224:	01400084 	movi	r5,2
    8228:	01000074 	movhi	r4,1
    822c:	21059804 	addi	r4,r4,5728
    8230:	000ba800 	call	ba80 <I2C_write>
    8234:	e0bfff15 	stw	r2,-4(fp)
	//spirez = I2C_start(I2C_OPENCORES_0_BASE, LM75_I2C_ADDR, 1);
	spirez = I2C_write(I2C_OPENCORES_0_BASE, 45, 0);				// Set THYST H
    8238:	000d883a 	mov	r6,zero
    823c:	01400b44 	movi	r5,45
    8240:	01000074 	movhi	r4,1
    8244:	21059804 	addi	r4,r4,5728
    8248:	000ba800 	call	ba80 <I2C_write>
    824c:	e0bfff15 	stw	r2,-4(fp)
	spirez = I2C_write(I2C_OPENCORES_0_BASE,  0, 1);				// Set THYST L
    8250:	01800044 	movi	r6,1
    8254:	000b883a 	mov	r5,zero
    8258:	01000074 	movhi	r4,1
    825c:	21059804 	addi	r4,r4,5728
    8260:	000ba800 	call	ba80 <I2C_write>
    8264:	e0bfff15 	stw	r2,-4(fp)

	// TOS configuration
	spirez = I2C_start(I2C_OPENCORES_0_BASE, LM75_I2C_ADDR, 0);
    8268:	000d883a 	mov	r6,zero
    826c:	01401204 	movi	r5,72
    8270:	01000074 	movhi	r4,1
    8274:	21059804 	addi	r4,r4,5728
    8278:	000b92c0 	call	b92c <I2C_start>
    827c:	e0bfff15 	stw	r2,-4(fp)
	spirez = I2C_write(I2C_OPENCORES_0_BASE, 0x03, 0);				// Pointer = TOS register
    8280:	000d883a 	mov	r6,zero
    8284:	014000c4 	movi	r5,3
    8288:	01000074 	movhi	r4,1
    828c:	21059804 	addi	r4,r4,5728
    8290:	000ba800 	call	ba80 <I2C_write>
    8294:	e0bfff15 	stw	r2,-4(fp)
	//spirez = I2C_start(I2C_OPENCORES_0_BASE, LM75_I2C_ADDR, 1);
	spirez = I2C_write(I2C_OPENCORES_0_BASE, 55, 0);				// Set TOS H
    8298:	000d883a 	mov	r6,zero
    829c:	01400dc4 	movi	r5,55
    82a0:	01000074 	movhi	r4,1
    82a4:	21059804 	addi	r4,r4,5728
    82a8:	000ba800 	call	ba80 <I2C_write>
    82ac:	e0bfff15 	stw	r2,-4(fp)
	spirez = I2C_write(I2C_OPENCORES_0_BASE,  0, 1);				// Set TOS L
    82b0:	01800044 	movi	r6,1
    82b4:	000b883a 	mov	r5,zero
    82b8:	01000074 	movhi	r4,1
    82bc:	21059804 	addi	r4,r4,5728
    82c0:	000ba800 	call	ba80 <I2C_write>
    82c4:	e0bfff15 	stw	r2,-4(fp)
}
    82c8:	0001883a 	nop
    82cc:	e037883a 	mov	sp,fp
    82d0:	dfc00117 	ldw	ra,4(sp)
    82d4:	df000017 	ldw	fp,0(sp)
    82d8:	dec00204 	addi	sp,sp,8
    82dc:	f800283a 	ret

000082e0 <init_ADC>:

void init_ADC()
{
    82e0:	defff904 	addi	sp,sp,-28
    82e4:	dfc00615 	stw	ra,24(sp)
    82e8:	df000515 	stw	fp,20(sp)
    82ec:	df000504 	addi	fp,sp,20
    //asm("nop"); asm("nop"); asm("nop");
    //IOWR(GPIO_0_BASE, 0x00, ui32_tmp & 0xFFFFFFFE);	//Set to 0


	// Disable ADC readout and reset
	wr_buf[0] = 0x00;	//Address
    82f0:	e03fff05 	stb	zero,-4(fp)
	wr_buf[1] = 0x02;	//Data
    82f4:	00800084 	movi	r2,2
    82f8:	e0bfff45 	stb	r2,-3(fp)
	//wr_buf[1] = 0x00;	//Data
	spirez = alt_avalon_spi_command(FPGA_SPI0_BASE, SPI_NR_EXTADC, 2, wr_buf, 0, NULL, 0);
    82fc:	e0bfff04 	addi	r2,fp,-4
    8300:	d8000215 	stw	zero,8(sp)
    8304:	d8000115 	stw	zero,4(sp)
    8308:	d8000015 	stw	zero,0(sp)
    830c:	100f883a 	mov	r7,r2
    8310:	01800084 	movi	r6,2
    8314:	01400144 	movi	r5,5
    8318:	01000074 	movhi	r4,1
    831c:	21059004 	addi	r4,r4,5696
    8320:	000b6780 	call	b678 <alt_avalon_spi_command>
    8324:	e0bffe15 	stw	r2,-8(fp)

	// 0x01
	wr_buf[0] = 0x01;	//Address
    8328:	00800044 	movi	r2,1
    832c:	e0bfff05 	stb	r2,-4(fp)
	wr_buf[1] = 0x00;	//Data
    8330:	e03fff45 	stb	zero,-3(fp)
	spirez = alt_avalon_spi_command(FPGA_SPI0_BASE, SPI_NR_EXTADC, 2, wr_buf, 0, NULL, 0);
    8334:	e0bfff04 	addi	r2,fp,-4
    8338:	d8000215 	stw	zero,8(sp)
    833c:	d8000115 	stw	zero,4(sp)
    8340:	d8000015 	stw	zero,0(sp)
    8344:	100f883a 	mov	r7,r2
    8348:	01800084 	movi	r6,2
    834c:	01400144 	movi	r5,5
    8350:	01000074 	movhi	r4,1
    8354:	21059004 	addi	r4,r4,5696
    8358:	000b6780 	call	b678 <alt_avalon_spi_command>
    835c:	e0bffe15 	stw	r2,-8(fp)

	// 0x03
	wr_buf[0] = 0x03;	//Address
    8360:	008000c4 	movi	r2,3
    8364:	e0bfff05 	stb	r2,-4(fp)
	//wr_buf[1] = 0x53;	//Data
	wr_buf[1] = 0x00;	//Data
    8368:	e03fff45 	stb	zero,-3(fp)
	spirez = alt_avalon_spi_command(FPGA_SPI0_BASE, SPI_NR_EXTADC, 2, wr_buf, 0, NULL, 0);
    836c:	e0bfff04 	addi	r2,fp,-4
    8370:	d8000215 	stw	zero,8(sp)
    8374:	d8000115 	stw	zero,4(sp)
    8378:	d8000015 	stw	zero,0(sp)
    837c:	100f883a 	mov	r7,r2
    8380:	01800084 	movi	r6,2
    8384:	01400144 	movi	r5,5
    8388:	01000074 	movhi	r4,1
    838c:	21059004 	addi	r4,r4,5696
    8390:	000b6780 	call	b678 <alt_avalon_spi_command>
    8394:	e0bffe15 	stw	r2,-8(fp)

	// 0x25
	wr_buf[0] = 0x25;	//Address
    8398:	00800944 	movi	r2,37
    839c:	e0bfff05 	stb	r2,-4(fp)
	wr_buf[1] = 0x04;	//Data
    83a0:	00800104 	movi	r2,4
    83a4:	e0bfff45 	stb	r2,-3(fp)
	spirez = alt_avalon_spi_command(FPGA_SPI0_BASE, SPI_NR_EXTADC, 2, wr_buf, 0, NULL, 0);
    83a8:	e0bfff04 	addi	r2,fp,-4
    83ac:	d8000215 	stw	zero,8(sp)
    83b0:	d8000115 	stw	zero,4(sp)
    83b4:	d8000015 	stw	zero,0(sp)
    83b8:	100f883a 	mov	r7,r2
    83bc:	01800084 	movi	r6,2
    83c0:	01400144 	movi	r5,5
    83c4:	01000074 	movhi	r4,1
    83c8:	21059004 	addi	r4,r4,5696
    83cc:	000b6780 	call	b678 <alt_avalon_spi_command>
    83d0:	e0bffe15 	stw	r2,-8(fp)

	// 0x29
	wr_buf[0] = 0x29;	//Address
    83d4:	00800a44 	movi	r2,41
    83d8:	e0bfff05 	stb	r2,-4(fp)
	wr_buf[1] = 0x00;	//Data
    83dc:	e03fff45 	stb	zero,-3(fp)
	spirez = alt_avalon_spi_command(FPGA_SPI0_BASE, SPI_NR_EXTADC, 2, wr_buf, 0, NULL, 0);
    83e0:	e0bfff04 	addi	r2,fp,-4
    83e4:	d8000215 	stw	zero,8(sp)
    83e8:	d8000115 	stw	zero,4(sp)
    83ec:	d8000015 	stw	zero,0(sp)
    83f0:	100f883a 	mov	r7,r2
    83f4:	01800084 	movi	r6,2
    83f8:	01400144 	movi	r5,5
    83fc:	01000074 	movhi	r4,1
    8400:	21059004 	addi	r4,r4,5696
    8404:	000b6780 	call	b678 <alt_avalon_spi_command>
    8408:	e0bffe15 	stw	r2,-8(fp)

	// 0x2B
	wr_buf[0] = 0x2B;	//Address
    840c:	00800ac4 	movi	r2,43
    8410:	e0bfff05 	stb	r2,-4(fp)
	wr_buf[1] = 0x04;	//Data
    8414:	00800104 	movi	r2,4
    8418:	e0bfff45 	stb	r2,-3(fp)
	spirez = alt_avalon_spi_command(FPGA_SPI0_BASE, SPI_NR_EXTADC, 2, wr_buf, 0, NULL, 0);
    841c:	e0bfff04 	addi	r2,fp,-4
    8420:	d8000215 	stw	zero,8(sp)
    8424:	d8000115 	stw	zero,4(sp)
    8428:	d8000015 	stw	zero,0(sp)
    842c:	100f883a 	mov	r7,r2
    8430:	01800084 	movi	r6,2
    8434:	01400144 	movi	r5,5
    8438:	01000074 	movhi	r4,1
    843c:	21059004 	addi	r4,r4,5696
    8440:	000b6780 	call	b678 <alt_avalon_spi_command>
    8444:	e0bffe15 	stw	r2,-8(fp)

	// 0x3D
	wr_buf[0] = 0x3D;	//Address
    8448:	00800f44 	movi	r2,61
    844c:	e0bfff05 	stb	r2,-4(fp)
	wr_buf[1] = 0x00;	//Data
    8450:	e03fff45 	stb	zero,-3(fp)
	spirez = alt_avalon_spi_command(FPGA_SPI0_BASE, SPI_NR_EXTADC, 2, wr_buf, 0, NULL, 0);
    8454:	e0bfff04 	addi	r2,fp,-4
    8458:	d8000215 	stw	zero,8(sp)
    845c:	d8000115 	stw	zero,4(sp)
    8460:	d8000015 	stw	zero,0(sp)
    8464:	100f883a 	mov	r7,r2
    8468:	01800084 	movi	r6,2
    846c:	01400144 	movi	r5,5
    8470:	01000074 	movhi	r4,1
    8474:	21059004 	addi	r4,r4,5696
    8478:	000b6780 	call	b678 <alt_avalon_spi_command>
    847c:	e0bffe15 	stw	r2,-8(fp)

	// 0x3F
	wr_buf[0] = 0x3F;	//Address
    8480:	00800fc4 	movi	r2,63
    8484:	e0bfff05 	stb	r2,-4(fp)
	wr_buf[1] = 0x00;	//Data
    8488:	e03fff45 	stb	zero,-3(fp)
	spirez = alt_avalon_spi_command(FPGA_SPI0_BASE, SPI_NR_EXTADC, 2, wr_buf, 0, NULL, 0);
    848c:	e0bfff04 	addi	r2,fp,-4
    8490:	d8000215 	stw	zero,8(sp)
    8494:	d8000115 	stw	zero,4(sp)
    8498:	d8000015 	stw	zero,0(sp)
    849c:	100f883a 	mov	r7,r2
    84a0:	01800084 	movi	r6,2
    84a4:	01400144 	movi	r5,5
    84a8:	01000074 	movhi	r4,1
    84ac:	21059004 	addi	r4,r4,5696
    84b0:	000b6780 	call	b678 <alt_avalon_spi_command>
    84b4:	e0bffe15 	stw	r2,-8(fp)

	// 0x40
	wr_buf[0] = 0x40;	//Address
    84b8:	00801004 	movi	r2,64
    84bc:	e0bfff05 	stb	r2,-4(fp)
	wr_buf[1] = 0x00;	//Data
    84c0:	e03fff45 	stb	zero,-3(fp)
	spirez = alt_avalon_spi_command(FPGA_SPI0_BASE, SPI_NR_EXTADC, 2, wr_buf, 0, NULL, 0);
    84c4:	e0bfff04 	addi	r2,fp,-4
    84c8:	d8000215 	stw	zero,8(sp)
    84cc:	d8000115 	stw	zero,4(sp)
    84d0:	d8000015 	stw	zero,0(sp)
    84d4:	100f883a 	mov	r7,r2
    84d8:	01800084 	movi	r6,2
    84dc:	01400144 	movi	r5,5
    84e0:	01000074 	movhi	r4,1
    84e4:	21059004 	addi	r4,r4,5696
    84e8:	000b6780 	call	b678 <alt_avalon_spi_command>
    84ec:	e0bffe15 	stw	r2,-8(fp)

	// 0x41
	wr_buf[0] = 0x41;	//Address
    84f0:	00801044 	movi	r2,65
    84f4:	e0bfff05 	stb	r2,-4(fp)
	wr_buf[1] = 0x00;	//Data
    84f8:	e03fff45 	stb	zero,-3(fp)
	spirez = alt_avalon_spi_command(FPGA_SPI0_BASE, SPI_NR_EXTADC, 2, wr_buf, 0, NULL, 0);
    84fc:	e0bfff04 	addi	r2,fp,-4
    8500:	d8000215 	stw	zero,8(sp)
    8504:	d8000115 	stw	zero,4(sp)
    8508:	d8000015 	stw	zero,0(sp)
    850c:	100f883a 	mov	r7,r2
    8510:	01800084 	movi	r6,2
    8514:	01400144 	movi	r5,5
    8518:	01000074 	movhi	r4,1
    851c:	21059004 	addi	r4,r4,5696
    8520:	000b6780 	call	b678 <alt_avalon_spi_command>
    8524:	e0bffe15 	stw	r2,-8(fp)

	// 0x42
	wr_buf[0] = 0x42;	//Address
    8528:	00801084 	movi	r2,66
    852c:	e0bfff05 	stb	r2,-4(fp)
	//wr_buf[1] = 0x08;	//Data
	wr_buf[1] = 0x00;	//Data
    8530:	e03fff45 	stb	zero,-3(fp)
	spirez = alt_avalon_spi_command(FPGA_SPI0_BASE, SPI_NR_EXTADC, 2, wr_buf, 0, NULL, 0);
    8534:	e0bfff04 	addi	r2,fp,-4
    8538:	d8000215 	stw	zero,8(sp)
    853c:	d8000115 	stw	zero,4(sp)
    8540:	d8000015 	stw	zero,0(sp)
    8544:	100f883a 	mov	r7,r2
    8548:	01800084 	movi	r6,2
    854c:	01400144 	movi	r5,5
    8550:	01000074 	movhi	r4,1
    8554:	21059004 	addi	r4,r4,5696
    8558:	000b6780 	call	b678 <alt_avalon_spi_command>
    855c:	e0bffe15 	stw	r2,-8(fp)

	// 0x45
	wr_buf[0] = 0x45;	//Address
    8560:	00801144 	movi	r2,69
    8564:	e0bfff05 	stb	r2,-4(fp)
	wr_buf[1] = 0x00;	//Data
    8568:	e03fff45 	stb	zero,-3(fp)
	spirez = alt_avalon_spi_command(FPGA_SPI0_BASE, SPI_NR_EXTADC, 2, wr_buf, 0, NULL, 0);
    856c:	e0bfff04 	addi	r2,fp,-4
    8570:	d8000215 	stw	zero,8(sp)
    8574:	d8000115 	stw	zero,4(sp)
    8578:	d8000015 	stw	zero,0(sp)
    857c:	100f883a 	mov	r7,r2
    8580:	01800084 	movi	r6,2
    8584:	01400144 	movi	r5,5
    8588:	01000074 	movhi	r4,1
    858c:	21059004 	addi	r4,r4,5696
    8590:	000b6780 	call	b678 <alt_avalon_spi_command>
    8594:	e0bffe15 	stw	r2,-8(fp)

	// 0x4A
	wr_buf[0] = 0x4A;	//Address
    8598:	00801284 	movi	r2,74
    859c:	e0bfff05 	stb	r2,-4(fp)
	wr_buf[1] = 0x00;	//Data
    85a0:	e03fff45 	stb	zero,-3(fp)
	spirez = alt_avalon_spi_command(FPGA_SPI0_BASE, SPI_NR_EXTADC, 2, wr_buf, 0, NULL, 0);
    85a4:	e0bfff04 	addi	r2,fp,-4
    85a8:	d8000215 	stw	zero,8(sp)
    85ac:	d8000115 	stw	zero,4(sp)
    85b0:	d8000015 	stw	zero,0(sp)
    85b4:	100f883a 	mov	r7,r2
    85b8:	01800084 	movi	r6,2
    85bc:	01400144 	movi	r5,5
    85c0:	01000074 	movhi	r4,1
    85c4:	21059004 	addi	r4,r4,5696
    85c8:	000b6780 	call	b678 <alt_avalon_spi_command>
    85cc:	e0bffe15 	stw	r2,-8(fp)

	// 0x58
	wr_buf[0] = 0x58;	//Address
    85d0:	00801604 	movi	r2,88
    85d4:	e0bfff05 	stb	r2,-4(fp)
	wr_buf[1] = 0x00;	//Data
    85d8:	e03fff45 	stb	zero,-3(fp)
	spirez = alt_avalon_spi_command(FPGA_SPI0_BASE, SPI_NR_EXTADC, 2, wr_buf, 0, NULL, 0);
    85dc:	e0bfff04 	addi	r2,fp,-4
    85e0:	d8000215 	stw	zero,8(sp)
    85e4:	d8000115 	stw	zero,4(sp)
    85e8:	d8000015 	stw	zero,0(sp)
    85ec:	100f883a 	mov	r7,r2
    85f0:	01800084 	movi	r6,2
    85f4:	01400144 	movi	r5,5
    85f8:	01000074 	movhi	r4,1
    85fc:	21059004 	addi	r4,r4,5696
    8600:	000b6780 	call	b678 <alt_avalon_spi_command>
    8604:	e0bffe15 	stw	r2,-8(fp)

	// 0xBF
	wr_buf[0] = 0xBF;	//Address
    8608:	00bfefc4 	movi	r2,-65
    860c:	e0bfff05 	stb	r2,-4(fp)
	wr_buf[1] = 0x00;	//Data
    8610:	e03fff45 	stb	zero,-3(fp)
	spirez = alt_avalon_spi_command(FPGA_SPI0_BASE, SPI_NR_EXTADC, 2, wr_buf, 0, NULL, 0);
    8614:	e0bfff04 	addi	r2,fp,-4
    8618:	d8000215 	stw	zero,8(sp)
    861c:	d8000115 	stw	zero,4(sp)
    8620:	d8000015 	stw	zero,0(sp)
    8624:	100f883a 	mov	r7,r2
    8628:	01800084 	movi	r6,2
    862c:	01400144 	movi	r5,5
    8630:	01000074 	movhi	r4,1
    8634:	21059004 	addi	r4,r4,5696
    8638:	000b6780 	call	b678 <alt_avalon_spi_command>
    863c:	e0bffe15 	stw	r2,-8(fp)

	// 0xC1
	wr_buf[0] = 0xC1;	//Address
    8640:	00bff044 	movi	r2,-63
    8644:	e0bfff05 	stb	r2,-4(fp)
	wr_buf[1] = 0x00;	//Data
    8648:	e03fff45 	stb	zero,-3(fp)
	spirez = alt_avalon_spi_command(FPGA_SPI0_BASE, SPI_NR_EXTADC, 2, wr_buf, 0, NULL, 0);
    864c:	e0bfff04 	addi	r2,fp,-4
    8650:	d8000215 	stw	zero,8(sp)
    8654:	d8000115 	stw	zero,4(sp)
    8658:	d8000015 	stw	zero,0(sp)
    865c:	100f883a 	mov	r7,r2
    8660:	01800084 	movi	r6,2
    8664:	01400144 	movi	r5,5
    8668:	01000074 	movhi	r4,1
    866c:	21059004 	addi	r4,r4,5696
    8670:	000b6780 	call	b678 <alt_avalon_spi_command>
    8674:	e0bffe15 	stw	r2,-8(fp)

	// 0xCF
	wr_buf[0] = 0xCF;	//Address
    8678:	00bff3c4 	movi	r2,-49
    867c:	e0bfff05 	stb	r2,-4(fp)
	wr_buf[1] = 0x00;	//Data
    8680:	e03fff45 	stb	zero,-3(fp)
	spirez = alt_avalon_spi_command(FPGA_SPI0_BASE, SPI_NR_EXTADC, 2, wr_buf, 0, NULL, 0);
    8684:	e0bfff04 	addi	r2,fp,-4
    8688:	d8000215 	stw	zero,8(sp)
    868c:	d8000115 	stw	zero,4(sp)
    8690:	d8000015 	stw	zero,0(sp)
    8694:	100f883a 	mov	r7,r2
    8698:	01800084 	movi	r6,2
    869c:	01400144 	movi	r5,5
    86a0:	01000074 	movhi	r4,1
    86a4:	21059004 	addi	r4,r4,5696
    86a8:	000b6780 	call	b678 <alt_avalon_spi_command>
    86ac:	e0bffe15 	stw	r2,-8(fp)

	// 0xDB
	wr_buf[0] = 0xDB;	//Address
    86b0:	00bff6c4 	movi	r2,-37
    86b4:	e0bfff05 	stb	r2,-4(fp)
	wr_buf[1] = 0x01;	//Data (0x01 - Low Speed MODE CH B enabled, 0x00 - Low Speed MODE CH B disabled)
    86b8:	00800044 	movi	r2,1
    86bc:	e0bfff45 	stb	r2,-3(fp)
	spirez = alt_avalon_spi_command(FPGA_SPI0_BASE, SPI_NR_EXTADC, 2, wr_buf, 0, NULL, 0);
    86c0:	e0bfff04 	addi	r2,fp,-4
    86c4:	d8000215 	stw	zero,8(sp)
    86c8:	d8000115 	stw	zero,4(sp)
    86cc:	d8000015 	stw	zero,0(sp)
    86d0:	100f883a 	mov	r7,r2
    86d4:	01800084 	movi	r6,2
    86d8:	01400144 	movi	r5,5
    86dc:	01000074 	movhi	r4,1
    86e0:	21059004 	addi	r4,r4,5696
    86e4:	000b6780 	call	b678 <alt_avalon_spi_command>
    86e8:	e0bffe15 	stw	r2,-8(fp)

	// 0xEF
	wr_buf[0] = 0xEF;	//Address
    86ec:	00bffbc4 	movi	r2,-17
    86f0:	e0bfff05 	stb	r2,-4(fp)
	wr_buf[1] = 0x10;	//Data (0x10 - Low Speed MODE enabled, 0x00 - Low Speed MODE disabled)
    86f4:	00800404 	movi	r2,16
    86f8:	e0bfff45 	stb	r2,-3(fp)
	spirez = alt_avalon_spi_command(FPGA_SPI0_BASE, SPI_NR_EXTADC, 2, wr_buf, 0, NULL, 0);
    86fc:	e0bfff04 	addi	r2,fp,-4
    8700:	d8000215 	stw	zero,8(sp)
    8704:	d8000115 	stw	zero,4(sp)
    8708:	d8000015 	stw	zero,0(sp)
    870c:	100f883a 	mov	r7,r2
    8710:	01800084 	movi	r6,2
    8714:	01400144 	movi	r5,5
    8718:	01000074 	movhi	r4,1
    871c:	21059004 	addi	r4,r4,5696
    8720:	000b6780 	call	b678 <alt_avalon_spi_command>
    8724:	e0bffe15 	stw	r2,-8(fp)

	// 0xF1
	wr_buf[0] = 0xF1;	//Address
    8728:	00bffc44 	movi	r2,-15
    872c:	e0bfff05 	stb	r2,-4(fp)
	wr_buf[1] = 0x00;	//Data
    8730:	e03fff45 	stb	zero,-3(fp)
	spirez = alt_avalon_spi_command(FPGA_SPI0_BASE, SPI_NR_EXTADC, 2, wr_buf, 0, NULL, 0);
    8734:	e0bfff04 	addi	r2,fp,-4
    8738:	d8000215 	stw	zero,8(sp)
    873c:	d8000115 	stw	zero,4(sp)
    8740:	d8000015 	stw	zero,0(sp)
    8744:	100f883a 	mov	r7,r2
    8748:	01800084 	movi	r6,2
    874c:	01400144 	movi	r5,5
    8750:	01000074 	movhi	r4,1
    8754:	21059004 	addi	r4,r4,5696
    8758:	000b6780 	call	b678 <alt_avalon_spi_command>
    875c:	e0bffe15 	stw	r2,-8(fp)

	// 0xF2
	wr_buf[0] = 0xF2;	//Address
    8760:	00bffc84 	movi	r2,-14
    8764:	e0bfff05 	stb	r2,-4(fp)
	wr_buf[1] = 0x08;	//Data (0x08 - Low Speed MODE CH A enabled, 0x00 - Low Speed MODE CH A disabled)
    8768:	00800204 	movi	r2,8
    876c:	e0bfff45 	stb	r2,-3(fp)
	spirez = alt_avalon_spi_command(FPGA_SPI0_BASE, SPI_NR_EXTADC, 2, wr_buf, 0, NULL, 0);
    8770:	e0bfff04 	addi	r2,fp,-4
    8774:	d8000215 	stw	zero,8(sp)
    8778:	d8000115 	stw	zero,4(sp)
    877c:	d8000015 	stw	zero,0(sp)
    8780:	100f883a 	mov	r7,r2
    8784:	01800084 	movi	r6,2
    8788:	01400144 	movi	r5,5
    878c:	01000074 	movhi	r4,1
    8790:	21059004 	addi	r4,r4,5696
    8794:	000b6780 	call	b678 <alt_avalon_spi_command>
    8798:	e0bffe15 	stw	r2,-8(fp)

}
    879c:	0001883a 	nop
    87a0:	e037883a 	mov	sp,fp
    87a4:	dfc00117 	ldw	ra,4(sp)
    87a8:	df000017 	ldw	fp,0(sp)
    87ac:	dec00204 	addi	sp,sp,8
    87b0:	f800283a 	ret

000087b4 <Control_TCXO_DAC>:
 *	@brief Function to control DAC for TCXO frequency control
 *	@param oe output enable control: 0 - output disabled, 1 - output enabled
 *	@param data pointer to DAC value (1 byte)
 */
void Control_TCXO_DAC (unsigned char oe, unsigned short int *data) //controls DAC (AD5601)
{
    87b4:	defff704 	addi	sp,sp,-36
    87b8:	dfc00815 	stw	ra,32(sp)
    87bc:	df000715 	stw	fp,28(sp)
    87c0:	df000704 	addi	fp,sp,28
    87c4:	2005883a 	mov	r2,r4
    87c8:	e17fff15 	stw	r5,-4(fp)
    87cc:	e0bffe05 	stb	r2,-8(fp)
	volatile int spirez;
	unsigned char DAC_data[3];

	if (oe == 0) //set DAC out to three-state
    87d0:	e0bffe03 	ldbu	r2,-8(fp)
    87d4:	1000101e 	bne	r2,zero,8818 <Control_TCXO_DAC+0x64>
	{
		DAC_data[0] = 0x03; //POWER-DOWN MODE = THREE-STATE (PD[1:0]([17:16]) = 11)
    87d8:	008000c4 	movi	r2,3
    87dc:	e0bffd05 	stb	r2,-12(fp)
		DAC_data[1] = 0x00;
    87e0:	e03ffd45 	stb	zero,-11(fp)
		DAC_data[2] = 0x00; //LSB data
    87e4:	e03ffd85 	stb	zero,-10(fp)

		spirez = alt_avalon_spi_command(DAC_SPI1_BASE, SPI_NR_TCXO_DAC, 3, DAC_data, 0, NULL, 0);
    87e8:	e0bffd04 	addi	r2,fp,-12
    87ec:	d8000215 	stw	zero,8(sp)
    87f0:	d8000115 	stw	zero,4(sp)
    87f4:	d8000015 	stw	zero,0(sp)
    87f8:	100f883a 	mov	r7,r2
    87fc:	018000c4 	movi	r6,3
    8800:	000b883a 	mov	r5,zero
    8804:	01000074 	movhi	r4,1
    8808:	21058004 	addi	r4,r4,5632
    880c:	000b6780 	call	b678 <alt_avalon_spi_command>
    8810:	e0bffc15 	stw	r2,-16(fp)
		DAC_data[1] = ((*data) >>8) & 0xFF;
		DAC_data[2] = ((*data) >>0) & 0xFF;

		spirez = alt_avalon_spi_command(DAC_SPI1_BASE, SPI_NR_TCXO_DAC, 3, DAC_data, 0, NULL, 0);
	}
}
    8814:	00001406 	br	8868 <Control_TCXO_DAC+0xb4>

		spirez = alt_avalon_spi_command(DAC_SPI1_BASE, SPI_NR_TCXO_DAC, 3, DAC_data, 0, NULL, 0);
	}
	else //enable DAC output, set new val
	{
		DAC_data[0] = 0; //POWER-DOWN MODE = NORMAL OPERATION PD[1:0]([17:16]) = 00)
    8818:	e03ffd05 	stb	zero,-12(fp)
		DAC_data[1] = ((*data) >>8) & 0xFF;
    881c:	e0bfff17 	ldw	r2,-4(fp)
    8820:	1080000b 	ldhu	r2,0(r2)
    8824:	10bfffcc 	andi	r2,r2,65535
    8828:	1004d23a 	srli	r2,r2,8
    882c:	e0bffd45 	stb	r2,-11(fp)
		DAC_data[2] = ((*data) >>0) & 0xFF;
    8830:	e0bfff17 	ldw	r2,-4(fp)
    8834:	1080000b 	ldhu	r2,0(r2)
    8838:	e0bffd85 	stb	r2,-10(fp)

		spirez = alt_avalon_spi_command(DAC_SPI1_BASE, SPI_NR_TCXO_DAC, 3, DAC_data, 0, NULL, 0);
    883c:	e0bffd04 	addi	r2,fp,-12
    8840:	d8000215 	stw	zero,8(sp)
    8844:	d8000115 	stw	zero,4(sp)
    8848:	d8000015 	stw	zero,0(sp)
    884c:	100f883a 	mov	r7,r2
    8850:	018000c4 	movi	r6,3
    8854:	000b883a 	mov	r5,zero
    8858:	01000074 	movhi	r4,1
    885c:	21058004 	addi	r4,r4,5632
    8860:	000b6780 	call	b678 <alt_avalon_spi_command>
    8864:	e0bffc15 	stw	r2,-16(fp)
	}
}
    8868:	0001883a 	nop
    886c:	e037883a 	mov	sp,fp
    8870:	dfc00117 	ldw	ra,4(sp)
    8874:	df000017 	ldw	fp,0(sp)
    8878:	dec00204 	addi	sp,sp,8
    887c:	f800283a 	ret

00008880 <Control_TCXO_ADF>:
 *	@brief Function to control ADF for TCXO frequency control
 *	@param oe output enable control: 0 - output disabled, 1 - output enabled
 *	@param data pointer to ADF data block (3 bytes)
 */
void Control_TCXO_ADF (unsigned char oe, unsigned char *data) //controls ADF4002
{
    8880:	defff404 	addi	sp,sp,-48
    8884:	dfc00b15 	stw	ra,44(sp)
    8888:	df000a15 	stw	fp,40(sp)
    888c:	df000a04 	addi	fp,sp,40
    8890:	2005883a 	mov	r2,r4
    8894:	e17fff15 	stw	r5,-4(fp)
    8898:	e0bffe05 	stb	r2,-8(fp)
	volatile int spirez;
	unsigned char ADF_data[12], ADF_block;

	if (oe == 0) //set ADF4002 CP to three-state and MUX_OUT to DGND
    889c:	e0bffe03 	ldbu	r2,-8(fp)
    88a0:	1000301e 	bne	r2,zero,8964 <Control_TCXO_ADF+0xe4>
	{
		ADF_data[0] = 0x1f;
    88a4:	008007c4 	movi	r2,31
    88a8:	e0bffb05 	stb	r2,-20(fp)
		ADF_data[1] = 0x81;
    88ac:	00bfe044 	movi	r2,-127
    88b0:	e0bffb45 	stb	r2,-19(fp)
		ADF_data[2] = 0xf3;
    88b4:	00bffcc4 	movi	r2,-13
    88b8:	e0bffb85 	stb	r2,-18(fp)
		ADF_data[3] = 0x1f;
    88bc:	008007c4 	movi	r2,31
    88c0:	e0bffbc5 	stb	r2,-17(fp)
		ADF_data[4] = 0x81;
    88c4:	00bfe044 	movi	r2,-127
    88c8:	e0bffc05 	stb	r2,-16(fp)
		ADF_data[5] = 0xf2;
    88cc:	00bffc84 	movi	r2,-14
    88d0:	e0bffc45 	stb	r2,-15(fp)
		ADF_data[6] = 0x00;
    88d4:	e03ffc85 	stb	zero,-14(fp)
		ADF_data[7] = 0x01;
    88d8:	00800044 	movi	r2,1
    88dc:	e0bffcc5 	stb	r2,-13(fp)
		ADF_data[8] = 0xf4;
    88e0:	00bffd04 	movi	r2,-12
    88e4:	e0bffd05 	stb	r2,-12(fp)
		ADF_data[9] = 0x01;
    88e8:	00800044 	movi	r2,1
    88ec:	e0bffd45 	stb	r2,-11(fp)
		ADF_data[10] = 0x80;
    88f0:	00bfe004 	movi	r2,-128
    88f4:	e0bffd85 	stb	r2,-10(fp)
		ADF_data[11] = 0x01;
    88f8:	00800044 	movi	r2,1
    88fc:	e0bffdc5 	stb	r2,-9(fp)

		//Reconfigure_SPI_for_LMS();

		//write data to ADF
		for(ADF_block = 0; ADF_block < 4; ADF_block++)
    8900:	e03ff905 	stb	zero,-28(fp)
    8904:	00001306 	br	8954 <Control_TCXO_ADF+0xd4>
		{
			spirez = alt_avalon_spi_command(FPGA_SPI0_BASE, SPI_NR_TCXO_ADF4002, 3, &ADF_data[ADF_block*3], 0, NULL, 0);
    8908:	e0fff903 	ldbu	r3,-28(fp)
    890c:	1805883a 	mov	r2,r3
    8910:	1085883a 	add	r2,r2,r2
    8914:	10c5883a 	add	r2,r2,r3
    8918:	e0fffb04 	addi	r3,fp,-20
    891c:	1885883a 	add	r2,r3,r2
    8920:	d8000215 	stw	zero,8(sp)
    8924:	d8000115 	stw	zero,4(sp)
    8928:	d8000015 	stw	zero,0(sp)
    892c:	100f883a 	mov	r7,r2
    8930:	018000c4 	movi	r6,3
    8934:	01400084 	movi	r5,2
    8938:	01000074 	movhi	r4,1
    893c:	21059004 	addi	r4,r4,5696
    8940:	000b6780 	call	b678 <alt_avalon_spi_command>
    8944:	e0bffa15 	stw	r2,-24(fp)
		ADF_data[11] = 0x01;

		//Reconfigure_SPI_for_LMS();

		//write data to ADF
		for(ADF_block = 0; ADF_block < 4; ADF_block++)
    8948:	e0bff903 	ldbu	r2,-28(fp)
    894c:	10800044 	addi	r2,r2,1
    8950:	e0bff905 	stb	r2,-28(fp)
    8954:	e0bff903 	ldbu	r2,-28(fp)
    8958:	10800130 	cmpltui	r2,r2,4
    895c:	103fea1e 	bne	r2,zero,8908 <_gp+0xffff3f64>
	}
	else //set PLL parameters, 4 blocks must be written
	{
		spirez = alt_avalon_spi_command(FPGA_SPI0_BASE, SPI_NR_TCXO_ADF4002, 3, data, 0, NULL, 0);
	}
}
    8960:	00000a06 	br	898c <Control_TCXO_ADF+0x10c>
			spirez = alt_avalon_spi_command(FPGA_SPI0_BASE, SPI_NR_TCXO_ADF4002, 3, &ADF_data[ADF_block*3], 0, NULL, 0);
		}
	}
	else //set PLL parameters, 4 blocks must be written
	{
		spirez = alt_avalon_spi_command(FPGA_SPI0_BASE, SPI_NR_TCXO_ADF4002, 3, data, 0, NULL, 0);
    8964:	d8000215 	stw	zero,8(sp)
    8968:	d8000115 	stw	zero,4(sp)
    896c:	d8000015 	stw	zero,0(sp)
    8970:	e1ffff17 	ldw	r7,-4(fp)
    8974:	018000c4 	movi	r6,3
    8978:	01400084 	movi	r5,2
    897c:	01000074 	movhi	r4,1
    8980:	21059004 	addi	r4,r4,5696
    8984:	000b6780 	call	b678 <alt_avalon_spi_command>
    8988:	e0bffa15 	stw	r2,-24(fp)
	}
}
    898c:	0001883a 	nop
    8990:	e037883a 	mov	sp,fp
    8994:	dfc00117 	ldw	ra,4(sp)
    8998:	df000017 	ldw	fp,0(sp)
    899c:	dec00204 	addi	sp,sp,8
    89a0:	f800283a 	ret

000089a4 <change_ADC_tpat>:

void change_ADC_tpat(uint8_t mode)
{
    89a4:	defff804 	addi	sp,sp,-32
    89a8:	dfc00715 	stw	ra,28(sp)
    89ac:	df000615 	stw	fp,24(sp)
    89b0:	df000604 	addi	fp,sp,24
    89b4:	2005883a 	mov	r2,r4
    89b8:	e0bfff05 	stb	r2,-4(fp)
	uint8_t wr_buf[2];
	int spirez;

	if(mode)
    89bc:	e0bfff03 	ldbu	r2,-4(fp)
    89c0:	10001026 	beq	r2,zero,8a04 <change_ADC_tpat+0x60>
		wr_buf[1] = 0x55;	//Data
		spirez = alt_avalon_spi_command(FPGA_SPI0_BASE, SPI_NR_EXTADC, 2, wr_buf, 0, NULL, 0);
		*/

		// 0x42 Enable Digital functions
		wr_buf[0] = 0x42;	//Address
    89c4:	00801084 	movi	r2,66
    89c8:	e0bffe05 	stb	r2,-8(fp)
		wr_buf[1] = 0x08;	//Data
    89cc:	00800204 	movi	r2,8
    89d0:	e0bffe45 	stb	r2,-7(fp)
		spirez = alt_avalon_spi_command(FPGA_SPI0_BASE, SPI_NR_EXTADC, 2, wr_buf, 0, NULL, 0);
    89d4:	e0bffe04 	addi	r2,fp,-8
    89d8:	d8000215 	stw	zero,8(sp)
    89dc:	d8000115 	stw	zero,4(sp)
    89e0:	d8000015 	stw	zero,0(sp)
    89e4:	100f883a 	mov	r7,r2
    89e8:	01800084 	movi	r6,2
    89ec:	01400144 	movi	r5,5
    89f0:	01000074 	movhi	r4,1
    89f4:	21059004 	addi	r4,r4,5696
    89f8:	000b6780 	call	b678 <alt_avalon_spi_command>
    89fc:	e0bffd15 	stw	r2,-12(fp)
		wr_buf[0] = 0x42;	//Address
		wr_buf[1] = 0x00;	//Data
		spirez = alt_avalon_spi_command(FPGA_SPI0_BASE, SPI_NR_EXTADC, 2, wr_buf, 0, NULL, 0);

	};
}
    8a00:	00000e06 	br	8a3c <change_ADC_tpat+0x98>
		wr_buf[1] = 0x00;	//Data
		spirez = alt_avalon_spi_command(FPGA_SPI0_BASE, SPI_NR_EXTADC, 2, wr_buf, 0, NULL, 0);

		*/
		// 0x42 Disable Digital functions
		wr_buf[0] = 0x42;	//Address
    8a04:	00801084 	movi	r2,66
    8a08:	e0bffe05 	stb	r2,-8(fp)
		wr_buf[1] = 0x00;	//Data
    8a0c:	e03ffe45 	stb	zero,-7(fp)
		spirez = alt_avalon_spi_command(FPGA_SPI0_BASE, SPI_NR_EXTADC, 2, wr_buf, 0, NULL, 0);
    8a10:	e0bffe04 	addi	r2,fp,-8
    8a14:	d8000215 	stw	zero,8(sp)
    8a18:	d8000115 	stw	zero,4(sp)
    8a1c:	d8000015 	stw	zero,0(sp)
    8a20:	100f883a 	mov	r7,r2
    8a24:	01800084 	movi	r6,2
    8a28:	01400144 	movi	r5,5
    8a2c:	01000074 	movhi	r4,1
    8a30:	21059004 	addi	r4,r4,5696
    8a34:	000b6780 	call	b678 <alt_avalon_spi_command>
    8a38:	e0bffd15 	stw	r2,-12(fp)

	};
}
    8a3c:	0001883a 	nop
    8a40:	e037883a 	mov	sp,fp
    8a44:	dfc00117 	ldw	ra,4(sp)
    8a48:	df000017 	ldw	fp,0(sp)
    8a4c:	dec00204 	addi	sp,sp,8
    8a50:	f800283a 	ret

00008a54 <GetPLLCFG_Base>:

// Return PLL base address acoording to the PLL index
uint32_t GetPLLCFG_Base(uint8_t ind)
{
    8a54:	defffd04 	addi	sp,sp,-12
    8a58:	df000215 	stw	fp,8(sp)
    8a5c:	df000204 	addi	fp,sp,8
    8a60:	2005883a 	mov	r2,r4
    8a64:	e0bfff05 	stb	r2,-4(fp)
	uint32_t PLL_BASE;

	switch ( ind )
    8a68:	e0bfff03 	ldbu	r2,-4(fp)
    8a6c:	10c000a0 	cmpeqi	r3,r2,2
    8a70:	18000e1e 	bne	r3,zero,8aac <GetPLLCFG_Base+0x58>
    8a74:	10c000c8 	cmpgei	r3,r2,3
    8a78:	1800031e 	bne	r3,zero,8a88 <GetPLLCFG_Base+0x34>
    8a7c:	10800060 	cmpeqi	r2,r2,1
    8a80:	1000061e 	bne	r2,zero,8a9c <GetPLLCFG_Base+0x48>
    8a84:	00001506 	br	8adc <GetPLLCFG_Base+0x88>
    8a88:	10c000e0 	cmpeqi	r3,r2,3
    8a8c:	18000b1e 	bne	r3,zero,8abc <GetPLLCFG_Base+0x68>
    8a90:	10800120 	cmpeqi	r2,r2,4
    8a94:	10000d1e 	bne	r2,zero,8acc <GetPLLCFG_Base+0x78>
    8a98:	00001006 	br	8adc <GetPLLCFG_Base+0x88>
	{
		case 1:
			PLL_BASE = PLL_RECONFIG_1_BASE;
    8a9c:	00800074 	movhi	r2,1
    8aa0:	10840004 	addi	r2,r2,4096
    8aa4:	e0bffe15 	stw	r2,-8(fp)
	    break;
    8aa8:	00000f06 	br	8ae8 <GetPLLCFG_Base+0x94>

		case 2:
			PLL_BASE = PLL_RECONFIG_2_BASE;
    8aac:	00800074 	movhi	r2,1
    8ab0:	10844004 	addi	r2,r2,4352
    8ab4:	e0bffe15 	stw	r2,-8(fp)
		break;
    8ab8:	00000b06 	br	8ae8 <GetPLLCFG_Base+0x94>

		case 3:
			PLL_BASE = PLL_RECONFIG_3_BASE;
    8abc:	00800074 	movhi	r2,1
    8ac0:	10848004 	addi	r2,r2,4608
    8ac4:	e0bffe15 	stw	r2,-8(fp)
		break;
    8ac8:	00000706 	br	8ae8 <GetPLLCFG_Base+0x94>

		case 4:
			PLL_BASE = PLL_RECONFIG_4_BASE;
    8acc:	00800074 	movhi	r2,1
    8ad0:	1084c004 	addi	r2,r2,4864
    8ad4:	e0bffe15 	stw	r2,-8(fp)
	    break;
    8ad8:	00000306 	br	8ae8 <GetPLLCFG_Base+0x94>

		default:
			PLL_BASE = PLL_RECONFIG_0_BASE;
    8adc:	00800074 	movhi	r2,1
    8ae0:	10854004 	addi	r2,r2,5376
    8ae4:	e0bffe15 	stw	r2,-8(fp)
	}

	return PLL_BASE;
    8ae8:	e0bffe17 	ldw	r2,-8(fp)
}
    8aec:	e037883a 	mov	sp,fp
    8af0:	df000017 	ldw	fp,0(sp)
    8af4:	dec00104 	addi	sp,sp,4
    8af8:	f800283a 	ret

00008afc <UpdatePLLCFG>:

// Updates PLL configuration
uint8_t UpdatePLLCFG(void)
{
    8afc:	deffee04 	addi	sp,sp,-72
    8b00:	dfc01115 	stw	ra,68(sp)
    8b04:	df001015 	stw	fp,64(sp)
    8b08:	df001004 	addi	fp,sp,64
	int spirez, i;
	tPLL_CFG pll_cfg = {0};
    8b0c:	e03ff715 	stw	zero,-36(fp)
    8b10:	e03ff815 	stw	zero,-32(fp)
    8b14:	e03ff915 	stw	zero,-28(fp)
    8b18:	e03ffa15 	stw	zero,-24(fp)
    8b1c:	e03ffb15 	stw	zero,-20(fp)
    8b20:	e03ffc15 	stw	zero,-16(fp)
    8b24:	e03ffd15 	stw	zero,-12(fp)
    8b28:	e03ffe15 	stw	zero,-8(fp)
	uint32_t PLL_BASE;
	uint16_t div_byp;
	uint8_t pllcfgrez;

	// Read
	wr_buf[0] = 0x00;	// Command and Address
    8b2c:	e03fff05 	stb	zero,-4(fp)
	wr_buf[1] = 0x23;	// Command and Address
    8b30:	008008c4 	movi	r2,35
    8b34:	e0bfff45 	stb	r2,-3(fp)
	spirez = alt_avalon_spi_command(PLLCFG_SPI_BASE, 0, 2, wr_buf, 2, rd_buf, 0);
    8b38:	e0ffff04 	addi	r3,fp,-4
    8b3c:	d8000215 	stw	zero,8(sp)
    8b40:	e0bfff84 	addi	r2,fp,-2
    8b44:	d8800115 	stw	r2,4(sp)
    8b48:	00800084 	movi	r2,2
    8b4c:	d8800015 	stw	r2,0(sp)
    8b50:	180f883a 	mov	r7,r3
    8b54:	01800084 	movi	r6,2
    8b58:	000b883a 	mov	r5,zero
    8b5c:	01000074 	movhi	r4,1
    8b60:	21058804 	addi	r4,r4,5664
    8b64:	000b6780 	call	b678 <alt_avalon_spi_command>
    8b68:	e0bff415 	stw	r2,-48(fp)

	// Get PLL base address
	PLL_BASE = GetPLLCFG_Base( PLL_IND(rd_buf[1]) );
    8b6c:	e0bfffc3 	ldbu	r2,-1(fp)
    8b70:	10803fcc 	andi	r2,r2,255
    8b74:	1004d0fa 	srli	r2,r2,3
    8b78:	10803fcc 	andi	r2,r2,255
    8b7c:	1009883a 	mov	r4,r2
    8b80:	0008a540 	call	8a54 <GetPLLCFG_Base>
    8b84:	e0bff515 	stw	r2,-44(fp)

	//Write in Mode Register "0" for wait request mode, "1" for polling mode
	IOWR_32DIRECT(PLL_BASE, MODE, 0x01);
    8b88:	e0bff517 	ldw	r2,-44(fp)
    8b8c:	00c00044 	movi	r3,1
    8b90:	10c00035 	stwio	r3,0(r2)


	// Set M_ODDDIV, M_BYP, N_ODDDIV, N_BYP
	wr_buf[0] = 0x00;	// Command and Address
    8b94:	e03fff05 	stb	zero,-4(fp)
	wr_buf[1] = 0x26;	// Command and Address
    8b98:	00800984 	movi	r2,38
    8b9c:	e0bfff45 	stb	r2,-3(fp)
	spirez = alt_avalon_spi_command(PLLCFG_SPI_BASE, 0, 2, wr_buf, 2, rd_buf, 0);
    8ba0:	e0ffff04 	addi	r3,fp,-4
    8ba4:	d8000215 	stw	zero,8(sp)
    8ba8:	e0bfff84 	addi	r2,fp,-2
    8bac:	d8800115 	stw	r2,4(sp)
    8bb0:	00800084 	movi	r2,2
    8bb4:	d8800015 	stw	r2,0(sp)
    8bb8:	180f883a 	mov	r7,r3
    8bbc:	01800084 	movi	r6,2
    8bc0:	000b883a 	mov	r5,zero
    8bc4:	01000074 	movhi	r4,1
    8bc8:	21058804 	addi	r4,r4,5664
    8bcc:	000b6780 	call	b678 <alt_avalon_spi_command>
    8bd0:	e0bff415 	stw	r2,-48(fp)
	pll_cfg.N_cnt = N_CNT_DIVBYP(rd_buf[1]); //(rd_buf[0] & 0x03) << 16;
    8bd4:	e0bfffc3 	ldbu	r2,-1(fp)
    8bd8:	10803fcc 	andi	r2,r2,255
    8bdc:	108000cc 	andi	r2,r2,3
    8be0:	1004943a 	slli	r2,r2,16
    8be4:	e0bff915 	stw	r2,-28(fp)
	pll_cfg.M_cnt = M_CNT_DIVBYP(rd_buf[1]); //(rd_buf[0] & 0x0C) << 14;
    8be8:	e0bfffc3 	ldbu	r2,-1(fp)
    8bec:	10803fcc 	andi	r2,r2,255
    8bf0:	1080030c 	andi	r2,r2,12
    8bf4:	100493ba 	slli	r2,r2,14
    8bf8:	e0bff715 	stw	r2,-36(fp)

	// Set N_HCNT[15:8], N_LCNT[7:0]
	wr_buf[0] = 0x00;	// Command and Address
    8bfc:	e03fff05 	stb	zero,-4(fp)
	wr_buf[1] = 0x2A;	// Command and Address
    8c00:	00800a84 	movi	r2,42
    8c04:	e0bfff45 	stb	r2,-3(fp)
	spirez = alt_avalon_spi_command(PLLCFG_SPI_BASE, 0, 2, wr_buf, 2, rd_buf, 0);
    8c08:	e0ffff04 	addi	r3,fp,-4
    8c0c:	d8000215 	stw	zero,8(sp)
    8c10:	e0bfff84 	addi	r2,fp,-2
    8c14:	d8800115 	stw	r2,4(sp)
    8c18:	00800084 	movi	r2,2
    8c1c:	d8800015 	stw	r2,0(sp)
    8c20:	180f883a 	mov	r7,r3
    8c24:	01800084 	movi	r6,2
    8c28:	000b883a 	mov	r5,zero
    8c2c:	01000074 	movhi	r4,1
    8c30:	21058804 	addi	r4,r4,5664
    8c34:	000b6780 	call	b678 <alt_avalon_spi_command>
    8c38:	e0bff415 	stw	r2,-48(fp)
	pll_cfg.N_cnt = pll_cfg.N_cnt | N_CNT(rd_buf[0], rd_buf[1]); //pll_cfg.N_cnt | (rd_buf[1] << 8) | rd_buf[0];
    8c3c:	e0bff917 	ldw	r2,-28(fp)
    8c40:	e0ffff83 	ldbu	r3,-2(fp)
    8c44:	18c03fcc 	andi	r3,r3,255
    8c48:	1808923a 	slli	r4,r3,8
    8c4c:	e0ffffc3 	ldbu	r3,-1(fp)
    8c50:	18c03fcc 	andi	r3,r3,255
    8c54:	20c6b03a 	or	r3,r4,r3
    8c58:	10c4b03a 	or	r2,r2,r3
    8c5c:	e0bff915 	stw	r2,-28(fp)

	// Set M_HCNT[15:8], M_LCNT[7:0]
	wr_buf[0] = 0x00;	// Command and Address
    8c60:	e03fff05 	stb	zero,-4(fp)
	wr_buf[1] = 0x2B;	// Command and Address
    8c64:	00800ac4 	movi	r2,43
    8c68:	e0bfff45 	stb	r2,-3(fp)
	spirez = alt_avalon_spi_command(PLLCFG_SPI_BASE, 0, 2, wr_buf, 2, rd_buf, 0);
    8c6c:	e0ffff04 	addi	r3,fp,-4
    8c70:	d8000215 	stw	zero,8(sp)
    8c74:	e0bfff84 	addi	r2,fp,-2
    8c78:	d8800115 	stw	r2,4(sp)
    8c7c:	00800084 	movi	r2,2
    8c80:	d8800015 	stw	r2,0(sp)
    8c84:	180f883a 	mov	r7,r3
    8c88:	01800084 	movi	r6,2
    8c8c:	000b883a 	mov	r5,zero
    8c90:	01000074 	movhi	r4,1
    8c94:	21058804 	addi	r4,r4,5664
    8c98:	000b6780 	call	b678 <alt_avalon_spi_command>
    8c9c:	e0bff415 	stw	r2,-48(fp)
	pll_cfg.M_cnt = pll_cfg.M_cnt | M_CNT(rd_buf[0], rd_buf[1]); //pll_cfg.M_cnt | (rd_buf[1] << 8) | rd_buf[0];
    8ca0:	e0bff717 	ldw	r2,-36(fp)
    8ca4:	e0ffff83 	ldbu	r3,-2(fp)
    8ca8:	18c03fcc 	andi	r3,r3,255
    8cac:	1808923a 	slli	r4,r3,8
    8cb0:	e0ffffc3 	ldbu	r3,-1(fp)
    8cb4:	18c03fcc 	andi	r3,r3,255
    8cb8:	20c6b03a 	or	r3,r4,r3
    8cbc:	10c4b03a 	or	r2,r2,r3
    8cc0:	e0bff715 	stw	r2,-36(fp)

	// Set M_FRAC[15:0]
	wr_buf[0] = 0x00;	// Command and Address
    8cc4:	e03fff05 	stb	zero,-4(fp)
	wr_buf[1] = 0x2C;	// Command and Address
    8cc8:	00800b04 	movi	r2,44
    8ccc:	e0bfff45 	stb	r2,-3(fp)
	spirez = alt_avalon_spi_command(PLLCFG_SPI_BASE, 0, 2, wr_buf, 2, rd_buf, 0);
    8cd0:	e0ffff04 	addi	r3,fp,-4
    8cd4:	d8000215 	stw	zero,8(sp)
    8cd8:	e0bfff84 	addi	r2,fp,-2
    8cdc:	d8800115 	stw	r2,4(sp)
    8ce0:	00800084 	movi	r2,2
    8ce4:	d8800015 	stw	r2,0(sp)
    8ce8:	180f883a 	mov	r7,r3
    8cec:	01800084 	movi	r6,2
    8cf0:	000b883a 	mov	r5,zero
    8cf4:	01000074 	movhi	r4,1
    8cf8:	21058804 	addi	r4,r4,5664
    8cfc:	000b6780 	call	b678 <alt_avalon_spi_command>
    8d00:	e0bff415 	stw	r2,-48(fp)
	pll_cfg.MFrac_cnt = MFRAC_CNT_LSB(rd_buf[0], rd_buf[1]); //(rd_buf[1] << 8) | rd_buf[0];
    8d04:	e0bfff83 	ldbu	r2,-2(fp)
    8d08:	10803fcc 	andi	r2,r2,255
    8d0c:	1006923a 	slli	r3,r2,8
    8d10:	e0bfffc3 	ldbu	r2,-1(fp)
    8d14:	10803fcc 	andi	r2,r2,255
    8d18:	1884b03a 	or	r2,r3,r2
    8d1c:	e0bff815 	stw	r2,-32(fp)

	// Set M_FRAC[31:16]
	wr_buf[0] = 0x00;	// Command and Address
    8d20:	e03fff05 	stb	zero,-4(fp)
	wr_buf[1] = 0x2D;	// Command and Address
    8d24:	00800b44 	movi	r2,45
    8d28:	e0bfff45 	stb	r2,-3(fp)
	spirez = alt_avalon_spi_command(PLLCFG_SPI_BASE, 0, 2, wr_buf, 2, rd_buf, 0);
    8d2c:	e0ffff04 	addi	r3,fp,-4
    8d30:	d8000215 	stw	zero,8(sp)
    8d34:	e0bfff84 	addi	r2,fp,-2
    8d38:	d8800115 	stw	r2,4(sp)
    8d3c:	00800084 	movi	r2,2
    8d40:	d8800015 	stw	r2,0(sp)
    8d44:	180f883a 	mov	r7,r3
    8d48:	01800084 	movi	r6,2
    8d4c:	000b883a 	mov	r5,zero
    8d50:	01000074 	movhi	r4,1
    8d54:	21058804 	addi	r4,r4,5664
    8d58:	000b6780 	call	b678 <alt_avalon_spi_command>
    8d5c:	e0bff415 	stw	r2,-48(fp)
	pll_cfg.MFrac_cnt = pll_cfg.MFrac_cnt | MFRAC_CNT_MSB(rd_buf[0], rd_buf[1]); //pll_cfg.MFrac_cnt | ( ((rd_buf[1] << 8) | rd_buf[0]) << 16 );
    8d60:	e0bff817 	ldw	r2,-32(fp)
    8d64:	e0ffff83 	ldbu	r3,-2(fp)
    8d68:	18c03fcc 	andi	r3,r3,255
    8d6c:	1808923a 	slli	r4,r3,8
    8d70:	e0ffffc3 	ldbu	r3,-1(fp)
    8d74:	18c03fcc 	andi	r3,r3,255
    8d78:	20c6b03a 	or	r3,r4,r3
    8d7c:	1806943a 	slli	r3,r3,16
    8d80:	10c4b03a 	or	r2,r2,r3
    8d84:	e0bff815 	stw	r2,-32(fp)

	// Set PLLCFG_BS[3:0] (for Cyclone V), CHP_CURR[2:0], PLLCFG_VCODIV
	wr_buf[0] = 0x00;	// Command and Address
    8d88:	e03fff05 	stb	zero,-4(fp)
	wr_buf[1] = 0x25;	// Command and Address
    8d8c:	00800944 	movi	r2,37
    8d90:	e0bfff45 	stb	r2,-3(fp)
	spirez = alt_avalon_spi_command(PLLCFG_SPI_BASE, 0, 2, wr_buf, 2, rd_buf, 0);
    8d94:	e0ffff04 	addi	r3,fp,-4
    8d98:	d8000215 	stw	zero,8(sp)
    8d9c:	e0bfff84 	addi	r2,fp,-2
    8da0:	d8800115 	stw	r2,4(sp)
    8da4:	00800084 	movi	r2,2
    8da8:	d8800015 	stw	r2,0(sp)
    8dac:	180f883a 	mov	r7,r3
    8db0:	01800084 	movi	r6,2
    8db4:	000b883a 	mov	r5,zero
    8db8:	01000074 	movhi	r4,1
    8dbc:	21058804 	addi	r4,r4,5664
    8dc0:	000b6780 	call	b678 <alt_avalon_spi_command>
    8dc4:	e0bff415 	stw	r2,-48(fp)
	pll_cfg.BS_cnt = BS_CNT(rd_buf[0]); //(rd_buf[1] >> 3) & 0x0F;
    8dc8:	e0bfff83 	ldbu	r2,-2(fp)
    8dcc:	10803fcc 	andi	r2,r2,255
    8dd0:	1004d0fa 	srli	r2,r2,3
    8dd4:	10803fcc 	andi	r2,r2,255
    8dd8:	108003cc 	andi	r2,r2,15
    8ddc:	e0bffc15 	stw	r2,-16(fp)
	pll_cfg.CPS_cnt = CPS_CNT(rd_buf[0]); //rd_buf[1] & 0x07;
    8de0:	e0bfff83 	ldbu	r2,-2(fp)
    8de4:	10803fcc 	andi	r2,r2,255
    8de8:	108001cc 	andi	r2,r2,7
    8dec:	e0bffd15 	stw	r2,-12(fp)
	pll_cfg.VCO_div = VCO_DIVSEL(rd_buf[1]); //(rd_buf[0] >> 7) & 0x01;
    8df0:	e0bfffc3 	ldbu	r2,-1(fp)
    8df4:	10803fcc 	andi	r2,r2,255
    8df8:	1004d1fa 	srli	r2,r2,7
    8dfc:	10803fcc 	andi	r2,r2,255
    8e00:	1080004c 	andi	r2,r2,1
    8e04:	e0bffe15 	stw	r2,-8(fp)


	// Update PLL configuration;
	pllcfgrez = set_pll_config(PLL_BASE, &pll_cfg);
    8e08:	e0bff704 	addi	r2,fp,-36
    8e0c:	100b883a 	mov	r5,r2
    8e10:	e13ff517 	ldw	r4,-44(fp)
    8e14:	000ae7c0 	call	ae7c <set_pll_config>
    8e18:	e0bff605 	stb	r2,-40(fp)
	if(pllcfgrez) return pllcfgrez;
    8e1c:	e0bff603 	ldbu	r2,-40(fp)
    8e20:	10000226 	beq	r2,zero,8e2c <UpdatePLLCFG+0x330>
    8e24:	e0bff603 	ldbu	r2,-40(fp)
    8e28:	00005006 	br	8f6c <UpdatePLLCFG+0x470>


	//// Set Cx counters (first eight for now)

	// Read ODDDIV and BYP values for first 8 counters
	wr_buf[0] = 0x00;	// Command and Address
    8e2c:	e03fff05 	stb	zero,-4(fp)
	wr_buf[1] = 0x27;	// Command and Address
    8e30:	008009c4 	movi	r2,39
    8e34:	e0bfff45 	stb	r2,-3(fp)
	spirez = alt_avalon_spi_command(PLLCFG_SPI_BASE, 0, 2, wr_buf, 2, rd_buf, 0);
    8e38:	e0ffff04 	addi	r3,fp,-4
    8e3c:	d8000215 	stw	zero,8(sp)
    8e40:	e0bfff84 	addi	r2,fp,-2
    8e44:	d8800115 	stw	r2,4(sp)
    8e48:	00800084 	movi	r2,2
    8e4c:	d8800015 	stw	r2,0(sp)
    8e50:	180f883a 	mov	r7,r3
    8e54:	01800084 	movi	r6,2
    8e58:	000b883a 	mov	r5,zero
    8e5c:	01000074 	movhi	r4,1
    8e60:	21058804 	addi	r4,r4,5664
    8e64:	000b6780 	call	b678 <alt_avalon_spi_command>
    8e68:	e0bff415 	stw	r2,-48(fp)
	div_byp = CX_DIVBYP(rd_buf[0], rd_buf[1]); //(rd_buf[1] << 8) | rd_buf[0];
    8e6c:	e0bfff83 	ldbu	r2,-2(fp)
    8e70:	10803fcc 	andi	r2,r2,255
    8e74:	1004923a 	slli	r2,r2,8
    8e78:	1007883a 	mov	r3,r2
    8e7c:	e0bfffc3 	ldbu	r2,-1(fp)
    8e80:	10803fcc 	andi	r2,r2,255
    8e84:	1884b03a 	or	r2,r3,r2
    8e88:	e0bff68d 	sth	r2,-38(fp)


	for(i=0; i<8; i++)
    8e8c:	e03ff315 	stw	zero,-52(fp)
    8e90:	00002e06 	br	8f4c <UpdatePLLCFG+0x450>
	{
		// Read Cx value
		wr_buf[0] = 0x00;	// Command and Address
    8e94:	e03fff05 	stb	zero,-4(fp)
		wr_buf[1] = 0x2E + i;	// Command and Address
    8e98:	e0bff317 	ldw	r2,-52(fp)
    8e9c:	10800b84 	addi	r2,r2,46
    8ea0:	e0bfff45 	stb	r2,-3(fp)
		spirez = alt_avalon_spi_command(PLLCFG_SPI_BASE, 0, 2, wr_buf, 2, rd_buf, 0);
    8ea4:	e0ffff04 	addi	r3,fp,-4
    8ea8:	d8000215 	stw	zero,8(sp)
    8eac:	e0bfff84 	addi	r2,fp,-2
    8eb0:	d8800115 	stw	r2,4(sp)
    8eb4:	00800084 	movi	r2,2
    8eb8:	d8800015 	stw	r2,0(sp)
    8ebc:	180f883a 	mov	r7,r3
    8ec0:	01800084 	movi	r6,2
    8ec4:	000b883a 	mov	r5,zero
    8ec8:	01000074 	movhi	r4,1
    8ecc:	21058804 	addi	r4,r4,5664
    8ed0:	000b6780 	call	b678 <alt_avalon_spi_command>
    8ed4:	e0bff415 	stw	r2,-48(fp)
		pll_cfg.C_cnt = (i << 18) | ( ((div_byp >> 2*i) & 0x03) << 16 ) | C_CNT(rd_buf[0], rd_buf[1]); //(rd_buf[1] << 8) | rd_buf[0];
    8ed8:	e0bff317 	ldw	r2,-52(fp)
    8edc:	100694ba 	slli	r3,r2,18
    8ee0:	e13ff68b 	ldhu	r4,-38(fp)
    8ee4:	e0bff317 	ldw	r2,-52(fp)
    8ee8:	1085883a 	add	r2,r2,r2
    8eec:	2085d83a 	sra	r2,r4,r2
    8ef0:	108000cc 	andi	r2,r2,3
    8ef4:	1004943a 	slli	r2,r2,16
    8ef8:	1886b03a 	or	r3,r3,r2
    8efc:	e0bfff83 	ldbu	r2,-2(fp)
    8f00:	10803fcc 	andi	r2,r2,255
    8f04:	1008923a 	slli	r4,r2,8
    8f08:	e0bfffc3 	ldbu	r2,-1(fp)
    8f0c:	10803fcc 	andi	r2,r2,255
    8f10:	2084b03a 	or	r2,r4,r2
    8f14:	1884b03a 	or	r2,r3,r2
    8f18:	e0bffa15 	stw	r2,-24(fp)

		// Set Cx register
		pllcfgrez = set_CxCnt(PLL_BASE, pll_cfg.C_cnt);
    8f1c:	e0bffa17 	ldw	r2,-24(fp)
    8f20:	100b883a 	mov	r5,r2
    8f24:	e13ff517 	ldw	r4,-44(fp)
    8f28:	000af040 	call	af04 <set_CxCnt>
    8f2c:	e0bff605 	stb	r2,-40(fp)
		if(pllcfgrez) return pllcfgrez;
    8f30:	e0bff603 	ldbu	r2,-40(fp)
    8f34:	10000226 	beq	r2,zero,8f40 <UpdatePLLCFG+0x444>
    8f38:	e0bff603 	ldbu	r2,-40(fp)
    8f3c:	00000b06 	br	8f6c <UpdatePLLCFG+0x470>
	wr_buf[1] = 0x27;	// Command and Address
	spirez = alt_avalon_spi_command(PLLCFG_SPI_BASE, 0, 2, wr_buf, 2, rd_buf, 0);
	div_byp = CX_DIVBYP(rd_buf[0], rd_buf[1]); //(rd_buf[1] << 8) | rd_buf[0];


	for(i=0; i<8; i++)
    8f40:	e0bff317 	ldw	r2,-52(fp)
    8f44:	10800044 	addi	r2,r2,1
    8f48:	e0bff315 	stw	r2,-52(fp)
    8f4c:	e0bff317 	ldw	r2,-52(fp)
    8f50:	10800210 	cmplti	r2,r2,8
    8f54:	103fcf1e 	bne	r2,zero,8e94 <_gp+0xffff44f0>
		//set_Phase(PLL_BASE, i, 0, 1);
		//if(pllcfgrez) return pllcfgrez;
	}

	// Apply PLL configuration
	pllcfgrez = start_Reconfig(PLL_BASE);
    8f58:	e13ff517 	ldw	r4,-44(fp)
    8f5c:	000afbc0 	call	afbc <start_Reconfig>
    8f60:	e0bff605 	stb	r2,-40(fp)

	ResetPLL();
    8f64:	00094840 	call	9484 <ResetPLL>

	return pllcfgrez;
    8f68:	e0bff603 	ldbu	r2,-40(fp)

}
    8f6c:	e037883a 	mov	sp,fp
    8f70:	dfc00117 	ldw	ra,4(sp)
    8f74:	df000017 	ldw	fp,0(sp)
    8f78:	dec00204 	addi	sp,sp,8
    8f7c:	f800283a 	ret

00008f80 <UpdatePHCFG>:

// Change PLL phase
uint8_t UpdatePHCFG(void)
{
    8f80:	defff404 	addi	sp,sp,-48
    8f84:	dfc00b15 	stw	ra,44(sp)
    8f88:	df000a15 	stw	fp,40(sp)
    8f8c:	df000a04 	addi	fp,sp,40
	uint8_t rd_buf[2];
	int spirez;
	uint8_t pllcfgrez;

	// Read
	wr_buf[0] = 0x00;	// Command and Address
    8f90:	e03ffe45 	stb	zero,-7(fp)
	wr_buf[1] = 0x23;	// Command and Address
    8f94:	008008c4 	movi	r2,35
    8f98:	e0bffe85 	stb	r2,-6(fp)
	spirez = alt_avalon_spi_command(PLLCFG_SPI_BASE, 0, 2, wr_buf, 2, rd_buf, 0);
    8f9c:	e0fffe44 	addi	r3,fp,-7
    8fa0:	d8000215 	stw	zero,8(sp)
    8fa4:	e0bffec4 	addi	r2,fp,-5
    8fa8:	d8800115 	stw	r2,4(sp)
    8fac:	00800084 	movi	r2,2
    8fb0:	d8800015 	stw	r2,0(sp)
    8fb4:	180f883a 	mov	r7,r3
    8fb8:	01800084 	movi	r6,2
    8fbc:	000b883a 	mov	r5,zero
    8fc0:	01000074 	movhi	r4,1
    8fc4:	21058804 	addi	r4,r4,5664
    8fc8:	000b6780 	call	b678 <alt_avalon_spi_command>
    8fcc:	e0bff915 	stw	r2,-28(fp)

	// Get PLL base address
	PLL_BASE = GetPLLCFG_Base( PLL_IND(rd_buf[1]) );
    8fd0:	e0bfff03 	ldbu	r2,-4(fp)
    8fd4:	10803fcc 	andi	r2,r2,255
    8fd8:	1004d0fa 	srli	r2,r2,3
    8fdc:	10803fcc 	andi	r2,r2,255
    8fe0:	1009883a 	mov	r4,r2
    8fe4:	0008a540 	call	8a54 <GetPLLCFG_Base>
    8fe8:	e0bffa15 	stw	r2,-24(fp)

	//Write in Mode Register "0" for waitrequest mode, "1" for polling mode
	IOWR_32DIRECT(PLL_BASE, MODE, 0x01);
    8fec:	e0bffa17 	ldw	r2,-24(fp)
    8ff0:	00c00044 	movi	r3,1
    8ff4:	10c00035 	stwio	r3,0(r2)

	// Set Up/Down
	Dir = PH_DIR(rd_buf[0]); //(rd_buf[1] >> 5) & 0x01;
    8ff8:	e0bffec3 	ldbu	r2,-5(fp)
    8ffc:	10803fcc 	andi	r2,r2,255
    9000:	1004d17a 	srli	r2,r2,5
    9004:	10803fcc 	andi	r2,r2,255
    9008:	1080004c 	andi	r2,r2,1
    900c:	e0bffb15 	stw	r2,-20(fp)

	// Set Cx
	Cx = CX_IND(rd_buf[0]) - 2; //(rd_buf[1] & 0x1F);
    9010:	e0bffec3 	ldbu	r2,-5(fp)
    9014:	10803fcc 	andi	r2,r2,255
    9018:	108007cc 	andi	r2,r2,31
    901c:	10bfff84 	addi	r2,r2,-2
    9020:	e0bffc15 	stw	r2,-16(fp)

	// Set Phase Cnt
	wr_buf[0] = 0x00;	// Command and Address
    9024:	e03ffe45 	stb	zero,-7(fp)
	wr_buf[1] = 0x24;	// Command and Address
    9028:	00800904 	movi	r2,36
    902c:	e0bffe85 	stb	r2,-6(fp)
	spirez = alt_avalon_spi_command(PLLCFG_SPI_BASE, 0, 2, wr_buf, 2, rd_buf, 0);
    9030:	e0fffe44 	addi	r3,fp,-7
    9034:	d8000215 	stw	zero,8(sp)
    9038:	e0bffec4 	addi	r2,fp,-5
    903c:	d8800115 	stw	r2,4(sp)
    9040:	00800084 	movi	r2,2
    9044:	d8800015 	stw	r2,0(sp)
    9048:	180f883a 	mov	r7,r3
    904c:	01800084 	movi	r6,2
    9050:	000b883a 	mov	r5,zero
    9054:	01000074 	movhi	r4,1
    9058:	21058804 	addi	r4,r4,5664
    905c:	000b6780 	call	b678 <alt_avalon_spi_command>
    9060:	e0bff915 	stw	r2,-28(fp)
	Val = CX_PHASE(rd_buf[0], rd_buf[1]); //(rd_buf[1] << 8) | rd_buf[0];
    9064:	e0bffec3 	ldbu	r2,-5(fp)
    9068:	10803fcc 	andi	r2,r2,255
    906c:	1006923a 	slli	r3,r2,8
    9070:	e0bfff03 	ldbu	r2,-4(fp)
    9074:	10803fcc 	andi	r2,r2,255
    9078:	1884b03a 	or	r2,r3,r2
    907c:	e0bffd15 	stw	r2,-12(fp)

	// Set Phase shift register
	set_Phase(PLL_BASE, Cx, Val, Dir);
    9080:	e1fffb17 	ldw	r7,-20(fp)
    9084:	e1bffd17 	ldw	r6,-12(fp)
    9088:	e17ffc17 	ldw	r5,-16(fp)
    908c:	e13ffa17 	ldw	r4,-24(fp)
    9090:	000af400 	call	af40 <set_Phase>
	// Apply PLL configuration
	pllcfgrez = start_Reconfig(PLL_BASE);
    9094:	e13ffa17 	ldw	r4,-24(fp)
    9098:	000afbc0 	call	afbc <start_Reconfig>
    909c:	e0bffe05 	stb	r2,-8(fp)
	return pllcfgrez;
    90a0:	e0bffe03 	ldbu	r2,-8(fp)
}
    90a4:	e037883a 	mov	sp,fp
    90a8:	dfc00117 	ldw	ra,4(sp)
    90ac:	df000017 	ldw	fp,0(sp)
    90b0:	dec00204 	addi	sp,sp,8
    90b4:	f800283a 	ret

000090b8 <smpl_cmp>:

uint8_t smpl_cmp(uint8_t pll_ind){
    90b8:	defffd04 	addi	sp,sp,-12
    90bc:	df000215 	stw	fp,8(sp)
    90c0:	df000204 	addi	fp,sp,8
    90c4:	2005883a 	mov	r2,r4
    90c8:	e0bfff05 	stb	r2,-4(fp)

	uint8_t smpl_cmp_status;

	//clean sample compare en bits
	IOWR_8DIRECT(SMPL_CMP_EN_BASE, 0x00, 0x00);	//Set to 0
    90cc:	0007883a 	mov	r3,zero
    90d0:	00800074 	movhi	r2,1
    90d4:	1085a804 	addi	r2,r2,5792
    90d8:	10c00025 	stbio	r3,0(r2)
	while((IORD_8DIRECT(SMPL_CMP_STATUS_BASE, 0x00) & 0x01) == 0x01);
    90dc:	0001883a 	nop
    90e0:	00800074 	movhi	r2,1
    90e4:	1085ac04 	addi	r2,r2,5808
    90e8:	10800023 	ldbuio	r2,0(r2)
    90ec:	10803fcc 	andi	r2,r2,255
    90f0:	1080004c 	andi	r2,r2,1
    90f4:	103ffa1e 	bne	r2,zero,90e0 <_gp+0xffff473c>

	//trigger sample compare enable
	if (pll_ind < 2) {
    90f8:	e0bfff03 	ldbu	r2,-4(fp)
    90fc:	108000a8 	cmpgeui	r2,r2,2
    9100:	1000051e 	bne	r2,zero,9118 <smpl_cmp+0x60>
		IOWR_8DIRECT(SMPL_CMP_EN_BASE, 0x00, 0x01);	//Set to 1
    9104:	00c00044 	movi	r3,1
    9108:	00800074 	movhi	r2,1
    910c:	1085a804 	addi	r2,r2,5792
    9110:	10c00025 	stbio	r3,0(r2)
    9114:	00000406 	br	9128 <smpl_cmp+0x70>
	}
	else {
		IOWR_8DIRECT(SMPL_CMP_EN_BASE, 0x00, 0x02);	//Set to 2
    9118:	00c00084 	movi	r3,2
    911c:	00800074 	movhi	r2,1
    9120:	1085a804 	addi	r2,r2,5792
    9124:	10c00025 	stbio	r3,0(r2)
	}

	//wait for sample compare done
	while(((IORD_8DIRECT(SMPL_CMP_STATUS_BASE, 0x00)) & 0x01) == 0x00);
    9128:	0001883a 	nop
    912c:	00800074 	movhi	r2,1
    9130:	1085ac04 	addi	r2,r2,5808
    9134:	10800023 	ldbuio	r2,0(r2)
    9138:	10803fcc 	andi	r2,r2,255
    913c:	1080004c 	andi	r2,r2,1
    9140:	103ffa26 	beq	r2,zero,912c <_gp+0xffff4788>
	smpl_cmp_status = (IORD_8DIRECT(SMPL_CMP_STATUS_BASE, 0x00));
    9144:	00800074 	movhi	r2,1
    9148:	1085ac04 	addi	r2,r2,5808
    914c:	10800023 	ldbuio	r2,0(r2)
    9150:	10803fcc 	andi	r2,r2,255
    9154:	e0bffe05 	stb	r2,-8(fp)

	return smpl_cmp_status;
    9158:	e0bffe03 	ldbu	r2,-8(fp)


}
    915c:	e037883a 	mov	sp,fp
    9160:	df000017 	ldw	fp,0(sp)
    9164:	dec00104 	addi	sp,sp,4
    9168:	f800283a 	ret

0000916c <AutoPHCFG>:


uint8_t *AutoPHCFG(uint8_t status[2])
{
    916c:	deffea04 	addi	sp,sp,-88
    9170:	dfc01515 	stw	ra,84(sp)
    9174:	df001415 	stw	fp,80(sp)
    9178:	dc001315 	stw	r16,76(sp)
    917c:	df001404 	addi	fp,sp,80
    9180:	e13ffe15 	stw	r4,-8(fp)
	uint8_t pll_ind;
	uint8_t wr_buf[2];
	uint8_t rd_buf[2];
	uint8_t pllcfgrez;
	uint8_t smpl_cmp_status;
	uint8_t min_found = 0;
    9184:	e03fef45 	stb	zero,-67(fp)
	uint8_t max_found = 0;
    9188:	e03fef85 	stb	zero,-66(fp)
	int phase_min = 0;
    918c:	e03ff015 	stw	zero,-64(fp)
	int phase_max = 0;
    9190:	e03ff115 	stw	zero,-60(fp)
	int phase_midle = 0;
    9194:	e03ff415 	stw	zero,-48(fp)
	int phase_reverse = 0;
    9198:	e03ff515 	stw	zero,-44(fp)
	int timeout = 0;
    919c:	e03ff215 	stw	zero,-56(fp)
	int spirez;



	//Reset PLL to get default phase relationship
	ResetPLL();
    91a0:	00094840 	call	9484 <ResetPLL>

	// Read
	wr_buf[0] = 0x00;	// Command and Address
    91a4:	e03ffc45 	stb	zero,-15(fp)
	wr_buf[1] = 0x23;	// Command and Address
    91a8:	008008c4 	movi	r2,35
    91ac:	e0bffc85 	stb	r2,-14(fp)
	spirez = alt_avalon_spi_command(PLLCFG_SPI_BASE, 0, 2, wr_buf, 2, rd_buf, 0);
    91b0:	e0fffc44 	addi	r3,fp,-15
    91b4:	d8000215 	stw	zero,8(sp)
    91b8:	e0bffcc4 	addi	r2,fp,-13
    91bc:	d8800115 	stw	r2,4(sp)
    91c0:	00800084 	movi	r2,2
    91c4:	d8800015 	stw	r2,0(sp)
    91c8:	180f883a 	mov	r7,r3
    91cc:	01800084 	movi	r6,2
    91d0:	000b883a 	mov	r5,zero
    91d4:	01000074 	movhi	r4,1
    91d8:	21058804 	addi	r4,r4,5664
    91dc:	000b6780 	call	b678 <alt_avalon_spi_command>
    91e0:	e0bff615 	stw	r2,-40(fp)

	// Get PLL base address
	PLL_BASE = GetPLLCFG_Base( PLL_IND(rd_buf[1]) );
    91e4:	e0bffd03 	ldbu	r2,-12(fp)
    91e8:	10803fcc 	andi	r2,r2,255
    91ec:	1004d0fa 	srli	r2,r2,3
    91f0:	10803fcc 	andi	r2,r2,255
    91f4:	1009883a 	mov	r4,r2
    91f8:	0008a540 	call	8a54 <GetPLLCFG_Base>
    91fc:	e0bff715 	stw	r2,-36(fp)
	pll_ind = PLL_IND(rd_buf[1]);
    9200:	e0bffd03 	ldbu	r2,-12(fp)
    9204:	10803fcc 	andi	r2,r2,255
    9208:	1004d0fa 	srli	r2,r2,3
    920c:	e0bff805 	stb	r2,-32(fp)

	//Write in Mode Register "0" for waitrequest mode, "1" for polling mode
	IOWR_32DIRECT(PLL_BASE, MODE, 0x01);
    9210:	e0bff717 	ldw	r2,-36(fp)
    9214:	00c00044 	movi	r3,1
    9218:	10c00035 	stwio	r3,0(r2)

	// Set Up/Down
	Dir = PH_DIR(rd_buf[0]); //(rd_buf[1] >> 5) & 0x01;
    921c:	e0bffcc3 	ldbu	r2,-13(fp)
    9220:	10803fcc 	andi	r2,r2,255
    9224:	1004d17a 	srli	r2,r2,5
    9228:	10803fcc 	andi	r2,r2,255
    922c:	1080004c 	andi	r2,r2,1
    9230:	e0bff915 	stw	r2,-28(fp)

	// Set Cx
	Cx = CX_IND(rd_buf[0]) - 2; //(rd_buf[1] & 0x1F);
    9234:	e0bffcc3 	ldbu	r2,-13(fp)
    9238:	10803fcc 	andi	r2,r2,255
    923c:	108007cc 	andi	r2,r2,31
    9240:	10bfff84 	addi	r2,r2,-2
    9244:	e0bffa15 	stw	r2,-24(fp)

	// Read step size
	wr_buf[0] = 0x00;	// Command and Address
    9248:	e03ffc45 	stb	zero,-15(fp)
	wr_buf[1] = 0x3F;	// Command and Address
    924c:	00800fc4 	movi	r2,63
    9250:	e0bffc85 	stb	r2,-14(fp)
	spirez = alt_avalon_spi_command(PLLCFG_SPI_BASE, 0, 2, wr_buf, 2, rd_buf, 0);
    9254:	e0fffc44 	addi	r3,fp,-15
    9258:	d8000215 	stw	zero,8(sp)
    925c:	e0bffcc4 	addi	r2,fp,-13
    9260:	d8800115 	stw	r2,4(sp)
    9264:	00800084 	movi	r2,2
    9268:	d8800015 	stw	r2,0(sp)
    926c:	180f883a 	mov	r7,r3
    9270:	01800084 	movi	r6,2
    9274:	000b883a 	mov	r5,zero
    9278:	01000074 	movhi	r4,1
    927c:	21058804 	addi	r4,r4,5664
    9280:	000b6780 	call	b678 <alt_avalon_spi_command>
    9284:	e0bff615 	stw	r2,-40(fp)
	Val = CX_PHASE(rd_buf[0], rd_buf[1]); //(rd_buf[1] << 8) | rd_buf[0];
    9288:	e0bffcc3 	ldbu	r2,-13(fp)
    928c:	10803fcc 	andi	r2,r2,255
    9290:	1006923a 	slli	r3,r2,8
    9294:	e0bffd03 	ldbu	r2,-12(fp)
    9298:	10803fcc 	andi	r2,r2,255
    929c:	1884b03a 	or	r2,r3,r2
    92a0:	e0bffb15 	stw	r2,-20(fp)

	//pll_lock_status = IORD_8DIRECT(PLL_LOCK_BASE, 0x00);
	//current_pll_lock_status = ( ((IORD_8DIRECT(PLL_LOCK_BASE, 0x00)) >> pll_ind) & 0x01);

	//wait for pll lock
	while((((IORD_8DIRECT(PLL_LOCK_BASE, 0x00)) >> pll_ind) & 0x01) == 0x00) {
    92a4:	00000606 	br	92c0 <AutoPHCFG+0x154>
		timeout++;
    92a8:	e0bff217 	ldw	r2,-56(fp)
    92ac:	10800044 	addi	r2,r2,1
    92b0:	e0bff215 	stw	r2,-56(fp)
		if (timeout > 255) break;
    92b4:	e0bff217 	ldw	r2,-56(fp)
    92b8:	10804010 	cmplti	r2,r2,256
    92bc:	10000926 	beq	r2,zero,92e4 <AutoPHCFG+0x178>

	//pll_lock_status = IORD_8DIRECT(PLL_LOCK_BASE, 0x00);
	//current_pll_lock_status = ( ((IORD_8DIRECT(PLL_LOCK_BASE, 0x00)) >> pll_ind) & 0x01);

	//wait for pll lock
	while((((IORD_8DIRECT(PLL_LOCK_BASE, 0x00)) >> pll_ind) & 0x01) == 0x00) {
    92c0:	00800074 	movhi	r2,1
    92c4:	1085a004 	addi	r2,r2,5760
    92c8:	10800023 	ldbuio	r2,0(r2)
    92cc:	10c03fcc 	andi	r3,r2,255
    92d0:	e0bff803 	ldbu	r2,-32(fp)
    92d4:	1884d83a 	srl	r2,r3,r2
    92d8:	1080004c 	andi	r2,r2,1
    92dc:	103ff226 	beq	r2,zero,92a8 <_gp+0xffff4904>
    92e0:	00000106 	br	92e8 <AutoPHCFG+0x17c>
		timeout++;
		if (timeout > 255) break;
    92e4:	0001883a 	nop
	}

	// if pll is locked without timeout start phase search
	if (timeout < 255) {
    92e8:	e0bff217 	ldw	r2,-56(fp)
    92ec:	10803fc8 	cmpgei	r2,r2,255
    92f0:	10005a1e 	bne	r2,zero,945c <AutoPHCFG+0x2f0>
		for (int i = 0; i < 1023; i++ ) {
    92f4:	e03ff315 	stw	zero,-52(fp)
    92f8:	00005506 	br	9450 <AutoPHCFG+0x2e4>
			// get sample compare status
			smpl_cmp_status = smpl_cmp(pll_ind);
    92fc:	e0bff803 	ldbu	r2,-32(fp)
    9300:	1009883a 	mov	r4,r2
    9304:	00090b80 	call	90b8 <smpl_cmp>
    9308:	e0bffc05 	stb	r2,-16(fp)

			if (((smpl_cmp_status & 0x02) == 0x00) && (min_found == 0)) {
    930c:	e0bffc03 	ldbu	r2,-16(fp)
    9310:	1080008c 	andi	r2,r2,2
    9314:	1000091e 	bne	r2,zero,933c <AutoPHCFG+0x1d0>
    9318:	e0bfef43 	ldbu	r2,-67(fp)
    931c:	1000071e 	bne	r2,zero,933c <AutoPHCFG+0x1d0>
				min_found = 1;
    9320:	00800044 	movi	r2,1
    9324:	e0bfef45 	stb	r2,-67(fp)
				phase_min = i * Val;
    9328:	e0bff317 	ldw	r2,-52(fp)
    932c:	e17ffb17 	ldw	r5,-20(fp)
    9330:	1009883a 	mov	r4,r2
    9334:	000b1e40 	call	b1e4 <__mulsi3>
    9338:	e0bff015 	stw	r2,-64(fp)
			}

			if (((smpl_cmp_status & 0x02) == 0x02) && (min_found == 1)){
    933c:	e0bffc03 	ldbu	r2,-16(fp)
    9340:	1080008c 	andi	r2,r2,2
    9344:	10000a26 	beq	r2,zero,9370 <AutoPHCFG+0x204>
    9348:	e0bfef43 	ldbu	r2,-67(fp)
    934c:	10800058 	cmpnei	r2,r2,1
    9350:	1000071e 	bne	r2,zero,9370 <AutoPHCFG+0x204>
				max_found = 1;
    9354:	00800044 	movi	r2,1
    9358:	e0bfef85 	stb	r2,-66(fp)
				phase_max = i * Val;
    935c:	e0bff317 	ldw	r2,-52(fp)
    9360:	e17ffb17 	ldw	r5,-20(fp)
    9364:	1009883a 	mov	r4,r2
    9368:	000b1e40 	call	b1e4 <__mulsi3>
    936c:	e0bff115 	stw	r2,-60(fp)
			}

			if ((min_found == 1) && (max_found == 1)) {
    9370:	e0bfef43 	ldbu	r2,-67(fp)
    9374:	10800058 	cmpnei	r2,r2,1
    9378:	1000261e 	bne	r2,zero,9414 <AutoPHCFG+0x2a8>
    937c:	e0bfef83 	ldbu	r2,-66(fp)
    9380:	10800058 	cmpnei	r2,r2,1
    9384:	1000231e 	bne	r2,zero,9414 <AutoPHCFG+0x2a8>
				phase_midle = phase_min + ((phase_max - Val - phase_min) /2);
    9388:	e0fff117 	ldw	r3,-60(fp)
    938c:	e0bffb17 	ldw	r2,-20(fp)
    9390:	1887c83a 	sub	r3,r3,r2
    9394:	e0bff017 	ldw	r2,-64(fp)
    9398:	1885c83a 	sub	r2,r3,r2
    939c:	1006d07a 	srli	r3,r2,1
    93a0:	e0bff017 	ldw	r2,-64(fp)
    93a4:	1885883a 	add	r2,r3,r2
    93a8:	e0bff415 	stw	r2,-48(fp)
				phase_reverse = phase_max - phase_midle;
    93ac:	e0fff117 	ldw	r3,-60(fp)
    93b0:	e0bff417 	ldw	r2,-48(fp)
    93b4:	1885c83a 	sub	r2,r3,r2
    93b8:	e0bff515 	stw	r2,-44(fp)
				// Set Phase shift register to bring back phase to middle value
				set_Phase(PLL_BASE, Cx, phase_reverse, Dir ^ 1);
    93bc:	e0fff517 	ldw	r3,-44(fp)
    93c0:	e0bff917 	ldw	r2,-28(fp)
    93c4:	1080005c 	xori	r2,r2,1
    93c8:	100f883a 	mov	r7,r2
    93cc:	180d883a 	mov	r6,r3
    93d0:	e17ffa17 	ldw	r5,-24(fp)
    93d4:	e13ff717 	ldw	r4,-36(fp)
    93d8:	000af400 	call	af40 <set_Phase>
				// Apply PLL configuration
				pllcfgrez = start_Reconfig(PLL_BASE);
    93dc:	e13ff717 	ldw	r4,-36(fp)
    93e0:	000afbc0 	call	afbc <start_Reconfig>
    93e4:	e0bfef05 	stb	r2,-68(fp)
				smpl_cmp_status= smpl_cmp(pll_ind);
    93e8:	e0bff803 	ldbu	r2,-32(fp)
    93ec:	1009883a 	mov	r4,r2
    93f0:	00090b80 	call	90b8 <smpl_cmp>
    93f4:	e0bffc05 	stb	r2,-16(fp)
				status[1] = smpl_cmp(pll_ind);
    93f8:	e0bffe17 	ldw	r2,-8(fp)
    93fc:	14000044 	addi	r16,r2,1
    9400:	e0bff803 	ldbu	r2,-32(fp)
    9404:	1009883a 	mov	r4,r2
    9408:	00090b80 	call	90b8 <smpl_cmp>
    940c:	80800005 	stb	r2,0(r16)

				break;
    9410:	00001206 	br	945c <AutoPHCFG+0x2f0>
			}

			// Set Phase shift register
			set_Phase(PLL_BASE, Cx, Val, Dir);
    9414:	e1fff917 	ldw	r7,-28(fp)
    9418:	e1bffb17 	ldw	r6,-20(fp)
    941c:	e17ffa17 	ldw	r5,-24(fp)
    9420:	e13ff717 	ldw	r4,-36(fp)
    9424:	000af400 	call	af40 <set_Phase>
			// Apply PLL configuration
			pllcfgrez = start_Reconfig(PLL_BASE);
    9428:	e13ff717 	ldw	r4,-36(fp)
    942c:	000afbc0 	call	afbc <start_Reconfig>
    9430:	e0bfef05 	stb	r2,-68(fp)
			status[1] = 0x03;
    9434:	e0bffe17 	ldw	r2,-8(fp)
    9438:	10800044 	addi	r2,r2,1
    943c:	00c000c4 	movi	r3,3
    9440:	10c00005 	stb	r3,0(r2)
		if (timeout > 255) break;
	}

	// if pll is locked without timeout start phase search
	if (timeout < 255) {
		for (int i = 0; i < 1023; i++ ) {
    9444:	e0bff317 	ldw	r2,-52(fp)
    9448:	10800044 	addi	r2,r2,1
    944c:	e0bff315 	stw	r2,-52(fp)
    9450:	e0bff317 	ldw	r2,-52(fp)
    9454:	1080ffd0 	cmplti	r2,r2,1023
    9458:	103fa81e 	bne	r2,zero,92fc <_gp+0xffff4958>


		}
	}

	status[0] = pllcfgrez;
    945c:	e0bffe17 	ldw	r2,-8(fp)
    9460:	e0ffef03 	ldbu	r3,-68(fp)
    9464:	10c00005 	stb	r3,0(r2)
	return status;
    9468:	e0bffe17 	ldw	r2,-8(fp)

}
    946c:	e6ffff04 	addi	sp,fp,-4
    9470:	dfc00217 	ldw	ra,8(sp)
    9474:	df000117 	ldw	fp,4(sp)
    9478:	dc000017 	ldw	r16,0(sp)
    947c:	dec00304 	addi	sp,sp,12
    9480:	f800283a 	ret

00009484 <ResetPLL>:


//
void ResetPLL(void)
{
    9484:	defff804 	addi	sp,sp,-32
    9488:	dfc00715 	stw	ra,28(sp)
    948c:	df000615 	stw	fp,24(sp)
    9490:	df000604 	addi	fp,sp,24
	uint8_t wr_buf[2];
	uint8_t rd_buf[2];
	int pll_ind, spirez;

	// Read
	wr_buf[0] = 0x00;	// Command and Address
    9494:	e03fff05 	stb	zero,-4(fp)
	wr_buf[1] = 0x23;	// Command and Address
    9498:	008008c4 	movi	r2,35
    949c:	e0bfff45 	stb	r2,-3(fp)
	spirez = alt_avalon_spi_command(PLLCFG_SPI_BASE, 0, 2, wr_buf, 2, rd_buf, 0);
    94a0:	e0ffff04 	addi	r3,fp,-4
    94a4:	d8000215 	stw	zero,8(sp)
    94a8:	e0bfff84 	addi	r2,fp,-2
    94ac:	d8800115 	stw	r2,4(sp)
    94b0:	00800084 	movi	r2,2
    94b4:	d8800015 	stw	r2,0(sp)
    94b8:	180f883a 	mov	r7,r3
    94bc:	01800084 	movi	r6,2
    94c0:	000b883a 	mov	r5,zero
    94c4:	01000074 	movhi	r4,1
    94c8:	21058804 	addi	r4,r4,5664
    94cc:	000b6780 	call	b678 <alt_avalon_spi_command>
    94d0:	e0bffd15 	stw	r2,-12(fp)

	// Get PLL index
	pll_ind = PLL_IND(rd_buf[1]); //(rd_buf[0] >> 3) & 0x3F;
    94d4:	e0bfffc3 	ldbu	r2,-1(fp)
    94d8:	10803fcc 	andi	r2,r2,255
    94dc:	1004d0fa 	srli	r2,r2,3
    94e0:	10803fcc 	andi	r2,r2,255
    94e4:	108007cc 	andi	r2,r2,31
    94e8:	e0bffe15 	stw	r2,-8(fp)

	// Toggle reset line of appropriate PLL
    IOWR(PLL_RST_BASE, 0x00, 0x01 << pll_ind);	//Set to 1
    94ec:	00c00044 	movi	r3,1
    94f0:	e0bffe17 	ldw	r2,-8(fp)
    94f4:	1886983a 	sll	r3,r3,r2
    94f8:	00800074 	movhi	r2,1
    94fc:	1085b004 	addi	r2,r2,5824
    9500:	10c00035 	stwio	r3,0(r2)
    asm("nop"); asm("nop");
    9504:	0001883a 	nop
    9508:	0001883a 	nop
    IOWR(PLL_RST_BASE, 0x00, 0x00);	//Set to 0
    950c:	0007883a 	mov	r3,zero
    9510:	00800074 	movhi	r2,1
    9514:	1085b004 	addi	r2,r2,5824
    9518:	10c00035 	stwio	r3,0(r2)
}
    951c:	0001883a 	nop
    9520:	e037883a 	mov	sp,fp
    9524:	dfc00117 	ldw	ra,4(sp)
    9528:	df000017 	ldw	fp,0(sp)
    952c:	dec00204 	addi	sp,sp,8
    9530:	f800283a 	ret

00009534 <Modify_BRDSPI16_Reg_bits>:
 *	@param SPI_reg_addr register address
 *	@param MSB_bit MSB bit of range that will be modified
 *	@param LSB_bit LSB bit of range that will be modified
 */
void Modify_BRDSPI16_Reg_bits (unsigned short int SPI_reg_addr, unsigned char MSB_bit, unsigned char LSB_bit, unsigned short int new_bits_data)
{
    9534:	defff304 	addi	sp,sp,-52
    9538:	dfc00c15 	stw	ra,48(sp)
    953c:	df000b15 	stw	fp,44(sp)
    9540:	df000b04 	addi	fp,sp,44
    9544:	2011883a 	mov	r8,r4
    9548:	2809883a 	mov	r4,r5
    954c:	3007883a 	mov	r3,r6
    9550:	3805883a 	mov	r2,r7
    9554:	e23ffc0d 	sth	r8,-16(fp)
    9558:	e13ffd05 	stb	r4,-12(fp)
    955c:	e0fffe05 	stb	r3,-8(fp)
    9560:	e0bfff0d 	sth	r2,-4(fp)
	unsigned char RdBuff[2];
	int spirez;

	//**Reconfigure_SPI_for_LMS();

	bits_number = MSB_bit - LSB_bit + 1;
    9564:	e0fffd03 	ldbu	r3,-12(fp)
    9568:	e0bffe03 	ldbu	r2,-8(fp)
    956c:	1885c83a 	sub	r2,r3,r2
    9570:	10800044 	addi	r2,r2,1
    9574:	e0bff805 	stb	r2,-32(fp)

	mask = 0xFFFF;
    9578:	00bfffc4 	movi	r2,-1
    957c:	e0bff88d 	sth	r2,-30(fp)

	//removing unnecessary bits from mask
	mask = mask << (16 - bits_number);
    9580:	e0fff88b 	ldhu	r3,-30(fp)
    9584:	e0bff803 	ldbu	r2,-32(fp)
    9588:	01000404 	movi	r4,16
    958c:	2085c83a 	sub	r2,r4,r2
    9590:	1884983a 	sll	r2,r3,r2
    9594:	e0bff88d 	sth	r2,-30(fp)
	mask = mask >> (16 - bits_number);
    9598:	e0fff88b 	ldhu	r3,-30(fp)
    959c:	e0bff803 	ldbu	r2,-32(fp)
    95a0:	01000404 	movi	r4,16
    95a4:	2085c83a 	sub	r2,r4,r2
    95a8:	1885d83a 	sra	r2,r3,r2
    95ac:	e0bff88d 	sth	r2,-30(fp)

	new_bits_data &= mask; //mask new data
    95b0:	e0ffff0b 	ldhu	r3,-4(fp)
    95b4:	e0bff88b 	ldhu	r2,-30(fp)
    95b8:	1884703a 	and	r2,r3,r2
    95bc:	e0bfff0d 	sth	r2,-4(fp)

	new_bits_data = new_bits_data << LSB_bit; //shift new data
    95c0:	e0ffff0b 	ldhu	r3,-4(fp)
    95c4:	e0bffe03 	ldbu	r2,-8(fp)
    95c8:	1884983a 	sll	r2,r3,r2
    95cc:	e0bfff0d 	sth	r2,-4(fp)

	mask = mask << LSB_bit; //shift mask
    95d0:	e0fff88b 	ldhu	r3,-30(fp)
    95d4:	e0bffe03 	ldbu	r2,-8(fp)
    95d8:	1884983a 	sll	r2,r3,r2
    95dc:	e0bff88d 	sth	r2,-30(fp)
	mask =~ mask;//invert mask
    95e0:	e0bff88b 	ldhu	r2,-30(fp)
    95e4:	0084303a 	nor	r2,zero,r2
    95e8:	e0bff88d 	sth	r2,-30(fp)

	// Read original data
	WrBuff[0] = (SPI_reg_addr >> 8 ) & 0xFF; //MSB_byte
    95ec:	e0bffc0b 	ldhu	r2,-16(fp)
    95f0:	1004d23a 	srli	r2,r2,8
    95f4:	e0bffa85 	stb	r2,-22(fp)
	WrBuff[1] = SPI_reg_addr & 0xFF; //LSB_byte
    95f8:	e0bffc0b 	ldhu	r2,-16(fp)
    95fc:	e0bffac5 	stb	r2,-21(fp)
	cbi(WrBuff[0], 7);  //clear write bit
    9600:	e0bffa83 	ldbu	r2,-22(fp)
    9604:	10801fcc 	andi	r2,r2,127
    9608:	e0bffa85 	stb	r2,-22(fp)
	spirez = alt_avalon_spi_command(FPGA_SPI0_BASE, SPI_NR_FPGA, 2, WrBuff, 2, RdBuff, 0);
    960c:	e0fffa84 	addi	r3,fp,-22
    9610:	d8000215 	stw	zero,8(sp)
    9614:	e0bffb84 	addi	r2,fp,-18
    9618:	d8800115 	stw	r2,4(sp)
    961c:	00800084 	movi	r2,2
    9620:	d8800015 	stw	r2,0(sp)
    9624:	180f883a 	mov	r7,r3
    9628:	01800084 	movi	r6,2
    962c:	01400184 	movi	r5,6
    9630:	01000074 	movhi	r4,1
    9634:	21059004 	addi	r4,r4,5696
    9638:	000b6780 	call	b678 <alt_avalon_spi_command>
    963c:	e0bff915 	stw	r2,-28(fp)

	SPI_reg_data = (RdBuff[0] << 8) + RdBuff[1]; //read current SPI reg data
    9640:	e0bffb83 	ldbu	r2,-18(fp)
    9644:	10803fcc 	andi	r2,r2,255
    9648:	1004923a 	slli	r2,r2,8
    964c:	1007883a 	mov	r3,r2
    9650:	e0bffbc3 	ldbu	r2,-17(fp)
    9654:	10803fcc 	andi	r2,r2,255
    9658:	1885883a 	add	r2,r3,r2
    965c:	e0bffa0d 	sth	r2,-24(fp)

	//modify reg data
	SPI_reg_data &= mask;//clear bits
    9660:	e0fffa0b 	ldhu	r3,-24(fp)
    9664:	e0bff88b 	ldhu	r2,-30(fp)
    9668:	1884703a 	and	r2,r3,r2
    966c:	e0bffa0d 	sth	r2,-24(fp)
	SPI_reg_data |= new_bits_data; //set bits with new data
    9670:	e0fffa0b 	ldhu	r3,-24(fp)
    9674:	e0bfff0b 	ldhu	r2,-4(fp)
    9678:	1884b03a 	or	r2,r3,r2
    967c:	e0bffa0d 	sth	r2,-24(fp)

	//write reg addr
	WrBuff[0] = (SPI_reg_addr >> 8 ) & 0xFF; //MSB_byte
    9680:	e0bffc0b 	ldhu	r2,-16(fp)
    9684:	1004d23a 	srli	r2,r2,8
    9688:	e0bffa85 	stb	r2,-22(fp)
	WrBuff[1] = SPI_reg_addr & 0xFF; //LSB_byte
    968c:	e0bffc0b 	ldhu	r2,-16(fp)
    9690:	e0bffac5 	stb	r2,-21(fp)
	//modified data to be written to SPI reg
	WrBuff[2] = (SPI_reg_data >> 8 ) & 0xFF;
    9694:	e0bffa0b 	ldhu	r2,-24(fp)
    9698:	1004d23a 	srli	r2,r2,8
    969c:	e0bffb05 	stb	r2,-20(fp)
	WrBuff[3] = SPI_reg_data & 0xFF;
    96a0:	e0bffa0b 	ldhu	r2,-24(fp)
    96a4:	e0bffb45 	stb	r2,-19(fp)
	sbi(WrBuff[0], 7); //set write bit
    96a8:	e0fffa83 	ldbu	r3,-22(fp)
    96ac:	00bfe004 	movi	r2,-128
    96b0:	1884b03a 	or	r2,r3,r2
    96b4:	e0bffa85 	stb	r2,-22(fp)
	spirez = alt_avalon_spi_command(FPGA_SPI0_BASE, SPI_NR_FPGA, 4, WrBuff, 0, NULL, 0);
    96b8:	e0bffa84 	addi	r2,fp,-22
    96bc:	d8000215 	stw	zero,8(sp)
    96c0:	d8000115 	stw	zero,4(sp)
    96c4:	d8000015 	stw	zero,0(sp)
    96c8:	100f883a 	mov	r7,r2
    96cc:	01800104 	movi	r6,4
    96d0:	01400184 	movi	r5,6
    96d4:	01000074 	movhi	r4,1
    96d8:	21059004 	addi	r4,r4,5696
    96dc:	000b6780 	call	b678 <alt_avalon_spi_command>
    96e0:	e0bff915 	stw	r2,-28(fp)
}
    96e4:	0001883a 	nop
    96e8:	e037883a 	mov	sp,fp
    96ec:	dfc00117 	ldw	ra,4(sp)
    96f0:	df000017 	ldw	fp,0(sp)
    96f4:	dec00204 	addi	sp,sp,8
    96f8:	f800283a 	ret

000096fc <main>:

int main(void)
{
    96fc:	defff104 	addi	sp,sp,-60
    9700:	dfc00e15 	stw	ra,56(sp)
    9704:	df000d15 	stw	fp,52(sp)
    9708:	dc400c15 	stw	r17,48(sp)
    970c:	dc000b15 	stw	r16,44(sp)
    9710:	df000d04 	addi	fp,sp,52
	uint32_t i, ui32_tmp, ui32_c0, ui32_c1;
	uint8_t sw2_old, sw2;
	uint8_t phcfg_start_old, phcfg_start;
	uint8_t pllcfg_start_old, pllcfg_start;
	uint8_t pllrst_start_old, pllrst_start;
	uint8_t phcfg_mode	= 0;
    9714:	e03ff885 	stb	zero,-30(fp)
	uint8_t temp;

	uint8_t wr_buf[2];
	uint8_t rd_buf[2];
	int spirez;
	char cnt = 0;
    9718:	e03ff845 	stb	zero,-31(fp)
	uint32_t* dest = (uint32_t*)glEp0Buffer_Tx;
    971c:	00800074 	movhi	r2,1
    9720:	10b33104 	addi	r2,r2,-13116
    9724:	e0bff915 	stw	r2,-28(fp)
	unsigned char MCP_data[2];
	uint16_t wiper_pos[2];


    // I2C initialiazation
    I2C_init(I2C_OPENCORES_0_BASE, ALT_CPU_FREQ, 100000);
    9728:	018000b4 	movhi	r6,2
    972c:	31a1a804 	addi	r6,r6,-31072
    9730:	01417db4 	movhi	r5,1526
    9734:	29784004 	addi	r5,r5,-7936
    9738:	01000074 	movhi	r4,1
    973c:	21059804 	addi	r4,r4,5728
    9740:	000b8740 	call	b874 <I2C_init>

    // Configure LM75
    Configure_LM75();
    9744:	00081b00 	call	81b0 <Configure_LM75>


	// Initialize variables to detect PLL phase change and PLL config update request
	phcfg_start_old = 0; phcfg_start = 0;
    9748:	e03ff685 	stb	zero,-38(fp)
    974c:	e03ff6c5 	stb	zero,-37(fp)
	pllcfg_start_old = 0; pllcfg_start = 0;
    9750:	e03ff705 	stb	zero,-36(fp)
    9754:	e03ff745 	stb	zero,-35(fp)
	pllrst_start_old = 0; pllrst_start = 0;
    9758:	e03ff785 	stb	zero,-34(fp)
    975c:	e03ff7c5 	stb	zero,-33(fp)

	// Initialize PLL configuration status
	IOWR(PLLCFG_STATUS_BASE, 0x00, PLLCFG_DONE);
    9760:	00c00044 	movi	r3,1
    9764:	00800074 	movhi	r2,1
    9768:	1085b404 	addi	r2,r2,5840
    976c:	10c00035 	stwio	r3,0(r2)

	// Initialize ADC
	init_ADC();
    9770:	00082e00 	call	82e0 <init_ADC>

	//write default TCXO DAC value
	Control_TCXO_ADF (0, NULL); //set ADF4002 CP to three-state
    9774:	000b883a 	mov	r5,zero
    9778:	0009883a 	mov	r4,zero
    977c:	00088800 	call	8880 <Control_TCXO_ADF>
	dac_val = 30714; //default DAC value
    9780:	009dfe84 	movi	r2,30714
    9784:	d0a0000d 	sth	r2,-32768(gp)
	Control_TCXO_DAC (1, &dac_val); //enable DAC output, set new val
    9788:	d1600004 	addi	r5,gp,-32768
    978c:	01000044 	movi	r4,1
    9790:	00087b40 	call	87b4 <Control_TCXO_DAC>

	//default dig pot wiper values
	wiper_pos[0] = wiper_pos[1] = 0x80;
    9794:	00802004 	movi	r2,128
    9798:	e0bffd8d 	sth	r2,-10(fp)
    979c:	e0bffd8b 	ldhu	r2,-10(fp)
    97a0:	e0bffd0d 	sth	r2,-12(fp)

	// Initialize switch for ADC test pattern change detection
	sw2 = IORD(GPI_0_BASE, 0x00) & 0x01;
    97a4:	00800074 	movhi	r2,1
    97a8:	1085bc04 	addi	r2,r2,5872
    97ac:	10800037 	ldwio	r2,0(r2)
    97b0:	1080004c 	andi	r2,r2,1
    97b4:	e0bff645 	stb	r2,-39(fp)
	sw2_old = 0x00;
    97b8:	e03ff605 	stb	zero,-40(fp)

	//get_pll_config(PLL_RECONFIG_0_BASE, &pll_config);

    IOWR(AV_FIFO_INT_0_BASE, 3, 1);		// Toggle FIFO reset
    97bc:	00c00044 	movi	r3,1
    97c0:	00800074 	movhi	r2,1
    97c4:	1085c704 	addi	r2,r2,5916
    97c8:	10c00035 	stwio	r3,0(r2)
    IOWR(AV_FIFO_INT_0_BASE, 3, 0); // Toggle FIFO reset
    97cc:	0007883a 	mov	r3,zero
    97d0:	00800074 	movhi	r2,1
    97d4:	1085c704 	addi	r2,r2,5916
    97d8:	10c00035 	stwio	r3,0(r2)
	    IOWR(GPIO_0_BASE, 0x00, ui32_tmp & 0xFFFFFF7F);	//Set to 0
	    asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop");
	    asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop");
*/
	    // Check if ADC test pattern must be changed
	    if(sw2_old != sw2)
    97dc:	e0fff603 	ldbu	r3,-40(fp)
    97e0:	e0bff643 	ldbu	r2,-39(fp)
    97e4:	18800326 	beq	r3,r2,97f4 <main+0xf8>
	    {
	    	change_ADC_tpat(sw2);
    97e8:	e0bff643 	ldbu	r2,-39(fp)
    97ec:	1009883a 	mov	r4,r2
    97f0:	00089a40 	call	89a4 <change_ADC_tpat>
	    }

	    // Update switch status for ADC test pattern change detection
	    sw2_old = sw2;
    97f4:	e0bff643 	ldbu	r2,-39(fp)
    97f8:	e0bff605 	stb	r2,-40(fp)
	    sw2 = IORD(GPI_0_BASE, 0x00) & 0x01;
    97fc:	00800074 	movhi	r2,1
    9800:	1085bc04 	addi	r2,r2,5872
    9804:	10800037 	ldwio	r2,0(r2)
    9808:	1080004c 	andi	r2,r2,1
    980c:	e0bff645 	stb	r2,-39(fp)


	    // Check if there is a request for PLL phase update
	    if((phcfg_start_old == 0) && (phcfg_start != 0))
    9810:	e0bff683 	ldbu	r2,-38(fp)
    9814:	10002d1e 	bne	r2,zero,98cc <main+0x1d0>
    9818:	e0bff6c3 	ldbu	r2,-37(fp)
    981c:	10002b26 	beq	r2,zero,98cc <main+0x1d0>
	    {
	    	IOWR(PLLCFG_STATUS_BASE, 0x00, PLLCFG_BUSY);
    9820:	00c00084 	movi	r3,2
    9824:	00800074 	movhi	r2,1
    9828:	1085b404 	addi	r2,r2,5840
    982c:	10c00035 	stwio	r3,0(r2)
	    	phcfg_mode = (IORD(PLLCFG_COMMAND_BASE, 0x00) & 0x08) >> 3;
    9830:	00800074 	movhi	r2,1
    9834:	1085b804 	addi	r2,r2,5856
    9838:	10800037 	ldwio	r2,0(r2)
    983c:	1080020c 	andi	r2,r2,8
    9840:	1005d0fa 	srai	r2,r2,3
    9844:	e0bff885 	stb	r2,-30(fp)
	    	if (phcfg_mode == 0x01) {
    9848:	e0bff883 	ldbu	r2,-30(fp)
    984c:	10800058 	cmpnei	r2,r2,1
    9850:	1000111e 	bne	r2,zero,9898 <main+0x19c>
	    		AutoPHCFG(autophcfg_status); //autophcfg_status[2] = AUTO_PHCFG_ERR[1], AUTO_PHCFG_DONE[0]
    9854:	e0bffb04 	addi	r2,fp,-20
    9858:	1009883a 	mov	r4,r2
    985c:	000916c0 	call	916c <AutoPHCFG>

	    		// AUTO_PHCFG_ERR[3], AUTO_PHCFG_DONE[2], BUSY[1], DONE[0]
	    		IOWR(PLLCFG_STATUS_BASE, 0x00, ((autophcfg_status[1] & 0x02) << 2) | PHCFG_DONE | PLLCFG_DONE);
    9860:	e0bffb43 	ldbu	r2,-19(fp)
    9864:	10803fcc 	andi	r2,r2,255
    9868:	1080008c 	andi	r2,r2,2
    986c:	1085883a 	add	r2,r2,r2
    9870:	1085883a 	add	r2,r2,r2
    9874:	10c00154 	ori	r3,r2,5
    9878:	00800074 	movhi	r2,1
    987c:	1085b404 	addi	r2,r2,5840
    9880:	10c00035 	stwio	r3,0(r2)
	    		IOWR(PLLCFG_ERR_BASE, 0x00, pllcfgrez);
    9884:	e0fff803 	ldbu	r3,-32(fp)
    9888:	00800074 	movhi	r2,1
    988c:	1085a404 	addi	r2,r2,5776
    9890:	10c00035 	stwio	r3,0(r2)
    9894:	00000d06 	br	98cc <main+0x1d0>
	    	}
	    	else {
	    		pllcfgrez = UpdatePHCFG();
    9898:	0008f800 	call	8f80 <UpdatePHCFG>
    989c:	e0bff805 	stb	r2,-32(fp)
	    		IOWR(PLLCFG_STATUS_BASE, 0x00, PLLCFG_DONE);
    98a0:	00c00044 	movi	r3,1
    98a4:	00800074 	movhi	r2,1
    98a8:	1085b404 	addi	r2,r2,5840
    98ac:	10c00035 	stwio	r3,0(r2)
	    		IOWR(PLLCFG_ERR_BASE, 0x00, pllcfgrez << 2);
    98b0:	e0bff803 	ldbu	r2,-32(fp)
    98b4:	1085883a 	add	r2,r2,r2
    98b8:	1085883a 	add	r2,r2,r2
    98bc:	1007883a 	mov	r3,r2
    98c0:	00800074 	movhi	r2,1
    98c4:	1085a404 	addi	r2,r2,5776
    98c8:	10c00035 	stwio	r3,0(r2)
	    	}

	    }

	    // Check if there is a request for PLL configuration update
	    if((pllcfg_start_old == 0) && (pllcfg_start != 0))
    98cc:	e0bff703 	ldbu	r2,-36(fp)
    98d0:	10000f1e 	bne	r2,zero,9910 <main+0x214>
    98d4:	e0bff743 	ldbu	r2,-35(fp)
    98d8:	10000d26 	beq	r2,zero,9910 <main+0x214>
	    {
	    	IOWR(PLLCFG_STATUS_BASE, 0x00, PLLCFG_BUSY);
    98dc:	00c00084 	movi	r3,2
    98e0:	00800074 	movhi	r2,1
    98e4:	1085b404 	addi	r2,r2,5840
    98e8:	10c00035 	stwio	r3,0(r2)
	    	pllcfgrez = UpdatePLLCFG();
    98ec:	0008afc0 	call	8afc <UpdatePLLCFG>
    98f0:	e0bff805 	stb	r2,-32(fp)
	    	IOWR(PLLCFG_STATUS_BASE, 0x00, (pllcfgrez << 2) | PLLCFG_DONE);
    98f4:	e0bff803 	ldbu	r2,-32(fp)
    98f8:	1085883a 	add	r2,r2,r2
    98fc:	1085883a 	add	r2,r2,r2
    9900:	10c00054 	ori	r3,r2,1
    9904:	00800074 	movhi	r2,1
    9908:	1085b404 	addi	r2,r2,5840
    990c:	10c00035 	stwio	r3,0(r2)
	    }

	    // Check if there is a request for PLL configuration update
	    if((pllrst_start_old == 0) && (pllrst_start != 0))
    9910:	e0bff783 	ldbu	r2,-34(fp)
    9914:	10000b1e 	bne	r2,zero,9944 <main+0x248>
    9918:	e0bff7c3 	ldbu	r2,-33(fp)
    991c:	10000926 	beq	r2,zero,9944 <main+0x248>
	    {
	    	IOWR(PLLCFG_STATUS_BASE, 0x00, PLLCFG_BUSY);
    9920:	00c00084 	movi	r3,2
    9924:	00800074 	movhi	r2,1
    9928:	1085b404 	addi	r2,r2,5840
    992c:	10c00035 	stwio	r3,0(r2)
	    	ResetPLL();
    9930:	00094840 	call	9484 <ResetPLL>
	    	IOWR(PLLCFG_STATUS_BASE, 0x00, PLLCFG_DONE);
    9934:	00c00044 	movi	r3,1
    9938:	00800074 	movhi	r2,1
    993c:	1085b404 	addi	r2,r2,5840
    9940:	10c00035 	stwio	r3,0(r2)
	    }

	    // Update PLL configuration command status
	    pllrst_start_old = pllrst_start;
    9944:	e0bff7c3 	ldbu	r2,-33(fp)
    9948:	e0bff785 	stb	r2,-34(fp)
	    pllrst_start = (IORD(PLLCFG_COMMAND_BASE, 0x00) & 0x04) >> 2;
    994c:	00800074 	movhi	r2,1
    9950:	1085b804 	addi	r2,r2,5856
    9954:	10800037 	ldwio	r2,0(r2)
    9958:	1080010c 	andi	r2,r2,4
    995c:	1005d0ba 	srai	r2,r2,2
    9960:	e0bff7c5 	stb	r2,-33(fp)
	    phcfg_start_old = phcfg_start;
    9964:	e0bff6c3 	ldbu	r2,-37(fp)
    9968:	e0bff685 	stb	r2,-38(fp)
	    phcfg_start = (IORD(PLLCFG_COMMAND_BASE, 0x00) & 0x02) >> 1;
    996c:	00800074 	movhi	r2,1
    9970:	1085b804 	addi	r2,r2,5856
    9974:	10800037 	ldwio	r2,0(r2)
    9978:	1080008c 	andi	r2,r2,2
    997c:	1005d07a 	srai	r2,r2,1
    9980:	e0bff6c5 	stb	r2,-37(fp)
	    pllcfg_start_old = pllcfg_start;
    9984:	e0bff743 	ldbu	r2,-35(fp)
    9988:	e0bff705 	stb	r2,-36(fp)
	    pllcfg_start = IORD(PLLCFG_COMMAND_BASE, 0x00) & 0x01;
    998c:	00800074 	movhi	r2,1
    9990:	1085b804 	addi	r2,r2,5856
    9994:	10800037 	ldwio	r2,0(r2)
    9998:	1080004c 	andi	r2,r2,1
    999c:	e0bff745 	stb	r2,-35(fp)



        spirez = IORD(AV_FIFO_INT_0_BASE, 2);	// Read FIFO Status
    99a0:	00800074 	movhi	r2,1
    99a4:	1085c604 	addi	r2,r2,5912
    99a8:	10800037 	ldwio	r2,0(r2)
    99ac:	e0bffa15 	stw	r2,-24(fp)
        if(!(spirez & 0x01))
    99b0:	e0bffa17 	ldw	r2,-24(fp)
    99b4:	1080004c 	andi	r2,r2,1
    99b8:	103f881e 	bne	r2,zero,97dc <_gp+0xffff4e38>
        {
            IOWR(AV_FIFO_INT_0_BASE, 3, 1);		// Toggle FIFO reset
    99bc:	00c00044 	movi	r3,1
    99c0:	00800074 	movhi	r2,1
    99c4:	1085c704 	addi	r2,r2,5916
    99c8:	10c00035 	stwio	r3,0(r2)
            IOWR(AV_FIFO_INT_0_BASE, 3, 0); // Toggle FIFO reset
    99cc:	0007883a 	mov	r3,zero
    99d0:	00800074 	movhi	r2,1
    99d4:	1085c704 	addi	r2,r2,5916
    99d8:	10c00035 	stwio	r3,0(r2)

        	getFifoData(glEp0Buffer_Rx, 64);
    99dc:	01401004 	movi	r5,64
    99e0:	01000074 	movhi	r4,1
    99e4:	21334104 	addi	r4,r4,-13052
    99e8:	00081280 	call	8128 <getFifoData>

         	memset (glEp0Buffer_Tx, 0, sizeof(glEp0Buffer_Tx)); //fill whole tx buffer with zeros
    99ec:	01801004 	movi	r6,64
    99f0:	000b883a 	mov	r5,zero
    99f4:	01000074 	movhi	r4,1
    99f8:	21333104 	addi	r4,r4,-13116
    99fc:	000b20c0 	call	b20c <memset>
         	cmd_errors = 0;
    9a00:	d020c385 	stb	zero,-31986(gp)

     		LMS_Ctrl_Packet_Tx->Header.Command = LMS_Ctrl_Packet_Rx->Header.Command;
    9a04:	d0a00117 	ldw	r2,-32764(gp)
    9a08:	d0e00217 	ldw	r3,-32760(gp)
    9a0c:	18c00003 	ldbu	r3,0(r3)
    9a10:	10c00005 	stb	r3,0(r2)
     		LMS_Ctrl_Packet_Tx->Header.Data_blocks = LMS_Ctrl_Packet_Rx->Header.Data_blocks;
    9a14:	d0a00117 	ldw	r2,-32764(gp)
    9a18:	d0e00217 	ldw	r3,-32760(gp)
    9a1c:	18c00083 	ldbu	r3,2(r3)
    9a20:	10c00085 	stb	r3,2(r2)
     		LMS_Ctrl_Packet_Tx->Header.Periph_ID = LMS_Ctrl_Packet_Rx->Header.Periph_ID;
    9a24:	d0a00117 	ldw	r2,-32764(gp)
    9a28:	d0e00217 	ldw	r3,-32760(gp)
    9a2c:	18c000c3 	ldbu	r3,3(r3)
    9a30:	10c000c5 	stb	r3,3(r2)
     		LMS_Ctrl_Packet_Tx->Header.Status = STATUS_BUSY_CMD;
    9a34:	d0a00117 	ldw	r2,-32764(gp)
    9a38:	00c000c4 	movi	r3,3
    9a3c:	10c00045 	stb	r3,1(r2)


     		switch(LMS_Ctrl_Packet_Rx->Header.Command)
    9a40:	d0a00217 	ldw	r2,-32760(gp)
    9a44:	10800003 	ldbu	r2,0(r2)
    9a48:	10803fcc 	andi	r2,r2,255
    9a4c:	10c018e8 	cmpgeui	r3,r2,99
    9a50:	1804aa1e 	bne	r3,zero,acfc <main+0x1600>
    9a54:	100690ba 	slli	r3,r2,2
    9a58:	00800074 	movhi	r2,1
    9a5c:	10a69b04 	addi	r2,r2,-26004
    9a60:	1885883a 	add	r2,r3,r2
    9a64:	10800017 	ldw	r2,0(r2)
    9a68:	1000683a 	jmp	r2
    9a6c:	00009bf8 	rdprs	zero,zero,623
    9a70:	0000acfc 	xorhi	zero,zero,691
    9a74:	0000acfc 	xorhi	zero,zero,691
    9a78:	0000acfc 	xorhi	zero,zero,691
    9a7c:	0000acfc 	xorhi	zero,zero,691
    9a80:	0000acfc 	xorhi	zero,zero,691
    9a84:	0000acfc 	xorhi	zero,zero,691
    9a88:	0000acfc 	xorhi	zero,zero,691
    9a8c:	0000acfc 	xorhi	zero,zero,691
    9a90:	0000acfc 	xorhi	zero,zero,691
    9a94:	0000acfc 	xorhi	zero,zero,691
    9a98:	0000acfc 	xorhi	zero,zero,691
    9a9c:	0000acfc 	xorhi	zero,zero,691
    9aa0:	0000acfc 	xorhi	zero,zero,691
    9aa4:	0000acfc 	xorhi	zero,zero,691
    9aa8:	0000acfc 	xorhi	zero,zero,691
    9aac:	0000acfc 	xorhi	zero,zero,691
    9ab0:	0000acfc 	xorhi	zero,zero,691
    9ab4:	0000acfc 	xorhi	zero,zero,691
    9ab8:	0000aa88 	cmpgei	zero,zero,682
    9abc:	0000aba0 	cmpeqi	zero,zero,686
    9ac0:	0000acfc 	xorhi	zero,zero,691
    9ac4:	0000acfc 	xorhi	zero,zero,691
    9ac8:	0000acfc 	xorhi	zero,zero,691
    9acc:	0000acfc 	xorhi	zero,zero,691
    9ad0:	0000acfc 	xorhi	zero,zero,691
    9ad4:	0000acfc 	xorhi	zero,zero,691
    9ad8:	0000acfc 	xorhi	zero,zero,691
    9adc:	0000acfc 	xorhi	zero,zero,691
    9ae0:	0000acfc 	xorhi	zero,zero,691
    9ae4:	0000acfc 	xorhi	zero,zero,691
    9ae8:	0000acfc 	xorhi	zero,zero,691
    9aec:	00009c40 	call	9c4 <__alt_mem_oc_mem-0x763c>
    9af0:	00009da0 	cmpeqi	zero,zero,630
    9af4:	00009eb4 	movhi	zero,634
    9af8:	0000acfc 	xorhi	zero,zero,691
    9afc:	0000acfc 	xorhi	zero,zero,691
    9b00:	0000acfc 	xorhi	zero,zero,691
    9b04:	0000acfc 	xorhi	zero,zero,691
    9b08:	0000acfc 	xorhi	zero,zero,691
    9b0c:	0000acfc 	xorhi	zero,zero,691
    9b10:	0000acfc 	xorhi	zero,zero,691
    9b14:	0000acfc 	xorhi	zero,zero,691
    9b18:	0000acfc 	xorhi	zero,zero,691
    9b1c:	0000acfc 	xorhi	zero,zero,691
    9b20:	0000acfc 	xorhi	zero,zero,691
    9b24:	0000acfc 	xorhi	zero,zero,691
    9b28:	0000acfc 	xorhi	zero,zero,691
    9b2c:	0000acfc 	xorhi	zero,zero,691
    9b30:	0000a190 	cmplti	zero,zero,646
    9b34:	0000acfc 	xorhi	zero,zero,691
    9b38:	0000acfc 	xorhi	zero,zero,691
    9b3c:	0000acfc 	xorhi	zero,zero,691
    9b40:	0000acfc 	xorhi	zero,zero,691
    9b44:	0000acfc 	xorhi	zero,zero,691
    9b48:	0000acfc 	xorhi	zero,zero,691
    9b4c:	0000acfc 	xorhi	zero,zero,691
    9b50:	0000acfc 	xorhi	zero,zero,691
    9b54:	0000acfc 	xorhi	zero,zero,691
    9b58:	0000acfc 	xorhi	zero,zero,691
    9b5c:	0000acfc 	xorhi	zero,zero,691
    9b60:	0000acfc 	xorhi	zero,zero,691
    9b64:	0000acfc 	xorhi	zero,zero,691
    9b68:	0000acfc 	xorhi	zero,zero,691
    9b6c:	0000acfc 	xorhi	zero,zero,691
    9b70:	0000acfc 	xorhi	zero,zero,691
    9b74:	0000acfc 	xorhi	zero,zero,691
    9b78:	0000acfc 	xorhi	zero,zero,691
    9b7c:	0000acfc 	xorhi	zero,zero,691
    9b80:	0000acfc 	xorhi	zero,zero,691
    9b84:	0000acfc 	xorhi	zero,zero,691
    9b88:	0000acfc 	xorhi	zero,zero,691
    9b8c:	0000acfc 	xorhi	zero,zero,691
    9b90:	0000acfc 	xorhi	zero,zero,691
    9b94:	0000acfc 	xorhi	zero,zero,691
    9b98:	0000acfc 	xorhi	zero,zero,691
    9b9c:	0000acfc 	xorhi	zero,zero,691
    9ba0:	0000acfc 	xorhi	zero,zero,691
    9ba4:	0000acfc 	xorhi	zero,zero,691
    9ba8:	0000acfc 	xorhi	zero,zero,691
    9bac:	0000acfc 	xorhi	zero,zero,691
    9bb0:	0000acfc 	xorhi	zero,zero,691
    9bb4:	0000acfc 	xorhi	zero,zero,691
    9bb8:	0000acfc 	xorhi	zero,zero,691
    9bbc:	0000acfc 	xorhi	zero,zero,691
    9bc0:	00009fbc 	xorhi	zero,zero,638
    9bc4:	0000a09c 	xori	zero,zero,642
    9bc8:	0000acfc 	xorhi	zero,zero,691
    9bcc:	0000acfc 	xorhi	zero,zero,691
    9bd0:	0000acfc 	xorhi	zero,zero,691
    9bd4:	0000acfc 	xorhi	zero,zero,691
    9bd8:	0000acfc 	xorhi	zero,zero,691
    9bdc:	0000acfc 	xorhi	zero,zero,691
    9be0:	0000acfc 	xorhi	zero,zero,691
    9be4:	0000acfc 	xorhi	zero,zero,691
    9be8:	0000acfc 	xorhi	zero,zero,691
    9bec:	0000acfc 	xorhi	zero,zero,691
    9bf0:	0000a684 	movi	zero,666
    9bf4:	0000a230 	cmpltui	zero,zero,648
     		{
 				case CMD_GET_INFO:

 					LMS_Ctrl_Packet_Tx->Data_field[0] = FW_VER;
    9bf8:	d0a00117 	ldw	r2,-32764(gp)
    9bfc:	00c00084 	movi	r3,2
    9c00:	10c00205 	stb	r3,8(r2)
 					LMS_Ctrl_Packet_Tx->Data_field[1] = DEV_TYPE;
    9c04:	d0a00117 	ldw	r2,-32764(gp)
    9c08:	00c00404 	movi	r3,16
    9c0c:	10c00245 	stb	r3,9(r2)
 					LMS_Ctrl_Packet_Tx->Data_field[2] = LMS_PROTOCOL_VER;
    9c10:	d0a00117 	ldw	r2,-32764(gp)
    9c14:	00c00044 	movi	r3,1
    9c18:	10c00285 	stb	r3,10(r2)
 					LMS_Ctrl_Packet_Tx->Data_field[3] = HW_VER;
    9c1c:	d0a00117 	ldw	r2,-32764(gp)
    9c20:	100002c5 	stb	zero,11(r2)
 					LMS_Ctrl_Packet_Tx->Data_field[4] = EXP_BOARD;
    9c24:	d0a00117 	ldw	r2,-32764(gp)
    9c28:	00c00044 	movi	r3,1
    9c2c:	10c00305 	stb	r3,12(r2)

 					LMS_Ctrl_Packet_Tx->Header.Status = STATUS_COMPLETED_CMD;
    9c30:	d0a00117 	ldw	r2,-32764(gp)
    9c34:	00c00044 	movi	r3,1
    9c38:	10c00045 	stb	r3,1(r2)
 				break;
    9c3c:	00044606 	br	ad58 <main+0x165c>
				

 				case CMD_LMS_RST:

 					if(!Check_Periph_ID(MAX_ID_LMS7, LMS_Ctrl_Packet_Rx->Header.Periph_ID)) break;
    9c40:	d0a00217 	ldw	r2,-32760(gp)
    9c44:	108000c3 	ldbu	r2,3(r2)
    9c48:	10803fcc 	andi	r2,r2,255
    9c4c:	100b883a 	mov	r5,r2
    9c50:	01000044 	movi	r4,1
    9c54:	00080d00 	call	80d0 <Check_Periph_ID>
    9c58:	10803fcc 	andi	r2,r2,255
    9c5c:	10042b26 	beq	r2,zero,ad0c <main+0x1610>

 					switch (LMS_Ctrl_Packet_Rx->Data_field[0])
    9c60:	d0a00217 	ldw	r2,-32760(gp)
    9c64:	10800203 	ldbu	r2,8(r2)
    9c68:	10803fcc 	andi	r2,r2,255
    9c6c:	10c00060 	cmpeqi	r3,r2,1
    9c70:	1800151e 	bne	r3,zero,9cc8 <main+0x5cc>
    9c74:	10c000a0 	cmpeqi	r3,r2,2
    9c78:	1800251e 	bne	r3,zero,9d10 <main+0x614>
    9c7c:	1000401e 	bne	r2,zero,9d80 <main+0x684>
 					{
 						case LMS_RST_DEACTIVATE:

 		 					switch(LMS_Ctrl_Packet_Rx->Header.Periph_ID)
    9c80:	d0a00217 	ldw	r2,-32760(gp)
    9c84:	108000c3 	ldbu	r2,3(r2)
    9c88:	10803fcc 	andi	r2,r2,255
    9c8c:	10800060 	cmpeqi	r2,r2,1
    9c90:	1000061e 	bne	r2,zero,9cac <main+0x5b0>
 		 					{
 		 						default:
 		 						case 0:
 		 							Modify_BRDSPI16_Reg_bits (BRD_SPI_REG_LMS1_LMS2_CTRL, LMS1_RESET, LMS1_RESET, 1); //high level
    9c94:	01c00044 	movi	r7,1
    9c98:	01800044 	movi	r6,1
    9c9c:	01400044 	movi	r5,1
    9ca0:	010004c4 	movi	r4,19
    9ca4:	00095340 	call	9534 <Modify_BRDSPI16_Reg_bits>
 		 						break;
    9ca8:	00000606 	br	9cc4 <main+0x5c8>
 		 						case 1:
 		 							Modify_BRDSPI16_Reg_bits (BRD_SPI_REG_LMS1_LMS2_CTRL, LMS2_RESET, LMS2_RESET, 1); //high level
    9cac:	01c00044 	movi	r7,1
    9cb0:	01800244 	movi	r6,9
    9cb4:	01400244 	movi	r5,9
    9cb8:	010004c4 	movi	r4,19
    9cbc:	00095340 	call	9534 <Modify_BRDSPI16_Reg_bits>
 		 						break;
    9cc0:	0001883a 	nop
 		 					}

 						break;
    9cc4:	00003206 	br	9d90 <main+0x694>

 						case LMS_RST_ACTIVATE:

 		 					switch(LMS_Ctrl_Packet_Rx->Header.Periph_ID)
    9cc8:	d0a00217 	ldw	r2,-32760(gp)
    9ccc:	108000c3 	ldbu	r2,3(r2)
    9cd0:	10803fcc 	andi	r2,r2,255
    9cd4:	10800060 	cmpeqi	r2,r2,1
    9cd8:	1000061e 	bne	r2,zero,9cf4 <main+0x5f8>
 		 					{
 		 						default:
 		 						case 0:
 		 							Modify_BRDSPI16_Reg_bits (BRD_SPI_REG_LMS1_LMS2_CTRL, LMS1_RESET, LMS1_RESET, 0); //low level
    9cdc:	000f883a 	mov	r7,zero
    9ce0:	01800044 	movi	r6,1
    9ce4:	01400044 	movi	r5,1
    9ce8:	010004c4 	movi	r4,19
    9cec:	00095340 	call	9534 <Modify_BRDSPI16_Reg_bits>
 		 						break;
    9cf0:	00000606 	br	9d0c <main+0x610>
 		 						case 1:
 		 							Modify_BRDSPI16_Reg_bits (BRD_SPI_REG_LMS1_LMS2_CTRL, LMS2_RESET, LMS2_RESET, 0); //low level
    9cf4:	000f883a 	mov	r7,zero
    9cf8:	01800244 	movi	r6,9
    9cfc:	01400244 	movi	r5,9
    9d00:	010004c4 	movi	r4,19
    9d04:	00095340 	call	9534 <Modify_BRDSPI16_Reg_bits>
 		 						break;
    9d08:	0001883a 	nop
 		 					}

 						break;
    9d0c:	00002006 	br	9d90 <main+0x694>

 						case LMS_RST_PULSE:
 		 					switch(LMS_Ctrl_Packet_Rx->Header.Periph_ID)
    9d10:	d0a00217 	ldw	r2,-32760(gp)
    9d14:	108000c3 	ldbu	r2,3(r2)
    9d18:	10803fcc 	andi	r2,r2,255
    9d1c:	10800060 	cmpeqi	r2,r2,1
    9d20:	10000b1e 	bne	r2,zero,9d50 <main+0x654>
 		 					{
 		 						default:
 		 						case 0:
 		 							Modify_BRDSPI16_Reg_bits (BRD_SPI_REG_LMS1_LMS2_CTRL, LMS1_RESET, LMS1_RESET, 0); //low level
    9d24:	000f883a 	mov	r7,zero
    9d28:	01800044 	movi	r6,1
    9d2c:	01400044 	movi	r5,1
    9d30:	010004c4 	movi	r4,19
    9d34:	00095340 	call	9534 <Modify_BRDSPI16_Reg_bits>
 		 							Modify_BRDSPI16_Reg_bits (BRD_SPI_REG_LMS1_LMS2_CTRL, LMS1_RESET, LMS1_RESET, 1); //high level
    9d38:	01c00044 	movi	r7,1
    9d3c:	01800044 	movi	r6,1
    9d40:	01400044 	movi	r5,1
    9d44:	010004c4 	movi	r4,19
    9d48:	00095340 	call	9534 <Modify_BRDSPI16_Reg_bits>
 		 						break;
    9d4c:	00000b06 	br	9d7c <main+0x680>
 		 						case 1:
 		 							Modify_BRDSPI16_Reg_bits (BRD_SPI_REG_LMS1_LMS2_CTRL, LMS2_RESET, LMS2_RESET, 0); //low level
    9d50:	000f883a 	mov	r7,zero
    9d54:	01800244 	movi	r6,9
    9d58:	01400244 	movi	r5,9
    9d5c:	010004c4 	movi	r4,19
    9d60:	00095340 	call	9534 <Modify_BRDSPI16_Reg_bits>
 		 							Modify_BRDSPI16_Reg_bits (BRD_SPI_REG_LMS1_LMS2_CTRL, LMS2_RESET, LMS2_RESET, 1); //high level
    9d64:	01c00044 	movi	r7,1
    9d68:	01800244 	movi	r6,9
    9d6c:	01400244 	movi	r5,9
    9d70:	010004c4 	movi	r4,19
    9d74:	00095340 	call	9534 <Modify_BRDSPI16_Reg_bits>
 		 						break;
    9d78:	0001883a 	nop
 		 					}

 						break;
    9d7c:	00000406 	br	9d90 <main+0x694>

 						default:
 							cmd_errors++;
    9d80:	d0a0c383 	ldbu	r2,-31986(gp)
    9d84:	10800044 	addi	r2,r2,1
    9d88:	d0a0c385 	stb	r2,-31986(gp)
 						break;
    9d8c:	0001883a 	nop
 					}

 					LMS_Ctrl_Packet_Tx->Header.Status = STATUS_COMPLETED_CMD;
    9d90:	d0a00117 	ldw	r2,-32764(gp)
    9d94:	00c00044 	movi	r3,1
    9d98:	10c00045 	stb	r3,1(r2)
 				break;
    9d9c:	0003ee06 	br	ad58 <main+0x165c>


 				case CMD_LMS7002_WR:
 					if(!Check_Periph_ID(MAX_ID_LMS7, LMS_Ctrl_Packet_Rx->Header.Periph_ID)) break;
    9da0:	d0a00217 	ldw	r2,-32760(gp)
    9da4:	108000c3 	ldbu	r2,3(r2)
    9da8:	10803fcc 	andi	r2,r2,255
    9dac:	100b883a 	mov	r5,r2
    9db0:	01000044 	movi	r4,1
    9db4:	00080d00 	call	80d0 <Check_Periph_ID>
    9db8:	10803fcc 	andi	r2,r2,255
    9dbc:	1003d526 	beq	r2,zero,ad14 <main+0x1618>
 					if(Check_many_blocks (4)) break;
    9dc0:	01000104 	movi	r4,4
    9dc4:	000805c0 	call	805c <Check_many_blocks>
    9dc8:	10803fcc 	andi	r2,r2,255
    9dcc:	1003d31e 	bne	r2,zero,ad1c <main+0x1620>

 					for(block = 0; block < LMS_Ctrl_Packet_Rx->Header.Data_blocks; block++)
    9dd0:	d020c305 	stb	zero,-31988(gp)
    9dd4:	00002d06 	br	9e8c <main+0x790>
 					{
 						//Write LMS7 register
 						sbi(LMS_Ctrl_Packet_Rx->Data_field[0 + (block * 4)], 7); //set write bit
    9dd8:	d0e00217 	ldw	r3,-32760(gp)
    9ddc:	d0a0c303 	ldbu	r2,-31988(gp)
    9de0:	10803fcc 	andi	r2,r2,255
    9de4:	1085883a 	add	r2,r2,r2
    9de8:	1085883a 	add	r2,r2,r2
    9dec:	100b883a 	mov	r5,r2
    9df0:	d1200217 	ldw	r4,-32760(gp)
    9df4:	d0a0c303 	ldbu	r2,-31988(gp)
    9df8:	10803fcc 	andi	r2,r2,255
    9dfc:	1085883a 	add	r2,r2,r2
    9e00:	1085883a 	add	r2,r2,r2
    9e04:	2085883a 	add	r2,r4,r2
    9e08:	10800204 	addi	r2,r2,8
    9e0c:	11000003 	ldbu	r4,0(r2)
    9e10:	00bfe004 	movi	r2,-128
    9e14:	2084b03a 	or	r2,r4,r2
    9e18:	1009883a 	mov	r4,r2
    9e1c:	1945883a 	add	r2,r3,r5
    9e20:	10800204 	addi	r2,r2,8
    9e24:	11000005 	stb	r4,0(r2)
 						spirez = alt_avalon_spi_command(FPGA_SPI0_BASE, LMS_Ctrl_Packet_Rx->Header.Periph_ID == 1 ? SPI_NR_LMS7002M_1 : SPI_NR_LMS7002M_0,
    9e28:	d0a00217 	ldw	r2,-32760(gp)
    9e2c:	108000c3 	ldbu	r2,3(r2)
    9e30:	10803fcc 	andi	r2,r2,255
    9e34:	10800060 	cmpeqi	r2,r2,1
    9e38:	11003fcc 	andi	r4,r2,255
 								4, &LMS_Ctrl_Packet_Rx->Data_field[0 + (block * 4)], 0, NULL, 0);
    9e3c:	d0e00217 	ldw	r3,-32760(gp)
    9e40:	d0a0c303 	ldbu	r2,-31988(gp)
    9e44:	10803fcc 	andi	r2,r2,255
    9e48:	1085883a 	add	r2,r2,r2
    9e4c:	1085883a 	add	r2,r2,r2
    9e50:	10800204 	addi	r2,r2,8
    9e54:	1885883a 	add	r2,r3,r2

 					for(block = 0; block < LMS_Ctrl_Packet_Rx->Header.Data_blocks; block++)
 					{
 						//Write LMS7 register
 						sbi(LMS_Ctrl_Packet_Rx->Data_field[0 + (block * 4)], 7); //set write bit
 						spirez = alt_avalon_spi_command(FPGA_SPI0_BASE, LMS_Ctrl_Packet_Rx->Header.Periph_ID == 1 ? SPI_NR_LMS7002M_1 : SPI_NR_LMS7002M_0,
    9e58:	d8000215 	stw	zero,8(sp)
    9e5c:	d8000115 	stw	zero,4(sp)
    9e60:	d8000015 	stw	zero,0(sp)
    9e64:	100f883a 	mov	r7,r2
    9e68:	01800104 	movi	r6,4
    9e6c:	200b883a 	mov	r5,r4
    9e70:	01000074 	movhi	r4,1
    9e74:	21059004 	addi	r4,r4,5696
    9e78:	000b6780 	call	b678 <alt_avalon_spi_command>
    9e7c:	e0bffa15 	stw	r2,-24(fp)

 				case CMD_LMS7002_WR:
 					if(!Check_Periph_ID(MAX_ID_LMS7, LMS_Ctrl_Packet_Rx->Header.Periph_ID)) break;
 					if(Check_many_blocks (4)) break;

 					for(block = 0; block < LMS_Ctrl_Packet_Rx->Header.Data_blocks; block++)
    9e80:	d0a0c303 	ldbu	r2,-31988(gp)
    9e84:	10800044 	addi	r2,r2,1
    9e88:	d0a0c305 	stb	r2,-31988(gp)
    9e8c:	d0a00217 	ldw	r2,-32760(gp)
    9e90:	10800083 	ldbu	r2,2(r2)
    9e94:	d0e0c303 	ldbu	r3,-31988(gp)
    9e98:	10803fcc 	andi	r2,r2,255
    9e9c:	18c03fcc 	andi	r3,r3,255
    9ea0:	18bfcd36 	bltu	r3,r2,9dd8 <_gp+0xffff5434>
 						sbi(LMS_Ctrl_Packet_Rx->Data_field[0 + (block * 4)], 7); //set write bit
 						spirez = alt_avalon_spi_command(FPGA_SPI0_BASE, LMS_Ctrl_Packet_Rx->Header.Periph_ID == 1 ? SPI_NR_LMS7002M_1 : SPI_NR_LMS7002M_0,
 								4, &LMS_Ctrl_Packet_Rx->Data_field[0 + (block * 4)], 0, NULL, 0);
 					}

 					LMS_Ctrl_Packet_Tx->Header.Status = STATUS_COMPLETED_CMD;
    9ea4:	d0a00117 	ldw	r2,-32764(gp)
    9ea8:	00c00044 	movi	r3,1
    9eac:	10c00045 	stb	r3,1(r2)
 				break;
    9eb0:	0003a906 	br	ad58 <main+0x165c>


 				case CMD_LMS7002_RD:
 					if(Check_many_blocks (4)) break;
    9eb4:	01000104 	movi	r4,4
    9eb8:	000805c0 	call	805c <Check_many_blocks>
    9ebc:	10803fcc 	andi	r2,r2,255
    9ec0:	1003981e 	bne	r2,zero,ad24 <main+0x1628>

 					for(block = 0; block < LMS_Ctrl_Packet_Rx->Header.Data_blocks; block++)
    9ec4:	d020c305 	stb	zero,-31988(gp)
    9ec8:	00003206 	br	9f94 <main+0x898>
 					{
 						//Read LMS7 register
 						cbi(LMS_Ctrl_Packet_Rx->Data_field[0 + (block * 2)], 7);  //clear write bit
    9ecc:	d0e00217 	ldw	r3,-32760(gp)
    9ed0:	d0a0c303 	ldbu	r2,-31988(gp)
    9ed4:	10803fcc 	andi	r2,r2,255
    9ed8:	1085883a 	add	r2,r2,r2
    9edc:	100b883a 	mov	r5,r2
    9ee0:	d1200217 	ldw	r4,-32760(gp)
    9ee4:	d0a0c303 	ldbu	r2,-31988(gp)
    9ee8:	10803fcc 	andi	r2,r2,255
    9eec:	1085883a 	add	r2,r2,r2
    9ef0:	2085883a 	add	r2,r4,r2
    9ef4:	10800204 	addi	r2,r2,8
    9ef8:	10800003 	ldbu	r2,0(r2)
    9efc:	10801fcc 	andi	r2,r2,127
    9f00:	1009883a 	mov	r4,r2
    9f04:	1945883a 	add	r2,r3,r5
    9f08:	10800204 	addi	r2,r2,8
    9f0c:	11000005 	stb	r4,0(r2)
 						spirez = alt_avalon_spi_command(FPGA_SPI0_BASE, LMS_Ctrl_Packet_Rx->Header.Periph_ID == 1 ? SPI_NR_LMS7002M_1 : SPI_NR_LMS7002M_0,
    9f10:	d0a00217 	ldw	r2,-32760(gp)
    9f14:	108000c3 	ldbu	r2,3(r2)
    9f18:	10803fcc 	andi	r2,r2,255
    9f1c:	10800060 	cmpeqi	r2,r2,1
    9f20:	11003fcc 	andi	r4,r2,255
 								2, &LMS_Ctrl_Packet_Rx->Data_field[0 + (block * 2)], 2, &LMS_Ctrl_Packet_Tx->Data_field[2 + (block * 4)], 0);
    9f24:	d0e00217 	ldw	r3,-32760(gp)
    9f28:	d0a0c303 	ldbu	r2,-31988(gp)
    9f2c:	10803fcc 	andi	r2,r2,255
    9f30:	1085883a 	add	r2,r2,r2
    9f34:	10800204 	addi	r2,r2,8
    9f38:	188b883a 	add	r5,r3,r2
    9f3c:	d0e00117 	ldw	r3,-32764(gp)
    9f40:	d0a0c303 	ldbu	r2,-31988(gp)
    9f44:	10803fcc 	andi	r2,r2,255
    9f48:	1085883a 	add	r2,r2,r2
    9f4c:	1085883a 	add	r2,r2,r2
    9f50:	10800084 	addi	r2,r2,2
    9f54:	10800204 	addi	r2,r2,8
    9f58:	1885883a 	add	r2,r3,r2

 					for(block = 0; block < LMS_Ctrl_Packet_Rx->Header.Data_blocks; block++)
 					{
 						//Read LMS7 register
 						cbi(LMS_Ctrl_Packet_Rx->Data_field[0 + (block * 2)], 7);  //clear write bit
 						spirez = alt_avalon_spi_command(FPGA_SPI0_BASE, LMS_Ctrl_Packet_Rx->Header.Periph_ID == 1 ? SPI_NR_LMS7002M_1 : SPI_NR_LMS7002M_0,
    9f5c:	d8000215 	stw	zero,8(sp)
    9f60:	d8800115 	stw	r2,4(sp)
    9f64:	00800084 	movi	r2,2
    9f68:	d8800015 	stw	r2,0(sp)
    9f6c:	280f883a 	mov	r7,r5
    9f70:	01800084 	movi	r6,2
    9f74:	200b883a 	mov	r5,r4
    9f78:	01000074 	movhi	r4,1
    9f7c:	21059004 	addi	r4,r4,5696
    9f80:	000b6780 	call	b678 <alt_avalon_spi_command>
    9f84:	e0bffa15 	stw	r2,-24(fp)


 				case CMD_LMS7002_RD:
 					if(Check_many_blocks (4)) break;

 					for(block = 0; block < LMS_Ctrl_Packet_Rx->Header.Data_blocks; block++)
    9f88:	d0a0c303 	ldbu	r2,-31988(gp)
    9f8c:	10800044 	addi	r2,r2,1
    9f90:	d0a0c305 	stb	r2,-31988(gp)
    9f94:	d0a00217 	ldw	r2,-32760(gp)
    9f98:	10800083 	ldbu	r2,2(r2)
    9f9c:	d0e0c303 	ldbu	r3,-31988(gp)
    9fa0:	10803fcc 	andi	r2,r2,255
    9fa4:	18c03fcc 	andi	r3,r3,255
    9fa8:	18bfc836 	bltu	r3,r2,9ecc <_gp+0xffff5528>
 						cbi(LMS_Ctrl_Packet_Rx->Data_field[0 + (block * 2)], 7);  //clear write bit
 						spirez = alt_avalon_spi_command(FPGA_SPI0_BASE, LMS_Ctrl_Packet_Rx->Header.Periph_ID == 1 ? SPI_NR_LMS7002M_1 : SPI_NR_LMS7002M_0,
 								2, &LMS_Ctrl_Packet_Rx->Data_field[0 + (block * 2)], 2, &LMS_Ctrl_Packet_Tx->Data_field[2 + (block * 4)], 0);
 					}

 					LMS_Ctrl_Packet_Tx->Header.Status = STATUS_COMPLETED_CMD;
    9fac:	d0a00117 	ldw	r2,-32764(gp)
    9fb0:	00c00044 	movi	r3,1
    9fb4:	10c00045 	stb	r3,1(r2)
 				break;
    9fb8:	00036706 	br	ad58 <main+0x165c>


 	 			case CMD_BRDSPI16_WR:
 	 				if(Check_many_blocks (4)) break;
    9fbc:	01000104 	movi	r4,4
    9fc0:	000805c0 	call	805c <Check_many_blocks>
    9fc4:	10803fcc 	andi	r2,r2,255
    9fc8:	1003581e 	bne	r2,zero,ad2c <main+0x1630>

 	 				for(block = 0; block < LMS_Ctrl_Packet_Rx->Header.Data_blocks; block++)
    9fcc:	d020c305 	stb	zero,-31988(gp)
    9fd0:	00002806 	br	a074 <main+0x978>
 	 				{
 	 					//write reg addr
 	 					sbi(LMS_Ctrl_Packet_Rx->Data_field[0 + (block * 4)], 7); //set write bit
    9fd4:	d0e00217 	ldw	r3,-32760(gp)
    9fd8:	d0a0c303 	ldbu	r2,-31988(gp)
    9fdc:	10803fcc 	andi	r2,r2,255
    9fe0:	1085883a 	add	r2,r2,r2
    9fe4:	1085883a 	add	r2,r2,r2
    9fe8:	100b883a 	mov	r5,r2
    9fec:	d1200217 	ldw	r4,-32760(gp)
    9ff0:	d0a0c303 	ldbu	r2,-31988(gp)
    9ff4:	10803fcc 	andi	r2,r2,255
    9ff8:	1085883a 	add	r2,r2,r2
    9ffc:	1085883a 	add	r2,r2,r2
    a000:	2085883a 	add	r2,r4,r2
    a004:	10800204 	addi	r2,r2,8
    a008:	11000003 	ldbu	r4,0(r2)
    a00c:	00bfe004 	movi	r2,-128
    a010:	2084b03a 	or	r2,r4,r2
    a014:	1009883a 	mov	r4,r2
    a018:	1945883a 	add	r2,r3,r5
    a01c:	10800204 	addi	r2,r2,8
    a020:	11000005 	stb	r4,0(r2)

 	 					spirez = alt_avalon_spi_command(FPGA_SPI0_BASE, SPI_NR_FPGA, 4, &LMS_Ctrl_Packet_Rx->Data_field[0 + (block * 4)], 0, NULL, 0);
    a024:	d0e00217 	ldw	r3,-32760(gp)
    a028:	d0a0c303 	ldbu	r2,-31988(gp)
    a02c:	10803fcc 	andi	r2,r2,255
    a030:	1085883a 	add	r2,r2,r2
    a034:	1085883a 	add	r2,r2,r2
    a038:	10800204 	addi	r2,r2,8
    a03c:	1885883a 	add	r2,r3,r2
    a040:	d8000215 	stw	zero,8(sp)
    a044:	d8000115 	stw	zero,4(sp)
    a048:	d8000015 	stw	zero,0(sp)
    a04c:	100f883a 	mov	r7,r2
    a050:	01800104 	movi	r6,4
    a054:	01400184 	movi	r5,6
    a058:	01000074 	movhi	r4,1
    a05c:	21059004 	addi	r4,r4,5696
    a060:	000b6780 	call	b678 <alt_avalon_spi_command>
    a064:	e0bffa15 	stw	r2,-24(fp)


 	 			case CMD_BRDSPI16_WR:
 	 				if(Check_many_blocks (4)) break;

 	 				for(block = 0; block < LMS_Ctrl_Packet_Rx->Header.Data_blocks; block++)
    a068:	d0a0c303 	ldbu	r2,-31988(gp)
    a06c:	10800044 	addi	r2,r2,1
    a070:	d0a0c305 	stb	r2,-31988(gp)
    a074:	d0a00217 	ldw	r2,-32760(gp)
    a078:	10800083 	ldbu	r2,2(r2)
    a07c:	d0e0c303 	ldbu	r3,-31988(gp)
    a080:	10803fcc 	andi	r2,r2,255
    a084:	18c03fcc 	andi	r3,r3,255
    a088:	18bfd236 	bltu	r3,r2,9fd4 <_gp+0xffff5630>
 	 					sbi(LMS_Ctrl_Packet_Rx->Data_field[0 + (block * 4)], 7); //set write bit

 	 					spirez = alt_avalon_spi_command(FPGA_SPI0_BASE, SPI_NR_FPGA, 4, &LMS_Ctrl_Packet_Rx->Data_field[0 + (block * 4)], 0, NULL, 0);
 	 				}

 	 				LMS_Ctrl_Packet_Tx->Header.Status = STATUS_COMPLETED_CMD;
    a08c:	d0a00117 	ldw	r2,-32764(gp)
    a090:	00c00044 	movi	r3,1
    a094:	10c00045 	stb	r3,1(r2)
 	 			break;
    a098:	00032f06 	br	ad58 <main+0x165c>


 				case CMD_BRDSPI16_RD:
 					if(Check_many_blocks (4)) break;
    a09c:	01000104 	movi	r4,4
    a0a0:	000805c0 	call	805c <Check_many_blocks>
    a0a4:	10803fcc 	andi	r2,r2,255
    a0a8:	1003221e 	bne	r2,zero,ad34 <main+0x1638>

 					for(block = 0; block < LMS_Ctrl_Packet_Rx->Header.Data_blocks; block++)
    a0ac:	d020c305 	stb	zero,-31988(gp)
    a0b0:	00002d06 	br	a168 <main+0xa6c>
 					{

 						//write reg addr
 						cbi(LMS_Ctrl_Packet_Rx->Data_field[0 + (block * 2)], 7);  //clear write bit
    a0b4:	d0e00217 	ldw	r3,-32760(gp)
    a0b8:	d0a0c303 	ldbu	r2,-31988(gp)
    a0bc:	10803fcc 	andi	r2,r2,255
    a0c0:	1085883a 	add	r2,r2,r2
    a0c4:	100b883a 	mov	r5,r2
    a0c8:	d1200217 	ldw	r4,-32760(gp)
    a0cc:	d0a0c303 	ldbu	r2,-31988(gp)
    a0d0:	10803fcc 	andi	r2,r2,255
    a0d4:	1085883a 	add	r2,r2,r2
    a0d8:	2085883a 	add	r2,r4,r2
    a0dc:	10800204 	addi	r2,r2,8
    a0e0:	10800003 	ldbu	r2,0(r2)
    a0e4:	10801fcc 	andi	r2,r2,127
    a0e8:	1009883a 	mov	r4,r2
    a0ec:	1945883a 	add	r2,r3,r5
    a0f0:	10800204 	addi	r2,r2,8
    a0f4:	11000005 	stb	r4,0(r2)

 						spirez = alt_avalon_spi_command(FPGA_SPI0_BASE, SPI_NR_FPGA, 2, &LMS_Ctrl_Packet_Rx->Data_field[0 + (block * 2)], 2, &LMS_Ctrl_Packet_Tx->Data_field[2 + (block * 4)], 0);
    a0f8:	d0e00217 	ldw	r3,-32760(gp)
    a0fc:	d0a0c303 	ldbu	r2,-31988(gp)
    a100:	10803fcc 	andi	r2,r2,255
    a104:	1085883a 	add	r2,r2,r2
    a108:	10800204 	addi	r2,r2,8
    a10c:	1889883a 	add	r4,r3,r2
    a110:	d0e00117 	ldw	r3,-32764(gp)
    a114:	d0a0c303 	ldbu	r2,-31988(gp)
    a118:	10803fcc 	andi	r2,r2,255
    a11c:	1085883a 	add	r2,r2,r2
    a120:	1085883a 	add	r2,r2,r2
    a124:	10800084 	addi	r2,r2,2
    a128:	10800204 	addi	r2,r2,8
    a12c:	1885883a 	add	r2,r3,r2
    a130:	d8000215 	stw	zero,8(sp)
    a134:	d8800115 	stw	r2,4(sp)
    a138:	00800084 	movi	r2,2
    a13c:	d8800015 	stw	r2,0(sp)
    a140:	200f883a 	mov	r7,r4
    a144:	01800084 	movi	r6,2
    a148:	01400184 	movi	r5,6
    a14c:	01000074 	movhi	r4,1
    a150:	21059004 	addi	r4,r4,5696
    a154:	000b6780 	call	b678 <alt_avalon_spi_command>
    a158:	e0bffa15 	stw	r2,-24(fp)


 				case CMD_BRDSPI16_RD:
 					if(Check_many_blocks (4)) break;

 					for(block = 0; block < LMS_Ctrl_Packet_Rx->Header.Data_blocks; block++)
    a15c:	d0a0c303 	ldbu	r2,-31988(gp)
    a160:	10800044 	addi	r2,r2,1
    a164:	d0a0c305 	stb	r2,-31988(gp)
    a168:	d0a00217 	ldw	r2,-32760(gp)
    a16c:	10800083 	ldbu	r2,2(r2)
    a170:	d0e0c303 	ldbu	r3,-31988(gp)
    a174:	10803fcc 	andi	r2,r2,255
    a178:	18c03fcc 	andi	r3,r3,255
    a17c:	18bfcd36 	bltu	r3,r2,a0b4 <_gp+0xffff5710>
 						cbi(LMS_Ctrl_Packet_Rx->Data_field[0 + (block * 2)], 7);  //clear write bit

 						spirez = alt_avalon_spi_command(FPGA_SPI0_BASE, SPI_NR_FPGA, 2, &LMS_Ctrl_Packet_Rx->Data_field[0 + (block * 2)], 2, &LMS_Ctrl_Packet_Tx->Data_field[2 + (block * 4)], 0);
 					}

 					LMS_Ctrl_Packet_Tx->Header.Status = STATUS_COMPLETED_CMD;
    a180:	d0a00117 	ldw	r2,-32764(gp)
    a184:	00c00044 	movi	r3,1
    a188:	10c00045 	stb	r3,1(r2)
 				break;
    a18c:	0002f206 	br	ad58 <main+0x165c>


 				case CMD_ADF4002_WR:
 					if(Check_many_blocks (3)) break;
    a190:	010000c4 	movi	r4,3
    a194:	000805c0 	call	805c <Check_many_blocks>
    a198:	10803fcc 	andi	r2,r2,255
    a19c:	1002e71e 	bne	r2,zero,ad3c <main+0x1640>

 					Control_TCXO_DAC (0, NULL); //set DAC out to three-state
    a1a0:	000b883a 	mov	r5,zero
    a1a4:	0009883a 	mov	r4,zero
    a1a8:	00087b40 	call	87b4 <Control_TCXO_DAC>

 					for(block = 0; block < LMS_Ctrl_Packet_Rx->Header.Data_blocks; block++)
    a1ac:	d020c305 	stb	zero,-31988(gp)
    a1b0:	00000e06 	br	a1ec <main+0xaf0>
 					{
 						Control_TCXO_ADF (1, &LMS_Ctrl_Packet_Rx->Data_field[0 + (block*3)]); //write data to ADF
    a1b4:	d1200217 	ldw	r4,-32760(gp)
    a1b8:	d0a0c303 	ldbu	r2,-31988(gp)
    a1bc:	10c03fcc 	andi	r3,r2,255
    a1c0:	1805883a 	mov	r2,r3
    a1c4:	1085883a 	add	r2,r2,r2
    a1c8:	10c5883a 	add	r2,r2,r3
    a1cc:	10800204 	addi	r2,r2,8
    a1d0:	2085883a 	add	r2,r4,r2
    a1d4:	100b883a 	mov	r5,r2
    a1d8:	01000044 	movi	r4,1
    a1dc:	00088800 	call	8880 <Control_TCXO_ADF>
 				case CMD_ADF4002_WR:
 					if(Check_many_blocks (3)) break;

 					Control_TCXO_DAC (0, NULL); //set DAC out to three-state

 					for(block = 0; block < LMS_Ctrl_Packet_Rx->Header.Data_blocks; block++)
    a1e0:	d0a0c303 	ldbu	r2,-31988(gp)
    a1e4:	10800044 	addi	r2,r2,1
    a1e8:	d0a0c305 	stb	r2,-31988(gp)
    a1ec:	d0a00217 	ldw	r2,-32760(gp)
    a1f0:	10800083 	ldbu	r2,2(r2)
    a1f4:	d0e0c303 	ldbu	r3,-31988(gp)
    a1f8:	10803fcc 	andi	r2,r2,255
    a1fc:	18c03fcc 	andi	r3,r3,255
    a200:	18bfec36 	bltu	r3,r2,a1b4 <_gp+0xffff5810>
 					{
 						Control_TCXO_ADF (1, &LMS_Ctrl_Packet_Rx->Data_field[0 + (block*3)]); //write data to ADF
 					}

 					if(cmd_errors) LMS_Ctrl_Packet_Tx->Header.Status = STATUS_INVALID_PERIPH_ID_CMD;
    a204:	d0a0c383 	ldbu	r2,-31986(gp)
    a208:	10803fcc 	andi	r2,r2,255
    a20c:	10000426 	beq	r2,zero,a220 <main+0xb24>
    a210:	d0a00117 	ldw	r2,-32764(gp)
    a214:	00c00204 	movi	r3,8
    a218:	10c00045 	stb	r3,1(r2)
 					else LMS_Ctrl_Packet_Tx->Header.Status = STATUS_COMPLETED_CMD;
 				break;
    a21c:	0002ce06 	br	ad58 <main+0x165c>
 					{
 						Control_TCXO_ADF (1, &LMS_Ctrl_Packet_Rx->Data_field[0 + (block*3)]); //write data to ADF
 					}

 					if(cmd_errors) LMS_Ctrl_Packet_Tx->Header.Status = STATUS_INVALID_PERIPH_ID_CMD;
 					else LMS_Ctrl_Packet_Tx->Header.Status = STATUS_COMPLETED_CMD;
    a220:	d0a00117 	ldw	r2,-32764(gp)
    a224:	00c00044 	movi	r3,1
    a228:	10c00045 	stb	r3,1(r2)
 				break;
    a22c:	0002ca06 	br	ad58 <main+0x165c>


				case CMD_ANALOG_VAL_RD:

					for(block = 0; block < LMS_Ctrl_Packet_Rx->Header.Data_blocks; block++)
    a230:	d020c305 	stb	zero,-31988(gp)
    a234:	00010906 	br	a65c <main+0xf60>
					{
						switch (LMS_Ctrl_Packet_Rx->Data_field[0 + (block)])//ch
    a238:	d0e00217 	ldw	r3,-32760(gp)
    a23c:	d0a0c303 	ldbu	r2,-31988(gp)
    a240:	10803fcc 	andi	r2,r2,255
    a244:	1885883a 	add	r2,r3,r2
    a248:	10800204 	addi	r2,r2,8
    a24c:	10800003 	ldbu	r2,0(r2)
    a250:	10803fcc 	andi	r2,r2,255
    a254:	10c00060 	cmpeqi	r3,r2,1
    a258:	1800381e 	bne	r3,zero,a33c <main+0xc40>
    a25c:	10c00088 	cmpgei	r3,r2,2
    a260:	1800021e 	bne	r3,zero,a26c <main+0xb70>
    a264:	10000626 	beq	r2,zero,a280 <main+0xb84>
    a268:	0000f506 	br	a640 <main+0xf44>
    a26c:	10c000a0 	cmpeqi	r3,r2,2
    a270:	1800951e 	bne	r3,zero,a4c8 <main+0xdcc>
    a274:	108000e0 	cmpeqi	r2,r2,3
    a278:	1000c21e 	bne	r2,zero,a584 <main+0xe88>
    a27c:	0000f006 	br	a640 <main+0xf44>
						{
							case 0://dac val

								LMS_Ctrl_Packet_Tx->Data_field[0 + (block * 4)] = LMS_Ctrl_Packet_Rx->Data_field[block]; //ch
    a280:	d1200117 	ldw	r4,-32764(gp)
    a284:	d0a0c303 	ldbu	r2,-31988(gp)
    a288:	10803fcc 	andi	r2,r2,255
    a28c:	1085883a 	add	r2,r2,r2
    a290:	1085883a 	add	r2,r2,r2
    a294:	100b883a 	mov	r5,r2
    a298:	d0e00217 	ldw	r3,-32760(gp)
    a29c:	d0a0c303 	ldbu	r2,-31988(gp)
    a2a0:	10803fcc 	andi	r2,r2,255
    a2a4:	1885883a 	add	r2,r3,r2
    a2a8:	10800204 	addi	r2,r2,8
    a2ac:	10c00003 	ldbu	r3,0(r2)
    a2b0:	2145883a 	add	r2,r4,r5
    a2b4:	10800204 	addi	r2,r2,8
    a2b8:	10c00005 	stb	r3,0(r2)
								LMS_Ctrl_Packet_Tx->Data_field[1 + (block * 4)] = 0x00; //RAW //unit, power
    a2bc:	d0e00117 	ldw	r3,-32764(gp)
    a2c0:	d0a0c303 	ldbu	r2,-31988(gp)
    a2c4:	10803fcc 	andi	r2,r2,255
    a2c8:	1085883a 	add	r2,r2,r2
    a2cc:	1085883a 	add	r2,r2,r2
    a2d0:	10800044 	addi	r2,r2,1
    a2d4:	1885883a 	add	r2,r3,r2
    a2d8:	10800204 	addi	r2,r2,8
    a2dc:	10000005 	stb	zero,0(r2)

								//LMS_Ctrl_Packet_Tx->Data_field[2 + (block * 4)] = 0; //signed val, MSB byte
								//LMS_Ctrl_Packet_Tx->Data_field[3 + (block * 4)] = dac_val; //signed val, LSB byte
								LMS_Ctrl_Packet_Tx->Data_field[2 + (block * 4)] = (dac_val >> 8) & 0xFF; //unsigned val, MSB byte
    a2e0:	d0e00117 	ldw	r3,-32764(gp)
    a2e4:	d0a0c303 	ldbu	r2,-31988(gp)
    a2e8:	10803fcc 	andi	r2,r2,255
    a2ec:	1085883a 	add	r2,r2,r2
    a2f0:	1085883a 	add	r2,r2,r2
    a2f4:	10800084 	addi	r2,r2,2
    a2f8:	d120000b 	ldhu	r4,-32768(gp)
    a2fc:	213fffcc 	andi	r4,r4,65535
    a300:	2008d23a 	srli	r4,r4,8
    a304:	1885883a 	add	r2,r3,r2
    a308:	10800204 	addi	r2,r2,8
    a30c:	11000005 	stb	r4,0(r2)
								LMS_Ctrl_Packet_Tx->Data_field[3 + (block * 4)] = dac_val & 0xFF; //unsigned val, LSB byte
    a310:	d0e00117 	ldw	r3,-32764(gp)
    a314:	d0a0c303 	ldbu	r2,-31988(gp)
    a318:	10803fcc 	andi	r2,r2,255
    a31c:	1085883a 	add	r2,r2,r2
    a320:	1085883a 	add	r2,r2,r2
    a324:	108000c4 	addi	r2,r2,3
    a328:	d120000b 	ldhu	r4,-32768(gp)
    a32c:	1885883a 	add	r2,r3,r2
    a330:	10800204 	addi	r2,r2,8
    a334:	11000005 	stb	r4,0(r2)

							break;
    a338:	0000c506 	br	a650 <main+0xf54>

							case 1: //temperature

								spirez = I2C_start(I2C_OPENCORES_0_BASE, LM75_I2C_ADDR, 0);
    a33c:	000d883a 	mov	r6,zero
    a340:	01401204 	movi	r5,72
    a344:	01000074 	movhi	r4,1
    a348:	21059804 	addi	r4,r4,5728
    a34c:	000b92c0 	call	b92c <I2C_start>
    a350:	e0bffa15 	stw	r2,-24(fp)
								spirez = I2C_write(I2C_OPENCORES_0_BASE, 0x00, 1);				// Pointer = temperature register
    a354:	01800044 	movi	r6,1
    a358:	000b883a 	mov	r5,zero
    a35c:	01000074 	movhi	r4,1
    a360:	21059804 	addi	r4,r4,5728
    a364:	000ba800 	call	ba80 <I2C_write>
    a368:	e0bffa15 	stw	r2,-24(fp)
								spirez = I2C_start(I2C_OPENCORES_0_BASE, LM75_I2C_ADDR, 1);
    a36c:	01800044 	movi	r6,1
    a370:	01401204 	movi	r5,72
    a374:	01000074 	movhi	r4,1
    a378:	21059804 	addi	r4,r4,5728
    a37c:	000b92c0 	call	b92c <I2C_start>
    a380:	e0bffa15 	stw	r2,-24(fp)

								// Read temperature and recalculate
								converted_val = (signed short int)I2C_read(I2C_OPENCORES_0_BASE, 0);
    a384:	000b883a 	mov	r5,zero
    a388:	01000074 	movhi	r4,1
    a38c:	21059804 	addi	r4,r4,5728
    a390:	000b9ec0 	call	b9ec <I2C_read>
    a394:	d0a0008d 	sth	r2,-32766(gp)
								converted_val = converted_val << 8;
    a398:	d0a0008b 	ldhu	r2,-32766(gp)
    a39c:	10bfffcc 	andi	r2,r2,65535
    a3a0:	10a0001c 	xori	r2,r2,32768
    a3a4:	10a00004 	addi	r2,r2,-32768
    a3a8:	1004923a 	slli	r2,r2,8
    a3ac:	d0a0008d 	sth	r2,-32766(gp)
								converted_val = 10 * (converted_val >> 8);
    a3b0:	d0a0008b 	ldhu	r2,-32766(gp)
    a3b4:	10bfffcc 	andi	r2,r2,65535
    a3b8:	10a0001c 	xori	r2,r2,32768
    a3bc:	10a00004 	addi	r2,r2,-32768
    a3c0:	1005d23a 	srai	r2,r2,8
    a3c4:	01400284 	movi	r5,10
    a3c8:	1009883a 	mov	r4,r2
    a3cc:	000b1e40 	call	b1e4 <__mulsi3>
    a3d0:	d0a0008d 	sth	r2,-32766(gp)
								spirez = I2C_read(I2C_OPENCORES_0_BASE, 1);
    a3d4:	01400044 	movi	r5,1
    a3d8:	01000074 	movhi	r4,1
    a3dc:	21059804 	addi	r4,r4,5728
    a3e0:	000b9ec0 	call	b9ec <I2C_read>
    a3e4:	e0bffa15 	stw	r2,-24(fp)
								if(spirez & 0x80) converted_val = converted_val + 5;
    a3e8:	e0bffa17 	ldw	r2,-24(fp)
    a3ec:	1080200c 	andi	r2,r2,128
    a3f0:	10000326 	beq	r2,zero,a400 <main+0xd04>
    a3f4:	d0a0008b 	ldhu	r2,-32766(gp)
    a3f8:	10800144 	addi	r2,r2,5
    a3fc:	d0a0008d 	sth	r2,-32766(gp)

								LMS_Ctrl_Packet_Tx->Data_field[0 + (block * 4)] = LMS_Ctrl_Packet_Rx->Data_field[block]; //ch
    a400:	d1200117 	ldw	r4,-32764(gp)
    a404:	d0a0c303 	ldbu	r2,-31988(gp)
    a408:	10803fcc 	andi	r2,r2,255
    a40c:	1085883a 	add	r2,r2,r2
    a410:	1085883a 	add	r2,r2,r2
    a414:	100b883a 	mov	r5,r2
    a418:	d0e00217 	ldw	r3,-32760(gp)
    a41c:	d0a0c303 	ldbu	r2,-31988(gp)
    a420:	10803fcc 	andi	r2,r2,255
    a424:	1885883a 	add	r2,r3,r2
    a428:	10800204 	addi	r2,r2,8
    a42c:	10c00003 	ldbu	r3,0(r2)
    a430:	2145883a 	add	r2,r4,r5
    a434:	10800204 	addi	r2,r2,8
    a438:	10c00005 	stb	r3,0(r2)
								LMS_Ctrl_Packet_Tx->Data_field[1 + (block * 4)] = 0x50; //mC //unit, power
    a43c:	d0e00117 	ldw	r3,-32764(gp)
    a440:	d0a0c303 	ldbu	r2,-31988(gp)
    a444:	10803fcc 	andi	r2,r2,255
    a448:	1085883a 	add	r2,r2,r2
    a44c:	1085883a 	add	r2,r2,r2
    a450:	10800044 	addi	r2,r2,1
    a454:	1885883a 	add	r2,r3,r2
    a458:	10800204 	addi	r2,r2,8
    a45c:	00c01404 	movi	r3,80
    a460:	10c00005 	stb	r3,0(r2)

								LMS_Ctrl_Packet_Tx->Data_field[2 + (block * 4)] = (converted_val >> 8); //signed val, MSB byte
    a464:	d0e00117 	ldw	r3,-32764(gp)
    a468:	d0a0c303 	ldbu	r2,-31988(gp)
    a46c:	10803fcc 	andi	r2,r2,255
    a470:	1085883a 	add	r2,r2,r2
    a474:	1085883a 	add	r2,r2,r2
    a478:	10800084 	addi	r2,r2,2
    a47c:	d120008b 	ldhu	r4,-32766(gp)
    a480:	213fffcc 	andi	r4,r4,65535
    a484:	2120001c 	xori	r4,r4,32768
    a488:	21200004 	addi	r4,r4,-32768
    a48c:	2009d23a 	srai	r4,r4,8
    a490:	1885883a 	add	r2,r3,r2
    a494:	10800204 	addi	r2,r2,8
    a498:	11000005 	stb	r4,0(r2)
								LMS_Ctrl_Packet_Tx->Data_field[3 + (block * 4)] = converted_val; //signed val, LSB byte
    a49c:	d0e00117 	ldw	r3,-32764(gp)
    a4a0:	d0a0c303 	ldbu	r2,-31988(gp)
    a4a4:	10803fcc 	andi	r2,r2,255
    a4a8:	1085883a 	add	r2,r2,r2
    a4ac:	1085883a 	add	r2,r2,r2
    a4b0:	108000c4 	addi	r2,r2,3
    a4b4:	d120008b 	ldhu	r4,-32766(gp)
    a4b8:	1885883a 	add	r2,r3,r2
    a4bc:	10800204 	addi	r2,r2,8
    a4c0:	11000005 	stb	r4,0(r2)

							break;
    a4c4:	00006206 	br	a650 <main+0xf54>

							case 2://wiper 0 position
								LMS_Ctrl_Packet_Tx->Data_field[0 + (block * 4)] = LMS_Ctrl_Packet_Rx->Data_field[block]; //ch
    a4c8:	d1200117 	ldw	r4,-32764(gp)
    a4cc:	d0a0c303 	ldbu	r2,-31988(gp)
    a4d0:	10803fcc 	andi	r2,r2,255
    a4d4:	1085883a 	add	r2,r2,r2
    a4d8:	1085883a 	add	r2,r2,r2
    a4dc:	100b883a 	mov	r5,r2
    a4e0:	d0e00217 	ldw	r3,-32760(gp)
    a4e4:	d0a0c303 	ldbu	r2,-31988(gp)
    a4e8:	10803fcc 	andi	r2,r2,255
    a4ec:	1885883a 	add	r2,r3,r2
    a4f0:	10800204 	addi	r2,r2,8
    a4f4:	10c00003 	ldbu	r3,0(r2)
    a4f8:	2145883a 	add	r2,r4,r5
    a4fc:	10800204 	addi	r2,r2,8
    a500:	10c00005 	stb	r3,0(r2)
								LMS_Ctrl_Packet_Tx->Data_field[1 + (block * 4)] = 0x00; //RAW //unit, power
    a504:	d0e00117 	ldw	r3,-32764(gp)
    a508:	d0a0c303 	ldbu	r2,-31988(gp)
    a50c:	10803fcc 	andi	r2,r2,255
    a510:	1085883a 	add	r2,r2,r2
    a514:	1085883a 	add	r2,r2,r2
    a518:	10800044 	addi	r2,r2,1
    a51c:	1885883a 	add	r2,r3,r2
    a520:	10800204 	addi	r2,r2,8
    a524:	10000005 	stb	zero,0(r2)

								LMS_Ctrl_Packet_Tx->Data_field[2 + (block * 4)] = (wiper_pos[0] >> 8) & 0xFF; //signed val, MSB byte
    a528:	d0e00117 	ldw	r3,-32764(gp)
    a52c:	d0a0c303 	ldbu	r2,-31988(gp)
    a530:	10803fcc 	andi	r2,r2,255
    a534:	1085883a 	add	r2,r2,r2
    a538:	1085883a 	add	r2,r2,r2
    a53c:	10800084 	addi	r2,r2,2
    a540:	e13ffd0b 	ldhu	r4,-12(fp)
    a544:	213fffcc 	andi	r4,r4,65535
    a548:	2008d23a 	srli	r4,r4,8
    a54c:	1885883a 	add	r2,r3,r2
    a550:	10800204 	addi	r2,r2,8
    a554:	11000005 	stb	r4,0(r2)
								LMS_Ctrl_Packet_Tx->Data_field[3 + (block * 4)] = wiper_pos[0] & 0xFF; //signed val, LSB byte
    a558:	d0e00117 	ldw	r3,-32764(gp)
    a55c:	d0a0c303 	ldbu	r2,-31988(gp)
    a560:	10803fcc 	andi	r2,r2,255
    a564:	1085883a 	add	r2,r2,r2
    a568:	1085883a 	add	r2,r2,r2
    a56c:	108000c4 	addi	r2,r2,3
    a570:	e13ffd0b 	ldhu	r4,-12(fp)
    a574:	1885883a 	add	r2,r3,r2
    a578:	10800204 	addi	r2,r2,8
    a57c:	11000005 	stb	r4,0(r2)
							break;
    a580:	00003306 	br	a650 <main+0xf54>

							case 3://wiper 1 position
								LMS_Ctrl_Packet_Tx->Data_field[0 + (block * 4)] = LMS_Ctrl_Packet_Rx->Data_field[block]; //ch
    a584:	d1200117 	ldw	r4,-32764(gp)
    a588:	d0a0c303 	ldbu	r2,-31988(gp)
    a58c:	10803fcc 	andi	r2,r2,255
    a590:	1085883a 	add	r2,r2,r2
    a594:	1085883a 	add	r2,r2,r2
    a598:	100b883a 	mov	r5,r2
    a59c:	d0e00217 	ldw	r3,-32760(gp)
    a5a0:	d0a0c303 	ldbu	r2,-31988(gp)
    a5a4:	10803fcc 	andi	r2,r2,255
    a5a8:	1885883a 	add	r2,r3,r2
    a5ac:	10800204 	addi	r2,r2,8
    a5b0:	10c00003 	ldbu	r3,0(r2)
    a5b4:	2145883a 	add	r2,r4,r5
    a5b8:	10800204 	addi	r2,r2,8
    a5bc:	10c00005 	stb	r3,0(r2)
								LMS_Ctrl_Packet_Tx->Data_field[1 + (block * 4)] = 0x00; //RAW //unit, power
    a5c0:	d0e00117 	ldw	r3,-32764(gp)
    a5c4:	d0a0c303 	ldbu	r2,-31988(gp)
    a5c8:	10803fcc 	andi	r2,r2,255
    a5cc:	1085883a 	add	r2,r2,r2
    a5d0:	1085883a 	add	r2,r2,r2
    a5d4:	10800044 	addi	r2,r2,1
    a5d8:	1885883a 	add	r2,r3,r2
    a5dc:	10800204 	addi	r2,r2,8
    a5e0:	10000005 	stb	zero,0(r2)

								LMS_Ctrl_Packet_Tx->Data_field[2 + (block * 4)] = (wiper_pos[1] >> 8) & 0xFF; //signed val, MSB byte
    a5e4:	d0e00117 	ldw	r3,-32764(gp)
    a5e8:	d0a0c303 	ldbu	r2,-31988(gp)
    a5ec:	10803fcc 	andi	r2,r2,255
    a5f0:	1085883a 	add	r2,r2,r2
    a5f4:	1085883a 	add	r2,r2,r2
    a5f8:	10800084 	addi	r2,r2,2
    a5fc:	e13ffd8b 	ldhu	r4,-10(fp)
    a600:	213fffcc 	andi	r4,r4,65535
    a604:	2008d23a 	srli	r4,r4,8
    a608:	1885883a 	add	r2,r3,r2
    a60c:	10800204 	addi	r2,r2,8
    a610:	11000005 	stb	r4,0(r2)
								LMS_Ctrl_Packet_Tx->Data_field[3 + (block * 4)] = wiper_pos[1] & 0xFF; //signed val, LSB byte
    a614:	d0e00117 	ldw	r3,-32764(gp)
    a618:	d0a0c303 	ldbu	r2,-31988(gp)
    a61c:	10803fcc 	andi	r2,r2,255
    a620:	1085883a 	add	r2,r2,r2
    a624:	1085883a 	add	r2,r2,r2
    a628:	108000c4 	addi	r2,r2,3
    a62c:	e13ffd8b 	ldhu	r4,-10(fp)
    a630:	1885883a 	add	r2,r3,r2
    a634:	10800204 	addi	r2,r2,8
    a638:	11000005 	stb	r4,0(r2)
							break;
    a63c:	00000406 	br	a650 <main+0xf54>

							default:
								cmd_errors++;
    a640:	d0a0c383 	ldbu	r2,-31986(gp)
    a644:	10800044 	addi	r2,r2,1
    a648:	d0a0c385 	stb	r2,-31986(gp)
							break;
    a64c:	0001883a 	nop
 				break;


				case CMD_ANALOG_VAL_RD:

					for(block = 0; block < LMS_Ctrl_Packet_Rx->Header.Data_blocks; block++)
    a650:	d0a0c303 	ldbu	r2,-31988(gp)
    a654:	10800044 	addi	r2,r2,1
    a658:	d0a0c305 	stb	r2,-31988(gp)
    a65c:	d0a00217 	ldw	r2,-32760(gp)
    a660:	10800083 	ldbu	r2,2(r2)
    a664:	d0e0c303 	ldbu	r3,-31988(gp)
    a668:	10803fcc 	andi	r2,r2,255
    a66c:	18c03fcc 	andi	r3,r3,255
    a670:	18bef136 	bltu	r3,r2,a238 <_gp+0xffff5894>
								cmd_errors++;
							break;
						}
					}

					LMS_Ctrl_Packet_Tx->Header.Status = STATUS_COMPLETED_CMD;
    a674:	d0a00117 	ldw	r2,-32764(gp)
    a678:	00c00044 	movi	r3,1
    a67c:	10c00045 	stb	r3,1(r2)

				break;
    a680:	0001b506 	br	ad58 <main+0x165c>


				case CMD_ANALOG_VAL_WR:
					if(Check_many_blocks (4)) break;
    a684:	01000104 	movi	r4,4
    a688:	000805c0 	call	805c <Check_many_blocks>
    a68c:	10803fcc 	andi	r2,r2,255
    a690:	1001ac1e 	bne	r2,zero,ad44 <main+0x1648>

					for(block = 0; block < LMS_Ctrl_Packet_Rx->Header.Data_blocks; block++)
    a694:	d020c305 	stb	zero,-31988(gp)
    a698:	0000ea06 	br	aa44 <main+0x1348>
					{
						switch (LMS_Ctrl_Packet_Rx->Data_field[0 + (block * 4)]) //do something according to channel
    a69c:	d0e00217 	ldw	r3,-32760(gp)
    a6a0:	d0a0c303 	ldbu	r2,-31988(gp)
    a6a4:	10803fcc 	andi	r2,r2,255
    a6a8:	1085883a 	add	r2,r2,r2
    a6ac:	1085883a 	add	r2,r2,r2
    a6b0:	1885883a 	add	r2,r3,r2
    a6b4:	10800204 	addi	r2,r2,8
    a6b8:	10800003 	ldbu	r2,0(r2)
    a6bc:	10803fcc 	andi	r2,r2,255
    a6c0:	10c000a0 	cmpeqi	r3,r2,2
    a6c4:	1800311e 	bne	r3,zero,a78c <main+0x1090>
    a6c8:	10c000e0 	cmpeqi	r3,r2,3
    a6cc:	1800821e 	bne	r3,zero,a8d8 <main+0x11dc>
    a6d0:	1000d51e 	bne	r2,zero,aa28 <main+0x132c>
						{
							case 0: //TCXO DAC
								if (LMS_Ctrl_Packet_Rx->Data_field[1 + (block * 4)] == 0) //RAW units?
    a6d4:	d0e00217 	ldw	r3,-32760(gp)
    a6d8:	d0a0c303 	ldbu	r2,-31988(gp)
    a6dc:	10803fcc 	andi	r2,r2,255
    a6e0:	1085883a 	add	r2,r2,r2
    a6e4:	1085883a 	add	r2,r2,r2
    a6e8:	10800044 	addi	r2,r2,1
    a6ec:	1885883a 	add	r2,r3,r2
    a6f0:	10800204 	addi	r2,r2,8
    a6f4:	10800003 	ldbu	r2,0(r2)
    a6f8:	10803fcc 	andi	r2,r2,255
    a6fc:	10001f1e 	bne	r2,zero,a77c <main+0x1080>
								{
									Control_TCXO_ADF(0, NULL); //set ADF4002 CP to three-state
    a700:	000b883a 	mov	r5,zero
    a704:	0009883a 	mov	r4,zero
    a708:	00088800 	call	8880 <Control_TCXO_ADF>

									//write data to DAC
									//dac_val = LMS_Ctrl_Packet_Rx->Data_field[3 + (block * 4)];
									dac_val = (LMS_Ctrl_Packet_Rx->Data_field[2 + (block * 4)] << 8 ) + LMS_Ctrl_Packet_Rx->Data_field[3 + (block * 4)];
    a70c:	d0e00217 	ldw	r3,-32760(gp)
    a710:	d0a0c303 	ldbu	r2,-31988(gp)
    a714:	10803fcc 	andi	r2,r2,255
    a718:	1085883a 	add	r2,r2,r2
    a71c:	1085883a 	add	r2,r2,r2
    a720:	10800084 	addi	r2,r2,2
    a724:	1885883a 	add	r2,r3,r2
    a728:	10800204 	addi	r2,r2,8
    a72c:	10800003 	ldbu	r2,0(r2)
    a730:	10803fcc 	andi	r2,r2,255
    a734:	1004923a 	slli	r2,r2,8
    a738:	1009883a 	mov	r4,r2
    a73c:	d0e00217 	ldw	r3,-32760(gp)
    a740:	d0a0c303 	ldbu	r2,-31988(gp)
    a744:	10803fcc 	andi	r2,r2,255
    a748:	1085883a 	add	r2,r2,r2
    a74c:	1085883a 	add	r2,r2,r2
    a750:	108000c4 	addi	r2,r2,3
    a754:	1885883a 	add	r2,r3,r2
    a758:	10800204 	addi	r2,r2,8
    a75c:	10800003 	ldbu	r2,0(r2)
    a760:	10803fcc 	andi	r2,r2,255
    a764:	2085883a 	add	r2,r4,r2
    a768:	d0a0000d 	sth	r2,-32768(gp)
									Control_TCXO_DAC(1, &dac_val); //enable DAC output, set new val
    a76c:	d1600004 	addi	r5,gp,-32768
    a770:	01000044 	movi	r4,1
    a774:	00087b40 	call	87b4 <Control_TCXO_DAC>
								}
								else cmd_errors++;

							break;
    a778:	0000af06 	br	aa38 <main+0x133c>
									//write data to DAC
									//dac_val = LMS_Ctrl_Packet_Rx->Data_field[3 + (block * 4)];
									dac_val = (LMS_Ctrl_Packet_Rx->Data_field[2 + (block * 4)] << 8 ) + LMS_Ctrl_Packet_Rx->Data_field[3 + (block * 4)];
									Control_TCXO_DAC(1, &dac_val); //enable DAC output, set new val
								}
								else cmd_errors++;
    a77c:	d0a0c383 	ldbu	r2,-31986(gp)
    a780:	10800044 	addi	r2,r2,1
    a784:	d0a0c385 	stb	r2,-31986(gp)

							break;
    a788:	0000ab06 	br	aa38 <main+0x133c>

							case 2: //MCP4261 wiper 0 control

								if (LMS_Ctrl_Packet_Rx->Data_field[1 + (block * 4)] == 0) //RAW units?
    a78c:	d0e00217 	ldw	r3,-32760(gp)
    a790:	d0a0c303 	ldbu	r2,-31988(gp)
    a794:	10803fcc 	andi	r2,r2,255
    a798:	1085883a 	add	r2,r2,r2
    a79c:	1085883a 	add	r2,r2,r2
    a7a0:	10800044 	addi	r2,r2,1
    a7a4:	1885883a 	add	r2,r3,r2
    a7a8:	10800204 	addi	r2,r2,8
    a7ac:	10800003 	ldbu	r2,0(r2)
    a7b0:	10803fcc 	andi	r2,r2,255
    a7b4:	1000441e 	bne	r2,zero,a8c8 <main+0x11cc>
								{
									wiper_pos[0] = (LMS_Ctrl_Packet_Rx->Data_field[2 + (block * 4)] << 8) + LMS_Ctrl_Packet_Rx->Data_field[3 + (block * 4)];
    a7b8:	d0e00217 	ldw	r3,-32760(gp)
    a7bc:	d0a0c303 	ldbu	r2,-31988(gp)
    a7c0:	10803fcc 	andi	r2,r2,255
    a7c4:	1085883a 	add	r2,r2,r2
    a7c8:	1085883a 	add	r2,r2,r2
    a7cc:	10800084 	addi	r2,r2,2
    a7d0:	1885883a 	add	r2,r3,r2
    a7d4:	10800204 	addi	r2,r2,8
    a7d8:	10800003 	ldbu	r2,0(r2)
    a7dc:	10803fcc 	andi	r2,r2,255
    a7e0:	1004923a 	slli	r2,r2,8
    a7e4:	1009883a 	mov	r4,r2
    a7e8:	d0e00217 	ldw	r3,-32760(gp)
    a7ec:	d0a0c303 	ldbu	r2,-31988(gp)
    a7f0:	10803fcc 	andi	r2,r2,255
    a7f4:	1085883a 	add	r2,r2,r2
    a7f8:	1085883a 	add	r2,r2,r2
    a7fc:	108000c4 	addi	r2,r2,3
    a800:	1885883a 	add	r2,r3,r2
    a804:	10800204 	addi	r2,r2,8
    a808:	10800003 	ldbu	r2,0(r2)
    a80c:	10803fcc 	andi	r2,r2,255
    a810:	2085883a 	add	r2,r4,r2
    a814:	e0bffd0d 	sth	r2,-12(fp)
									if(wiper_pos[0] <= 256)
    a818:	e0bffd0b 	ldhu	r2,-12(fp)
    a81c:	10bfffcc 	andi	r2,r2,65535
    a820:	10804068 	cmpgeui	r2,r2,257
    a824:	1000241e 	bne	r2,zero,a8b8 <main+0x11bc>
									{
										MCP_data[0] = MCP_data[1] = 0;
    a828:	e03ffcc5 	stb	zero,-13(fp)
    a82c:	e0bffcc3 	ldbu	r2,-13(fp)
    a830:	e0bffc85 	stb	r2,-14(fp)

										MCP_data[0] |= (0x00 << 4); //Memory addr [16:13] = Volatile Wiper 0 (0x00)
    a834:	e0bffc83 	ldbu	r2,-14(fp)
    a838:	e0bffc85 	stb	r2,-14(fp)
										MCP_data[0] |= (0x00 << 2); //Command bits [11:10] = CMD  Write data (0x00)
    a83c:	e0bffc83 	ldbu	r2,-14(fp)
    a840:	e0bffc85 	stb	r2,-14(fp)

										if (wiper_pos[0] > 255)	MCP_data[0] |= (0x01); //Full Scale (W = A)
    a844:	e0bffd0b 	ldhu	r2,-12(fp)
    a848:	10bfffcc 	andi	r2,r2,65535
    a84c:	10804030 	cmpltui	r2,r2,256
    a850:	1000031e 	bne	r2,zero,a860 <main+0x1164>
    a854:	e0bffc83 	ldbu	r2,-14(fp)
    a858:	10800054 	ori	r2,r2,1
    a85c:	e0bffc85 	stb	r2,-14(fp)

										MCP_data[1] = LMS_Ctrl_Packet_Rx->Data_field[3 + (block * 4)];
    a860:	d0e00217 	ldw	r3,-32760(gp)
    a864:	d0a0c303 	ldbu	r2,-31988(gp)
    a868:	10803fcc 	andi	r2,r2,255
    a86c:	1085883a 	add	r2,r2,r2
    a870:	1085883a 	add	r2,r2,r2
    a874:	108000c4 	addi	r2,r2,3
    a878:	1885883a 	add	r2,r3,r2
    a87c:	10800204 	addi	r2,r2,8
    a880:	10800003 	ldbu	r2,0(r2)
    a884:	e0bffcc5 	stb	r2,-13(fp)

										spirez = alt_avalon_spi_command(FPGA_SPI0_BASE, SPI_NR_POT, 2, MCP_data, 0, NULL, 0);
    a888:	e0bffc84 	addi	r2,fp,-14
    a88c:	d8000215 	stw	zero,8(sp)
    a890:	d8000115 	stw	zero,4(sp)
    a894:	d8000015 	stw	zero,0(sp)
    a898:	100f883a 	mov	r7,r2
    a89c:	01800084 	movi	r6,2
    a8a0:	01400104 	movi	r5,4
    a8a4:	01000074 	movhi	r4,1
    a8a8:	21059004 	addi	r4,r4,5696
    a8ac:	000b6780 	call	b678 <alt_avalon_spi_command>
    a8b0:	e0bffa15 	stw	r2,-24(fp)
									}
									else cmd_errors++;
								}
								else cmd_errors++;
							break;
    a8b4:	00006006 	br	aa38 <main+0x133c>

										MCP_data[1] = LMS_Ctrl_Packet_Rx->Data_field[3 + (block * 4)];

										spirez = alt_avalon_spi_command(FPGA_SPI0_BASE, SPI_NR_POT, 2, MCP_data, 0, NULL, 0);
									}
									else cmd_errors++;
    a8b8:	d0a0c383 	ldbu	r2,-31986(gp)
    a8bc:	10800044 	addi	r2,r2,1
    a8c0:	d0a0c385 	stb	r2,-31986(gp)
								}
								else cmd_errors++;
							break;
    a8c4:	00005c06 	br	aa38 <main+0x133c>

										spirez = alt_avalon_spi_command(FPGA_SPI0_BASE, SPI_NR_POT, 2, MCP_data, 0, NULL, 0);
									}
									else cmd_errors++;
								}
								else cmd_errors++;
    a8c8:	d0a0c383 	ldbu	r2,-31986(gp)
    a8cc:	10800044 	addi	r2,r2,1
    a8d0:	d0a0c385 	stb	r2,-31986(gp)
							break;
    a8d4:	00005806 	br	aa38 <main+0x133c>

							case 3: //MCP4261 wiper 1 control

								if (LMS_Ctrl_Packet_Rx->Data_field[1 + (block * 4)] == 0) //RAW units?
    a8d8:	d0e00217 	ldw	r3,-32760(gp)
    a8dc:	d0a0c303 	ldbu	r2,-31988(gp)
    a8e0:	10803fcc 	andi	r2,r2,255
    a8e4:	1085883a 	add	r2,r2,r2
    a8e8:	1085883a 	add	r2,r2,r2
    a8ec:	10800044 	addi	r2,r2,1
    a8f0:	1885883a 	add	r2,r3,r2
    a8f4:	10800204 	addi	r2,r2,8
    a8f8:	10800003 	ldbu	r2,0(r2)
    a8fc:	10803fcc 	andi	r2,r2,255
    a900:	1000451e 	bne	r2,zero,aa18 <main+0x131c>
								{
									wiper_pos[1] = (LMS_Ctrl_Packet_Rx->Data_field[2 + (block * 4)] << 8) + LMS_Ctrl_Packet_Rx->Data_field[3 + (block * 4)];
    a904:	d0e00217 	ldw	r3,-32760(gp)
    a908:	d0a0c303 	ldbu	r2,-31988(gp)
    a90c:	10803fcc 	andi	r2,r2,255
    a910:	1085883a 	add	r2,r2,r2
    a914:	1085883a 	add	r2,r2,r2
    a918:	10800084 	addi	r2,r2,2
    a91c:	1885883a 	add	r2,r3,r2
    a920:	10800204 	addi	r2,r2,8
    a924:	10800003 	ldbu	r2,0(r2)
    a928:	10803fcc 	andi	r2,r2,255
    a92c:	1004923a 	slli	r2,r2,8
    a930:	1009883a 	mov	r4,r2
    a934:	d0e00217 	ldw	r3,-32760(gp)
    a938:	d0a0c303 	ldbu	r2,-31988(gp)
    a93c:	10803fcc 	andi	r2,r2,255
    a940:	1085883a 	add	r2,r2,r2
    a944:	1085883a 	add	r2,r2,r2
    a948:	108000c4 	addi	r2,r2,3
    a94c:	1885883a 	add	r2,r3,r2
    a950:	10800204 	addi	r2,r2,8
    a954:	10800003 	ldbu	r2,0(r2)
    a958:	10803fcc 	andi	r2,r2,255
    a95c:	2085883a 	add	r2,r4,r2
    a960:	e0bffd8d 	sth	r2,-10(fp)
									if(wiper_pos[1] <= 256)
    a964:	e0bffd8b 	ldhu	r2,-10(fp)
    a968:	10bfffcc 	andi	r2,r2,65535
    a96c:	10804068 	cmpgeui	r2,r2,257
    a970:	1000251e 	bne	r2,zero,aa08 <main+0x130c>
									{
										MCP_data[0] = MCP_data[1] = 0;
    a974:	e03ffcc5 	stb	zero,-13(fp)
    a978:	e0bffcc3 	ldbu	r2,-13(fp)
    a97c:	e0bffc85 	stb	r2,-14(fp)

										MCP_data[0] |= (0x01 << 4); //Memory addr [16:13] = Volatile Wiper 1 (0x01)
    a980:	e0bffc83 	ldbu	r2,-14(fp)
    a984:	10800414 	ori	r2,r2,16
    a988:	e0bffc85 	stb	r2,-14(fp)
										MCP_data[0] |= (0x00 << 2); //Command bits [11:10] = CMD  Write data (0x00)
    a98c:	e0bffc83 	ldbu	r2,-14(fp)
    a990:	e0bffc85 	stb	r2,-14(fp)

										if (wiper_pos[1] > 255)	MCP_data[0] |= (0x01); //Full Scale (W = A)
    a994:	e0bffd8b 	ldhu	r2,-10(fp)
    a998:	10bfffcc 	andi	r2,r2,65535
    a99c:	10804030 	cmpltui	r2,r2,256
    a9a0:	1000031e 	bne	r2,zero,a9b0 <main+0x12b4>
    a9a4:	e0bffc83 	ldbu	r2,-14(fp)
    a9a8:	10800054 	ori	r2,r2,1
    a9ac:	e0bffc85 	stb	r2,-14(fp)

										MCP_data[1] = LMS_Ctrl_Packet_Rx->Data_field[3 + (block * 4)];
    a9b0:	d0e00217 	ldw	r3,-32760(gp)
    a9b4:	d0a0c303 	ldbu	r2,-31988(gp)
    a9b8:	10803fcc 	andi	r2,r2,255
    a9bc:	1085883a 	add	r2,r2,r2
    a9c0:	1085883a 	add	r2,r2,r2
    a9c4:	108000c4 	addi	r2,r2,3
    a9c8:	1885883a 	add	r2,r3,r2
    a9cc:	10800204 	addi	r2,r2,8
    a9d0:	10800003 	ldbu	r2,0(r2)
    a9d4:	e0bffcc5 	stb	r2,-13(fp)

										spirez = alt_avalon_spi_command(FPGA_SPI0_BASE, SPI_NR_POT, 2, MCP_data, 0, NULL, 0);
    a9d8:	e0bffc84 	addi	r2,fp,-14
    a9dc:	d8000215 	stw	zero,8(sp)
    a9e0:	d8000115 	stw	zero,4(sp)
    a9e4:	d8000015 	stw	zero,0(sp)
    a9e8:	100f883a 	mov	r7,r2
    a9ec:	01800084 	movi	r6,2
    a9f0:	01400104 	movi	r5,4
    a9f4:	01000074 	movhi	r4,1
    a9f8:	21059004 	addi	r4,r4,5696
    a9fc:	000b6780 	call	b678 <alt_avalon_spi_command>
    aa00:	e0bffa15 	stw	r2,-24(fp)
									}
									else cmd_errors++;
								}
								else cmd_errors++;
							break;
    aa04:	00000c06 	br	aa38 <main+0x133c>

										MCP_data[1] = LMS_Ctrl_Packet_Rx->Data_field[3 + (block * 4)];

										spirez = alt_avalon_spi_command(FPGA_SPI0_BASE, SPI_NR_POT, 2, MCP_data, 0, NULL, 0);
									}
									else cmd_errors++;
    aa08:	d0a0c383 	ldbu	r2,-31986(gp)
    aa0c:	10800044 	addi	r2,r2,1
    aa10:	d0a0c385 	stb	r2,-31986(gp)
								}
								else cmd_errors++;
							break;
    aa14:	00000806 	br	aa38 <main+0x133c>

										spirez = alt_avalon_spi_command(FPGA_SPI0_BASE, SPI_NR_POT, 2, MCP_data, 0, NULL, 0);
									}
									else cmd_errors++;
								}
								else cmd_errors++;
    aa18:	d0a0c383 	ldbu	r2,-31986(gp)
    aa1c:	10800044 	addi	r2,r2,1
    aa20:	d0a0c385 	stb	r2,-31986(gp)
							break;
    aa24:	00000406 	br	aa38 <main+0x133c>

							default:
								cmd_errors++;
    aa28:	d0a0c383 	ldbu	r2,-31986(gp)
    aa2c:	10800044 	addi	r2,r2,1
    aa30:	d0a0c385 	stb	r2,-31986(gp)
							break;
    aa34:	0001883a 	nop


				case CMD_ANALOG_VAL_WR:
					if(Check_many_blocks (4)) break;

					for(block = 0; block < LMS_Ctrl_Packet_Rx->Header.Data_blocks; block++)
    aa38:	d0a0c303 	ldbu	r2,-31988(gp)
    aa3c:	10800044 	addi	r2,r2,1
    aa40:	d0a0c305 	stb	r2,-31988(gp)
    aa44:	d0a00217 	ldw	r2,-32760(gp)
    aa48:	10800083 	ldbu	r2,2(r2)
    aa4c:	d0e0c303 	ldbu	r3,-31988(gp)
    aa50:	10803fcc 	andi	r2,r2,255
    aa54:	18c03fcc 	andi	r3,r3,255
    aa58:	18bf1036 	bltu	r3,r2,a69c <_gp+0xffff5cf8>
								cmd_errors++;
							break;
						}
					}

					if(cmd_errors) LMS_Ctrl_Packet_Tx->Header.Status = STATUS_ERROR_CMD;
    aa5c:	d0a0c383 	ldbu	r2,-31986(gp)
    aa60:	10803fcc 	andi	r2,r2,255
    aa64:	10000426 	beq	r2,zero,aa78 <main+0x137c>
    aa68:	d0a00117 	ldw	r2,-32764(gp)
    aa6c:	00c00144 	movi	r3,5
    aa70:	10c00045 	stb	r3,1(r2)
					else LMS_Ctrl_Packet_Tx->Header.Status = STATUS_COMPLETED_CMD;

				break;
    aa74:	0000b806 	br	ad58 <main+0x165c>
							break;
						}
					}

					if(cmd_errors) LMS_Ctrl_Packet_Tx->Header.Status = STATUS_ERROR_CMD;
					else LMS_Ctrl_Packet_Tx->Header.Status = STATUS_COMPLETED_CMD;
    aa78:	d0a00117 	ldw	r2,-32764(gp)
    aa7c:	00c00044 	movi	r3,1
    aa80:	10c00045 	stb	r3,1(r2)

				break;
    aa84:	0000b406 	br	ad58 <main+0x165c>


	 			case CMD_SI5351_WR:
	 				if(Check_many_blocks(2)) break;
    aa88:	01000084 	movi	r4,2
    aa8c:	000805c0 	call	805c <Check_many_blocks>
    aa90:	10803fcc 	andi	r2,r2,255
    aa94:	1000ad1e 	bne	r2,zero,ad4c <main+0x1650>

	 				for(block = 0; block < LMS_Ctrl_Packet_Rx->Header.Data_blocks; block++)
    aa98:	d020c305 	stb	zero,-31988(gp)
    aa9c:	00002f06 	br	ab5c <main+0x1460>
	 				{
	 					cmd_errors += I2C_start(I2C_OPENCORES_0_BASE, SI5351_I2C_ADDR, 0);
    aaa0:	000d883a 	mov	r6,zero
    aaa4:	01401804 	movi	r5,96
    aaa8:	01000074 	movhi	r4,1
    aaac:	21059804 	addi	r4,r4,5728
    aab0:	000b92c0 	call	b92c <I2C_start>
    aab4:	1007883a 	mov	r3,r2
    aab8:	d0a0c383 	ldbu	r2,-31986(gp)
    aabc:	1885883a 	add	r2,r3,r2
    aac0:	d0a0c385 	stb	r2,-31986(gp)
	 					cmd_errors += I2C_write(I2C_OPENCORES_0_BASE, LMS_Ctrl_Packet_Rx->Data_field[block * 2    ], 0);
    aac4:	d0e00217 	ldw	r3,-32760(gp)
    aac8:	d0a0c303 	ldbu	r2,-31988(gp)
    aacc:	10803fcc 	andi	r2,r2,255
    aad0:	1085883a 	add	r2,r2,r2
    aad4:	1885883a 	add	r2,r3,r2
    aad8:	10800204 	addi	r2,r2,8
    aadc:	10800003 	ldbu	r2,0(r2)
    aae0:	10803fcc 	andi	r2,r2,255
    aae4:	000d883a 	mov	r6,zero
    aae8:	100b883a 	mov	r5,r2
    aaec:	01000074 	movhi	r4,1
    aaf0:	21059804 	addi	r4,r4,5728
    aaf4:	000ba800 	call	ba80 <I2C_write>
    aaf8:	1007883a 	mov	r3,r2
    aafc:	d0a0c383 	ldbu	r2,-31986(gp)
    ab00:	1885883a 	add	r2,r3,r2
    ab04:	d0a0c385 	stb	r2,-31986(gp)
	 					cmd_errors += I2C_write(I2C_OPENCORES_0_BASE, LMS_Ctrl_Packet_Rx->Data_field[block * 2 + 1], 1);
    ab08:	d0e00217 	ldw	r3,-32760(gp)
    ab0c:	d0a0c303 	ldbu	r2,-31988(gp)
    ab10:	10803fcc 	andi	r2,r2,255
    ab14:	1085883a 	add	r2,r2,r2
    ab18:	10800044 	addi	r2,r2,1
    ab1c:	1885883a 	add	r2,r3,r2
    ab20:	10800204 	addi	r2,r2,8
    ab24:	10800003 	ldbu	r2,0(r2)
    ab28:	10803fcc 	andi	r2,r2,255
    ab2c:	01800044 	movi	r6,1
    ab30:	100b883a 	mov	r5,r2
    ab34:	01000074 	movhi	r4,1
    ab38:	21059804 	addi	r4,r4,5728
    ab3c:	000ba800 	call	ba80 <I2C_write>
    ab40:	1007883a 	mov	r3,r2
    ab44:	d0a0c383 	ldbu	r2,-31986(gp)
    ab48:	1885883a 	add	r2,r3,r2
    ab4c:	d0a0c385 	stb	r2,-31986(gp)


	 			case CMD_SI5351_WR:
	 				if(Check_many_blocks(2)) break;

	 				for(block = 0; block < LMS_Ctrl_Packet_Rx->Header.Data_blocks; block++)
    ab50:	d0a0c303 	ldbu	r2,-31988(gp)
    ab54:	10800044 	addi	r2,r2,1
    ab58:	d0a0c305 	stb	r2,-31988(gp)
    ab5c:	d0a00217 	ldw	r2,-32760(gp)
    ab60:	10800083 	ldbu	r2,2(r2)
    ab64:	d0e0c303 	ldbu	r3,-31988(gp)
    ab68:	10803fcc 	andi	r2,r2,255
    ab6c:	18c03fcc 	andi	r3,r3,255
    ab70:	18bfcb36 	bltu	r3,r2,aaa0 <_gp+0xffff60fc>
	 					cmd_errors += I2C_start(I2C_OPENCORES_0_BASE, SI5351_I2C_ADDR, 0);
	 					cmd_errors += I2C_write(I2C_OPENCORES_0_BASE, LMS_Ctrl_Packet_Rx->Data_field[block * 2    ], 0);
	 					cmd_errors += I2C_write(I2C_OPENCORES_0_BASE, LMS_Ctrl_Packet_Rx->Data_field[block * 2 + 1], 1);
	 				}

	 				if(cmd_errors) LMS_Ctrl_Packet_Tx->Header.Status = STATUS_ERROR_CMD;
    ab74:	d0a0c383 	ldbu	r2,-31986(gp)
    ab78:	10803fcc 	andi	r2,r2,255
    ab7c:	10000426 	beq	r2,zero,ab90 <main+0x1494>
    ab80:	d0a00117 	ldw	r2,-32764(gp)
    ab84:	00c00144 	movi	r3,5
    ab88:	10c00045 	stb	r3,1(r2)
	 				else LMS_Ctrl_Packet_Tx->Header.Status = STATUS_COMPLETED_CMD;

	 			break;
    ab8c:	00007206 	br	ad58 <main+0x165c>
	 					cmd_errors += I2C_write(I2C_OPENCORES_0_BASE, LMS_Ctrl_Packet_Rx->Data_field[block * 2    ], 0);
	 					cmd_errors += I2C_write(I2C_OPENCORES_0_BASE, LMS_Ctrl_Packet_Rx->Data_field[block * 2 + 1], 1);
	 				}

	 				if(cmd_errors) LMS_Ctrl_Packet_Tx->Header.Status = STATUS_ERROR_CMD;
	 				else LMS_Ctrl_Packet_Tx->Header.Status = STATUS_COMPLETED_CMD;
    ab90:	d0a00117 	ldw	r2,-32764(gp)
    ab94:	00c00044 	movi	r3,1
    ab98:	10c00045 	stb	r3,1(r2)

	 			break;
    ab9c:	00006e06 	br	ad58 <main+0x165c>


 				case CMD_SI5351_RD:
 					if(Check_many_blocks (2)) break;
    aba0:	01000084 	movi	r4,2
    aba4:	000805c0 	call	805c <Check_many_blocks>
    aba8:	10803fcc 	andi	r2,r2,255
    abac:	1000691e 	bne	r2,zero,ad54 <main+0x1658>

 					for(block = 0; block < LMS_Ctrl_Packet_Rx->Header.Data_blocks; block++)
    abb0:	d020c305 	stb	zero,-31988(gp)
    abb4:	00004006 	br	acb8 <main+0x15bc>
 					{
 						cmd_errors += I2C_start(I2C_OPENCORES_0_BASE, SI5351_I2C_ADDR, 0);
    abb8:	000d883a 	mov	r6,zero
    abbc:	01401804 	movi	r5,96
    abc0:	01000074 	movhi	r4,1
    abc4:	21059804 	addi	r4,r4,5728
    abc8:	000b92c0 	call	b92c <I2C_start>
    abcc:	1007883a 	mov	r3,r2
    abd0:	d0a0c383 	ldbu	r2,-31986(gp)
    abd4:	1885883a 	add	r2,r3,r2
    abd8:	d0a0c385 	stb	r2,-31986(gp)
 						cmd_errors += I2C_write(I2C_OPENCORES_0_BASE, LMS_Ctrl_Packet_Rx->Data_field[block], 1);
    abdc:	d0e00217 	ldw	r3,-32760(gp)
    abe0:	d0a0c303 	ldbu	r2,-31988(gp)
    abe4:	10803fcc 	andi	r2,r2,255
    abe8:	1885883a 	add	r2,r3,r2
    abec:	10800204 	addi	r2,r2,8
    abf0:	10800003 	ldbu	r2,0(r2)
    abf4:	10803fcc 	andi	r2,r2,255
    abf8:	01800044 	movi	r6,1
    abfc:	100b883a 	mov	r5,r2
    ac00:	01000074 	movhi	r4,1
    ac04:	21059804 	addi	r4,r4,5728
    ac08:	000ba800 	call	ba80 <I2C_write>
    ac0c:	1007883a 	mov	r3,r2
    ac10:	d0a0c383 	ldbu	r2,-31986(gp)
    ac14:	1885883a 	add	r2,r3,r2
    ac18:	d0a0c385 	stb	r2,-31986(gp)
 						cmd_errors += I2C_start(I2C_OPENCORES_0_BASE, SI5351_I2C_ADDR, 1);
    ac1c:	01800044 	movi	r6,1
    ac20:	01401804 	movi	r5,96
    ac24:	01000074 	movhi	r4,1
    ac28:	21059804 	addi	r4,r4,5728
    ac2c:	000b92c0 	call	b92c <I2C_start>
    ac30:	1007883a 	mov	r3,r2
    ac34:	d0a0c383 	ldbu	r2,-31986(gp)
    ac38:	1885883a 	add	r2,r3,r2
    ac3c:	d0a0c385 	stb	r2,-31986(gp)

 						LMS_Ctrl_Packet_Tx->Data_field[block * 2    ] = LMS_Ctrl_Packet_Rx->Data_field[block];
    ac40:	d1200117 	ldw	r4,-32764(gp)
    ac44:	d0a0c303 	ldbu	r2,-31988(gp)
    ac48:	10803fcc 	andi	r2,r2,255
    ac4c:	1085883a 	add	r2,r2,r2
    ac50:	100b883a 	mov	r5,r2
    ac54:	d0e00217 	ldw	r3,-32760(gp)
    ac58:	d0a0c303 	ldbu	r2,-31988(gp)
    ac5c:	10803fcc 	andi	r2,r2,255
    ac60:	1885883a 	add	r2,r3,r2
    ac64:	10800204 	addi	r2,r2,8
    ac68:	10c00003 	ldbu	r3,0(r2)
    ac6c:	2145883a 	add	r2,r4,r5
    ac70:	10800204 	addi	r2,r2,8
    ac74:	10c00005 	stb	r3,0(r2)
 						LMS_Ctrl_Packet_Tx->Data_field[block * 2 + 1] = I2C_read(I2C_OPENCORES_0_BASE, 1);
    ac78:	d4600117 	ldw	r17,-32764(gp)
    ac7c:	d0a0c303 	ldbu	r2,-31988(gp)
    ac80:	10803fcc 	andi	r2,r2,255
    ac84:	1085883a 	add	r2,r2,r2
    ac88:	14000044 	addi	r16,r2,1
    ac8c:	01400044 	movi	r5,1
    ac90:	01000074 	movhi	r4,1
    ac94:	21059804 	addi	r4,r4,5728
    ac98:	000b9ec0 	call	b9ec <I2C_read>
    ac9c:	1007883a 	mov	r3,r2
    aca0:	8c05883a 	add	r2,r17,r16
    aca4:	10800204 	addi	r2,r2,8
    aca8:	10c00005 	stb	r3,0(r2)


 				case CMD_SI5351_RD:
 					if(Check_many_blocks (2)) break;

 					for(block = 0; block < LMS_Ctrl_Packet_Rx->Header.Data_blocks; block++)
    acac:	d0a0c303 	ldbu	r2,-31988(gp)
    acb0:	10800044 	addi	r2,r2,1
    acb4:	d0a0c305 	stb	r2,-31988(gp)
    acb8:	d0a00217 	ldw	r2,-32760(gp)
    acbc:	10800083 	ldbu	r2,2(r2)
    acc0:	d0e0c303 	ldbu	r3,-31988(gp)
    acc4:	10803fcc 	andi	r2,r2,255
    acc8:	18c03fcc 	andi	r3,r3,255
    accc:	18bfba36 	bltu	r3,r2,abb8 <_gp+0xffff6214>

 						LMS_Ctrl_Packet_Tx->Data_field[block * 2    ] = LMS_Ctrl_Packet_Rx->Data_field[block];
 						LMS_Ctrl_Packet_Tx->Data_field[block * 2 + 1] = I2C_read(I2C_OPENCORES_0_BASE, 1);
 					}

 					if(cmd_errors) LMS_Ctrl_Packet_Tx->Header.Status = STATUS_ERROR_CMD;
    acd0:	d0a0c383 	ldbu	r2,-31986(gp)
    acd4:	10803fcc 	andi	r2,r2,255
    acd8:	10000426 	beq	r2,zero,acec <main+0x15f0>
    acdc:	d0a00117 	ldw	r2,-32764(gp)
    ace0:	00c00144 	movi	r3,5
    ace4:	10c00045 	stb	r3,1(r2)
 					else LMS_Ctrl_Packet_Tx->Header.Status = STATUS_COMPLETED_CMD;

 				break;
    ace8:	00001b06 	br	ad58 <main+0x165c>
 						LMS_Ctrl_Packet_Tx->Data_field[block * 2    ] = LMS_Ctrl_Packet_Rx->Data_field[block];
 						LMS_Ctrl_Packet_Tx->Data_field[block * 2 + 1] = I2C_read(I2C_OPENCORES_0_BASE, 1);
 					}

 					if(cmd_errors) LMS_Ctrl_Packet_Tx->Header.Status = STATUS_ERROR_CMD;
 					else LMS_Ctrl_Packet_Tx->Header.Status = STATUS_COMPLETED_CMD;
    acec:	d0a00117 	ldw	r2,-32764(gp)
    acf0:	00c00044 	movi	r3,1
    acf4:	10c00045 	stb	r3,1(r2)

 				break;
    acf8:	00001706 	br	ad58 <main+0x165c>


 				default:
 					/* This is unknown request. */
 					//isHandled = CyFalse;
 					LMS_Ctrl_Packet_Tx->Header.Status = STATUS_UNKNOWN_CMD;
    acfc:	d0a00117 	ldw	r2,-32764(gp)
    ad00:	00c00084 	movi	r3,2
    ad04:	10c00045 	stb	r3,1(r2)
 				break;
    ad08:	00001306 	br	ad58 <main+0x165c>
 				break;
				

 				case CMD_LMS_RST:

 					if(!Check_Periph_ID(MAX_ID_LMS7, LMS_Ctrl_Packet_Rx->Header.Periph_ID)) break;
    ad0c:	0001883a 	nop
    ad10:	00001106 	br	ad58 <main+0x165c>
 					LMS_Ctrl_Packet_Tx->Header.Status = STATUS_COMPLETED_CMD;
 				break;


 				case CMD_LMS7002_WR:
 					if(!Check_Periph_ID(MAX_ID_LMS7, LMS_Ctrl_Packet_Rx->Header.Periph_ID)) break;
    ad14:	0001883a 	nop
    ad18:	00000f06 	br	ad58 <main+0x165c>
 					if(Check_many_blocks (4)) break;
    ad1c:	0001883a 	nop
    ad20:	00000d06 	br	ad58 <main+0x165c>
 					LMS_Ctrl_Packet_Tx->Header.Status = STATUS_COMPLETED_CMD;
 				break;


 				case CMD_LMS7002_RD:
 					if(Check_many_blocks (4)) break;
    ad24:	0001883a 	nop
    ad28:	00000b06 	br	ad58 <main+0x165c>
 					LMS_Ctrl_Packet_Tx->Header.Status = STATUS_COMPLETED_CMD;
 				break;


 	 			case CMD_BRDSPI16_WR:
 	 				if(Check_many_blocks (4)) break;
    ad2c:	0001883a 	nop
    ad30:	00000906 	br	ad58 <main+0x165c>
 	 				LMS_Ctrl_Packet_Tx->Header.Status = STATUS_COMPLETED_CMD;
 	 			break;


 				case CMD_BRDSPI16_RD:
 					if(Check_many_blocks (4)) break;
    ad34:	0001883a 	nop
    ad38:	00000706 	br	ad58 <main+0x165c>
 					LMS_Ctrl_Packet_Tx->Header.Status = STATUS_COMPLETED_CMD;
 				break;


 				case CMD_ADF4002_WR:
 					if(Check_many_blocks (3)) break;
    ad3c:	0001883a 	nop
    ad40:	00000506 	br	ad58 <main+0x165c>

				break;


				case CMD_ANALOG_VAL_WR:
					if(Check_many_blocks (4)) break;
    ad44:	0001883a 	nop
    ad48:	00000306 	br	ad58 <main+0x165c>

				break;


	 			case CMD_SI5351_WR:
	 				if(Check_many_blocks(2)) break;
    ad4c:	0001883a 	nop
    ad50:	00000106 	br	ad58 <main+0x165c>

	 			break;


 				case CMD_SI5351_RD:
 					if(Check_many_blocks (2)) break;
    ad54:	0001883a 	nop
			};



     		//Send response to the command
        	for(cnt=0; cnt<64/sizeof(uint32_t); ++cnt)
    ad58:	e03ff845 	stb	zero,-31(fp)
    ad5c:	00000e06 	br	ad98 <main+0x169c>
        	{
        		IOWR(AV_FIFO_INT_0_BASE, 0, dest[cnt]);
    ad60:	e0bff847 	ldb	r2,-31(fp)
    ad64:	1085883a 	add	r2,r2,r2
    ad68:	1085883a 	add	r2,r2,r2
    ad6c:	1007883a 	mov	r3,r2
    ad70:	e0bff917 	ldw	r2,-28(fp)
    ad74:	10c5883a 	add	r2,r2,r3
    ad78:	10800017 	ldw	r2,0(r2)
    ad7c:	1007883a 	mov	r3,r2
    ad80:	00800074 	movhi	r2,1
    ad84:	1085c404 	addi	r2,r2,5904
    ad88:	10c00035 	stwio	r3,0(r2)
			};



     		//Send response to the command
        	for(cnt=0; cnt<64/sizeof(uint32_t); ++cnt)
    ad8c:	e0bff843 	ldbu	r2,-31(fp)
    ad90:	10800044 	addi	r2,r2,1
    ad94:	e0bff845 	stb	r2,-31(fp)
    ad98:	e0bff843 	ldbu	r2,-31(fp)
    ad9c:	10803fcc 	andi	r2,r2,255
    ada0:	10800430 	cmpltui	r2,r2,16
    ada4:	103fee1e 	bne	r2,zero,ad60 <_gp+0xffff63bc>
	    	spirez = alt_avalon_spi_command(PLLCFG_SPI_BASE, 0, 2, wr_buf, 2, rd_buf, 0);
	    }
*/


	}
    ada8:	003a8c06 	br	97dc <_gp+0xffff4e38>

0000adac <get_pll_config>:
#include "pll_rcfg.h"
#include "system.h"

// Reads main PLL configuration
void get_pll_config(uint32_t PLL_BASE, tPLL_CFG *pll_cfg)
{
    adac:	defffd04 	addi	sp,sp,-12
    adb0:	df000215 	stw	fp,8(sp)
    adb4:	df000204 	addi	fp,sp,8
    adb8:	e13ffe15 	stw	r4,-8(fp)
    adbc:	e17fff15 	stw	r5,-4(fp)
	pll_cfg->M_cnt = IORD_32DIRECT(PLL_BASE, M_COUNTER);
    adc0:	e0bffe17 	ldw	r2,-8(fp)
    adc4:	10800404 	addi	r2,r2,16
    adc8:	10800037 	ldwio	r2,0(r2)
    adcc:	1007883a 	mov	r3,r2
    add0:	e0bfff17 	ldw	r2,-4(fp)
    add4:	10c00015 	stw	r3,0(r2)

	pll_cfg->MFrac_cnt = IORD_32DIRECT(PLL_BASE, FRAC_COUNTER);
    add8:	e0bffe17 	ldw	r2,-8(fp)
    addc:	10800704 	addi	r2,r2,28
    ade0:	10800037 	ldwio	r2,0(r2)
    ade4:	1007883a 	mov	r3,r2
    ade8:	e0bfff17 	ldw	r2,-4(fp)
    adec:	10c00115 	stw	r3,4(r2)

	pll_cfg->N_cnt = IORD_32DIRECT(PLL_BASE, N_COUNTER);
    adf0:	e0bffe17 	ldw	r2,-8(fp)
    adf4:	10800304 	addi	r2,r2,12
    adf8:	10800037 	ldwio	r2,0(r2)
    adfc:	1007883a 	mov	r3,r2
    ae00:	e0bfff17 	ldw	r2,-4(fp)
    ae04:	10c00215 	stw	r3,8(r2)

	pll_cfg->DPS_cnt = IORD_32DIRECT(PLL_BASE, DPS_COUNTER);
    ae08:	e0bffe17 	ldw	r2,-8(fp)
    ae0c:	10800604 	addi	r2,r2,24
    ae10:	10800037 	ldwio	r2,0(r2)
    ae14:	1007883a 	mov	r3,r2
    ae18:	e0bfff17 	ldw	r2,-4(fp)
    ae1c:	10c00415 	stw	r3,16(r2)

	pll_cfg->BS_cnt = IORD_32DIRECT(PLL_BASE, BS_COUNTER);
    ae20:	e0bffe17 	ldw	r2,-8(fp)
    ae24:	10800804 	addi	r2,r2,32
    ae28:	10800037 	ldwio	r2,0(r2)
    ae2c:	1007883a 	mov	r3,r2
    ae30:	e0bfff17 	ldw	r2,-4(fp)
    ae34:	10c00515 	stw	r3,20(r2)

	pll_cfg->CPS_cnt = IORD_32DIRECT(PLL_BASE, CPS_COUNTER);
    ae38:	e0bffe17 	ldw	r2,-8(fp)
    ae3c:	10800904 	addi	r2,r2,36
    ae40:	10800037 	ldwio	r2,0(r2)
    ae44:	1007883a 	mov	r3,r2
    ae48:	e0bfff17 	ldw	r2,-4(fp)
    ae4c:	10c00615 	stw	r3,24(r2)

	pll_cfg->VCO_div = IORD_32DIRECT(PLL_BASE, VCO_DIV);
    ae50:	e0bffe17 	ldw	r2,-8(fp)
    ae54:	10801c04 	addi	r2,r2,112
    ae58:	10800037 	ldwio	r2,0(r2)
    ae5c:	1007883a 	mov	r3,r2
    ae60:	e0bfff17 	ldw	r2,-4(fp)
    ae64:	10c00715 	stw	r3,28(r2)
}
    ae68:	0001883a 	nop
    ae6c:	e037883a 	mov	sp,fp
    ae70:	df000017 	ldw	fp,0(sp)
    ae74:	dec00104 	addi	sp,sp,4
    ae78:	f800283a 	ret

0000ae7c <set_pll_config>:

// Writes main PLL configuration
uint8_t set_pll_config(uint32_t PLL_BASE, tPLL_CFG *pll_cfg)
{
    ae7c:	defffd04 	addi	sp,sp,-12
    ae80:	df000215 	stw	fp,8(sp)
    ae84:	df000204 	addi	fp,sp,8
    ae88:	e13ffe15 	stw	r4,-8(fp)
    ae8c:	e17fff15 	stw	r5,-4(fp)

	//printf(" \n Full Reconfiguration Selected \n");

	//M
	IOWR_32DIRECT(PLL_BASE, M_COUNTER, pll_cfg->M_cnt);
    ae90:	e0bffe17 	ldw	r2,-8(fp)
    ae94:	10800404 	addi	r2,r2,16
    ae98:	1007883a 	mov	r3,r2
    ae9c:	e0bfff17 	ldw	r2,-4(fp)
    aea0:	10800017 	ldw	r2,0(r2)
    aea4:	18800035 	stwio	r2,0(r3)

	//MFrac
	IOWR_32DIRECT(PLL_BASE, FRAC_COUNTER, pll_cfg->MFrac_cnt);
    aea8:	e0bffe17 	ldw	r2,-8(fp)
    aeac:	10800704 	addi	r2,r2,28
    aeb0:	1007883a 	mov	r3,r2
    aeb4:	e0bfff17 	ldw	r2,-4(fp)
    aeb8:	10800117 	ldw	r2,4(r2)
    aebc:	18800035 	stwio	r2,0(r3)

	//N
	IOWR_32DIRECT(PLL_BASE, N_COUNTER, pll_cfg->N_cnt);
    aec0:	e0bffe17 	ldw	r2,-8(fp)
    aec4:	10800304 	addi	r2,r2,12
    aec8:	1007883a 	mov	r3,r2
    aecc:	e0bfff17 	ldw	r2,-4(fp)
    aed0:	10800217 	ldw	r2,8(r2)
    aed4:	18800035 	stwio	r2,0(r3)

	//Charge Pump Setting
	//IOWR_32DIRECT(PLL_BASE, CPS_COUNTER, pll_cfg->CPS_cnt);

	//
	IOWR_32DIRECT(PLL_BASE, VCO_DIV, pll_cfg->VCO_div);
    aed8:	e0bffe17 	ldw	r2,-8(fp)
    aedc:	10801c04 	addi	r2,r2,112
    aee0:	1007883a 	mov	r3,r2
    aee4:	e0bfff17 	ldw	r2,-4(fp)
    aee8:	10800717 	ldw	r2,28(r2)
    aeec:	18800035 	stwio	r2,0(r3)


	return PLLCFG_NOERR; //start_Reconfig(PLL_BASE);
    aef0:	0005883a 	mov	r2,zero

	//printf(" \n Full configuration is completed !! Verify with Scope \n");
}
    aef4:	e037883a 	mov	sp,fp
    aef8:	df000017 	ldw	fp,0(sp)
    aefc:	dec00104 	addi	sp,sp,4
    af00:	f800283a 	ret

0000af04 <set_CxCnt>:


uint8_t set_CxCnt(uint32_t PLL_BASE, uint32_t CxVal)
{
    af04:	defffd04 	addi	sp,sp,-12
    af08:	df000215 	stw	fp,8(sp)
    af0c:	df000204 	addi	fp,sp,8
    af10:	e13ffe15 	stw	r4,-8(fp)
    af14:	e17fff15 	stw	r5,-4(fp)

 	//IOWR_32DIRECT(PLL_BASE, C_COUNTER, val | (Cx << 18));
	IOWR_32DIRECT(PLL_BASE, C_COUNTER, CxVal);
    af18:	e0bffe17 	ldw	r2,-8(fp)
    af1c:	10800504 	addi	r2,r2,20
    af20:	1007883a 	mov	r3,r2
    af24:	e0bfff17 	ldw	r2,-4(fp)
    af28:	18800035 	stwio	r2,0(r3)

	return PLLCFG_NOERR;
    af2c:	0005883a 	mov	r2,zero
}
    af30:	e037883a 	mov	sp,fp
    af34:	df000017 	ldw	fp,0(sp)
    af38:	dec00104 	addi	sp,sp,4
    af3c:	f800283a 	ret

0000af40 <set_Phase>:

uint8_t set_Phase(uint32_t PLL_BASE, uint32_t Cx, uint32_t val, uint32_t dir)
{
    af40:	defffa04 	addi	sp,sp,-24
    af44:	df000515 	stw	fp,20(sp)
    af48:	df000504 	addi	fp,sp,20
    af4c:	e13ffc15 	stw	r4,-16(fp)
    af50:	e17ffd15 	stw	r5,-12(fp)
    af54:	e1bffe15 	stw	r6,-8(fp)
    af58:	e1ffff15 	stw	r7,-4(fp)
	uint32_t dps;

	dps = val;
    af5c:	e0bffe17 	ldw	r2,-8(fp)
    af60:	e0bffb15 	stw	r2,-20(fp)
	dps = dps | ((Cx & 0x1F) << 16);
    af64:	e0bffd17 	ldw	r2,-12(fp)
    af68:	108007cc 	andi	r2,r2,31
    af6c:	1004943a 	slli	r2,r2,16
    af70:	e0fffb17 	ldw	r3,-20(fp)
    af74:	1884b03a 	or	r2,r3,r2
    af78:	e0bffb15 	stw	r2,-20(fp)
	dps = dps | ((dir & 0x01) << 21);
    af7c:	e0bfff17 	ldw	r2,-4(fp)
    af80:	1080004c 	andi	r2,r2,1
    af84:	1004957a 	slli	r2,r2,21
    af88:	e0fffb17 	ldw	r3,-20(fp)
    af8c:	1884b03a 	or	r2,r3,r2
    af90:	e0bffb15 	stw	r2,-20(fp)

 	IOWR_32DIRECT(PLL_BASE, DPS_COUNTER, dps);
    af94:	e0bffc17 	ldw	r2,-16(fp)
    af98:	10800604 	addi	r2,r2,24
    af9c:	1007883a 	mov	r3,r2
    afa0:	e0bffb17 	ldw	r2,-20(fp)
    afa4:	18800035 	stwio	r2,0(r3)

	return PLLCFG_NOERR;
    afa8:	0005883a 	mov	r2,zero
}
    afac:	e037883a 	mov	sp,fp
    afb0:	df000017 	ldw	fp,0(sp)
    afb4:	dec00104 	addi	sp,sp,4
    afb8:	f800283a 	ret

0000afbc <start_Reconfig>:

uint8_t start_Reconfig(uint32_t PLL_BASE)
{
    afbc:	defffc04 	addi	sp,sp,-16
    afc0:	df000315 	stw	fp,12(sp)
    afc4:	df000304 	addi	fp,sp,12
    afc8:	e13fff15 	stw	r4,-4(fp)
	unsigned int status_reconfig, timeout;

	//Write anything to Start Register to Reconfiguration
	IOWR_32DIRECT(PLL_BASE, START, 0x01);
    afcc:	e0bfff17 	ldw	r2,-4(fp)
    afd0:	10800204 	addi	r2,r2,8
    afd4:	1007883a 	mov	r3,r2
    afd8:	00800044 	movi	r2,1
    afdc:	18800035 	stwio	r2,0(r3)

	timeout = 0;
    afe0:	e03ffd15 	stw	zero,-12(fp)
	do
	{
	  	status_reconfig = IORD_32DIRECT(PLL_BASE, STATUS);
    afe4:	e0bfff17 	ldw	r2,-4(fp)
    afe8:	10800104 	addi	r2,r2,4
    afec:	10800037 	ldwio	r2,0(r2)
    aff0:	e0bffe15 	stw	r2,-8(fp)
	  	if (timeout++ > PLLCFG_TIMEOUT) return PLLCFG_CX_TIMEOUT;
    aff4:	e0fffd17 	ldw	r3,-12(fp)
    aff8:	18800044 	addi	r2,r3,1
    affc:	e0bffd15 	stw	r2,-12(fp)
    b000:	008000b4 	movhi	r2,2
    b004:	10a1a804 	addi	r2,r2,-31072
    b008:	10c0022e 	bgeu	r2,r3,b014 <start_Reconfig+0x58>
    b00c:	00800284 	movi	r2,10
    b010:	00000306 	br	b020 <start_Reconfig+0x64>
	}
	while ((!status_reconfig) & 0x01);
    b014:	e0bffe17 	ldw	r2,-8(fp)
    b018:	103ff226 	beq	r2,zero,afe4 <_gp+0xffff6640>

	return PLLCFG_NOERR;
    b01c:	0005883a 	mov	r2,zero
}
    b020:	e037883a 	mov	sp,fp
    b024:	df000017 	ldw	fp,0(sp)
    b028:	dec00104 	addi	sp,sp,4
    b02c:	f800283a 	ret

0000b030 <__divsi3>:
    b030:	20001b16 	blt	r4,zero,b0a0 <__divsi3+0x70>
    b034:	000f883a 	mov	r7,zero
    b038:	28001616 	blt	r5,zero,b094 <__divsi3+0x64>
    b03c:	200d883a 	mov	r6,r4
    b040:	29001a2e 	bgeu	r5,r4,b0ac <__divsi3+0x7c>
    b044:	00800804 	movi	r2,32
    b048:	00c00044 	movi	r3,1
    b04c:	00000106 	br	b054 <__divsi3+0x24>
    b050:	10000d26 	beq	r2,zero,b088 <__divsi3+0x58>
    b054:	294b883a 	add	r5,r5,r5
    b058:	10bfffc4 	addi	r2,r2,-1
    b05c:	18c7883a 	add	r3,r3,r3
    b060:	293ffb36 	bltu	r5,r4,b050 <_gp+0xffff66ac>
    b064:	0005883a 	mov	r2,zero
    b068:	18000726 	beq	r3,zero,b088 <__divsi3+0x58>
    b06c:	0005883a 	mov	r2,zero
    b070:	31400236 	bltu	r6,r5,b07c <__divsi3+0x4c>
    b074:	314dc83a 	sub	r6,r6,r5
    b078:	10c4b03a 	or	r2,r2,r3
    b07c:	1806d07a 	srli	r3,r3,1
    b080:	280ad07a 	srli	r5,r5,1
    b084:	183ffa1e 	bne	r3,zero,b070 <_gp+0xffff66cc>
    b088:	38000126 	beq	r7,zero,b090 <__divsi3+0x60>
    b08c:	0085c83a 	sub	r2,zero,r2
    b090:	f800283a 	ret
    b094:	014bc83a 	sub	r5,zero,r5
    b098:	39c0005c 	xori	r7,r7,1
    b09c:	003fe706 	br	b03c <_gp+0xffff6698>
    b0a0:	0109c83a 	sub	r4,zero,r4
    b0a4:	01c00044 	movi	r7,1
    b0a8:	003fe306 	br	b038 <_gp+0xffff6694>
    b0ac:	00c00044 	movi	r3,1
    b0b0:	003fee06 	br	b06c <_gp+0xffff66c8>

0000b0b4 <__modsi3>:
    b0b4:	20001716 	blt	r4,zero,b114 <__modsi3+0x60>
    b0b8:	000f883a 	mov	r7,zero
    b0bc:	2005883a 	mov	r2,r4
    b0c0:	28001216 	blt	r5,zero,b10c <__modsi3+0x58>
    b0c4:	2900162e 	bgeu	r5,r4,b120 <__modsi3+0x6c>
    b0c8:	01800804 	movi	r6,32
    b0cc:	00c00044 	movi	r3,1
    b0d0:	00000106 	br	b0d8 <__modsi3+0x24>
    b0d4:	30000a26 	beq	r6,zero,b100 <__modsi3+0x4c>
    b0d8:	294b883a 	add	r5,r5,r5
    b0dc:	31bfffc4 	addi	r6,r6,-1
    b0e0:	18c7883a 	add	r3,r3,r3
    b0e4:	293ffb36 	bltu	r5,r4,b0d4 <_gp+0xffff6730>
    b0e8:	18000526 	beq	r3,zero,b100 <__modsi3+0x4c>
    b0ec:	1806d07a 	srli	r3,r3,1
    b0f0:	11400136 	bltu	r2,r5,b0f8 <__modsi3+0x44>
    b0f4:	1145c83a 	sub	r2,r2,r5
    b0f8:	280ad07a 	srli	r5,r5,1
    b0fc:	183ffb1e 	bne	r3,zero,b0ec <_gp+0xffff6748>
    b100:	38000126 	beq	r7,zero,b108 <__modsi3+0x54>
    b104:	0085c83a 	sub	r2,zero,r2
    b108:	f800283a 	ret
    b10c:	014bc83a 	sub	r5,zero,r5
    b110:	003fec06 	br	b0c4 <_gp+0xffff6720>
    b114:	0109c83a 	sub	r4,zero,r4
    b118:	01c00044 	movi	r7,1
    b11c:	003fe706 	br	b0bc <_gp+0xffff6718>
    b120:	00c00044 	movi	r3,1
    b124:	003ff106 	br	b0ec <_gp+0xffff6748>

0000b128 <__udivsi3>:
    b128:	200d883a 	mov	r6,r4
    b12c:	2900152e 	bgeu	r5,r4,b184 <__udivsi3+0x5c>
    b130:	28001416 	blt	r5,zero,b184 <__udivsi3+0x5c>
    b134:	00800804 	movi	r2,32
    b138:	00c00044 	movi	r3,1
    b13c:	00000206 	br	b148 <__udivsi3+0x20>
    b140:	10000e26 	beq	r2,zero,b17c <__udivsi3+0x54>
    b144:	28000516 	blt	r5,zero,b15c <__udivsi3+0x34>
    b148:	294b883a 	add	r5,r5,r5
    b14c:	10bfffc4 	addi	r2,r2,-1
    b150:	18c7883a 	add	r3,r3,r3
    b154:	293ffa36 	bltu	r5,r4,b140 <_gp+0xffff679c>
    b158:	18000826 	beq	r3,zero,b17c <__udivsi3+0x54>
    b15c:	0005883a 	mov	r2,zero
    b160:	31400236 	bltu	r6,r5,b16c <__udivsi3+0x44>
    b164:	314dc83a 	sub	r6,r6,r5
    b168:	10c4b03a 	or	r2,r2,r3
    b16c:	1806d07a 	srli	r3,r3,1
    b170:	280ad07a 	srli	r5,r5,1
    b174:	183ffa1e 	bne	r3,zero,b160 <_gp+0xffff67bc>
    b178:	f800283a 	ret
    b17c:	0005883a 	mov	r2,zero
    b180:	f800283a 	ret
    b184:	00c00044 	movi	r3,1
    b188:	003ff406 	br	b15c <_gp+0xffff67b8>

0000b18c <__umodsi3>:
    b18c:	2005883a 	mov	r2,r4
    b190:	2900122e 	bgeu	r5,r4,b1dc <__umodsi3+0x50>
    b194:	28001116 	blt	r5,zero,b1dc <__umodsi3+0x50>
    b198:	01800804 	movi	r6,32
    b19c:	00c00044 	movi	r3,1
    b1a0:	00000206 	br	b1ac <__umodsi3+0x20>
    b1a4:	30000c26 	beq	r6,zero,b1d8 <__umodsi3+0x4c>
    b1a8:	28000516 	blt	r5,zero,b1c0 <__umodsi3+0x34>
    b1ac:	294b883a 	add	r5,r5,r5
    b1b0:	31bfffc4 	addi	r6,r6,-1
    b1b4:	18c7883a 	add	r3,r3,r3
    b1b8:	293ffa36 	bltu	r5,r4,b1a4 <_gp+0xffff6800>
    b1bc:	18000626 	beq	r3,zero,b1d8 <__umodsi3+0x4c>
    b1c0:	1806d07a 	srli	r3,r3,1
    b1c4:	11400136 	bltu	r2,r5,b1cc <__umodsi3+0x40>
    b1c8:	1145c83a 	sub	r2,r2,r5
    b1cc:	280ad07a 	srli	r5,r5,1
    b1d0:	183ffb1e 	bne	r3,zero,b1c0 <_gp+0xffff681c>
    b1d4:	f800283a 	ret
    b1d8:	f800283a 	ret
    b1dc:	00c00044 	movi	r3,1
    b1e0:	003ff706 	br	b1c0 <_gp+0xffff681c>

0000b1e4 <__mulsi3>:
    b1e4:	0005883a 	mov	r2,zero
    b1e8:	20000726 	beq	r4,zero,b208 <__mulsi3+0x24>
    b1ec:	20c0004c 	andi	r3,r4,1
    b1f0:	2008d07a 	srli	r4,r4,1
    b1f4:	18000126 	beq	r3,zero,b1fc <__mulsi3+0x18>
    b1f8:	1145883a 	add	r2,r2,r5
    b1fc:	294b883a 	add	r5,r5,r5
    b200:	203ffa1e 	bne	r4,zero,b1ec <_gp+0xffff6848>
    b204:	f800283a 	ret
    b208:	f800283a 	ret

0000b20c <memset>:
    b20c:	2005883a 	mov	r2,r4
    b210:	2007883a 	mov	r3,r4
    b214:	218d883a 	add	r6,r4,r6
    b218:	19800326 	beq	r3,r6,b228 <memset+0x1c>
    b21c:	19400005 	stb	r5,0(r3)
    b220:	18c00044 	addi	r3,r3,1
    b224:	003ffc06 	br	b218 <_gp+0xffff6874>
    b228:	f800283a 	ret

0000b22c <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    b22c:	defffc04 	addi	sp,sp,-16
    b230:	df000315 	stw	fp,12(sp)
    b234:	df000304 	addi	fp,sp,12
    b238:	e13ffd15 	stw	r4,-12(fp)
    b23c:	e17ffe15 	stw	r5,-8(fp)
    b240:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    b244:	e0fffe17 	ldw	r3,-8(fp)
    b248:	e0bffd17 	ldw	r2,-12(fp)
    b24c:	18800c26 	beq	r3,r2,b280 <alt_load_section+0x54>
  {
    while( to != end )
    b250:	00000806 	br	b274 <alt_load_section+0x48>
    {
      *to++ = *from++;
    b254:	e0bffe17 	ldw	r2,-8(fp)
    b258:	10c00104 	addi	r3,r2,4
    b25c:	e0fffe15 	stw	r3,-8(fp)
    b260:	e0fffd17 	ldw	r3,-12(fp)
    b264:	19000104 	addi	r4,r3,4
    b268:	e13ffd15 	stw	r4,-12(fp)
    b26c:	18c00017 	ldw	r3,0(r3)
    b270:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    b274:	e0fffe17 	ldw	r3,-8(fp)
    b278:	e0bfff17 	ldw	r2,-4(fp)
    b27c:	18bff51e 	bne	r3,r2,b254 <_gp+0xffff68b0>
    {
      *to++ = *from++;
    }
  }
}
    b280:	0001883a 	nop
    b284:	e037883a 	mov	sp,fp
    b288:	df000017 	ldw	fp,0(sp)
    b28c:	dec00104 	addi	sp,sp,4
    b290:	f800283a 	ret

0000b294 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    b294:	defffe04 	addi	sp,sp,-8
    b298:	dfc00115 	stw	ra,4(sp)
    b29c:	df000015 	stw	fp,0(sp)
    b2a0:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    b2a4:	01800074 	movhi	r6,1
    b2a8:	31b27404 	addi	r6,r6,-13872
    b2ac:	01400074 	movhi	r5,1
    b2b0:	2971bc04 	addi	r5,r5,-14608
    b2b4:	01000074 	movhi	r4,1
    b2b8:	21327404 	addi	r4,r4,-13872
    b2bc:	000b22c0 	call	b22c <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    b2c0:	01800074 	movhi	r6,1
    b2c4:	31a00804 	addi	r6,r6,-32736
    b2c8:	01400074 	movhi	r5,1
    b2cc:	29600804 	addi	r5,r5,-32736
    b2d0:	01000074 	movhi	r4,1
    b2d4:	21200804 	addi	r4,r4,-32736
    b2d8:	000b22c0 	call	b22c <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    b2dc:	01800074 	movhi	r6,1
    b2e0:	31b1bc04 	addi	r6,r6,-14608
    b2e4:	01400074 	movhi	r5,1
    b2e8:	2971af04 	addi	r5,r5,-14660
    b2ec:	01000074 	movhi	r4,1
    b2f0:	2131af04 	addi	r4,r4,-14660
    b2f4:	000b22c0 	call	b22c <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    b2f8:	000bc580 	call	bc58 <alt_dcache_flush_all>
  alt_icache_flush_all();
    b2fc:	000bd840 	call	bd84 <alt_icache_flush_all>
}
    b300:	0001883a 	nop
    b304:	e037883a 	mov	sp,fp
    b308:	dfc00117 	ldw	ra,4(sp)
    b30c:	df000017 	ldw	fp,0(sp)
    b310:	dec00204 	addi	sp,sp,8
    b314:	f800283a 	ret

0000b318 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    b318:	defffd04 	addi	sp,sp,-12
    b31c:	dfc00215 	stw	ra,8(sp)
    b320:	df000115 	stw	fp,4(sp)
    b324:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    b328:	0009883a 	mov	r4,zero
    b32c:	000b3b80 	call	b3b8 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    b330:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    b334:	000b3f00 	call	b3f0 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    b338:	01800074 	movhi	r6,1
    b33c:	31b1af04 	addi	r6,r6,-14660
    b340:	01400074 	movhi	r5,1
    b344:	2971af04 	addi	r5,r5,-14660
    b348:	01000074 	movhi	r4,1
    b34c:	2131af04 	addi	r4,r4,-14660
    b350:	000be880 	call	be88 <alt_io_redirect>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    b354:	d0a0c417 	ldw	r2,-31984(gp)
    b358:	d0e0c517 	ldw	r3,-31980(gp)
    b35c:	d120c617 	ldw	r4,-31976(gp)
    b360:	200d883a 	mov	r6,r4
    b364:	180b883a 	mov	r5,r3
    b368:	1009883a 	mov	r4,r2
    b36c:	00096fc0 	call	96fc <main>
    b370:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    b374:	01000044 	movi	r4,1
    b378:	000bb800 	call	bb80 <close>
  exit (result);
    b37c:	e13fff17 	ldw	r4,-4(fp)
    b380:	000c48c0 	call	c48c <exit>

0000b384 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    b384:	defffd04 	addi	sp,sp,-12
    b388:	dfc00215 	stw	ra,8(sp)
    b38c:	df000115 	stw	fp,4(sp)
    b390:	df000104 	addi	fp,sp,4
    b394:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    b398:	d1600504 	addi	r5,gp,-32748
    b39c:	e13fff17 	ldw	r4,-4(fp)
    b3a0:	000bce00 	call	bce0 <alt_dev_llist_insert>
}
    b3a4:	e037883a 	mov	sp,fp
    b3a8:	dfc00117 	ldw	ra,4(sp)
    b3ac:	df000017 	ldw	fp,0(sp)
    b3b0:	dec00204 	addi	sp,sp,8
    b3b4:	f800283a 	ret

0000b3b8 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    b3b8:	defffd04 	addi	sp,sp,-12
    b3bc:	dfc00215 	stw	ra,8(sp)
    b3c0:	df000115 	stw	fp,4(sp)
    b3c4:	df000104 	addi	fp,sp,4
    b3c8:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_CPU, nios2_cpu);
    b3cc:	000c20c0 	call	c20c <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    b3d0:	00800044 	movi	r2,1
    b3d4:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    b3d8:	0001883a 	nop
    b3dc:	e037883a 	mov	sp,fp
    b3e0:	dfc00117 	ldw	ra,4(sp)
    b3e4:	df000017 	ldw	fp,0(sp)
    b3e8:	dec00204 	addi	sp,sp,8
    b3ec:	f800283a 	ret

0000b3f0 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    b3f0:	defffe04 	addi	sp,sp,-8
    b3f4:	dfc00115 	stw	ra,4(sp)
    b3f8:	df000015 	stw	fp,0(sp)
    b3fc:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
    b400:	01000074 	movhi	r4,1
    b404:	2131bc04 	addi	r4,r4,-14608
    b408:	000b3840 	call	b384 <alt_dev_reg>
    ALTERA_AVALON_SPI_INIT ( DAC_SPI1, dac_spi1);
    b40c:	0001883a 	nop
    ALTERA_AVALON_SPI_INIT ( FPGA_SPI0, fpga_spi0);
    b410:	0001883a 	nop
    ALTERA_AVALON_SPI_INIT ( PLLCFG_SPI, PLLCFG_SPI);
    b414:	0001883a 	nop
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
    b418:	0001883a 	nop
    I2C_OPENCORES_INIT ( I2C_OPENCORES_0, i2c_opencores_0);
    b41c:	0001883a 	nop
}
    b420:	0001883a 	nop
    b424:	e037883a 	mov	sp,fp
    b428:	dfc00117 	ldw	ra,4(sp)
    b42c:	df000017 	ldw	fp,0(sp)
    b430:	dec00204 	addi	sp,sp,8
    b434:	f800283a 	ret

0000b438 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    b438:	defffa04 	addi	sp,sp,-24
    b43c:	dfc00515 	stw	ra,20(sp)
    b440:	df000415 	stw	fp,16(sp)
    b444:	df000404 	addi	fp,sp,16
    b448:	e13ffd15 	stw	r4,-12(fp)
    b44c:	e17ffe15 	stw	r5,-8(fp)
    b450:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    b454:	e0bffd17 	ldw	r2,-12(fp)
    b458:	10800017 	ldw	r2,0(r2)
    b45c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    b460:	e0bffc17 	ldw	r2,-16(fp)
    b464:	10c00a04 	addi	r3,r2,40
    b468:	e0bffd17 	ldw	r2,-12(fp)
    b46c:	10800217 	ldw	r2,8(r2)
    b470:	100f883a 	mov	r7,r2
    b474:	e1bfff17 	ldw	r6,-4(fp)
    b478:	e17ffe17 	ldw	r5,-8(fp)
    b47c:	1809883a 	mov	r4,r3
    b480:	000b4f80 	call	b4f8 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    b484:	e037883a 	mov	sp,fp
    b488:	dfc00117 	ldw	ra,4(sp)
    b48c:	df000017 	ldw	fp,0(sp)
    b490:	dec00204 	addi	sp,sp,8
    b494:	f800283a 	ret

0000b498 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    b498:	defffa04 	addi	sp,sp,-24
    b49c:	dfc00515 	stw	ra,20(sp)
    b4a0:	df000415 	stw	fp,16(sp)
    b4a4:	df000404 	addi	fp,sp,16
    b4a8:	e13ffd15 	stw	r4,-12(fp)
    b4ac:	e17ffe15 	stw	r5,-8(fp)
    b4b0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    b4b4:	e0bffd17 	ldw	r2,-12(fp)
    b4b8:	10800017 	ldw	r2,0(r2)
    b4bc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    b4c0:	e0bffc17 	ldw	r2,-16(fp)
    b4c4:	10c00a04 	addi	r3,r2,40
    b4c8:	e0bffd17 	ldw	r2,-12(fp)
    b4cc:	10800217 	ldw	r2,8(r2)
    b4d0:	100f883a 	mov	r7,r2
    b4d4:	e1bfff17 	ldw	r6,-4(fp)
    b4d8:	e17ffe17 	ldw	r5,-8(fp)
    b4dc:	1809883a 	mov	r4,r3
    b4e0:	000b5e40 	call	b5e4 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    b4e4:	e037883a 	mov	sp,fp
    b4e8:	dfc00117 	ldw	ra,4(sp)
    b4ec:	df000017 	ldw	fp,0(sp)
    b4f0:	dec00204 	addi	sp,sp,8
    b4f4:	f800283a 	ret

0000b4f8 <altera_avalon_jtag_uart_read>:
 */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
    b4f8:	defff704 	addi	sp,sp,-36
    b4fc:	df000815 	stw	fp,32(sp)
    b500:	df000804 	addi	fp,sp,32
    b504:	e13ffc15 	stw	r4,-16(fp)
    b508:	e17ffd15 	stw	r5,-12(fp)
    b50c:	e1bffe15 	stw	r6,-8(fp)
    b510:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
    b514:	e0bffc17 	ldw	r2,-16(fp)
    b518:	10800017 	ldw	r2,0(r2)
    b51c:	e0bff915 	stw	r2,-28(fp)

  char * ptr = buffer;
    b520:	e0bffd17 	ldw	r2,-12(fp)
    b524:	e0bff815 	stw	r2,-32(fp)
  char * end = buffer + space;
    b528:	e0bffe17 	ldw	r2,-8(fp)
    b52c:	e0fffd17 	ldw	r3,-12(fp)
    b530:	1885883a 	add	r2,r3,r2
    b534:	e0bffa15 	stw	r2,-24(fp)

  while (ptr < end)
    b538:	00001206 	br	b584 <altera_avalon_jtag_uart_read+0x8c>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    b53c:	e0bff917 	ldw	r2,-28(fp)
    b540:	10800037 	ldwio	r2,0(r2)
    b544:	e0bffb15 	stw	r2,-20(fp)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
    b548:	e0bffb17 	ldw	r2,-20(fp)
    b54c:	10a0000c 	andi	r2,r2,32768
    b550:	10000626 	beq	r2,zero,b56c <altera_avalon_jtag_uart_read+0x74>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    b554:	e0bff817 	ldw	r2,-32(fp)
    b558:	10c00044 	addi	r3,r2,1
    b55c:	e0fff815 	stw	r3,-32(fp)
    b560:	e0fffb17 	ldw	r3,-20(fp)
    b564:	10c00005 	stb	r3,0(r2)
    b568:	00000606 	br	b584 <altera_avalon_jtag_uart_read+0x8c>
    else if (ptr != buffer)
    b56c:	e0fff817 	ldw	r3,-32(fp)
    b570:	e0bffd17 	ldw	r2,-12(fp)
    b574:	1880071e 	bne	r3,r2,b594 <altera_avalon_jtag_uart_read+0x9c>
      break;
    else if(flags & O_NONBLOCK)
    b578:	e0bfff17 	ldw	r2,-4(fp)
    b57c:	1090000c 	andi	r2,r2,16384
    b580:	1000061e 	bne	r2,zero,b59c <altera_avalon_jtag_uart_read+0xa4>
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
    b584:	e0fff817 	ldw	r3,-32(fp)
    b588:	e0bffa17 	ldw	r2,-24(fp)
    b58c:	18bfeb36 	bltu	r3,r2,b53c <_gp+0xffff6b98>
    b590:	00000306 	br	b5a0 <altera_avalon_jtag_uart_read+0xa8>
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
    b594:	0001883a 	nop
    b598:	00000106 	br	b5a0 <altera_avalon_jtag_uart_read+0xa8>
    else if(flags & O_NONBLOCK)
      break;   
    b59c:	0001883a 	nop
    
  }

  if (ptr != buffer)
    b5a0:	e0fff817 	ldw	r3,-32(fp)
    b5a4:	e0bffd17 	ldw	r2,-12(fp)
    b5a8:	18800426 	beq	r3,r2,b5bc <altera_avalon_jtag_uart_read+0xc4>
    return ptr - buffer;
    b5ac:	e0fff817 	ldw	r3,-32(fp)
    b5b0:	e0bffd17 	ldw	r2,-12(fp)
    b5b4:	1885c83a 	sub	r2,r3,r2
    b5b8:	00000606 	br	b5d4 <altera_avalon_jtag_uart_read+0xdc>
  else if (flags & O_NONBLOCK)
    b5bc:	e0bfff17 	ldw	r2,-4(fp)
    b5c0:	1090000c 	andi	r2,r2,16384
    b5c4:	10000226 	beq	r2,zero,b5d0 <altera_avalon_jtag_uart_read+0xd8>
    return -EWOULDBLOCK;
    b5c8:	00bffd44 	movi	r2,-11
    b5cc:	00000106 	br	b5d4 <altera_avalon_jtag_uart_read+0xdc>
  else
    return -EIO;
    b5d0:	00bffec4 	movi	r2,-5
}
    b5d4:	e037883a 	mov	sp,fp
    b5d8:	df000017 	ldw	fp,0(sp)
    b5dc:	dec00104 	addi	sp,sp,4
    b5e0:	f800283a 	ret

0000b5e4 <altera_avalon_jtag_uart_write>:
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    b5e4:	defff904 	addi	sp,sp,-28
    b5e8:	df000615 	stw	fp,24(sp)
    b5ec:	df000604 	addi	fp,sp,24
    b5f0:	e13ffc15 	stw	r4,-16(fp)
    b5f4:	e17ffd15 	stw	r5,-12(fp)
    b5f8:	e1bffe15 	stw	r6,-8(fp)
    b5fc:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
    b600:	e0bffc17 	ldw	r2,-16(fp)
    b604:	10800017 	ldw	r2,0(r2)
    b608:	e0bffa15 	stw	r2,-24(fp)

  const char * end = ptr + count;
    b60c:	e0bffe17 	ldw	r2,-8(fp)
    b610:	e0fffd17 	ldw	r3,-12(fp)
    b614:	1885883a 	add	r2,r3,r2
    b618:	e0bffb15 	stw	r2,-20(fp)

  while (ptr < end)
    b61c:	00000e06 	br	b658 <altera_avalon_jtag_uart_write+0x74>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    b620:	e0bffa17 	ldw	r2,-24(fp)
    b624:	10800104 	addi	r2,r2,4
    b628:	10800037 	ldwio	r2,0(r2)
    b62c:	10bfffec 	andhi	r2,r2,65535
    b630:	10000926 	beq	r2,zero,b658 <altera_avalon_jtag_uart_write+0x74>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    b634:	e0fffa17 	ldw	r3,-24(fp)
    b638:	e0bffd17 	ldw	r2,-12(fp)
    b63c:	11000044 	addi	r4,r2,1
    b640:	e13ffd15 	stw	r4,-12(fp)
    b644:	10800003 	ldbu	r2,0(r2)
    b648:	10803fcc 	andi	r2,r2,255
    b64c:	1080201c 	xori	r2,r2,128
    b650:	10bfe004 	addi	r2,r2,-128
    b654:	18800035 	stwio	r2,0(r3)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
    b658:	e0fffd17 	ldw	r3,-12(fp)
    b65c:	e0bffb17 	ldw	r2,-20(fp)
    b660:	18bfef36 	bltu	r3,r2,b620 <_gp+0xffff6c7c>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
    b664:	e0bffe17 	ldw	r2,-8(fp)
}
    b668:	e037883a 	mov	sp,fp
    b66c:	df000017 	ldw	fp,0(sp)
    b670:	dec00104 	addi	sp,sp,4
    b674:	f800283a 	ret

0000b678 <alt_avalon_spi_command>:

int alt_avalon_spi_command(alt_u32 base, alt_u32 slave,
                           alt_u32 write_length, const alt_u8 * write_data,
                           alt_u32 read_length, alt_u8 * read_data,
                           alt_u32 flags)
{
    b678:	defff404 	addi	sp,sp,-48
    b67c:	df000b15 	stw	fp,44(sp)
    b680:	df000b04 	addi	fp,sp,44
    b684:	e13ffc15 	stw	r4,-16(fp)
    b688:	e17ffd15 	stw	r5,-12(fp)
    b68c:	e1bffe15 	stw	r6,-8(fp)
    b690:	e1ffff15 	stw	r7,-4(fp)
  const alt_u8 * write_end = write_data + write_length;
    b694:	e0ffff17 	ldw	r3,-4(fp)
    b698:	e0bffe17 	ldw	r2,-8(fp)
    b69c:	1885883a 	add	r2,r3,r2
    b6a0:	e0bff815 	stw	r2,-32(fp)
  alt_u8 * read_end = read_data + read_length;
    b6a4:	e0c00217 	ldw	r3,8(fp)
    b6a8:	e0800117 	ldw	r2,4(fp)
    b6ac:	1885883a 	add	r2,r3,r2
    b6b0:	e0bff915 	stw	r2,-28(fp)

  alt_u32 write_zeros = read_length;
    b6b4:	e0800117 	ldw	r2,4(fp)
    b6b8:	e0bff515 	stw	r2,-44(fp)
  alt_u32 read_ignore = write_length;
    b6bc:	e0bffe17 	ldw	r2,-8(fp)
    b6c0:	e0bff615 	stw	r2,-40(fp)

  /* We must not send more than two bytes to the target before it has
   * returned any as otherwise it will overflow. */
  /* Unfortunately the hardware does not seem to work with credits > 1,
   * leave it at 1 for now. */
  alt_32 credits = 1;
    b6c4:	00800044 	movi	r2,1
    b6c8:	e0bff715 	stw	r2,-36(fp)
  /* Warning: this function is not currently safe if called in a multi-threaded
   * environment, something above must perform locking to make it safe if more
   * than one thread intends to use it.
   */

  IOWR_ALTERA_AVALON_SPI_SLAVE_SEL(base, 1 << slave);
    b6cc:	e0bffc17 	ldw	r2,-16(fp)
    b6d0:	10800504 	addi	r2,r2,20
    b6d4:	1009883a 	mov	r4,r2
    b6d8:	00c00044 	movi	r3,1
    b6dc:	e0bffd17 	ldw	r2,-12(fp)
    b6e0:	1884983a 	sll	r2,r3,r2
    b6e4:	20800035 	stwio	r2,0(r4)
  
  /* Set the SSO bit (force chipselect) only if the toggle flag is not set */
  if ((flags & ALT_AVALON_SPI_COMMAND_TOGGLE_SS_N) == 0) {
    b6e8:	e0800317 	ldw	r2,12(fp)
    b6ec:	1080008c 	andi	r2,r2,2
    b6f0:	1000051e 	bne	r2,zero,b708 <alt_avalon_spi_command+0x90>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, ALTERA_AVALON_SPI_CONTROL_SSO_MSK);
    b6f4:	e0bffc17 	ldw	r2,-16(fp)
    b6f8:	10800304 	addi	r2,r2,12
    b6fc:	1007883a 	mov	r3,r2
    b700:	00810004 	movi	r2,1024
    b704:	18800035 	stwio	r2,0(r3)
  /*
   * Discard any stale data present in the RXDATA register, in case
   * previous communication was interrupted and stale data was left
   * behind.
   */
  IORD_ALTERA_AVALON_SPI_RXDATA(base);
    b708:	e0bffc17 	ldw	r2,-16(fp)
    b70c:	10800037 	ldwio	r2,0(r2)
  for ( ; ; )
  {
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    b710:	e0bffc17 	ldw	r2,-16(fp)
    b714:	10800204 	addi	r2,r2,8
    b718:	10800037 	ldwio	r2,0(r2)
    b71c:	e0bffa15 	stw	r2,-24(fp)
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
    b720:	e0bffa17 	ldw	r2,-24(fp)
    b724:	1080100c 	andi	r2,r2,64
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
    b728:	10000226 	beq	r2,zero,b734 <alt_avalon_spi_command+0xbc>
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
    b72c:	e0bff717 	ldw	r2,-36(fp)
    b730:	1000031e 	bne	r2,zero,b740 <alt_avalon_spi_command+0xc8>
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
    b734:	e0bffa17 	ldw	r2,-24(fp)
    b738:	1080200c 	andi	r2,r2,128
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
    b73c:	103ff426 	beq	r2,zero,b710 <_gp+0xffff6d6c>
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);

    if ((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) != 0 && credits > 0)
    b740:	e0bffa17 	ldw	r2,-24(fp)
    b744:	1080100c 	andi	r2,r2,64
    b748:	10001e26 	beq	r2,zero,b7c4 <alt_avalon_spi_command+0x14c>
    b74c:	e0bff717 	ldw	r2,-36(fp)
    b750:	00801c0e 	bge	zero,r2,b7c4 <alt_avalon_spi_command+0x14c>
    {
      credits--;
    b754:	e0bff717 	ldw	r2,-36(fp)
    b758:	10bfffc4 	addi	r2,r2,-1
    b75c:	e0bff715 	stw	r2,-36(fp)

      if (write_data < write_end)
    b760:	e0ffff17 	ldw	r3,-4(fp)
    b764:	e0bff817 	ldw	r2,-32(fp)
    b768:	18800a2e 	bgeu	r3,r2,b794 <alt_avalon_spi_command+0x11c>
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, *write_data++);
    b76c:	e0bffc17 	ldw	r2,-16(fp)
    b770:	10800104 	addi	r2,r2,4
    b774:	1009883a 	mov	r4,r2
    b778:	e0bfff17 	ldw	r2,-4(fp)
    b77c:	10c00044 	addi	r3,r2,1
    b780:	e0ffff15 	stw	r3,-4(fp)
    b784:	10800003 	ldbu	r2,0(r2)
    b788:	10803fcc 	andi	r2,r2,255
    b78c:	20800035 	stwio	r2,0(r4)
    b790:	00000c06 	br	b7c4 <alt_avalon_spi_command+0x14c>
      else if (write_zeros > 0)
    b794:	e0bff517 	ldw	r2,-44(fp)
    b798:	10000826 	beq	r2,zero,b7bc <alt_avalon_spi_command+0x144>
      {
        write_zeros--;
    b79c:	e0bff517 	ldw	r2,-44(fp)
    b7a0:	10bfffc4 	addi	r2,r2,-1
    b7a4:	e0bff515 	stw	r2,-44(fp)
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, 0);
    b7a8:	e0bffc17 	ldw	r2,-16(fp)
    b7ac:	10800104 	addi	r2,r2,4
    b7b0:	0007883a 	mov	r3,zero
    b7b4:	10c00035 	stwio	r3,0(r2)
    b7b8:	00000206 	br	b7c4 <alt_avalon_spi_command+0x14c>
      }
      else
        credits = -1024;
    b7bc:	00bf0004 	movi	r2,-1024
    b7c0:	e0bff715 	stw	r2,-36(fp)
    };

    if ((status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) != 0)
    b7c4:	e0bffa17 	ldw	r2,-24(fp)
    b7c8:	1080200c 	andi	r2,r2,128
    b7cc:	103fd026 	beq	r2,zero,b710 <_gp+0xffff6d6c>
    {
      alt_u32 rxdata = IORD_ALTERA_AVALON_SPI_RXDATA(base);
    b7d0:	e0bffc17 	ldw	r2,-16(fp)
    b7d4:	10800037 	ldwio	r2,0(r2)
    b7d8:	e0bffb15 	stw	r2,-20(fp)

      if (read_ignore > 0)
    b7dc:	e0bff617 	ldw	r2,-40(fp)
    b7e0:	10000426 	beq	r2,zero,b7f4 <alt_avalon_spi_command+0x17c>
        read_ignore--;
    b7e4:	e0bff617 	ldw	r2,-40(fp)
    b7e8:	10bfffc4 	addi	r2,r2,-1
    b7ec:	e0bff615 	stw	r2,-40(fp)
    b7f0:	00000506 	br	b808 <alt_avalon_spi_command+0x190>
      else
        *read_data++ = (alt_u8)rxdata;
    b7f4:	e0800217 	ldw	r2,8(fp)
    b7f8:	10c00044 	addi	r3,r2,1
    b7fc:	e0c00215 	stw	r3,8(fp)
    b800:	e0fffb17 	ldw	r3,-20(fp)
    b804:	10c00005 	stb	r3,0(r2)
      credits++;
    b808:	e0bff717 	ldw	r2,-36(fp)
    b80c:	10800044 	addi	r2,r2,1
    b810:	e0bff715 	stw	r2,-36(fp)

      if (read_ignore == 0 && read_data == read_end)
    b814:	e0bff617 	ldw	r2,-40(fp)
    b818:	103fbd1e 	bne	r2,zero,b710 <_gp+0xffff6d6c>
    b81c:	e0c00217 	ldw	r3,8(fp)
    b820:	e0bff917 	ldw	r2,-28(fp)
    b824:	18bfba1e 	bne	r3,r2,b710 <_gp+0xffff6d6c>
  }

  /* Wait until the interface has finished transmitting */
  do
  {
    status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    b828:	e0bffc17 	ldw	r2,-16(fp)
    b82c:	10800204 	addi	r2,r2,8
    b830:	10800037 	ldwio	r2,0(r2)
    b834:	e0bffa15 	stw	r2,-24(fp)
  }
  while ((status & ALTERA_AVALON_SPI_STATUS_TMT_MSK) == 0);
    b838:	e0bffa17 	ldw	r2,-24(fp)
    b83c:	1080080c 	andi	r2,r2,32
    b840:	103ff926 	beq	r2,zero,b828 <_gp+0xffff6e84>

  /* Clear SSO (release chipselect) unless the caller is going to
   * keep using this chip
   */
  if ((flags & ALT_AVALON_SPI_COMMAND_MERGE) == 0)
    b844:	e0800317 	ldw	r2,12(fp)
    b848:	1080004c 	andi	r2,r2,1
    b84c:	1000041e 	bne	r2,zero,b860 <alt_avalon_spi_command+0x1e8>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, 0);
    b850:	e0bffc17 	ldw	r2,-16(fp)
    b854:	10800304 	addi	r2,r2,12
    b858:	0007883a 	mov	r3,zero
    b85c:	10c00035 	stwio	r3,0(r2)

  return read_length;
    b860:	e0800117 	ldw	r2,4(fp)
}
    b864:	e037883a 	mov	sp,fp
    b868:	df000017 	ldw	fp,0(sp)
    b86c:	dec00104 	addi	sp,sp,4
    b870:	f800283a 	ret

0000b874 <I2C_init>:
      clk = freuqency of the clock driving this component  ( in Hz)
      speed = SCL speed ie 100K, 400K ...            (in Hz)
15-OCT-07 initial release
*****************************************************************/
void I2C_init(alt_u32 base,alt_u32 clk,alt_u32 speed)
{
    b874:	defffa04 	addi	sp,sp,-24
    b878:	dfc00515 	stw	ra,20(sp)
    b87c:	df000415 	stw	fp,16(sp)
    b880:	df000404 	addi	fp,sp,16
    b884:	e13ffd15 	stw	r4,-12(fp)
    b888:	e17ffe15 	stw	r5,-8(fp)
    b88c:	e1bfff15 	stw	r6,-4(fp)
  alt_u32 prescale = (clk/( 5 * speed))-1;
    b890:	01400144 	movi	r5,5
    b894:	e13fff17 	ldw	r4,-4(fp)
    b898:	000b1e40 	call	b1e4 <__mulsi3>
    b89c:	100b883a 	mov	r5,r2
    b8a0:	e13ffe17 	ldw	r4,-8(fp)
    b8a4:	000b1280 	call	b128 <__udivsi3>
    b8a8:	10bfffc4 	addi	r2,r2,-1
    b8ac:	e0bffc15 	stw	r2,-16(fp)
#ifdef  I2C_DEBUG
        printf(" Initializing  I2C at 0x%x, \n\twith clock speed 0x%x \n\tand SCL speed 0x%x \n\tand prescale 0x%x\n",base,clk,speed,prescale);
#endif
  IOWR_I2C_OPENCORES_CTR(base, 0x00); /* turn off the core*/
    b8b0:	e0bffd17 	ldw	r2,-12(fp)
    b8b4:	10800204 	addi	r2,r2,8
    b8b8:	0007883a 	mov	r3,zero
    b8bc:	10c00035 	stwio	r3,0(r2)

  IOWR_I2C_OPENCORES_CR(base, I2C_OPENCORES_CR_IACK_MSK); /* clearn any pening IRQ*/
    b8c0:	e0bffd17 	ldw	r2,-12(fp)
    b8c4:	10800404 	addi	r2,r2,16
    b8c8:	1007883a 	mov	r3,r2
    b8cc:	00800044 	movi	r2,1
    b8d0:	18800035 	stwio	r2,0(r3)

  IOWR_I2C_OPENCORES_PRERLO(base, (0xff & prescale));  /* load low presacle bit*/
    b8d4:	e0bffd17 	ldw	r2,-12(fp)
    b8d8:	e0fffc17 	ldw	r3,-16(fp)
    b8dc:	18c03fcc 	andi	r3,r3,255
    b8e0:	10c00035 	stwio	r3,0(r2)

  IOWR_I2C_OPENCORES_PRERHI(base, (0xff & (prescale>>8)));  /* load upper prescale bit */
    b8e4:	e0bffd17 	ldw	r2,-12(fp)
    b8e8:	10800104 	addi	r2,r2,4
    b8ec:	1007883a 	mov	r3,r2
    b8f0:	e0bffc17 	ldw	r2,-16(fp)
    b8f4:	1004d23a 	srli	r2,r2,8
    b8f8:	10803fcc 	andi	r2,r2,255
    b8fc:	18800035 	stwio	r2,0(r3)

  IOWR_I2C_OPENCORES_CTR(base, I2C_OPENCORES_CTR_EN_MSK); /* turn on the core*/
    b900:	e0bffd17 	ldw	r2,-12(fp)
    b904:	10800204 	addi	r2,r2,8
    b908:	1007883a 	mov	r3,r2
    b90c:	00802004 	movi	r2,128
    b910:	18800035 	stwio	r2,0(r3)

}
    b914:	0001883a 	nop
    b918:	e037883a 	mov	sp,fp
    b91c:	dfc00117 	ldw	ra,4(sp)
    b920:	df000017 	ldw	fp,0(sp)
    b924:	dec00204 	addi	sp,sp,8
    b928:	f800283a 	ret

0000b92c <I2C_start>:
       0 if address is acknowledged
       1 if address was not acknowledged
15-OCT-07 initial release
*****************************************************************/
int I2C_start(alt_u32 base, alt_u32 add, alt_u32 read)
{
    b92c:	defffb04 	addi	sp,sp,-20
    b930:	df000415 	stw	fp,16(sp)
    b934:	df000404 	addi	fp,sp,16
    b938:	e13ffd15 	stw	r4,-12(fp)
    b93c:	e17ffe15 	stw	r5,-8(fp)
    b940:	e1bfff15 	stw	r6,-4(fp)
	int retries = 0;
    b944:	e03ffc15 	stw	zero,-16(fp)
#ifdef  I2C_DEBUG
        printf(" Start  I2C at 0x%x, \n\twith address 0x%x \n\tand read 0x%x \n\tand prescale 0x%x\n",base,add,read);
#endif

          /* transmit the address shifted by one and the read/write bit*/
  IOWR_I2C_OPENCORES_TXR(base, ((add<<1) + (0x1 & read)));
    b948:	e0bffd17 	ldw	r2,-12(fp)
    b94c:	10800304 	addi	r2,r2,12
    b950:	1007883a 	mov	r3,r2
    b954:	e0bffe17 	ldw	r2,-8(fp)
    b958:	1085883a 	add	r2,r2,r2
    b95c:	1009883a 	mov	r4,r2
    b960:	e0bfff17 	ldw	r2,-4(fp)
    b964:	1080004c 	andi	r2,r2,1
    b968:	2085883a 	add	r2,r4,r2
    b96c:	18800035 	stwio	r2,0(r3)

          /* set start and write  bits which will start the transaction*/
  IOWR_I2C_OPENCORES_CR(base, I2C_OPENCORES_CR_STA_MSK | I2C_OPENCORES_CR_WR_MSK );
    b970:	e0bffd17 	ldw	r2,-12(fp)
    b974:	10800404 	addi	r2,r2,16
    b978:	1007883a 	mov	r3,r2
    b97c:	00802404 	movi	r2,144
    b980:	18800035 	stwio	r2,0(r3)

          /* wait for the trnasaction to be over.*/
  while( (IORD_I2C_OPENCORES_SR(base) & I2C_OPENCORES_SR_TIP_MSK) && (retries++ < MAX_RETRIES));
    b984:	0001883a 	nop
    b988:	e0bffd17 	ldw	r2,-12(fp)
    b98c:	10800404 	addi	r2,r2,16
    b990:	10800037 	ldwio	r2,0(r2)
    b994:	1080008c 	andi	r2,r2,2
    b998:	10000526 	beq	r2,zero,b9b0 <I2C_start+0x84>
    b99c:	e0bffc17 	ldw	r2,-16(fp)
    b9a0:	10c00044 	addi	r3,r2,1
    b9a4:	e0fffc15 	stw	r3,-16(fp)
    b9a8:	1080fa10 	cmplti	r2,r2,1000
    b9ac:	103ff61e 	bne	r2,zero,b988 <_gp+0xffff6fe4>

         /* now check to see if the address was acknowledged */
   if((IORD_I2C_OPENCORES_SR(base) & I2C_OPENCORES_SR_RXNACK_MSK) || retries >= MAX_RETRIES)
    b9b0:	e0bffd17 	ldw	r2,-12(fp)
    b9b4:	10800404 	addi	r2,r2,16
    b9b8:	10800037 	ldwio	r2,0(r2)
    b9bc:	1080200c 	andi	r2,r2,128
    b9c0:	1000031e 	bne	r2,zero,b9d0 <I2C_start+0xa4>
    b9c4:	e0bffc17 	ldw	r2,-16(fp)
    b9c8:	1080fa10 	cmplti	r2,r2,1000
    b9cc:	1000021e 	bne	r2,zero,b9d8 <I2C_start+0xac>
   {
#ifdef  I2C_DEBUG
        printf("\tNOACK\n");
#endif
        return (I2C_NOACK);
    b9d0:	00800044 	movi	r2,1
    b9d4:	00000106 	br	b9dc <I2C_start+0xb0>
   else
   {
#ifdef  I2C_DEBUG
        printf("\tACK\n");
#endif
       return (I2C_ACK);
    b9d8:	0005883a 	mov	r2,zero
   }
}
    b9dc:	e037883a 	mov	sp,fp
    b9e0:	df000017 	ldw	fp,0(sp)
    b9e4:	dec00104 	addi	sp,sp,4
    b9e8:	f800283a 	ret

0000b9ec <I2C_read>:
return value
       byte read back.
15-OCT-07 initial release
*****************************************************************/
alt_u32 I2C_read(alt_u32 base,alt_u32 last)
{
    b9ec:	defffc04 	addi	sp,sp,-16
    b9f0:	df000315 	stw	fp,12(sp)
    b9f4:	df000304 	addi	fp,sp,12
    b9f8:	e13ffe15 	stw	r4,-8(fp)
    b9fc:	e17fff15 	stw	r5,-4(fp)
	int retries = 0;
    ba00:	e03ffd15 	stw	zero,-12(fp)
#ifdef  I2C_DEBUG
        printf(" Read I2C at 0x%x, \n\twith last0x%x\n",base,last);
#endif
  if( last)
    ba04:	e0bfff17 	ldw	r2,-4(fp)
    ba08:	10000626 	beq	r2,zero,ba24 <I2C_read+0x38>
  {
               /* start a read and no ack and stop bit*/
           IOWR_I2C_OPENCORES_CR(base, I2C_OPENCORES_CR_RD_MSK |
    ba0c:	e0bffe17 	ldw	r2,-8(fp)
    ba10:	10800404 	addi	r2,r2,16
    ba14:	1007883a 	mov	r3,r2
    ba18:	00801a04 	movi	r2,104
    ba1c:	18800035 	stwio	r2,0(r3)
    ba20:	00000506 	br	ba38 <I2C_read+0x4c>
               I2C_OPENCORES_CR_NACK_MSK | I2C_OPENCORES_CR_STO_MSK);
  }
  else
  {
          /* start read*/
          IOWR_I2C_OPENCORES_CR(base, I2C_OPENCORES_CR_RD_MSK );
    ba24:	e0bffe17 	ldw	r2,-8(fp)
    ba28:	10800404 	addi	r2,r2,16
    ba2c:	1007883a 	mov	r3,r2
    ba30:	00800804 	movi	r2,32
    ba34:	18800035 	stwio	r2,0(r3)
  }
          /* wait for the trnasaction to be over.*/
  while( (IORD_I2C_OPENCORES_SR(base) & I2C_OPENCORES_SR_TIP_MSK) && (retries++ < MAX_RETRIES));
    ba38:	0001883a 	nop
    ba3c:	e0bffe17 	ldw	r2,-8(fp)
    ba40:	10800404 	addi	r2,r2,16
    ba44:	10800037 	ldwio	r2,0(r2)
    ba48:	1080008c 	andi	r2,r2,2
    ba4c:	10000526 	beq	r2,zero,ba64 <I2C_read+0x78>
    ba50:	e0bffd17 	ldw	r2,-12(fp)
    ba54:	10c00044 	addi	r3,r2,1
    ba58:	e0fffd15 	stw	r3,-12(fp)
    ba5c:	1080fa10 	cmplti	r2,r2,1000
    ba60:	103ff61e 	bne	r2,zero,ba3c <_gp+0xffff7098>

         /* now read the data */
        return (IORD_I2C_OPENCORES_RXR(base));
    ba64:	e0bffe17 	ldw	r2,-8(fp)
    ba68:	10800304 	addi	r2,r2,12
    ba6c:	10800037 	ldwio	r2,0(r2)

}
    ba70:	e037883a 	mov	sp,fp
    ba74:	df000017 	ldw	fp,0(sp)
    ba78:	dec00104 	addi	sp,sp,4
    ba7c:	f800283a 	ret

0000ba80 <I2C_write>:
       0 if address is acknowledged
       1 if address was not acknowledged
15-OCT-07 initial release
*****************************************************************/
alt_u32 I2C_write(alt_u32 base,alt_u8 data, alt_u32 last)
{
    ba80:	defffb04 	addi	sp,sp,-20
    ba84:	df000415 	stw	fp,16(sp)
    ba88:	df000404 	addi	fp,sp,16
    ba8c:	e13ffd15 	stw	r4,-12(fp)
    ba90:	2805883a 	mov	r2,r5
    ba94:	e1bfff15 	stw	r6,-4(fp)
    ba98:	e0bffe05 	stb	r2,-8(fp)
	int retries = 0;
    ba9c:	e03ffc15 	stw	zero,-16(fp)
  #ifdef  I2C_DEBUG
        printf(" Read I2C at 0x%x, \n\twith data 0x%x,\n\twith last0x%x\n",base,data,last);
#endif
                 /* transmit the data*/
  IOWR_I2C_OPENCORES_TXR(base, data);
    baa0:	e0bffd17 	ldw	r2,-12(fp)
    baa4:	10800304 	addi	r2,r2,12
    baa8:	1007883a 	mov	r3,r2
    baac:	e0bffe03 	ldbu	r2,-8(fp)
    bab0:	18800035 	stwio	r2,0(r3)

  if( last)
    bab4:	e0bfff17 	ldw	r2,-4(fp)
    bab8:	10000626 	beq	r2,zero,bad4 <I2C_write+0x54>
  {
               /* start a read and no ack and stop bit*/
           IOWR_I2C_OPENCORES_CR(base, I2C_OPENCORES_CR_WR_MSK |
    babc:	e0bffd17 	ldw	r2,-12(fp)
    bac0:	10800404 	addi	r2,r2,16
    bac4:	1007883a 	mov	r3,r2
    bac8:	00801404 	movi	r2,80
    bacc:	18800035 	stwio	r2,0(r3)
    bad0:	00000506 	br	bae8 <I2C_write+0x68>
               I2C_OPENCORES_CR_STO_MSK);
  }
  else
  {
          /* start read*/
          IOWR_I2C_OPENCORES_CR(base, I2C_OPENCORES_CR_WR_MSK );
    bad4:	e0bffd17 	ldw	r2,-12(fp)
    bad8:	10800404 	addi	r2,r2,16
    badc:	1007883a 	mov	r3,r2
    bae0:	00800404 	movi	r2,16
    bae4:	18800035 	stwio	r2,0(r3)
  }
           /* wait for the trnasaction to be over.*/
  while( (IORD_I2C_OPENCORES_SR(base) & I2C_OPENCORES_SR_TIP_MSK) && (retries++ < MAX_RETRIES));
    bae8:	0001883a 	nop
    baec:	e0bffd17 	ldw	r2,-12(fp)
    baf0:	10800404 	addi	r2,r2,16
    baf4:	10800037 	ldwio	r2,0(r2)
    baf8:	1080008c 	andi	r2,r2,2
    bafc:	10000526 	beq	r2,zero,bb14 <I2C_write+0x94>
    bb00:	e0bffc17 	ldw	r2,-16(fp)
    bb04:	10c00044 	addi	r3,r2,1
    bb08:	e0fffc15 	stw	r3,-16(fp)
    bb0c:	1080fa10 	cmplti	r2,r2,1000
    bb10:	103ff61e 	bne	r2,zero,baec <_gp+0xffff7148>

         /* now check to see if the address was acknowledged */
   if(IORD_I2C_OPENCORES_SR(base) & I2C_OPENCORES_SR_RXNACK_MSK)
    bb14:	e0bffd17 	ldw	r2,-12(fp)
    bb18:	10800404 	addi	r2,r2,16
    bb1c:	10800037 	ldwio	r2,0(r2)
    bb20:	1080200c 	andi	r2,r2,128
    bb24:	10000226 	beq	r2,zero,bb30 <I2C_write+0xb0>
   {
#ifdef  I2C_DEBUG
        printf("\tNOACK\n");
#endif
        return (I2C_NOACK);
    bb28:	00800044 	movi	r2,1
    bb2c:	00000106 	br	bb34 <I2C_write+0xb4>
   else
   {
#ifdef  I2C_DEBUG
        printf("\tACK\n");
#endif
       return (I2C_ACK);
    bb30:	0005883a 	mov	r2,zero
   }

}
    bb34:	e037883a 	mov	sp,fp
    bb38:	df000017 	ldw	fp,0(sp)
    bb3c:	dec00104 	addi	sp,sp,4
    bb40:	f800283a 	ret

0000bb44 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    bb44:	defffe04 	addi	sp,sp,-8
    bb48:	dfc00115 	stw	ra,4(sp)
    bb4c:	df000015 	stw	fp,0(sp)
    bb50:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    bb54:	d0a00817 	ldw	r2,-32736(gp)
    bb58:	10000326 	beq	r2,zero,bb68 <alt_get_errno+0x24>
    bb5c:	d0a00817 	ldw	r2,-32736(gp)
    bb60:	103ee83a 	callr	r2
    bb64:	00000106 	br	bb6c <alt_get_errno+0x28>
    bb68:	d0a0c704 	addi	r2,gp,-31972
}
    bb6c:	e037883a 	mov	sp,fp
    bb70:	dfc00117 	ldw	ra,4(sp)
    bb74:	df000017 	ldw	fp,0(sp)
    bb78:	dec00204 	addi	sp,sp,8
    bb7c:	f800283a 	ret

0000bb80 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    bb80:	defffb04 	addi	sp,sp,-20
    bb84:	dfc00415 	stw	ra,16(sp)
    bb88:	df000315 	stw	fp,12(sp)
    bb8c:	df000304 	addi	fp,sp,12
    bb90:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    bb94:	e0bfff17 	ldw	r2,-4(fp)
    bb98:	10000816 	blt	r2,zero,bbbc <close+0x3c>
    bb9c:	01400304 	movi	r5,12
    bba0:	e13fff17 	ldw	r4,-4(fp)
    bba4:	000b1e40 	call	b1e4 <__mulsi3>
    bba8:	1007883a 	mov	r3,r2
    bbac:	00800074 	movhi	r2,1
    bbb0:	10b1d104 	addi	r2,r2,-14524
    bbb4:	1885883a 	add	r2,r3,r2
    bbb8:	00000106 	br	bbc0 <close+0x40>
    bbbc:	0005883a 	mov	r2,zero
    bbc0:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
    bbc4:	e0bffd17 	ldw	r2,-12(fp)
    bbc8:	10001926 	beq	r2,zero,bc30 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    bbcc:	e0bffd17 	ldw	r2,-12(fp)
    bbd0:	10800017 	ldw	r2,0(r2)
    bbd4:	10800417 	ldw	r2,16(r2)
    bbd8:	10000626 	beq	r2,zero,bbf4 <close+0x74>
    bbdc:	e0bffd17 	ldw	r2,-12(fp)
    bbe0:	10800017 	ldw	r2,0(r2)
    bbe4:	10800417 	ldw	r2,16(r2)
    bbe8:	e13ffd17 	ldw	r4,-12(fp)
    bbec:	103ee83a 	callr	r2
    bbf0:	00000106 	br	bbf8 <close+0x78>
    bbf4:	0005883a 	mov	r2,zero
    bbf8:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    bbfc:	e13fff17 	ldw	r4,-4(fp)
    bc00:	000c1880 	call	c188 <alt_release_fd>
    if (rval < 0)
    bc04:	e0bffe17 	ldw	r2,-8(fp)
    bc08:	1000070e 	bge	r2,zero,bc28 <close+0xa8>
    {
      ALT_ERRNO = -rval;
    bc0c:	000bb440 	call	bb44 <alt_get_errno>
    bc10:	1007883a 	mov	r3,r2
    bc14:	e0bffe17 	ldw	r2,-8(fp)
    bc18:	0085c83a 	sub	r2,zero,r2
    bc1c:	18800015 	stw	r2,0(r3)
      return -1;
    bc20:	00bfffc4 	movi	r2,-1
    bc24:	00000706 	br	bc44 <close+0xc4>
    }
    return 0;
    bc28:	0005883a 	mov	r2,zero
    bc2c:	00000506 	br	bc44 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    bc30:	000bb440 	call	bb44 <alt_get_errno>
    bc34:	1007883a 	mov	r3,r2
    bc38:	00801444 	movi	r2,81
    bc3c:	18800015 	stw	r2,0(r3)
    return -1;
    bc40:	00bfffc4 	movi	r2,-1
  }
}
    bc44:	e037883a 	mov	sp,fp
    bc48:	dfc00117 	ldw	ra,4(sp)
    bc4c:	df000017 	ldw	fp,0(sp)
    bc50:	dec00204 	addi	sp,sp,8
    bc54:	f800283a 	ret

0000bc58 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    bc58:	deffff04 	addi	sp,sp,-4
    bc5c:	df000015 	stw	fp,0(sp)
    bc60:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    bc64:	0001883a 	nop
    bc68:	e037883a 	mov	sp,fp
    bc6c:	df000017 	ldw	fp,0(sp)
    bc70:	dec00104 	addi	sp,sp,4
    bc74:	f800283a 	ret

0000bc78 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    bc78:	defffc04 	addi	sp,sp,-16
    bc7c:	df000315 	stw	fp,12(sp)
    bc80:	df000304 	addi	fp,sp,12
    bc84:	e13ffd15 	stw	r4,-12(fp)
    bc88:	e17ffe15 	stw	r5,-8(fp)
    bc8c:	e1bfff15 	stw	r6,-4(fp)
  return len;
    bc90:	e0bfff17 	ldw	r2,-4(fp)
}
    bc94:	e037883a 	mov	sp,fp
    bc98:	df000017 	ldw	fp,0(sp)
    bc9c:	dec00104 	addi	sp,sp,4
    bca0:	f800283a 	ret

0000bca4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    bca4:	defffe04 	addi	sp,sp,-8
    bca8:	dfc00115 	stw	ra,4(sp)
    bcac:	df000015 	stw	fp,0(sp)
    bcb0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    bcb4:	d0a00817 	ldw	r2,-32736(gp)
    bcb8:	10000326 	beq	r2,zero,bcc8 <alt_get_errno+0x24>
    bcbc:	d0a00817 	ldw	r2,-32736(gp)
    bcc0:	103ee83a 	callr	r2
    bcc4:	00000106 	br	bccc <alt_get_errno+0x28>
    bcc8:	d0a0c704 	addi	r2,gp,-31972
}
    bccc:	e037883a 	mov	sp,fp
    bcd0:	dfc00117 	ldw	ra,4(sp)
    bcd4:	df000017 	ldw	fp,0(sp)
    bcd8:	dec00204 	addi	sp,sp,8
    bcdc:	f800283a 	ret

0000bce0 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    bce0:	defffa04 	addi	sp,sp,-24
    bce4:	dfc00515 	stw	ra,20(sp)
    bce8:	df000415 	stw	fp,16(sp)
    bcec:	df000404 	addi	fp,sp,16
    bcf0:	e13ffe15 	stw	r4,-8(fp)
    bcf4:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    bcf8:	e0bffe17 	ldw	r2,-8(fp)
    bcfc:	10000326 	beq	r2,zero,bd0c <alt_dev_llist_insert+0x2c>
    bd00:	e0bffe17 	ldw	r2,-8(fp)
    bd04:	10800217 	ldw	r2,8(r2)
    bd08:	1000061e 	bne	r2,zero,bd24 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
    bd0c:	000bca40 	call	bca4 <alt_get_errno>
    bd10:	1007883a 	mov	r3,r2
    bd14:	00800584 	movi	r2,22
    bd18:	18800015 	stw	r2,0(r3)
    return -EINVAL;
    bd1c:	00bffa84 	movi	r2,-22
    bd20:	00001306 	br	bd70 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    bd24:	e0bffe17 	ldw	r2,-8(fp)
    bd28:	e0ffff17 	ldw	r3,-4(fp)
    bd2c:	e0fffc15 	stw	r3,-16(fp)
    bd30:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    bd34:	e0bffd17 	ldw	r2,-12(fp)
    bd38:	e0fffc17 	ldw	r3,-16(fp)
    bd3c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    bd40:	e0bffc17 	ldw	r2,-16(fp)
    bd44:	10c00017 	ldw	r3,0(r2)
    bd48:	e0bffd17 	ldw	r2,-12(fp)
    bd4c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    bd50:	e0bffc17 	ldw	r2,-16(fp)
    bd54:	10800017 	ldw	r2,0(r2)
    bd58:	e0fffd17 	ldw	r3,-12(fp)
    bd5c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    bd60:	e0bffc17 	ldw	r2,-16(fp)
    bd64:	e0fffd17 	ldw	r3,-12(fp)
    bd68:	10c00015 	stw	r3,0(r2)

  return 0;  
    bd6c:	0005883a 	mov	r2,zero
}
    bd70:	e037883a 	mov	sp,fp
    bd74:	dfc00117 	ldw	ra,4(sp)
    bd78:	df000017 	ldw	fp,0(sp)
    bd7c:	dec00204 	addi	sp,sp,8
    bd80:	f800283a 	ret

0000bd84 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    bd84:	deffff04 	addi	sp,sp,-4
    bd88:	df000015 	stw	fp,0(sp)
    bd8c:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
    bd90:	0001883a 	nop
    bd94:	e037883a 	mov	sp,fp
    bd98:	df000017 	ldw	fp,0(sp)
    bd9c:	dec00104 	addi	sp,sp,4
    bda0:	f800283a 	ret

0000bda4 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    bda4:	defff804 	addi	sp,sp,-32
    bda8:	dfc00715 	stw	ra,28(sp)
    bdac:	df000615 	stw	fp,24(sp)
    bdb0:	dc000515 	stw	r16,20(sp)
    bdb4:	df000604 	addi	fp,sp,24
    bdb8:	e13ffb15 	stw	r4,-20(fp)
    bdbc:	e17ffc15 	stw	r5,-16(fp)
    bdc0:	e1bffd15 	stw	r6,-12(fp)
    bdc4:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
    bdc8:	e1bffe17 	ldw	r6,-8(fp)
    bdcc:	e17ffd17 	ldw	r5,-12(fp)
    bdd0:	e13ffc17 	ldw	r4,-16(fp)
    bdd4:	000c02c0 	call	c02c <open>
    bdd8:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
    bddc:	e0bffa17 	ldw	r2,-24(fp)
    bde0:	10002216 	blt	r2,zero,be6c <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
    bde4:	04000074 	movhi	r16,1
    bde8:	8431d104 	addi	r16,r16,-14524
    bdec:	e0bffa17 	ldw	r2,-24(fp)
    bdf0:	01400304 	movi	r5,12
    bdf4:	1009883a 	mov	r4,r2
    bdf8:	000b1e40 	call	b1e4 <__mulsi3>
    bdfc:	8085883a 	add	r2,r16,r2
    be00:	10c00017 	ldw	r3,0(r2)
    be04:	e0bffb17 	ldw	r2,-20(fp)
    be08:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    be0c:	04000074 	movhi	r16,1
    be10:	8431d104 	addi	r16,r16,-14524
    be14:	e0bffa17 	ldw	r2,-24(fp)
    be18:	01400304 	movi	r5,12
    be1c:	1009883a 	mov	r4,r2
    be20:	000b1e40 	call	b1e4 <__mulsi3>
    be24:	8085883a 	add	r2,r16,r2
    be28:	10800104 	addi	r2,r2,4
    be2c:	10c00017 	ldw	r3,0(r2)
    be30:	e0bffb17 	ldw	r2,-20(fp)
    be34:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    be38:	04000074 	movhi	r16,1
    be3c:	8431d104 	addi	r16,r16,-14524
    be40:	e0bffa17 	ldw	r2,-24(fp)
    be44:	01400304 	movi	r5,12
    be48:	1009883a 	mov	r4,r2
    be4c:	000b1e40 	call	b1e4 <__mulsi3>
    be50:	8085883a 	add	r2,r16,r2
    be54:	10800204 	addi	r2,r2,8
    be58:	10c00017 	ldw	r3,0(r2)
    be5c:	e0bffb17 	ldw	r2,-20(fp)
    be60:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    be64:	e13ffa17 	ldw	r4,-24(fp)
    be68:	000c1880 	call	c188 <alt_release_fd>
  }
} 
    be6c:	0001883a 	nop
    be70:	e6ffff04 	addi	sp,fp,-4
    be74:	dfc00217 	ldw	ra,8(sp)
    be78:	df000117 	ldw	fp,4(sp)
    be7c:	dc000017 	ldw	r16,0(sp)
    be80:	dec00304 	addi	sp,sp,12
    be84:	f800283a 	ret

0000be88 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    be88:	defffb04 	addi	sp,sp,-20
    be8c:	dfc00415 	stw	ra,16(sp)
    be90:	df000315 	stw	fp,12(sp)
    be94:	df000304 	addi	fp,sp,12
    be98:	e13ffd15 	stw	r4,-12(fp)
    be9c:	e17ffe15 	stw	r5,-8(fp)
    bea0:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    bea4:	01c07fc4 	movi	r7,511
    bea8:	01800044 	movi	r6,1
    beac:	e17ffd17 	ldw	r5,-12(fp)
    beb0:	01000074 	movhi	r4,1
    beb4:	2131d404 	addi	r4,r4,-14512
    beb8:	000bda40 	call	bda4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    bebc:	01c07fc4 	movi	r7,511
    bec0:	000d883a 	mov	r6,zero
    bec4:	e17ffe17 	ldw	r5,-8(fp)
    bec8:	01000074 	movhi	r4,1
    becc:	2131d104 	addi	r4,r4,-14524
    bed0:	000bda40 	call	bda4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    bed4:	01c07fc4 	movi	r7,511
    bed8:	01800044 	movi	r6,1
    bedc:	e17fff17 	ldw	r5,-4(fp)
    bee0:	01000074 	movhi	r4,1
    bee4:	2131d704 	addi	r4,r4,-14500
    bee8:	000bda40 	call	bda4 <alt_open_fd>
}  
    beec:	0001883a 	nop
    bef0:	e037883a 	mov	sp,fp
    bef4:	dfc00117 	ldw	ra,4(sp)
    bef8:	df000017 	ldw	fp,0(sp)
    befc:	dec00204 	addi	sp,sp,8
    bf00:	f800283a 	ret

0000bf04 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    bf04:	defffe04 	addi	sp,sp,-8
    bf08:	dfc00115 	stw	ra,4(sp)
    bf0c:	df000015 	stw	fp,0(sp)
    bf10:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    bf14:	d0a00817 	ldw	r2,-32736(gp)
    bf18:	10000326 	beq	r2,zero,bf28 <alt_get_errno+0x24>
    bf1c:	d0a00817 	ldw	r2,-32736(gp)
    bf20:	103ee83a 	callr	r2
    bf24:	00000106 	br	bf2c <alt_get_errno+0x28>
    bf28:	d0a0c704 	addi	r2,gp,-31972
}
    bf2c:	e037883a 	mov	sp,fp
    bf30:	dfc00117 	ldw	ra,4(sp)
    bf34:	df000017 	ldw	fp,0(sp)
    bf38:	dec00204 	addi	sp,sp,8
    bf3c:	f800283a 	ret

0000bf40 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    bf40:	defffb04 	addi	sp,sp,-20
    bf44:	dfc00415 	stw	ra,16(sp)
    bf48:	df000315 	stw	fp,12(sp)
    bf4c:	dc000215 	stw	r16,8(sp)
    bf50:	df000304 	addi	fp,sp,12
    bf54:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    bf58:	e0bffe17 	ldw	r2,-8(fp)
    bf5c:	10800217 	ldw	r2,8(r2)
    bf60:	10d00034 	orhi	r3,r2,16384
    bf64:	e0bffe17 	ldw	r2,-8(fp)
    bf68:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    bf6c:	e03ffd15 	stw	zero,-12(fp)
    bf70:	00002306 	br	c000 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    bf74:	04000074 	movhi	r16,1
    bf78:	8431d104 	addi	r16,r16,-14524
    bf7c:	e0bffd17 	ldw	r2,-12(fp)
    bf80:	01400304 	movi	r5,12
    bf84:	1009883a 	mov	r4,r2
    bf88:	000b1e40 	call	b1e4 <__mulsi3>
    bf8c:	8085883a 	add	r2,r16,r2
    bf90:	10c00017 	ldw	r3,0(r2)
    bf94:	e0bffe17 	ldw	r2,-8(fp)
    bf98:	10800017 	ldw	r2,0(r2)
    bf9c:	1880151e 	bne	r3,r2,bff4 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    bfa0:	04000074 	movhi	r16,1
    bfa4:	8431d104 	addi	r16,r16,-14524
    bfa8:	e0bffd17 	ldw	r2,-12(fp)
    bfac:	01400304 	movi	r5,12
    bfb0:	1009883a 	mov	r4,r2
    bfb4:	000b1e40 	call	b1e4 <__mulsi3>
    bfb8:	8085883a 	add	r2,r16,r2
    bfbc:	10800204 	addi	r2,r2,8
    bfc0:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    bfc4:	10000b0e 	bge	r2,zero,bff4 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    bfc8:	01400304 	movi	r5,12
    bfcc:	e13ffd17 	ldw	r4,-12(fp)
    bfd0:	000b1e40 	call	b1e4 <__mulsi3>
    bfd4:	1007883a 	mov	r3,r2
    bfd8:	00800074 	movhi	r2,1
    bfdc:	10b1d104 	addi	r2,r2,-14524
    bfe0:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    bfe4:	e0bffe17 	ldw	r2,-8(fp)
    bfe8:	18800226 	beq	r3,r2,bff4 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
    bfec:	00bffcc4 	movi	r2,-13
    bff0:	00000806 	br	c014 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    bff4:	e0bffd17 	ldw	r2,-12(fp)
    bff8:	10800044 	addi	r2,r2,1
    bffc:	e0bffd15 	stw	r2,-12(fp)
    c000:	d0a00717 	ldw	r2,-32740(gp)
    c004:	1007883a 	mov	r3,r2
    c008:	e0bffd17 	ldw	r2,-12(fp)
    c00c:	18bfd92e 	bgeu	r3,r2,bf74 <_gp+0xffff75d0>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    c010:	0005883a 	mov	r2,zero
}
    c014:	e6ffff04 	addi	sp,fp,-4
    c018:	dfc00217 	ldw	ra,8(sp)
    c01c:	df000117 	ldw	fp,4(sp)
    c020:	dc000017 	ldw	r16,0(sp)
    c024:	dec00304 	addi	sp,sp,12
    c028:	f800283a 	ret

0000c02c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    c02c:	defff604 	addi	sp,sp,-40
    c030:	dfc00915 	stw	ra,36(sp)
    c034:	df000815 	stw	fp,32(sp)
    c038:	df000804 	addi	fp,sp,32
    c03c:	e13ffd15 	stw	r4,-12(fp)
    c040:	e17ffe15 	stw	r5,-8(fp)
    c044:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    c048:	00bfffc4 	movi	r2,-1
    c04c:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
    c050:	00bffb44 	movi	r2,-19
    c054:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
    c058:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    c05c:	d1600504 	addi	r5,gp,-32748
    c060:	e13ffd17 	ldw	r4,-12(fp)
    c064:	000c2300 	call	c230 <alt_find_dev>
    c068:	e0bff815 	stw	r2,-32(fp)
    c06c:	e0bff817 	ldw	r2,-32(fp)
    c070:	1000051e 	bne	r2,zero,c088 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    c074:	e13ffd17 	ldw	r4,-12(fp)
    c078:	000c2c00 	call	c2c0 <alt_find_file>
    c07c:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
    c080:	00800044 	movi	r2,1
    c084:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    c088:	e0bff817 	ldw	r2,-32(fp)
    c08c:	10002b26 	beq	r2,zero,c13c <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
    c090:	e13ff817 	ldw	r4,-32(fp)
    c094:	000c3c80 	call	c3c8 <alt_get_fd>
    c098:	e0bff915 	stw	r2,-28(fp)
    c09c:	e0bff917 	ldw	r2,-28(fp)
    c0a0:	1000030e 	bge	r2,zero,c0b0 <open+0x84>
    {
      status = index;
    c0a4:	e0bff917 	ldw	r2,-28(fp)
    c0a8:	e0bffa15 	stw	r2,-24(fp)
    c0ac:	00002506 	br	c144 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
    c0b0:	01400304 	movi	r5,12
    c0b4:	e13ff917 	ldw	r4,-28(fp)
    c0b8:	000b1e40 	call	b1e4 <__mulsi3>
    c0bc:	1007883a 	mov	r3,r2
    c0c0:	00800074 	movhi	r2,1
    c0c4:	10b1d104 	addi	r2,r2,-14524
    c0c8:	1885883a 	add	r2,r3,r2
    c0cc:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    c0d0:	e0fffe17 	ldw	r3,-8(fp)
    c0d4:	00900034 	movhi	r2,16384
    c0d8:	10bfffc4 	addi	r2,r2,-1
    c0dc:	1886703a 	and	r3,r3,r2
    c0e0:	e0bffc17 	ldw	r2,-16(fp)
    c0e4:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    c0e8:	e0bffb17 	ldw	r2,-20(fp)
    c0ec:	1000051e 	bne	r2,zero,c104 <open+0xd8>
    c0f0:	e13ffc17 	ldw	r4,-16(fp)
    c0f4:	000bf400 	call	bf40 <alt_file_locked>
    c0f8:	e0bffa15 	stw	r2,-24(fp)
    c0fc:	e0bffa17 	ldw	r2,-24(fp)
    c100:	10001016 	blt	r2,zero,c144 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    c104:	e0bff817 	ldw	r2,-32(fp)
    c108:	10800317 	ldw	r2,12(r2)
    c10c:	10000826 	beq	r2,zero,c130 <open+0x104>
    c110:	e0bff817 	ldw	r2,-32(fp)
    c114:	10800317 	ldw	r2,12(r2)
    c118:	e1ffff17 	ldw	r7,-4(fp)
    c11c:	e1bffe17 	ldw	r6,-8(fp)
    c120:	e17ffd17 	ldw	r5,-12(fp)
    c124:	e13ffc17 	ldw	r4,-16(fp)
    c128:	103ee83a 	callr	r2
    c12c:	00000106 	br	c134 <open+0x108>
    c130:	0005883a 	mov	r2,zero
    c134:	e0bffa15 	stw	r2,-24(fp)
    c138:	00000206 	br	c144 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
    c13c:	00bffb44 	movi	r2,-19
    c140:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    c144:	e0bffa17 	ldw	r2,-24(fp)
    c148:	1000090e 	bge	r2,zero,c170 <open+0x144>
  {
    alt_release_fd (index);  
    c14c:	e13ff917 	ldw	r4,-28(fp)
    c150:	000c1880 	call	c188 <alt_release_fd>
    ALT_ERRNO = -status;
    c154:	000bf040 	call	bf04 <alt_get_errno>
    c158:	1007883a 	mov	r3,r2
    c15c:	e0bffa17 	ldw	r2,-24(fp)
    c160:	0085c83a 	sub	r2,zero,r2
    c164:	18800015 	stw	r2,0(r3)
    return -1;
    c168:	00bfffc4 	movi	r2,-1
    c16c:	00000106 	br	c174 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
    c170:	e0bff917 	ldw	r2,-28(fp)
}
    c174:	e037883a 	mov	sp,fp
    c178:	dfc00117 	ldw	ra,4(sp)
    c17c:	df000017 	ldw	fp,0(sp)
    c180:	dec00204 	addi	sp,sp,8
    c184:	f800283a 	ret

0000c188 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    c188:	defffc04 	addi	sp,sp,-16
    c18c:	dfc00315 	stw	ra,12(sp)
    c190:	df000215 	stw	fp,8(sp)
    c194:	dc000115 	stw	r16,4(sp)
    c198:	df000204 	addi	fp,sp,8
    c19c:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
    c1a0:	e0bffe17 	ldw	r2,-8(fp)
    c1a4:	108000d0 	cmplti	r2,r2,3
    c1a8:	1000111e 	bne	r2,zero,c1f0 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
    c1ac:	04000074 	movhi	r16,1
    c1b0:	8431d104 	addi	r16,r16,-14524
    c1b4:	e0bffe17 	ldw	r2,-8(fp)
    c1b8:	01400304 	movi	r5,12
    c1bc:	1009883a 	mov	r4,r2
    c1c0:	000b1e40 	call	b1e4 <__mulsi3>
    c1c4:	8085883a 	add	r2,r16,r2
    c1c8:	10800204 	addi	r2,r2,8
    c1cc:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    c1d0:	04000074 	movhi	r16,1
    c1d4:	8431d104 	addi	r16,r16,-14524
    c1d8:	e0bffe17 	ldw	r2,-8(fp)
    c1dc:	01400304 	movi	r5,12
    c1e0:	1009883a 	mov	r4,r2
    c1e4:	000b1e40 	call	b1e4 <__mulsi3>
    c1e8:	8085883a 	add	r2,r16,r2
    c1ec:	10000015 	stw	zero,0(r2)
  }
}
    c1f0:	0001883a 	nop
    c1f4:	e6ffff04 	addi	sp,fp,-4
    c1f8:	dfc00217 	ldw	ra,8(sp)
    c1fc:	df000117 	ldw	fp,4(sp)
    c200:	dc000017 	ldw	r16,0(sp)
    c204:	dec00304 	addi	sp,sp,12
    c208:	f800283a 	ret

0000c20c <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    c20c:	deffff04 	addi	sp,sp,-4
    c210:	df000015 	stw	fp,0(sp)
    c214:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    c218:	000170fa 	wrctl	ienable,zero
}
    c21c:	0001883a 	nop
    c220:	e037883a 	mov	sp,fp
    c224:	df000017 	ldw	fp,0(sp)
    c228:	dec00104 	addi	sp,sp,4
    c22c:	f800283a 	ret

0000c230 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    c230:	defffa04 	addi	sp,sp,-24
    c234:	dfc00515 	stw	ra,20(sp)
    c238:	df000415 	stw	fp,16(sp)
    c23c:	df000404 	addi	fp,sp,16
    c240:	e13ffe15 	stw	r4,-8(fp)
    c244:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
    c248:	e0bfff17 	ldw	r2,-4(fp)
    c24c:	10800017 	ldw	r2,0(r2)
    c250:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    c254:	e13ffe17 	ldw	r4,-8(fp)
    c258:	000c4dc0 	call	c4dc <strlen>
    c25c:	10800044 	addi	r2,r2,1
    c260:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    c264:	00000d06 	br	c29c <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    c268:	e0bffc17 	ldw	r2,-16(fp)
    c26c:	10800217 	ldw	r2,8(r2)
    c270:	e0fffd17 	ldw	r3,-12(fp)
    c274:	180d883a 	mov	r6,r3
    c278:	e17ffe17 	ldw	r5,-8(fp)
    c27c:	1009883a 	mov	r4,r2
    c280:	000c4ac0 	call	c4ac <memcmp>
    c284:	1000021e 	bne	r2,zero,c290 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    c288:	e0bffc17 	ldw	r2,-16(fp)
    c28c:	00000706 	br	c2ac <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    c290:	e0bffc17 	ldw	r2,-16(fp)
    c294:	10800017 	ldw	r2,0(r2)
    c298:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    c29c:	e0fffc17 	ldw	r3,-16(fp)
    c2a0:	e0bfff17 	ldw	r2,-4(fp)
    c2a4:	18bff01e 	bne	r3,r2,c268 <_gp+0xffff78c4>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    c2a8:	0005883a 	mov	r2,zero
}
    c2ac:	e037883a 	mov	sp,fp
    c2b0:	dfc00117 	ldw	ra,4(sp)
    c2b4:	df000017 	ldw	fp,0(sp)
    c2b8:	dec00204 	addi	sp,sp,8
    c2bc:	f800283a 	ret

0000c2c0 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    c2c0:	defffb04 	addi	sp,sp,-20
    c2c4:	dfc00415 	stw	ra,16(sp)
    c2c8:	df000315 	stw	fp,12(sp)
    c2cc:	df000304 	addi	fp,sp,12
    c2d0:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    c2d4:	d0a00317 	ldw	r2,-32756(gp)
    c2d8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    c2dc:	00003106 	br	c3a4 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
    c2e0:	e0bffd17 	ldw	r2,-12(fp)
    c2e4:	10800217 	ldw	r2,8(r2)
    c2e8:	1009883a 	mov	r4,r2
    c2ec:	000c4dc0 	call	c4dc <strlen>
    c2f0:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
    c2f4:	e0bffd17 	ldw	r2,-12(fp)
    c2f8:	10c00217 	ldw	r3,8(r2)
    c2fc:	e0bffe17 	ldw	r2,-8(fp)
    c300:	10bfffc4 	addi	r2,r2,-1
    c304:	1885883a 	add	r2,r3,r2
    c308:	10800003 	ldbu	r2,0(r2)
    c30c:	10803fcc 	andi	r2,r2,255
    c310:	1080201c 	xori	r2,r2,128
    c314:	10bfe004 	addi	r2,r2,-128
    c318:	10800bd8 	cmpnei	r2,r2,47
    c31c:	1000031e 	bne	r2,zero,c32c <alt_find_file+0x6c>
    {
      len -= 1;
    c320:	e0bffe17 	ldw	r2,-8(fp)
    c324:	10bfffc4 	addi	r2,r2,-1
    c328:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    c32c:	e0bffe17 	ldw	r2,-8(fp)
    c330:	e0ffff17 	ldw	r3,-4(fp)
    c334:	1885883a 	add	r2,r3,r2
    c338:	10800003 	ldbu	r2,0(r2)
    c33c:	10803fcc 	andi	r2,r2,255
    c340:	1080201c 	xori	r2,r2,128
    c344:	10bfe004 	addi	r2,r2,-128
    c348:	10800be0 	cmpeqi	r2,r2,47
    c34c:	1000081e 	bne	r2,zero,c370 <alt_find_file+0xb0>
    c350:	e0bffe17 	ldw	r2,-8(fp)
    c354:	e0ffff17 	ldw	r3,-4(fp)
    c358:	1885883a 	add	r2,r3,r2
    c35c:	10800003 	ldbu	r2,0(r2)
    c360:	10803fcc 	andi	r2,r2,255
    c364:	1080201c 	xori	r2,r2,128
    c368:	10bfe004 	addi	r2,r2,-128
    c36c:	10000a1e 	bne	r2,zero,c398 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    c370:	e0bffd17 	ldw	r2,-12(fp)
    c374:	10800217 	ldw	r2,8(r2)
    c378:	e0fffe17 	ldw	r3,-8(fp)
    c37c:	180d883a 	mov	r6,r3
    c380:	e17fff17 	ldw	r5,-4(fp)
    c384:	1009883a 	mov	r4,r2
    c388:	000c4ac0 	call	c4ac <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    c38c:	1000021e 	bne	r2,zero,c398 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
    c390:	e0bffd17 	ldw	r2,-12(fp)
    c394:	00000706 	br	c3b4 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
    c398:	e0bffd17 	ldw	r2,-12(fp)
    c39c:	10800017 	ldw	r2,0(r2)
    c3a0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    c3a4:	e0fffd17 	ldw	r3,-12(fp)
    c3a8:	d0a00304 	addi	r2,gp,-32756
    c3ac:	18bfcc1e 	bne	r3,r2,c2e0 <_gp+0xffff793c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
    c3b0:	0005883a 	mov	r2,zero
}
    c3b4:	e037883a 	mov	sp,fp
    c3b8:	dfc00117 	ldw	ra,4(sp)
    c3bc:	df000017 	ldw	fp,0(sp)
    c3c0:	dec00204 	addi	sp,sp,8
    c3c4:	f800283a 	ret

0000c3c8 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    c3c8:	defffa04 	addi	sp,sp,-24
    c3cc:	dfc00515 	stw	ra,20(sp)
    c3d0:	df000415 	stw	fp,16(sp)
    c3d4:	dc000315 	stw	r16,12(sp)
    c3d8:	df000404 	addi	fp,sp,16
    c3dc:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
    c3e0:	00bffa04 	movi	r2,-24
    c3e4:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    c3e8:	e03ffc15 	stw	zero,-16(fp)
    c3ec:	00001d06 	br	c464 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
    c3f0:	04000074 	movhi	r16,1
    c3f4:	8431d104 	addi	r16,r16,-14524
    c3f8:	e0bffc17 	ldw	r2,-16(fp)
    c3fc:	01400304 	movi	r5,12
    c400:	1009883a 	mov	r4,r2
    c404:	000b1e40 	call	b1e4 <__mulsi3>
    c408:	8085883a 	add	r2,r16,r2
    c40c:	10800017 	ldw	r2,0(r2)
    c410:	1000111e 	bne	r2,zero,c458 <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
    c414:	04000074 	movhi	r16,1
    c418:	8431d104 	addi	r16,r16,-14524
    c41c:	e0bffc17 	ldw	r2,-16(fp)
    c420:	01400304 	movi	r5,12
    c424:	1009883a 	mov	r4,r2
    c428:	000b1e40 	call	b1e4 <__mulsi3>
    c42c:	8085883a 	add	r2,r16,r2
    c430:	e0fffe17 	ldw	r3,-8(fp)
    c434:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
    c438:	d0e00717 	ldw	r3,-32740(gp)
    c43c:	e0bffc17 	ldw	r2,-16(fp)
    c440:	1880020e 	bge	r3,r2,c44c <alt_get_fd+0x84>
      {
        alt_max_fd = i;
    c444:	e0bffc17 	ldw	r2,-16(fp)
    c448:	d0a00715 	stw	r2,-32740(gp)
      }
      rc = i;
    c44c:	e0bffc17 	ldw	r2,-16(fp)
    c450:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
    c454:	00000606 	br	c470 <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    c458:	e0bffc17 	ldw	r2,-16(fp)
    c45c:	10800044 	addi	r2,r2,1
    c460:	e0bffc15 	stw	r2,-16(fp)
    c464:	e0bffc17 	ldw	r2,-16(fp)
    c468:	10800810 	cmplti	r2,r2,32
    c46c:	103fe01e 	bne	r2,zero,c3f0 <_gp+0xffff7a4c>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
    c470:	e0bffd17 	ldw	r2,-12(fp)
}
    c474:	e6ffff04 	addi	sp,fp,-4
    c478:	dfc00217 	ldw	ra,8(sp)
    c47c:	df000117 	ldw	fp,4(sp)
    c480:	dc000017 	ldw	r16,0(sp)
    c484:	dec00304 	addi	sp,sp,12
    c488:	f800283a 	ret

0000c48c <exit>:
    c48c:	defffe04 	addi	sp,sp,-8
    c490:	000b883a 	mov	r5,zero
    c494:	dc000015 	stw	r16,0(sp)
    c498:	dfc00115 	stw	ra,4(sp)
    c49c:	2021883a 	mov	r16,r4
    c4a0:	000c4f80 	call	c4f8 <__call_exitprocs>
    c4a4:	8009883a 	mov	r4,r16
    c4a8:	000c6880 	call	c688 <_exit>

0000c4ac <memcmp>:
    c4ac:	218d883a 	add	r6,r4,r6
    c4b0:	21800826 	beq	r4,r6,c4d4 <memcmp+0x28>
    c4b4:	20800003 	ldbu	r2,0(r4)
    c4b8:	28c00003 	ldbu	r3,0(r5)
    c4bc:	10c00226 	beq	r2,r3,c4c8 <memcmp+0x1c>
    c4c0:	10c5c83a 	sub	r2,r2,r3
    c4c4:	f800283a 	ret
    c4c8:	21000044 	addi	r4,r4,1
    c4cc:	29400044 	addi	r5,r5,1
    c4d0:	003ff706 	br	c4b0 <_gp+0xffff7b0c>
    c4d4:	0005883a 	mov	r2,zero
    c4d8:	f800283a 	ret

0000c4dc <strlen>:
    c4dc:	2005883a 	mov	r2,r4
    c4e0:	10c00007 	ldb	r3,0(r2)
    c4e4:	18000226 	beq	r3,zero,c4f0 <strlen+0x14>
    c4e8:	10800044 	addi	r2,r2,1
    c4ec:	003ffc06 	br	c4e0 <_gp+0xffff7b3c>
    c4f0:	1105c83a 	sub	r2,r2,r4
    c4f4:	f800283a 	ret

0000c4f8 <__call_exitprocs>:
    c4f8:	defff504 	addi	sp,sp,-44
    c4fc:	dd000515 	stw	r20,20(sp)
    c500:	05000074 	movhi	r20,1
    c504:	dc800315 	stw	r18,12(sp)
    c508:	dfc00a15 	stw	ra,40(sp)
    c50c:	df000915 	stw	fp,36(sp)
    c510:	ddc00815 	stw	r23,32(sp)
    c514:	dd800715 	stw	r22,28(sp)
    c518:	dd400615 	stw	r21,24(sp)
    c51c:	dcc00415 	stw	r19,16(sp)
    c520:	dc400215 	stw	r17,8(sp)
    c524:	dc000115 	stw	r16,4(sp)
    c528:	d9000015 	stw	r4,0(sp)
    c52c:	2825883a 	mov	r18,r5
    c530:	a5327204 	addi	r20,r20,-13880
    c534:	a4400017 	ldw	r17,0(r20)
    c538:	8cc00c17 	ldw	r19,48(r17)
    c53c:	8c400c04 	addi	r17,r17,48
    c540:	98004526 	beq	r19,zero,c658 <__call_exitprocs+0x160>
    c544:	9c000117 	ldw	r16,4(r19)
    c548:	00900034 	movhi	r2,16384
    c54c:	10bfffc4 	addi	r2,r2,-1
    c550:	9d402217 	ldw	r21,136(r19)
    c554:	85bfffc4 	addi	r22,r16,-1
    c558:	80a1883a 	add	r16,r16,r2
    c55c:	8421883a 	add	r16,r16,r16
    c560:	8421883a 	add	r16,r16,r16
    c564:	ac2f883a 	add	r23,r21,r16
    c568:	84000204 	addi	r16,r16,8
    c56c:	9c21883a 	add	r16,r19,r16
    c570:	b0002716 	blt	r22,zero,c610 <__call_exitprocs+0x118>
    c574:	90000726 	beq	r18,zero,c594 <__call_exitprocs+0x9c>
    c578:	a800041e 	bne	r21,zero,c58c <__call_exitprocs+0x94>
    c57c:	b5bfffc4 	addi	r22,r22,-1
    c580:	bdffff04 	addi	r23,r23,-4
    c584:	843fff04 	addi	r16,r16,-4
    c588:	003ff906 	br	c570 <_gp+0xffff7bcc>
    c58c:	b9002017 	ldw	r4,128(r23)
    c590:	913ffa1e 	bne	r18,r4,c57c <_gp+0xffff7bd8>
    c594:	99000117 	ldw	r4,4(r19)
    c598:	82000017 	ldw	r8,0(r16)
    c59c:	213fffc4 	addi	r4,r4,-1
    c5a0:	b100021e 	bne	r22,r4,c5ac <__call_exitprocs+0xb4>
    c5a4:	9d800115 	stw	r22,4(r19)
    c5a8:	00000106 	br	c5b0 <__call_exitprocs+0xb8>
    c5ac:	80000015 	stw	zero,0(r16)
    c5b0:	403ff226 	beq	r8,zero,c57c <_gp+0xffff7bd8>
    c5b4:	9f000117 	ldw	fp,4(r19)
    c5b8:	a8000526 	beq	r21,zero,c5d0 <__call_exitprocs+0xd8>
    c5bc:	00800044 	movi	r2,1
    c5c0:	1592983a 	sll	r9,r2,r22
    c5c4:	a9404017 	ldw	r5,256(r21)
    c5c8:	494a703a 	and	r5,r9,r5
    c5cc:	2800021e 	bne	r5,zero,c5d8 <__call_exitprocs+0xe0>
    c5d0:	403ee83a 	callr	r8
    c5d4:	00000906 	br	c5fc <__call_exitprocs+0x104>
    c5d8:	a9004117 	ldw	r4,260(r21)
    c5dc:	4908703a 	and	r4,r9,r4
    c5e0:	2000041e 	bne	r4,zero,c5f4 <__call_exitprocs+0xfc>
    c5e4:	b9400017 	ldw	r5,0(r23)
    c5e8:	d9000017 	ldw	r4,0(sp)
    c5ec:	403ee83a 	callr	r8
    c5f0:	00000206 	br	c5fc <__call_exitprocs+0x104>
    c5f4:	b9000017 	ldw	r4,0(r23)
    c5f8:	403ee83a 	callr	r8
    c5fc:	99000117 	ldw	r4,4(r19)
    c600:	e13fcc1e 	bne	fp,r4,c534 <_gp+0xffff7b90>
    c604:	89000017 	ldw	r4,0(r17)
    c608:	993fdc26 	beq	r19,r4,c57c <_gp+0xffff7bd8>
    c60c:	003fc906 	br	c534 <_gp+0xffff7b90>
    c610:	00800034 	movhi	r2,0
    c614:	10800004 	addi	r2,r2,0
    c618:	10000f26 	beq	r2,zero,c658 <__call_exitprocs+0x160>
    c61c:	99400117 	ldw	r5,4(r19)
    c620:	99000017 	ldw	r4,0(r19)
    c624:	2800091e 	bne	r5,zero,c64c <__call_exitprocs+0x154>
    c628:	20000826 	beq	r4,zero,c64c <__call_exitprocs+0x154>
    c62c:	89000015 	stw	r4,0(r17)
    c630:	a8000226 	beq	r21,zero,c63c <__call_exitprocs+0x144>
    c634:	a809883a 	mov	r4,r21
    c638:	00000000 	call	0 <__alt_mem_oc_mem-0x8000>
    c63c:	9809883a 	mov	r4,r19
    c640:	00000000 	call	0 <__alt_mem_oc_mem-0x8000>
    c644:	8cc00017 	ldw	r19,0(r17)
    c648:	003fbd06 	br	c540 <_gp+0xffff7b9c>
    c64c:	9823883a 	mov	r17,r19
    c650:	2027883a 	mov	r19,r4
    c654:	003fba06 	br	c540 <_gp+0xffff7b9c>
    c658:	dfc00a17 	ldw	ra,40(sp)
    c65c:	df000917 	ldw	fp,36(sp)
    c660:	ddc00817 	ldw	r23,32(sp)
    c664:	dd800717 	ldw	r22,28(sp)
    c668:	dd400617 	ldw	r21,24(sp)
    c66c:	dd000517 	ldw	r20,20(sp)
    c670:	dcc00417 	ldw	r19,16(sp)
    c674:	dc800317 	ldw	r18,12(sp)
    c678:	dc400217 	ldw	r17,8(sp)
    c67c:	dc000117 	ldw	r16,4(sp)
    c680:	dec00b04 	addi	sp,sp,44
    c684:	f800283a 	ret

0000c688 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    c688:	defffd04 	addi	sp,sp,-12
    c68c:	df000215 	stw	fp,8(sp)
    c690:	df000204 	addi	fp,sp,8
    c694:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
    c698:	0001883a 	nop
    c69c:	e0bfff17 	ldw	r2,-4(fp)
    c6a0:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
    c6a4:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    c6a8:	10000226 	beq	r2,zero,c6b4 <_exit+0x2c>
    ALT_SIM_FAIL();
    c6ac:	002af070 	cmpltui	zero,zero,43969
    c6b0:	00000106 	br	c6b8 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
    c6b4:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    c6b8:	003fff06 	br	c6b8 <_gp+0xffff7d14>
