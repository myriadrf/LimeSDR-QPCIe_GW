// Copyright (C) 2016  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Intel and sold by Intel or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.


// Generated by Quartus Prime Version 16.1 (Build Build 200 11/30/2016)
// Created on Thu Oct 26 09:13:03 2017

wfm_player_x2_top wfm_player_x2_top_inst
(
	.reset_n(reset_n_sig) ,	// input  reset_n_sig
	.pll_ref_clk(pll_ref_clk_sig) ,	// input  pll_ref_clk_sig
	.wfm_load(wfm_load_sig) ,	// input [1:0] wfm_load_sig
	.wfm_play_stop(wfm_play_stop_sig) ,	// input [1:0] wfm_play_stop_sig
	.wfm0_wcmd_clk(wfm0_wcmd_clk_sig) ,	// input  wfm0_wcmd_clk_sig
	.wfm0_rcmd_clk(wfm0_rcmd_clk_sig) ,	// input  wfm0_rcmd_clk_sig
	.wfm0_data(wfm0_data_sig) ,	// input [wfm0_data_width-1:0] wfm0_data_sig
	.wfm0_wr(wfm0_wr_sig) ,	// input  wfm0_wr_sig
	.wfm0_rdy(wfm0_rdy_sig) ,	// output  wfm0_rdy_sig
	.wfm0_infifo_wrusedw(wfm0_infifo_wrusedw_sig) ,	// output [wfm0_infifo_size-1:0] wfm0_infifo_wrusedw_sig
	.wfm0_infifo_wfull(wfm0_infifo_wfull_sig) ,	// output  wfm0_infifo_wfull_sig
	.wfm0_sample_width(wfm0_sample_width_sig) ,	// input [1:0] wfm0_sample_width_sig
	.wfm0_fr_start(wfm0_fr_start_sig) ,	// input  wfm0_fr_start_sig
	.wfm0_ch_en(wfm0_ch_en_sig) ,	// input [1:0] wfm0_ch_en_sig
	.wfm0_mimo_en(wfm0_mimo_en_sig) ,	// input  wfm0_mimo_en_sig
	.wfm0_intrlv_dis(wfm0_intrlv_dis_sig) ,	// input  wfm0_intrlv_dis_sig
	.wfm0_iq_clk(wfm0_iq_clk_sig) ,	// input  wfm0_iq_clk_sig
	.wfm0_xen(wfm0_xen_sig) ,	// input  wfm0_xen_sig
	.wfm0_Aiq_h(wfm0_Aiq_h_sig) ,	// output [wfm0_iq_width:0] wfm0_Aiq_h_sig
	.wfm0_Aiq_l(wfm0_Aiq_l_sig) ,	// output [wfm0_iq_width:0] wfm0_Aiq_l_sig
	.wfm0_Biq_h(wfm0_Biq_h_sig) ,	// output [wfm0_iq_width:0] wfm0_Biq_h_sig
	.wfm0_Biq_l(wfm0_Biq_l_sig) ,	// output [wfm0_iq_width:0] wfm0_Biq_l_sig
	.wfm1_wcmd_clk(wfm1_wcmd_clk_sig) ,	// input  wfm1_wcmd_clk_sig
	.wfm1_rcmd_clk(wfm1_rcmd_clk_sig) ,	// input  wfm1_rcmd_clk_sig
	.wfm1_data(wfm1_data_sig) ,	// input [wfm1_data_width-1:0] wfm1_data_sig
	.wfm1_wr(wfm1_wr_sig) ,	// input  wfm1_wr_sig
	.wfm1_rdy(wfm1_rdy_sig) ,	// output  wfm1_rdy_sig
	.wfm1_infifo_wrusedw(wfm1_infifo_wrusedw_sig) ,	// output [wfm1_infifo_size-1:0] wfm1_infifo_wrusedw_sig
	.wfm1_infifo_wfull(wfm1_infifo_wfull_sig) ,	// output  wfm1_infifo_wfull_sig
	.wfm1_sample_width(wfm1_sample_width_sig) ,	// input [1:0] wfm1_sample_width_sig
	.wfm1_fr_start(wfm1_fr_start_sig) ,	// input  wfm1_fr_start_sig
	.wfm1_ch_en(wfm1_ch_en_sig) ,	// input [1:0] wfm1_ch_en_sig
	.wfm1_mimo_en(wfm1_mimo_en_sig) ,	// input  wfm1_mimo_en_sig
	.wfm1_intrlv_dis(wfm1_intrlv_dis_sig) ,	// input  wfm1_intrlv_dis_sig
	.wfm1_iq_clk(wfm1_iq_clk_sig) ,	// input  wfm1_iq_clk_sig
	.wfm1_xen(wfm1_xen_sig) ,	// input  wfm1_xen_sig
	.wfm1_Aiq_h(wfm1_Aiq_h_sig) ,	// output [wfm1_iq_width:0] wfm1_Aiq_h_sig
	.wfm1_Aiq_l(wfm1_Aiq_l_sig) ,	// output [wfm1_iq_width:0] wfm1_Aiq_l_sig
	.wfm1_Biq_h(wfm1_Biq_h_sig) ,	// output [wfm1_iq_width:0] wfm1_Biq_h_sig
	.wfm1_Biq_l(wfm1_Biq_l_sig) ,	// output [wfm1_iq_width:0] wfm1_Biq_l_sig
	.mem_a(mem_a_sig) ,	// output [13:0] mem_a_sig
	.mem_ba(mem_ba_sig) ,	// output [2:0] mem_ba_sig
	.mem_ck(mem_ck_sig) ,	// output [0:0] mem_ck_sig
	.mem_ck_n(mem_ck_n_sig) ,	// output [0:0] mem_ck_n_sig
	.mem_cke(mem_cke_sig) ,	// output [0:0] mem_cke_sig
	.mem_cs_n(mem_cs_n_sig) ,	// output [0:0] mem_cs_n_sig
	.mem_dm(mem_dm_sig) ,	// output [3:0] mem_dm_sig
	.mem_ras_n(mem_ras_n_sig) ,	// output [0:0] mem_ras_n_sig
	.mem_cas_n(mem_cas_n_sig) ,	// output [0:0] mem_cas_n_sig
	.mem_we_n(mem_we_n_sig) ,	// output [0:0] mem_we_n_sig
	.mem_reset_n(mem_reset_n_sig) ,	// output  mem_reset_n_sig
	.mem_dq(mem_dq_sig) ,	// inout [31:0] mem_dq_sig
	.mem_dqs(mem_dqs_sig) ,	// inout [3:0] mem_dqs_sig
	.mem_dqs_n(mem_dqs_n_sig) ,	// inout [3:0] mem_dqs_n_sig
	.mem_odt(mem_odt_sig) ,	// output [0:0] mem_odt_sig
	.phy_clk(phy_clk_sig) ,	// output  phy_clk_sig
	.oct_rzqin(oct_rzqin_sig) ,	// input  oct_rzqin_sig
	.begin_test(begin_test_sig) ,	// input  begin_test_sig
	.insert_error(insert_error_sig) ,	// input  insert_error_sig
	.pnf_per_bit(pnf_per_bit_sig) ,	// output [31:0] pnf_per_bit_sig
	.pnf_per_bit_persist(pnf_per_bit_persist_sig) ,	// output [31:0] pnf_per_bit_persist_sig
	.pass(pass_sig) ,	// output  pass_sig
	.fail(fail_sig) ,	// output  fail_sig
	.test_complete(test_complete_sig) 	// output  test_complete_sig
);

defparam wfm_player_x2_top_inst.dev_family = "Cyclone V GX";
defparam wfm_player_x2_top_inst.cntrl_rate = 1;
defparam wfm_player_x2_top_inst.cntrl_bus_size = 32;
defparam wfm_player_x2_top_inst.cntrl_addr_size = 14;
defparam wfm_player_x2_top_inst.cntrl_ba_size = 3;
defparam wfm_player_x2_top_inst.mpfe_0_addr_size = 27;
defparam wfm_player_x2_top_inst.mpfe_0_bus_size = 32;
defparam wfm_player_x2_top_inst.mpfe_0_burst_length = 2;
defparam wfm_player_x2_top_inst.mpfe_1_addr_size = 26;
defparam wfm_player_x2_top_inst.mpfe_1_bus_size = 64;
defparam wfm_player_x2_top_inst.mpfe_1_burst_length = 2;
defparam wfm_player_x2_top_inst.cmd_fifo_size = 9;
defparam wfm_player_x2_top_inst.wfm0_infifo_size = 11;
defparam wfm_player_x2_top_inst.wfm0_outfifo_size = 11;
defparam wfm_player_x2_top_inst.wfm0_data_width = 32;
defparam wfm_player_x2_top_inst.wfm0_iq_width = 12;
defparam wfm_player_x2_top_inst.wfm0_dcmpr_infifo_size = 10;
defparam wfm_player_x2_top_inst.wfm0_dcmpr_outfifo_size = 10;
defparam wfm_player_x2_top_inst.wfm1_infifo_size = 11;
defparam wfm_player_x2_top_inst.wfm1_outfifo_size = 11;
defparam wfm_player_x2_top_inst.wfm1_data_width = 32;
defparam wfm_player_x2_top_inst.wfm1_iq_width = 12;
defparam wfm_player_x2_top_inst.wfm1_dcmpr_infifo_size = 10;
defparam wfm_player_x2_top_inst.wfm1_dcmpr_outfifo_size = 10;
defparam wfm_player_x2_top_inst.outfifo_size_0 = 10;
defparam wfm_player_x2_top_inst.outfifo_size_1 = 10;
