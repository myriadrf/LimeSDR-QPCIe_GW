
nios4usb_app.elf:     file format elf32-littlenios2
nios4usb_app.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00008020

Program Header:
    LOAD off    0x00001000 vaddr 0x00008000 paddr 0x00008000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00008020 paddr 0x00008020 align 2**12
         filesz 0x00004270 memsz 0x00004270 flags r-x
    LOAD off    0x00005290 vaddr 0x0000c290 paddr 0x0000c570 align 2**12
         filesz 0x000002e0 memsz 0x000002e0 flags rw-
    LOAD off    0x00005850 vaddr 0x0000c850 paddr 0x0000c850 align 2**12
         filesz 0x00000000 memsz 0x00000094 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00008000  00008000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00008020  00008020  00005570  2**0
                  CONTENTS
  2 .text         0000423c  00008020  00008020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000034  0000c25c  0000c25c  0000525c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000002e0  0000c290  0000c570  00005290  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000094  0000c850  0000c850  00005850  2**2
                  ALLOC, SMALL_DATA
  6 .oc_mem       00000000  0000c8e4  0000c8e4  00005570  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00005570  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000430  00000000  00000000  00005598  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000050d7  00000000  00000000  000059c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001bae  00000000  00000000  0000aa9f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000023d1  00000000  00000000  0000c64d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000a84  00000000  00000000  0000ea20  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00001801  00000000  00000000  0000f4a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000082d  00000000  00000000  00010ca5  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  000114d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000100  00000000  00000000  000114e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00012e56  2**0
                  CONTENTS, READONLY
 18 .cpu          00000009  00000000  00000000  00012e59  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00012e62  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00012e63  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  00012e64  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  00012e68  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  00012e6c  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   0000000b  00000000  00000000  00012e70  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    0000000b  00000000  00000000  00012e7b  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   0000000b  00000000  00000000  00012e86  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000008  00000000  00000000  00012e91  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000030  00000000  00000000  00012e99  2**0
                  CONTENTS, READONLY
 29 .jdi          00013676  00000000  00000000  00012ec9  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     000940a9  00000000  00000000  0002653f  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00008000 l    d  .entry	00000000 .entry
00008020 l    d  .exceptions	00000000 .exceptions
00008020 l    d  .text	00000000 .text
0000c25c l    d  .rodata	00000000 .rodata
0000c290 l    d  .rwdata	00000000 .rwdata
0000c850 l    d  .bss	00000000 .bss
0000c8e4 l    d  .oc_mem	00000000 .oc_mem
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../nios4usb_bsp//obj/HAL/src/crt0.o
00008058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 pll_rcfg.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 alt_load.c
0000adcc l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
0000af24 l     F .text	00000034 alt_dev_reg
0000c290 l     O .rwdata	0000002c jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_spi.c
00000000 l    df *ABS*	00000000 i2c_opencores.c
00000000 l    df *ABS*	00000000 alt_close.c
0000b6e4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
0000b818 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0000b844 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0000b944 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
0000baa4 l     F .text	0000003c alt_get_errno
0000bae0 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 impure.c
0000c464 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 alt_exit.c
0000aeb8 g     F .text	0000006c alt_main
000080d0 g     F .text	00000058 Check_Periph_ID
0000c570 g       *ABS*	00000000 __flash_rwdata_start
0000c850 g     O .bss	00000001 block
0000c864 g     O .bss	00000040 glEp0Buffer_Tx
0000c546 g     O .rwdata	00000002 converted_val
0000bdac g     F .text	00000024 altera_nios2_gen2_irq_init
00008000 g     F .entry	0000000c __reset
00008870 g     F .text	00000124 Control_TCXO_ADF
00008020 g       *ABS*	00000000 __flash_exceptions_start
0000c860 g     O .bss	00000004 errno
0000c858 g     O .bss	00000004 alt_argv
00014544 g       *ABS*	00000000 _gp
0000c2e4 g     O .rwdata	00000180 alt_fd_list
0000bdd0 g     F .text	00000090 alt_find_dev
0000ba28 g     F .text	0000007c alt_io_redirect
0000b4cc g     F .text	000000c0 I2C_start
00009158 g     F .text	000001c8 Modify_BRDSPI16_Reg_bits
0000b098 g     F .text	000000ec altera_avalon_jtag_uart_read
0000acc8 g     F .text	00000064 .hidden __udivsi3
00008a44 g     F .text	000000a8 GetPLLCFG_Base
0000c560 g     O .rwdata	00000004 alt_max_fd
000090a8 g     F .text	000000b0 ResetPLL
00008aec g     F .text	00000484 UpdatePLLCFG
0000c568 g     O .rwdata	00000004 _global_impure_ptr
0000c8e4 g       *ABS*	00000000 __bss_end
0000c2bc g     O .rwdata	00000028 alt_dev_null
0000aa1c g     F .text	00000088 set_pll_config
0000b7f8 g     F .text	00000020 alt_dcache_flush_all
00008f70 g     F .text	00000138 UpdatePHCFG
00008000 g       *ABS*	00000000 __alt_mem_oc_mem
0000c570 g       *ABS*	00000000 __ram_rwdata_end
0000c558 g     O .rwdata	00000008 alt_dev_list
0000c290 g       *ABS*	00000000 __ram_rodata_end
0000ad2c g     F .text	00000058 .hidden __umodsi3
0000c8e4 g       *ABS*	00000000 end
00010000 g       *ABS*	00000000 __alt_stack_pointer
0000b184 g     F .text	00000094 altera_avalon_jtag_uart_write
0000aaa4 g     F .text	0000003c set_CxCnt
0000c098 g     F .text	00000190 __call_exitprocs
0000c851 g     O .bss	00000001 test
00008020 g     F .text	0000003c _start
0000b218 g     F .text	000001fc alt_avalon_spi_command
0000af90 g     F .text	00000048 alt_sys_init
0000ad84 g     F .text	00000028 .hidden __mulsi3
0000c290 g       *ABS*	00000000 __ram_rwdata_start
0000c25c g       *ABS*	00000000 __ram_rodata_start
0000afd8 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0000bf68 g     F .text	000000c4 alt_get_fd
000087a8 g     F .text	000000c8 Control_TCXO_DAC
00008994 g     F .text	000000b0 change_ADC_tpat
000082e0 g     F .text	000004c8 init_ADC
0000c04c g     F .text	00000030 memcmp
0000c8e4 g       *ABS*	00000000 __alt_stack_base
0000be60 g     F .text	00000108 alt_find_file
0000b880 g     F .text	000000a4 alt_dev_llist_insert
0000a94c g     F .text	000000d0 get_pll_config
0000c850 g       *ABS*	00000000 __bss_start
0000adac g     F .text	00000020 memset
00009320 g     F .text	0000162c main
0000c85c g     O .bss	00000004 alt_envp
0000b038 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00008128 g     F .text	00000088 getFifoData
0000ab5c g     F .text	00000074 start_Reconfig
000081b0 g     F .text	00000130 Configure_LM75
0000c564 g     O .rwdata	00000004 alt_errno
0000abd0 g     F .text	00000084 .hidden __divsi3
0000b58c g     F .text	00000094 I2C_read
0000c25c g       *ABS*	00000000 __flash_rodata_start
0000af58 g     F .text	00000038 alt_irq_init
0000bd28 g     F .text	00000084 alt_release_fd
0000c54c g     O .rwdata	00000004 LMS_Ctrl_Packet_Rx
0000c56c g     O .rwdata	00000004 _impure_ptr
0000c854 g     O .bss	00000004 alt_argc
0000c550 g     O .rwdata	00000008 alt_fs_list
0000c544 g     O .rwdata	00000001 dac_val
0000b414 g     F .text	000000b8 I2C_init
00008020 g       *ABS*	00000000 __ram_exceptions_start
0000aae0 g     F .text	0000007c set_Phase
0000c570 g       *ABS*	00000000 _edata
0000c8e4 g       *ABS*	00000000 _end
00008020 g       *ABS*	00000000 __ram_exceptions_end
0000c852 g     O .bss	00000001 cmd_errors
0000c02c g     F .text	00000020 exit
0000ac54 g     F .text	00000074 .hidden __modsi3
00010000 g       *ABS*	00000000 __alt_data_end
0000c228 g     F .text	00000034 _exit
0000805c g     F .text	00000074 Check_many_blocks
0000c07c g     F .text	0000001c strlen
0000bbcc g     F .text	0000015c open
0000c548 g     O .rwdata	00000004 LMS_Ctrl_Packet_Tx
0000b924 g     F .text	00000020 alt_icache_flush_all
0000b720 g     F .text	000000d8 close
0000ae34 g     F .text	00000084 alt_load
0000b620 g     F .text	000000c4 I2C_write
0000c8a4 g     O .bss	00000040 glEp0Buffer_Rx



Disassembly of section .entry:

00008000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    8000:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    8004:	08600814 	ori	at,at,32800
    jmp r1
    8008:	0800683a 	jmp	at
	...

Disassembly of section .text:

00008020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    8020:	06c00074 	movhi	sp,1
    ori sp, sp, %lo(__alt_stack_pointer)
    8024:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
    8028:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
    802c:	d6915114 	ori	gp,gp,17732
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    8030:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    8034:	10b21414 	ori	r2,r2,51280

    movhi r3, %hi(__bss_end)
    8038:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    803c:	18f23914 	ori	r3,r3,51428

    beq r2, r3, 1f
    8040:	10c00326 	beq	r2,r3,8050 <_start+0x30>

0:
    stw zero, (r2)
    8044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    8048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    804c:	10fffd36 	bltu	r2,r3,8044 <_gp+0xffff3b00>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    8050:	000ae340 	call	ae34 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    8054:	000aeb80 	call	aeb8 <alt_main>

00008058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    8058:	003fff06 	br	8058 <_gp+0xffff3b14>

0000805c <Check_many_blocks>:


/**	This function checks if all blocks could fit in data field.
*	If blocks will not fit, function returns TRUE. */
unsigned char Check_many_blocks (unsigned char block_size)
{
    805c:	defffc04 	addi	sp,sp,-16
    8060:	dfc00315 	stw	ra,12(sp)
    8064:	df000215 	stw	fp,8(sp)
    8068:	dc000115 	stw	r16,4(sp)
    806c:	df000204 	addi	fp,sp,8
    8070:	2005883a 	mov	r2,r4
    8074:	e0bffe05 	stb	r2,-8(fp)
	if (LMS_Ctrl_Packet_Rx->Header.Data_blocks > (sizeof(LMS_Ctrl_Packet_Tx->Data_field)/block_size))
    8078:	d0a00217 	ldw	r2,-32760(gp)
    807c:	14000083 	ldbu	r16,2(r2)
    8080:	e0bffe03 	ldbu	r2,-8(fp)
    8084:	100b883a 	mov	r5,r2
    8088:	01000e04 	movi	r4,56
    808c:	000acc80 	call	acc8 <__udivsi3>
    8090:	1007883a 	mov	r3,r2
    8094:	80803fcc 	andi	r2,r16,255
    8098:	18c03fcc 	andi	r3,r3,255
    809c:	1880052e 	bgeu	r3,r2,80b4 <Check_many_blocks+0x58>
	{
		LMS_Ctrl_Packet_Tx->Header.Status = STATUS_BLOCKS_ERROR_CMD;
    80a0:	d0a00117 	ldw	r2,-32764(gp)
    80a4:	00c00104 	movi	r3,4
    80a8:	10c00045 	stb	r3,1(r2)
		return 1;
    80ac:	00800044 	movi	r2,1
    80b0:	00000106 	br	80b8 <Check_many_blocks+0x5c>
	}
	else return 0;
    80b4:	0005883a 	mov	r2,zero
	return 1;
}
    80b8:	e6ffff04 	addi	sp,fp,-4
    80bc:	dfc00217 	ldw	ra,8(sp)
    80c0:	df000117 	ldw	fp,4(sp)
    80c4:	dc000017 	ldw	r16,0(sp)
    80c8:	dec00304 	addi	sp,sp,12
    80cc:	f800283a 	ret

000080d0 <Check_Periph_ID>:

/** Cchecks if peripheral ID is valid.
 Returns 1 if valid, else 0. */
unsigned char Check_Periph_ID (unsigned char max_periph_id, unsigned char Periph_ID)
{
    80d0:	defffd04 	addi	sp,sp,-12
    80d4:	df000215 	stw	fp,8(sp)
    80d8:	df000204 	addi	fp,sp,8
    80dc:	2007883a 	mov	r3,r4
    80e0:	2805883a 	mov	r2,r5
    80e4:	e0fffe05 	stb	r3,-8(fp)
    80e8:	e0bfff05 	stb	r2,-4(fp)
		if (LMS_Ctrl_Packet_Rx->Header.Periph_ID > max_periph_id)
    80ec:	d0a00217 	ldw	r2,-32760(gp)
    80f0:	108000c3 	ldbu	r2,3(r2)
    80f4:	10803fcc 	andi	r2,r2,255
    80f8:	e0fffe03 	ldbu	r3,-8(fp)
    80fc:	1880052e 	bgeu	r3,r2,8114 <Check_Periph_ID+0x44>
		{
		LMS_Ctrl_Packet_Tx->Header.Status = STATUS_INVALID_PERIPH_ID_CMD;
    8100:	d0a00117 	ldw	r2,-32764(gp)
    8104:	00c00204 	movi	r3,8
    8108:	10c00045 	stb	r3,1(r2)
		return 0;
    810c:	0005883a 	mov	r2,zero
    8110:	00000106 	br	8118 <Check_Periph_ID+0x48>
		}
	else return 1;
    8114:	00800044 	movi	r2,1
}
    8118:	e037883a 	mov	sp,fp
    811c:	df000017 	ldw	fp,0(sp)
    8120:	dec00104 	addi	sp,sp,4
    8124:	f800283a 	ret

00008128 <getFifoData>:

/**
 * Gets 64 bytes packet from FIFO.
 */
void getFifoData(uint8_t *buf, uint8_t k)
{
    8128:	defffb04 	addi	sp,sp,-20
    812c:	df000415 	stw	fp,16(sp)
    8130:	df000404 	addi	fp,sp,16
    8134:	e13ffe15 	stw	r4,-8(fp)
    8138:	2805883a 	mov	r2,r5
    813c:	e0bfff05 	stb	r2,-4(fp)
	uint8_t cnt = 0;
    8140:	e03ffc05 	stb	zero,-16(fp)
	uint32_t* dest = (uint32_t*)buf;
    8144:	e0bffe17 	ldw	r2,-8(fp)
    8148:	e0bffd15 	stw	r2,-12(fp)
	for(cnt=0; cnt<k/sizeof(uint32_t); ++cnt)
    814c:	e03ffc05 	stb	zero,-16(fp)
    8150:	00000d06 	br	8188 <getFifoData+0x60>
	{
		dest[cnt] = IORD(AV_FIFO_INT_0_BASE, 1);	// Read Data from FIFO
    8154:	e0bffc03 	ldbu	r2,-16(fp)
    8158:	1085883a 	add	r2,r2,r2
    815c:	1085883a 	add	r2,r2,r2
    8160:	1007883a 	mov	r3,r2
    8164:	e0bffd17 	ldw	r2,-12(fp)
    8168:	10c7883a 	add	r3,r2,r3
    816c:	00800074 	movhi	r2,1
    8170:	1085b504 	addi	r2,r2,5844
    8174:	10800037 	ldwio	r2,0(r2)
    8178:	18800015 	stw	r2,0(r3)
 */
void getFifoData(uint8_t *buf, uint8_t k)
{
	uint8_t cnt = 0;
	uint32_t* dest = (uint32_t*)buf;
	for(cnt=0; cnt<k/sizeof(uint32_t); ++cnt)
    817c:	e0bffc03 	ldbu	r2,-16(fp)
    8180:	10800044 	addi	r2,r2,1
    8184:	e0bffc05 	stb	r2,-16(fp)
    8188:	e0bfff03 	ldbu	r2,-4(fp)
    818c:	1004d0ba 	srli	r2,r2,2
    8190:	10803fcc 	andi	r2,r2,255
    8194:	e0fffc03 	ldbu	r3,-16(fp)
    8198:	18bfee36 	bltu	r3,r2,8154 <_gp+0xffff3c10>
	{
		dest[cnt] = IORD(AV_FIFO_INT_0_BASE, 1);	// Read Data from FIFO
	};
}
    819c:	0001883a 	nop
    81a0:	e037883a 	mov	sp,fp
    81a4:	df000017 	ldw	fp,0(sp)
    81a8:	dec00104 	addi	sp,sp,4
    81ac:	f800283a 	ret

000081b0 <Configure_LM75>:
/**
 * Configures LM75
 */

void Configure_LM75(void)
{
    81b0:	defffd04 	addi	sp,sp,-12
    81b4:	dfc00215 	stw	ra,8(sp)
    81b8:	df000115 	stw	fp,4(sp)
    81bc:	df000104 	addi	fp,sp,4
	int spirez;

	// OS polarity configuration
	spirez = I2C_start(I2C_OPENCORES_0_BASE, LM75_I2C_ADDR, 0);
    81c0:	000d883a 	mov	r6,zero
    81c4:	01401204 	movi	r5,72
    81c8:	01000074 	movhi	r4,1
    81cc:	21059804 	addi	r4,r4,5728
    81d0:	000b4cc0 	call	b4cc <I2C_start>
    81d4:	e0bfff15 	stw	r2,-4(fp)
	spirez = I2C_write(I2C_OPENCORES_0_BASE, 0x01, 0);				// Pointer = configuration register
    81d8:	000d883a 	mov	r6,zero
    81dc:	01400044 	movi	r5,1
    81e0:	01000074 	movhi	r4,1
    81e4:	21059804 	addi	r4,r4,5728
    81e8:	000b6200 	call	b620 <I2C_write>
    81ec:	e0bfff15 	stw	r2,-4(fp)
	//spirez = I2C_start(I2C_OPENCORES_0_BASE, LM75_I2C_ADDR, 1);
	spirez = I2C_write(I2C_OPENCORES_0_BASE, 0x04, 1);				//Configuration value: OS polarity = 1, Comparator/int = 0, Shutdown = 0
    81f0:	01800044 	movi	r6,1
    81f4:	01400104 	movi	r5,4
    81f8:	01000074 	movhi	r4,1
    81fc:	21059804 	addi	r4,r4,5728
    8200:	000b6200 	call	b620 <I2C_write>
    8204:	e0bfff15 	stw	r2,-4(fp)

	// THYST configuration
	spirez = I2C_start(I2C_OPENCORES_0_BASE, LM75_I2C_ADDR, 0);
    8208:	000d883a 	mov	r6,zero
    820c:	01401204 	movi	r5,72
    8210:	01000074 	movhi	r4,1
    8214:	21059804 	addi	r4,r4,5728
    8218:	000b4cc0 	call	b4cc <I2C_start>
    821c:	e0bfff15 	stw	r2,-4(fp)
	spirez = I2C_write(I2C_OPENCORES_0_BASE, 0x02, 0);				// Pointer = THYST register
    8220:	000d883a 	mov	r6,zero
    8224:	01400084 	movi	r5,2
    8228:	01000074 	movhi	r4,1
    822c:	21059804 	addi	r4,r4,5728
    8230:	000b6200 	call	b620 <I2C_write>
    8234:	e0bfff15 	stw	r2,-4(fp)
	//spirez = I2C_start(I2C_OPENCORES_0_BASE, LM75_I2C_ADDR, 1);
	spirez = I2C_write(I2C_OPENCORES_0_BASE, 45, 0);				// Set THYST H
    8238:	000d883a 	mov	r6,zero
    823c:	01400b44 	movi	r5,45
    8240:	01000074 	movhi	r4,1
    8244:	21059804 	addi	r4,r4,5728
    8248:	000b6200 	call	b620 <I2C_write>
    824c:	e0bfff15 	stw	r2,-4(fp)
	spirez = I2C_write(I2C_OPENCORES_0_BASE,  0, 1);				// Set THYST L
    8250:	01800044 	movi	r6,1
    8254:	000b883a 	mov	r5,zero
    8258:	01000074 	movhi	r4,1
    825c:	21059804 	addi	r4,r4,5728
    8260:	000b6200 	call	b620 <I2C_write>
    8264:	e0bfff15 	stw	r2,-4(fp)

	// TOS configuration
	spirez = I2C_start(I2C_OPENCORES_0_BASE, LM75_I2C_ADDR, 0);
    8268:	000d883a 	mov	r6,zero
    826c:	01401204 	movi	r5,72
    8270:	01000074 	movhi	r4,1
    8274:	21059804 	addi	r4,r4,5728
    8278:	000b4cc0 	call	b4cc <I2C_start>
    827c:	e0bfff15 	stw	r2,-4(fp)
	spirez = I2C_write(I2C_OPENCORES_0_BASE, 0x03, 0);				// Pointer = TOS register
    8280:	000d883a 	mov	r6,zero
    8284:	014000c4 	movi	r5,3
    8288:	01000074 	movhi	r4,1
    828c:	21059804 	addi	r4,r4,5728
    8290:	000b6200 	call	b620 <I2C_write>
    8294:	e0bfff15 	stw	r2,-4(fp)
	//spirez = I2C_start(I2C_OPENCORES_0_BASE, LM75_I2C_ADDR, 1);
	spirez = I2C_write(I2C_OPENCORES_0_BASE, 55, 0);				// Set TOS H
    8298:	000d883a 	mov	r6,zero
    829c:	01400dc4 	movi	r5,55
    82a0:	01000074 	movhi	r4,1
    82a4:	21059804 	addi	r4,r4,5728
    82a8:	000b6200 	call	b620 <I2C_write>
    82ac:	e0bfff15 	stw	r2,-4(fp)
	spirez = I2C_write(I2C_OPENCORES_0_BASE,  0, 1);				// Set TOS L
    82b0:	01800044 	movi	r6,1
    82b4:	000b883a 	mov	r5,zero
    82b8:	01000074 	movhi	r4,1
    82bc:	21059804 	addi	r4,r4,5728
    82c0:	000b6200 	call	b620 <I2C_write>
    82c4:	e0bfff15 	stw	r2,-4(fp)
}
    82c8:	0001883a 	nop
    82cc:	e037883a 	mov	sp,fp
    82d0:	dfc00117 	ldw	ra,4(sp)
    82d4:	df000017 	ldw	fp,0(sp)
    82d8:	dec00204 	addi	sp,sp,8
    82dc:	f800283a 	ret

000082e0 <init_ADC>:

void init_ADC()
{
    82e0:	defff904 	addi	sp,sp,-28
    82e4:	dfc00615 	stw	ra,24(sp)
    82e8:	df000515 	stw	fp,20(sp)
    82ec:	df000504 	addi	fp,sp,20
    //asm("nop"); asm("nop"); asm("nop");
    //IOWR(GPIO_0_BASE, 0x00, ui32_tmp & 0xFFFFFFFE);	//Set to 0


	// Disable ADC readout and reset
	wr_buf[0] = 0x00;	//Address
    82f0:	e03fff05 	stb	zero,-4(fp)
	wr_buf[1] = 0x02;	//Data
    82f4:	00800084 	movi	r2,2
    82f8:	e0bfff45 	stb	r2,-3(fp)
	//wr_buf[1] = 0x00;	//Data
	spirez = alt_avalon_spi_command(FPGA_SPI0_BASE, SPI_NR_EXTADC, 2, wr_buf, 0, NULL, 0);
    82fc:	e0bfff04 	addi	r2,fp,-4
    8300:	d8000215 	stw	zero,8(sp)
    8304:	d8000115 	stw	zero,4(sp)
    8308:	d8000015 	stw	zero,0(sp)
    830c:	100f883a 	mov	r7,r2
    8310:	01800084 	movi	r6,2
    8314:	01400144 	movi	r5,5
    8318:	01000074 	movhi	r4,1
    831c:	21059004 	addi	r4,r4,5696
    8320:	000b2180 	call	b218 <alt_avalon_spi_command>
    8324:	e0bffe15 	stw	r2,-8(fp)

	// 0x01
	wr_buf[0] = 0x01;	//Address
    8328:	00800044 	movi	r2,1
    832c:	e0bfff05 	stb	r2,-4(fp)
	wr_buf[1] = 0x00;	//Data
    8330:	e03fff45 	stb	zero,-3(fp)
	spirez = alt_avalon_spi_command(FPGA_SPI0_BASE, SPI_NR_EXTADC, 2, wr_buf, 0, NULL, 0);
    8334:	e0bfff04 	addi	r2,fp,-4
    8338:	d8000215 	stw	zero,8(sp)
    833c:	d8000115 	stw	zero,4(sp)
    8340:	d8000015 	stw	zero,0(sp)
    8344:	100f883a 	mov	r7,r2
    8348:	01800084 	movi	r6,2
    834c:	01400144 	movi	r5,5
    8350:	01000074 	movhi	r4,1
    8354:	21059004 	addi	r4,r4,5696
    8358:	000b2180 	call	b218 <alt_avalon_spi_command>
    835c:	e0bffe15 	stw	r2,-8(fp)

	// 0x03
	wr_buf[0] = 0x03;	//Address
    8360:	008000c4 	movi	r2,3
    8364:	e0bfff05 	stb	r2,-4(fp)
	//wr_buf[1] = 0x53;	//Data
	wr_buf[1] = 0x00;	//Data
    8368:	e03fff45 	stb	zero,-3(fp)
	spirez = alt_avalon_spi_command(FPGA_SPI0_BASE, SPI_NR_EXTADC, 2, wr_buf, 0, NULL, 0);
    836c:	e0bfff04 	addi	r2,fp,-4
    8370:	d8000215 	stw	zero,8(sp)
    8374:	d8000115 	stw	zero,4(sp)
    8378:	d8000015 	stw	zero,0(sp)
    837c:	100f883a 	mov	r7,r2
    8380:	01800084 	movi	r6,2
    8384:	01400144 	movi	r5,5
    8388:	01000074 	movhi	r4,1
    838c:	21059004 	addi	r4,r4,5696
    8390:	000b2180 	call	b218 <alt_avalon_spi_command>
    8394:	e0bffe15 	stw	r2,-8(fp)

	// 0x25
	wr_buf[0] = 0x25;	//Address
    8398:	00800944 	movi	r2,37
    839c:	e0bfff05 	stb	r2,-4(fp)
	wr_buf[1] = 0x04;	//Data
    83a0:	00800104 	movi	r2,4
    83a4:	e0bfff45 	stb	r2,-3(fp)
	spirez = alt_avalon_spi_command(FPGA_SPI0_BASE, SPI_NR_EXTADC, 2, wr_buf, 0, NULL, 0);
    83a8:	e0bfff04 	addi	r2,fp,-4
    83ac:	d8000215 	stw	zero,8(sp)
    83b0:	d8000115 	stw	zero,4(sp)
    83b4:	d8000015 	stw	zero,0(sp)
    83b8:	100f883a 	mov	r7,r2
    83bc:	01800084 	movi	r6,2
    83c0:	01400144 	movi	r5,5
    83c4:	01000074 	movhi	r4,1
    83c8:	21059004 	addi	r4,r4,5696
    83cc:	000b2180 	call	b218 <alt_avalon_spi_command>
    83d0:	e0bffe15 	stw	r2,-8(fp)

	// 0x29
	wr_buf[0] = 0x29;	//Address
    83d4:	00800a44 	movi	r2,41
    83d8:	e0bfff05 	stb	r2,-4(fp)
	wr_buf[1] = 0x00;	//Data
    83dc:	e03fff45 	stb	zero,-3(fp)
	spirez = alt_avalon_spi_command(FPGA_SPI0_BASE, SPI_NR_EXTADC, 2, wr_buf, 0, NULL, 0);
    83e0:	e0bfff04 	addi	r2,fp,-4
    83e4:	d8000215 	stw	zero,8(sp)
    83e8:	d8000115 	stw	zero,4(sp)
    83ec:	d8000015 	stw	zero,0(sp)
    83f0:	100f883a 	mov	r7,r2
    83f4:	01800084 	movi	r6,2
    83f8:	01400144 	movi	r5,5
    83fc:	01000074 	movhi	r4,1
    8400:	21059004 	addi	r4,r4,5696
    8404:	000b2180 	call	b218 <alt_avalon_spi_command>
    8408:	e0bffe15 	stw	r2,-8(fp)

	// 0x2B
	wr_buf[0] = 0x2B;	//Address
    840c:	00800ac4 	movi	r2,43
    8410:	e0bfff05 	stb	r2,-4(fp)
	wr_buf[1] = 0x04;	//Data
    8414:	00800104 	movi	r2,4
    8418:	e0bfff45 	stb	r2,-3(fp)
	spirez = alt_avalon_spi_command(FPGA_SPI0_BASE, SPI_NR_EXTADC, 2, wr_buf, 0, NULL, 0);
    841c:	e0bfff04 	addi	r2,fp,-4
    8420:	d8000215 	stw	zero,8(sp)
    8424:	d8000115 	stw	zero,4(sp)
    8428:	d8000015 	stw	zero,0(sp)
    842c:	100f883a 	mov	r7,r2
    8430:	01800084 	movi	r6,2
    8434:	01400144 	movi	r5,5
    8438:	01000074 	movhi	r4,1
    843c:	21059004 	addi	r4,r4,5696
    8440:	000b2180 	call	b218 <alt_avalon_spi_command>
    8444:	e0bffe15 	stw	r2,-8(fp)

	// 0x3D
	wr_buf[0] = 0x3D;	//Address
    8448:	00800f44 	movi	r2,61
    844c:	e0bfff05 	stb	r2,-4(fp)
	wr_buf[1] = 0x00;	//Data
    8450:	e03fff45 	stb	zero,-3(fp)
	spirez = alt_avalon_spi_command(FPGA_SPI0_BASE, SPI_NR_EXTADC, 2, wr_buf, 0, NULL, 0);
    8454:	e0bfff04 	addi	r2,fp,-4
    8458:	d8000215 	stw	zero,8(sp)
    845c:	d8000115 	stw	zero,4(sp)
    8460:	d8000015 	stw	zero,0(sp)
    8464:	100f883a 	mov	r7,r2
    8468:	01800084 	movi	r6,2
    846c:	01400144 	movi	r5,5
    8470:	01000074 	movhi	r4,1
    8474:	21059004 	addi	r4,r4,5696
    8478:	000b2180 	call	b218 <alt_avalon_spi_command>
    847c:	e0bffe15 	stw	r2,-8(fp)

	// 0x3F
	wr_buf[0] = 0x3F;	//Address
    8480:	00800fc4 	movi	r2,63
    8484:	e0bfff05 	stb	r2,-4(fp)
	wr_buf[1] = 0x00;	//Data
    8488:	e03fff45 	stb	zero,-3(fp)
	spirez = alt_avalon_spi_command(FPGA_SPI0_BASE, SPI_NR_EXTADC, 2, wr_buf, 0, NULL, 0);
    848c:	e0bfff04 	addi	r2,fp,-4
    8490:	d8000215 	stw	zero,8(sp)
    8494:	d8000115 	stw	zero,4(sp)
    8498:	d8000015 	stw	zero,0(sp)
    849c:	100f883a 	mov	r7,r2
    84a0:	01800084 	movi	r6,2
    84a4:	01400144 	movi	r5,5
    84a8:	01000074 	movhi	r4,1
    84ac:	21059004 	addi	r4,r4,5696
    84b0:	000b2180 	call	b218 <alt_avalon_spi_command>
    84b4:	e0bffe15 	stw	r2,-8(fp)

	// 0x40
	wr_buf[0] = 0x40;	//Address
    84b8:	00801004 	movi	r2,64
    84bc:	e0bfff05 	stb	r2,-4(fp)
	wr_buf[1] = 0x00;	//Data
    84c0:	e03fff45 	stb	zero,-3(fp)
	spirez = alt_avalon_spi_command(FPGA_SPI0_BASE, SPI_NR_EXTADC, 2, wr_buf, 0, NULL, 0);
    84c4:	e0bfff04 	addi	r2,fp,-4
    84c8:	d8000215 	stw	zero,8(sp)
    84cc:	d8000115 	stw	zero,4(sp)
    84d0:	d8000015 	stw	zero,0(sp)
    84d4:	100f883a 	mov	r7,r2
    84d8:	01800084 	movi	r6,2
    84dc:	01400144 	movi	r5,5
    84e0:	01000074 	movhi	r4,1
    84e4:	21059004 	addi	r4,r4,5696
    84e8:	000b2180 	call	b218 <alt_avalon_spi_command>
    84ec:	e0bffe15 	stw	r2,-8(fp)

	// 0x41
	wr_buf[0] = 0x41;	//Address
    84f0:	00801044 	movi	r2,65
    84f4:	e0bfff05 	stb	r2,-4(fp)
	wr_buf[1] = 0x00;	//Data
    84f8:	e03fff45 	stb	zero,-3(fp)
	spirez = alt_avalon_spi_command(FPGA_SPI0_BASE, SPI_NR_EXTADC, 2, wr_buf, 0, NULL, 0);
    84fc:	e0bfff04 	addi	r2,fp,-4
    8500:	d8000215 	stw	zero,8(sp)
    8504:	d8000115 	stw	zero,4(sp)
    8508:	d8000015 	stw	zero,0(sp)
    850c:	100f883a 	mov	r7,r2
    8510:	01800084 	movi	r6,2
    8514:	01400144 	movi	r5,5
    8518:	01000074 	movhi	r4,1
    851c:	21059004 	addi	r4,r4,5696
    8520:	000b2180 	call	b218 <alt_avalon_spi_command>
    8524:	e0bffe15 	stw	r2,-8(fp)

	// 0x42
	wr_buf[0] = 0x42;	//Address
    8528:	00801084 	movi	r2,66
    852c:	e0bfff05 	stb	r2,-4(fp)
	//wr_buf[1] = 0x08;	//Data
	wr_buf[1] = 0x00;	//Data
    8530:	e03fff45 	stb	zero,-3(fp)
	spirez = alt_avalon_spi_command(FPGA_SPI0_BASE, SPI_NR_EXTADC, 2, wr_buf, 0, NULL, 0);
    8534:	e0bfff04 	addi	r2,fp,-4
    8538:	d8000215 	stw	zero,8(sp)
    853c:	d8000115 	stw	zero,4(sp)
    8540:	d8000015 	stw	zero,0(sp)
    8544:	100f883a 	mov	r7,r2
    8548:	01800084 	movi	r6,2
    854c:	01400144 	movi	r5,5
    8550:	01000074 	movhi	r4,1
    8554:	21059004 	addi	r4,r4,5696
    8558:	000b2180 	call	b218 <alt_avalon_spi_command>
    855c:	e0bffe15 	stw	r2,-8(fp)

	// 0x45
	wr_buf[0] = 0x45;	//Address
    8560:	00801144 	movi	r2,69
    8564:	e0bfff05 	stb	r2,-4(fp)
	wr_buf[1] = 0x00;	//Data
    8568:	e03fff45 	stb	zero,-3(fp)
	spirez = alt_avalon_spi_command(FPGA_SPI0_BASE, SPI_NR_EXTADC, 2, wr_buf, 0, NULL, 0);
    856c:	e0bfff04 	addi	r2,fp,-4
    8570:	d8000215 	stw	zero,8(sp)
    8574:	d8000115 	stw	zero,4(sp)
    8578:	d8000015 	stw	zero,0(sp)
    857c:	100f883a 	mov	r7,r2
    8580:	01800084 	movi	r6,2
    8584:	01400144 	movi	r5,5
    8588:	01000074 	movhi	r4,1
    858c:	21059004 	addi	r4,r4,5696
    8590:	000b2180 	call	b218 <alt_avalon_spi_command>
    8594:	e0bffe15 	stw	r2,-8(fp)

	// 0x4A
	wr_buf[0] = 0x4A;	//Address
    8598:	00801284 	movi	r2,74
    859c:	e0bfff05 	stb	r2,-4(fp)
	wr_buf[1] = 0x00;	//Data
    85a0:	e03fff45 	stb	zero,-3(fp)
	spirez = alt_avalon_spi_command(FPGA_SPI0_BASE, SPI_NR_EXTADC, 2, wr_buf, 0, NULL, 0);
    85a4:	e0bfff04 	addi	r2,fp,-4
    85a8:	d8000215 	stw	zero,8(sp)
    85ac:	d8000115 	stw	zero,4(sp)
    85b0:	d8000015 	stw	zero,0(sp)
    85b4:	100f883a 	mov	r7,r2
    85b8:	01800084 	movi	r6,2
    85bc:	01400144 	movi	r5,5
    85c0:	01000074 	movhi	r4,1
    85c4:	21059004 	addi	r4,r4,5696
    85c8:	000b2180 	call	b218 <alt_avalon_spi_command>
    85cc:	e0bffe15 	stw	r2,-8(fp)

	// 0x58
	wr_buf[0] = 0x58;	//Address
    85d0:	00801604 	movi	r2,88
    85d4:	e0bfff05 	stb	r2,-4(fp)
	wr_buf[1] = 0x00;	//Data
    85d8:	e03fff45 	stb	zero,-3(fp)
	spirez = alt_avalon_spi_command(FPGA_SPI0_BASE, SPI_NR_EXTADC, 2, wr_buf, 0, NULL, 0);
    85dc:	e0bfff04 	addi	r2,fp,-4
    85e0:	d8000215 	stw	zero,8(sp)
    85e4:	d8000115 	stw	zero,4(sp)
    85e8:	d8000015 	stw	zero,0(sp)
    85ec:	100f883a 	mov	r7,r2
    85f0:	01800084 	movi	r6,2
    85f4:	01400144 	movi	r5,5
    85f8:	01000074 	movhi	r4,1
    85fc:	21059004 	addi	r4,r4,5696
    8600:	000b2180 	call	b218 <alt_avalon_spi_command>
    8604:	e0bffe15 	stw	r2,-8(fp)

	// 0xBF
	wr_buf[0] = 0xBF;	//Address
    8608:	00bfefc4 	movi	r2,-65
    860c:	e0bfff05 	stb	r2,-4(fp)
	wr_buf[1] = 0x00;	//Data
    8610:	e03fff45 	stb	zero,-3(fp)
	spirez = alt_avalon_spi_command(FPGA_SPI0_BASE, SPI_NR_EXTADC, 2, wr_buf, 0, NULL, 0);
    8614:	e0bfff04 	addi	r2,fp,-4
    8618:	d8000215 	stw	zero,8(sp)
    861c:	d8000115 	stw	zero,4(sp)
    8620:	d8000015 	stw	zero,0(sp)
    8624:	100f883a 	mov	r7,r2
    8628:	01800084 	movi	r6,2
    862c:	01400144 	movi	r5,5
    8630:	01000074 	movhi	r4,1
    8634:	21059004 	addi	r4,r4,5696
    8638:	000b2180 	call	b218 <alt_avalon_spi_command>
    863c:	e0bffe15 	stw	r2,-8(fp)

	// 0xC1
	wr_buf[0] = 0xC1;	//Address
    8640:	00bff044 	movi	r2,-63
    8644:	e0bfff05 	stb	r2,-4(fp)
	wr_buf[1] = 0x00;	//Data
    8648:	e03fff45 	stb	zero,-3(fp)
	spirez = alt_avalon_spi_command(FPGA_SPI0_BASE, SPI_NR_EXTADC, 2, wr_buf, 0, NULL, 0);
    864c:	e0bfff04 	addi	r2,fp,-4
    8650:	d8000215 	stw	zero,8(sp)
    8654:	d8000115 	stw	zero,4(sp)
    8658:	d8000015 	stw	zero,0(sp)
    865c:	100f883a 	mov	r7,r2
    8660:	01800084 	movi	r6,2
    8664:	01400144 	movi	r5,5
    8668:	01000074 	movhi	r4,1
    866c:	21059004 	addi	r4,r4,5696
    8670:	000b2180 	call	b218 <alt_avalon_spi_command>
    8674:	e0bffe15 	stw	r2,-8(fp)

	// 0xCF
	wr_buf[0] = 0xCF;	//Address
    8678:	00bff3c4 	movi	r2,-49
    867c:	e0bfff05 	stb	r2,-4(fp)
	wr_buf[1] = 0x00;	//Data
    8680:	e03fff45 	stb	zero,-3(fp)
	spirez = alt_avalon_spi_command(FPGA_SPI0_BASE, SPI_NR_EXTADC, 2, wr_buf, 0, NULL, 0);
    8684:	e0bfff04 	addi	r2,fp,-4
    8688:	d8000215 	stw	zero,8(sp)
    868c:	d8000115 	stw	zero,4(sp)
    8690:	d8000015 	stw	zero,0(sp)
    8694:	100f883a 	mov	r7,r2
    8698:	01800084 	movi	r6,2
    869c:	01400144 	movi	r5,5
    86a0:	01000074 	movhi	r4,1
    86a4:	21059004 	addi	r4,r4,5696
    86a8:	000b2180 	call	b218 <alt_avalon_spi_command>
    86ac:	e0bffe15 	stw	r2,-8(fp)

	// 0xDB
	wr_buf[0] = 0xDB;	//Address
    86b0:	00bff6c4 	movi	r2,-37
    86b4:	e0bfff05 	stb	r2,-4(fp)
	wr_buf[1] = 0x00;	//Data
    86b8:	e03fff45 	stb	zero,-3(fp)
	spirez = alt_avalon_spi_command(FPGA_SPI0_BASE, SPI_NR_EXTADC, 2, wr_buf, 0, NULL, 0);
    86bc:	e0bfff04 	addi	r2,fp,-4
    86c0:	d8000215 	stw	zero,8(sp)
    86c4:	d8000115 	stw	zero,4(sp)
    86c8:	d8000015 	stw	zero,0(sp)
    86cc:	100f883a 	mov	r7,r2
    86d0:	01800084 	movi	r6,2
    86d4:	01400144 	movi	r5,5
    86d8:	01000074 	movhi	r4,1
    86dc:	21059004 	addi	r4,r4,5696
    86e0:	000b2180 	call	b218 <alt_avalon_spi_command>
    86e4:	e0bffe15 	stw	r2,-8(fp)

	// 0xEF
	wr_buf[0] = 0xEF;	//Address
    86e8:	00bffbc4 	movi	r2,-17
    86ec:	e0bfff05 	stb	r2,-4(fp)
	wr_buf[1] = 0x00;	//Data
    86f0:	e03fff45 	stb	zero,-3(fp)
	spirez = alt_avalon_spi_command(FPGA_SPI0_BASE, SPI_NR_EXTADC, 2, wr_buf, 0, NULL, 0);
    86f4:	e0bfff04 	addi	r2,fp,-4
    86f8:	d8000215 	stw	zero,8(sp)
    86fc:	d8000115 	stw	zero,4(sp)
    8700:	d8000015 	stw	zero,0(sp)
    8704:	100f883a 	mov	r7,r2
    8708:	01800084 	movi	r6,2
    870c:	01400144 	movi	r5,5
    8710:	01000074 	movhi	r4,1
    8714:	21059004 	addi	r4,r4,5696
    8718:	000b2180 	call	b218 <alt_avalon_spi_command>
    871c:	e0bffe15 	stw	r2,-8(fp)

	// 0xF1
	wr_buf[0] = 0xF1;	//Address
    8720:	00bffc44 	movi	r2,-15
    8724:	e0bfff05 	stb	r2,-4(fp)
	wr_buf[1] = 0x00;	//Data
    8728:	e03fff45 	stb	zero,-3(fp)
	spirez = alt_avalon_spi_command(FPGA_SPI0_BASE, SPI_NR_EXTADC, 2, wr_buf, 0, NULL, 0);
    872c:	e0bfff04 	addi	r2,fp,-4
    8730:	d8000215 	stw	zero,8(sp)
    8734:	d8000115 	stw	zero,4(sp)
    8738:	d8000015 	stw	zero,0(sp)
    873c:	100f883a 	mov	r7,r2
    8740:	01800084 	movi	r6,2
    8744:	01400144 	movi	r5,5
    8748:	01000074 	movhi	r4,1
    874c:	21059004 	addi	r4,r4,5696
    8750:	000b2180 	call	b218 <alt_avalon_spi_command>
    8754:	e0bffe15 	stw	r2,-8(fp)

	// 0xF2
	wr_buf[0] = 0xF2;	//Address
    8758:	00bffc84 	movi	r2,-14
    875c:	e0bfff05 	stb	r2,-4(fp)
	wr_buf[1] = 0x00;	//Data
    8760:	e03fff45 	stb	zero,-3(fp)
	spirez = alt_avalon_spi_command(FPGA_SPI0_BASE, SPI_NR_EXTADC, 2, wr_buf, 0, NULL, 0);
    8764:	e0bfff04 	addi	r2,fp,-4
    8768:	d8000215 	stw	zero,8(sp)
    876c:	d8000115 	stw	zero,4(sp)
    8770:	d8000015 	stw	zero,0(sp)
    8774:	100f883a 	mov	r7,r2
    8778:	01800084 	movi	r6,2
    877c:	01400144 	movi	r5,5
    8780:	01000074 	movhi	r4,1
    8784:	21059004 	addi	r4,r4,5696
    8788:	000b2180 	call	b218 <alt_avalon_spi_command>
    878c:	e0bffe15 	stw	r2,-8(fp)

}
    8790:	0001883a 	nop
    8794:	e037883a 	mov	sp,fp
    8798:	dfc00117 	ldw	ra,4(sp)
    879c:	df000017 	ldw	fp,0(sp)
    87a0:	dec00204 	addi	sp,sp,8
    87a4:	f800283a 	ret

000087a8 <Control_TCXO_DAC>:
 *	@brief Function to control DAC for TCXO frequency control
 *	@param oe output enable control: 0 - output disabled, 1 - output enabled
 *	@param data pointer to DAC value (1 byte)
 */
void Control_TCXO_DAC (unsigned char oe, unsigned char *data) //controls DAC (AD5601)
{
    87a8:	defff704 	addi	sp,sp,-36
    87ac:	dfc00815 	stw	ra,32(sp)
    87b0:	df000715 	stw	fp,28(sp)
    87b4:	df000704 	addi	fp,sp,28
    87b8:	2005883a 	mov	r2,r4
    87bc:	e17fff15 	stw	r5,-4(fp)
    87c0:	e0bffe05 	stb	r2,-8(fp)
	volatile int spirez;
	unsigned char DAC_data[2];

	if (oe == 0) //set DAC out to three-state
    87c4:	e0bffe03 	ldbu	r2,-8(fp)
    87c8:	10000f1e 	bne	r2,zero,8808 <Control_TCXO_DAC+0x60>
	{
		DAC_data[0] = 0xC0; //POWER-DOWN MODE = THREE-STATE (MSB bits = 11) + MSB data
    87cc:	00bff004 	movi	r2,-64
    87d0:	e0bffd05 	stb	r2,-12(fp)
		DAC_data[1] = 0x00; //LSB data
    87d4:	e03ffd45 	stb	zero,-11(fp)

		spirez = alt_avalon_spi_command(DAC_SPI1_BASE, SPI_NR_TCXO_DAC, 2, DAC_data, 0, NULL, 0);
    87d8:	e0bffd04 	addi	r2,fp,-12
    87dc:	d8000215 	stw	zero,8(sp)
    87e0:	d8000115 	stw	zero,4(sp)
    87e4:	d8000015 	stw	zero,0(sp)
    87e8:	100f883a 	mov	r7,r2
    87ec:	01800084 	movi	r6,2
    87f0:	000b883a 	mov	r5,zero
    87f4:	01000074 	movhi	r4,1
    87f8:	21058004 	addi	r4,r4,5632
    87fc:	000b2180 	call	b218 <alt_avalon_spi_command>
    8800:	e0bffc15 	stw	r2,-16(fp)
		DAC_data[0] = (*data) >>2; //POWER-DOWN MODE = NORMAL OPERATION (MSB bits =00) + MSB data
		DAC_data[1] = (*data) <<6; //LSB data

		spirez = alt_avalon_spi_command(DAC_SPI1_BASE, SPI_NR_TCXO_DAC, 2, DAC_data, 0, NULL, 0);
	}
}
    8804:	00001406 	br	8858 <Control_TCXO_DAC+0xb0>

		spirez = alt_avalon_spi_command(DAC_SPI1_BASE, SPI_NR_TCXO_DAC, 2, DAC_data, 0, NULL, 0);
	}
	else //enable DAC output, set new val
	{
		DAC_data[0] = (*data) >>2; //POWER-DOWN MODE = NORMAL OPERATION (MSB bits =00) + MSB data
    8808:	e0bfff17 	ldw	r2,-4(fp)
    880c:	10800003 	ldbu	r2,0(r2)
    8810:	10803fcc 	andi	r2,r2,255
    8814:	1004d0ba 	srli	r2,r2,2
    8818:	e0bffd05 	stb	r2,-12(fp)
		DAC_data[1] = (*data) <<6; //LSB data
    881c:	e0bfff17 	ldw	r2,-4(fp)
    8820:	10800003 	ldbu	r2,0(r2)
    8824:	100491ba 	slli	r2,r2,6
    8828:	e0bffd45 	stb	r2,-11(fp)

		spirez = alt_avalon_spi_command(DAC_SPI1_BASE, SPI_NR_TCXO_DAC, 2, DAC_data, 0, NULL, 0);
    882c:	e0bffd04 	addi	r2,fp,-12
    8830:	d8000215 	stw	zero,8(sp)
    8834:	d8000115 	stw	zero,4(sp)
    8838:	d8000015 	stw	zero,0(sp)
    883c:	100f883a 	mov	r7,r2
    8840:	01800084 	movi	r6,2
    8844:	000b883a 	mov	r5,zero
    8848:	01000074 	movhi	r4,1
    884c:	21058004 	addi	r4,r4,5632
    8850:	000b2180 	call	b218 <alt_avalon_spi_command>
    8854:	e0bffc15 	stw	r2,-16(fp)
	}
}
    8858:	0001883a 	nop
    885c:	e037883a 	mov	sp,fp
    8860:	dfc00117 	ldw	ra,4(sp)
    8864:	df000017 	ldw	fp,0(sp)
    8868:	dec00204 	addi	sp,sp,8
    886c:	f800283a 	ret

00008870 <Control_TCXO_ADF>:
 *	@brief Function to control ADF for TCXO frequency control
 *	@param oe output enable control: 0 - output disabled, 1 - output enabled
 *	@param data pointer to ADF data block (3 bytes)
 */
void Control_TCXO_ADF (unsigned char oe, unsigned char *data) //controls ADF4002
{
    8870:	defff404 	addi	sp,sp,-48
    8874:	dfc00b15 	stw	ra,44(sp)
    8878:	df000a15 	stw	fp,40(sp)
    887c:	df000a04 	addi	fp,sp,40
    8880:	2005883a 	mov	r2,r4
    8884:	e17fff15 	stw	r5,-4(fp)
    8888:	e0bffe05 	stb	r2,-8(fp)
	volatile int spirez;
	unsigned char ADF_data[12], ADF_block;

	if (oe == 0) //set ADF4002 CP to three-state and MUX_OUT to DGND
    888c:	e0bffe03 	ldbu	r2,-8(fp)
    8890:	1000301e 	bne	r2,zero,8954 <Control_TCXO_ADF+0xe4>
	{
		ADF_data[0] = 0x1f;
    8894:	008007c4 	movi	r2,31
    8898:	e0bffb05 	stb	r2,-20(fp)
		ADF_data[1] = 0x81;
    889c:	00bfe044 	movi	r2,-127
    88a0:	e0bffb45 	stb	r2,-19(fp)
		ADF_data[2] = 0xf3;
    88a4:	00bffcc4 	movi	r2,-13
    88a8:	e0bffb85 	stb	r2,-18(fp)
		ADF_data[3] = 0x1f;
    88ac:	008007c4 	movi	r2,31
    88b0:	e0bffbc5 	stb	r2,-17(fp)
		ADF_data[4] = 0x81;
    88b4:	00bfe044 	movi	r2,-127
    88b8:	e0bffc05 	stb	r2,-16(fp)
		ADF_data[5] = 0xf2;
    88bc:	00bffc84 	movi	r2,-14
    88c0:	e0bffc45 	stb	r2,-15(fp)
		ADF_data[6] = 0x00;
    88c4:	e03ffc85 	stb	zero,-14(fp)
		ADF_data[7] = 0x01;
    88c8:	00800044 	movi	r2,1
    88cc:	e0bffcc5 	stb	r2,-13(fp)
		ADF_data[8] = 0xf4;
    88d0:	00bffd04 	movi	r2,-12
    88d4:	e0bffd05 	stb	r2,-12(fp)
		ADF_data[9] = 0x01;
    88d8:	00800044 	movi	r2,1
    88dc:	e0bffd45 	stb	r2,-11(fp)
		ADF_data[10] = 0x80;
    88e0:	00bfe004 	movi	r2,-128
    88e4:	e0bffd85 	stb	r2,-10(fp)
		ADF_data[11] = 0x01;
    88e8:	00800044 	movi	r2,1
    88ec:	e0bffdc5 	stb	r2,-9(fp)

		//Reconfigure_SPI_for_LMS();

		//write data to ADF
		for(ADF_block = 0; ADF_block < 4; ADF_block++)
    88f0:	e03ff905 	stb	zero,-28(fp)
    88f4:	00001306 	br	8944 <Control_TCXO_ADF+0xd4>
		{
			spirez = alt_avalon_spi_command(FPGA_SPI0_BASE, SPI_NR_TCXO_ADF4002, 3, &ADF_data[ADF_block*3], 0, NULL, 0);
    88f8:	e0fff903 	ldbu	r3,-28(fp)
    88fc:	1805883a 	mov	r2,r3
    8900:	1085883a 	add	r2,r2,r2
    8904:	10c5883a 	add	r2,r2,r3
    8908:	e0fffb04 	addi	r3,fp,-20
    890c:	1885883a 	add	r2,r3,r2
    8910:	d8000215 	stw	zero,8(sp)
    8914:	d8000115 	stw	zero,4(sp)
    8918:	d8000015 	stw	zero,0(sp)
    891c:	100f883a 	mov	r7,r2
    8920:	018000c4 	movi	r6,3
    8924:	01400084 	movi	r5,2
    8928:	01000074 	movhi	r4,1
    892c:	21059004 	addi	r4,r4,5696
    8930:	000b2180 	call	b218 <alt_avalon_spi_command>
    8934:	e0bffa15 	stw	r2,-24(fp)
		ADF_data[11] = 0x01;

		//Reconfigure_SPI_for_LMS();

		//write data to ADF
		for(ADF_block = 0; ADF_block < 4; ADF_block++)
    8938:	e0bff903 	ldbu	r2,-28(fp)
    893c:	10800044 	addi	r2,r2,1
    8940:	e0bff905 	stb	r2,-28(fp)
    8944:	e0bff903 	ldbu	r2,-28(fp)
    8948:	10800130 	cmpltui	r2,r2,4
    894c:	103fea1e 	bne	r2,zero,88f8 <_gp+0xffff43b4>
	}
	else //set PLL parameters, 4 blocks must be written
	{
		spirez = alt_avalon_spi_command(FPGA_SPI0_BASE, SPI_NR_TCXO_ADF4002, 3, data, 0, NULL, 0);
	}
}
    8950:	00000a06 	br	897c <Control_TCXO_ADF+0x10c>
			spirez = alt_avalon_spi_command(FPGA_SPI0_BASE, SPI_NR_TCXO_ADF4002, 3, &ADF_data[ADF_block*3], 0, NULL, 0);
		}
	}
	else //set PLL parameters, 4 blocks must be written
	{
		spirez = alt_avalon_spi_command(FPGA_SPI0_BASE, SPI_NR_TCXO_ADF4002, 3, data, 0, NULL, 0);
    8954:	d8000215 	stw	zero,8(sp)
    8958:	d8000115 	stw	zero,4(sp)
    895c:	d8000015 	stw	zero,0(sp)
    8960:	e1ffff17 	ldw	r7,-4(fp)
    8964:	018000c4 	movi	r6,3
    8968:	01400084 	movi	r5,2
    896c:	01000074 	movhi	r4,1
    8970:	21059004 	addi	r4,r4,5696
    8974:	000b2180 	call	b218 <alt_avalon_spi_command>
    8978:	e0bffa15 	stw	r2,-24(fp)
	}
}
    897c:	0001883a 	nop
    8980:	e037883a 	mov	sp,fp
    8984:	dfc00117 	ldw	ra,4(sp)
    8988:	df000017 	ldw	fp,0(sp)
    898c:	dec00204 	addi	sp,sp,8
    8990:	f800283a 	ret

00008994 <change_ADC_tpat>:

void change_ADC_tpat(uint8_t mode)
{
    8994:	defff804 	addi	sp,sp,-32
    8998:	dfc00715 	stw	ra,28(sp)
    899c:	df000615 	stw	fp,24(sp)
    89a0:	df000604 	addi	fp,sp,24
    89a4:	2005883a 	mov	r2,r4
    89a8:	e0bfff05 	stb	r2,-4(fp)
	uint8_t wr_buf[2];
	int spirez;

	if(mode)
    89ac:	e0bfff03 	ldbu	r2,-4(fp)
    89b0:	10001026 	beq	r2,zero,89f4 <change_ADC_tpat+0x60>
		wr_buf[1] = 0x55;	//Data
		spirez = alt_avalon_spi_command(FPGA_SPI0_BASE, SPI_NR_EXTADC, 2, wr_buf, 0, NULL, 0);
		*/

		// 0x42 Enable Digital functions
		wr_buf[0] = 0x42;	//Address
    89b4:	00801084 	movi	r2,66
    89b8:	e0bffe05 	stb	r2,-8(fp)
		wr_buf[1] = 0x08;	//Data
    89bc:	00800204 	movi	r2,8
    89c0:	e0bffe45 	stb	r2,-7(fp)
		spirez = alt_avalon_spi_command(FPGA_SPI0_BASE, SPI_NR_EXTADC, 2, wr_buf, 0, NULL, 0);
    89c4:	e0bffe04 	addi	r2,fp,-8
    89c8:	d8000215 	stw	zero,8(sp)
    89cc:	d8000115 	stw	zero,4(sp)
    89d0:	d8000015 	stw	zero,0(sp)
    89d4:	100f883a 	mov	r7,r2
    89d8:	01800084 	movi	r6,2
    89dc:	01400144 	movi	r5,5
    89e0:	01000074 	movhi	r4,1
    89e4:	21059004 	addi	r4,r4,5696
    89e8:	000b2180 	call	b218 <alt_avalon_spi_command>
    89ec:	e0bffd15 	stw	r2,-12(fp)
		wr_buf[0] = 0x42;	//Address
		wr_buf[1] = 0x00;	//Data
		spirez = alt_avalon_spi_command(FPGA_SPI0_BASE, SPI_NR_EXTADC, 2, wr_buf, 0, NULL, 0);

	};
}
    89f0:	00000e06 	br	8a2c <change_ADC_tpat+0x98>
		wr_buf[1] = 0x00;	//Data
		spirez = alt_avalon_spi_command(FPGA_SPI0_BASE, SPI_NR_EXTADC, 2, wr_buf, 0, NULL, 0);

		*/
		// 0x42 Disable Digital functions
		wr_buf[0] = 0x42;	//Address
    89f4:	00801084 	movi	r2,66
    89f8:	e0bffe05 	stb	r2,-8(fp)
		wr_buf[1] = 0x00;	//Data
    89fc:	e03ffe45 	stb	zero,-7(fp)
		spirez = alt_avalon_spi_command(FPGA_SPI0_BASE, SPI_NR_EXTADC, 2, wr_buf, 0, NULL, 0);
    8a00:	e0bffe04 	addi	r2,fp,-8
    8a04:	d8000215 	stw	zero,8(sp)
    8a08:	d8000115 	stw	zero,4(sp)
    8a0c:	d8000015 	stw	zero,0(sp)
    8a10:	100f883a 	mov	r7,r2
    8a14:	01800084 	movi	r6,2
    8a18:	01400144 	movi	r5,5
    8a1c:	01000074 	movhi	r4,1
    8a20:	21059004 	addi	r4,r4,5696
    8a24:	000b2180 	call	b218 <alt_avalon_spi_command>
    8a28:	e0bffd15 	stw	r2,-12(fp)

	};
}
    8a2c:	0001883a 	nop
    8a30:	e037883a 	mov	sp,fp
    8a34:	dfc00117 	ldw	ra,4(sp)
    8a38:	df000017 	ldw	fp,0(sp)
    8a3c:	dec00204 	addi	sp,sp,8
    8a40:	f800283a 	ret

00008a44 <GetPLLCFG_Base>:

// Return PLL base address acoording to the PLL index
uint32_t GetPLLCFG_Base(uint8_t ind)
{
    8a44:	defffd04 	addi	sp,sp,-12
    8a48:	df000215 	stw	fp,8(sp)
    8a4c:	df000204 	addi	fp,sp,8
    8a50:	2005883a 	mov	r2,r4
    8a54:	e0bfff05 	stb	r2,-4(fp)
	uint32_t PLL_BASE;

	switch ( ind )
    8a58:	e0bfff03 	ldbu	r2,-4(fp)
    8a5c:	10c000a0 	cmpeqi	r3,r2,2
    8a60:	18000e1e 	bne	r3,zero,8a9c <GetPLLCFG_Base+0x58>
    8a64:	10c000c8 	cmpgei	r3,r2,3
    8a68:	1800031e 	bne	r3,zero,8a78 <GetPLLCFG_Base+0x34>
    8a6c:	10800060 	cmpeqi	r2,r2,1
    8a70:	1000061e 	bne	r2,zero,8a8c <GetPLLCFG_Base+0x48>
    8a74:	00001506 	br	8acc <GetPLLCFG_Base+0x88>
    8a78:	10c000e0 	cmpeqi	r3,r2,3
    8a7c:	18000b1e 	bne	r3,zero,8aac <GetPLLCFG_Base+0x68>
    8a80:	10800120 	cmpeqi	r2,r2,4
    8a84:	10000d1e 	bne	r2,zero,8abc <GetPLLCFG_Base+0x78>
    8a88:	00001006 	br	8acc <GetPLLCFG_Base+0x88>
	{
		case 1:
			PLL_BASE = PLL_RECONFIG_1_BASE;
    8a8c:	00800074 	movhi	r2,1
    8a90:	10840004 	addi	r2,r2,4096
    8a94:	e0bffe15 	stw	r2,-8(fp)
	    break;
    8a98:	00000f06 	br	8ad8 <GetPLLCFG_Base+0x94>

		case 2:
			PLL_BASE = PLL_RECONFIG_2_BASE;
    8a9c:	00800074 	movhi	r2,1
    8aa0:	10844004 	addi	r2,r2,4352
    8aa4:	e0bffe15 	stw	r2,-8(fp)
		break;
    8aa8:	00000b06 	br	8ad8 <GetPLLCFG_Base+0x94>

		case 3:
			PLL_BASE = PLL_RECONFIG_3_BASE;
    8aac:	00800074 	movhi	r2,1
    8ab0:	10848004 	addi	r2,r2,4608
    8ab4:	e0bffe15 	stw	r2,-8(fp)
		break;
    8ab8:	00000706 	br	8ad8 <GetPLLCFG_Base+0x94>

		case 4:
			PLL_BASE = PLL_RECONFIG_4_BASE;
    8abc:	00800074 	movhi	r2,1
    8ac0:	1084c004 	addi	r2,r2,4864
    8ac4:	e0bffe15 	stw	r2,-8(fp)
	    break;
    8ac8:	00000306 	br	8ad8 <GetPLLCFG_Base+0x94>

		default:
			PLL_BASE = PLL_RECONFIG_0_BASE;
    8acc:	00800074 	movhi	r2,1
    8ad0:	10854004 	addi	r2,r2,5376
    8ad4:	e0bffe15 	stw	r2,-8(fp)
	}

	return PLL_BASE;
    8ad8:	e0bffe17 	ldw	r2,-8(fp)
}
    8adc:	e037883a 	mov	sp,fp
    8ae0:	df000017 	ldw	fp,0(sp)
    8ae4:	dec00104 	addi	sp,sp,4
    8ae8:	f800283a 	ret

00008aec <UpdatePLLCFG>:

// Updates PLL configuration
uint8_t UpdatePLLCFG(void)
{
    8aec:	deffee04 	addi	sp,sp,-72
    8af0:	dfc01115 	stw	ra,68(sp)
    8af4:	df001015 	stw	fp,64(sp)
    8af8:	df001004 	addi	fp,sp,64
	int spirez, i;
	tPLL_CFG pll_cfg = {0};
    8afc:	e03ff715 	stw	zero,-36(fp)
    8b00:	e03ff815 	stw	zero,-32(fp)
    8b04:	e03ff915 	stw	zero,-28(fp)
    8b08:	e03ffa15 	stw	zero,-24(fp)
    8b0c:	e03ffb15 	stw	zero,-20(fp)
    8b10:	e03ffc15 	stw	zero,-16(fp)
    8b14:	e03ffd15 	stw	zero,-12(fp)
    8b18:	e03ffe15 	stw	zero,-8(fp)
	uint32_t PLL_BASE;
	uint16_t div_byp;
	uint8_t pllcfgrez;

	// Read
	wr_buf[0] = 0x00;	// Command and Address
    8b1c:	e03fff05 	stb	zero,-4(fp)
	wr_buf[1] = 0x23;	// Command and Address
    8b20:	008008c4 	movi	r2,35
    8b24:	e0bfff45 	stb	r2,-3(fp)
	spirez = alt_avalon_spi_command(PLLCFG_SPI_BASE, 0, 2, wr_buf, 2, rd_buf, 0);
    8b28:	e0ffff04 	addi	r3,fp,-4
    8b2c:	d8000215 	stw	zero,8(sp)
    8b30:	e0bfff84 	addi	r2,fp,-2
    8b34:	d8800115 	stw	r2,4(sp)
    8b38:	00800084 	movi	r2,2
    8b3c:	d8800015 	stw	r2,0(sp)
    8b40:	180f883a 	mov	r7,r3
    8b44:	01800084 	movi	r6,2
    8b48:	000b883a 	mov	r5,zero
    8b4c:	01000074 	movhi	r4,1
    8b50:	21058804 	addi	r4,r4,5664
    8b54:	000b2180 	call	b218 <alt_avalon_spi_command>
    8b58:	e0bff415 	stw	r2,-48(fp)

	// Get PLL base address
	PLL_BASE = GetPLLCFG_Base( PLL_IND(rd_buf[1]) );
    8b5c:	e0bfffc3 	ldbu	r2,-1(fp)
    8b60:	10803fcc 	andi	r2,r2,255
    8b64:	1004d0fa 	srli	r2,r2,3
    8b68:	10803fcc 	andi	r2,r2,255
    8b6c:	1009883a 	mov	r4,r2
    8b70:	0008a440 	call	8a44 <GetPLLCFG_Base>
    8b74:	e0bff515 	stw	r2,-44(fp)

	//Write in Mode Register "0" for wait request mode, "1" for polling mode
	IOWR_32DIRECT(PLL_BASE, MODE, 0x01);
    8b78:	e0bff517 	ldw	r2,-44(fp)
    8b7c:	00c00044 	movi	r3,1
    8b80:	10c00035 	stwio	r3,0(r2)


	// Set M_ODDDIV, M_BYP, N_ODDDIV, N_BYP
	wr_buf[0] = 0x00;	// Command and Address
    8b84:	e03fff05 	stb	zero,-4(fp)
	wr_buf[1] = 0x26;	// Command and Address
    8b88:	00800984 	movi	r2,38
    8b8c:	e0bfff45 	stb	r2,-3(fp)
	spirez = alt_avalon_spi_command(PLLCFG_SPI_BASE, 0, 2, wr_buf, 2, rd_buf, 0);
    8b90:	e0ffff04 	addi	r3,fp,-4
    8b94:	d8000215 	stw	zero,8(sp)
    8b98:	e0bfff84 	addi	r2,fp,-2
    8b9c:	d8800115 	stw	r2,4(sp)
    8ba0:	00800084 	movi	r2,2
    8ba4:	d8800015 	stw	r2,0(sp)
    8ba8:	180f883a 	mov	r7,r3
    8bac:	01800084 	movi	r6,2
    8bb0:	000b883a 	mov	r5,zero
    8bb4:	01000074 	movhi	r4,1
    8bb8:	21058804 	addi	r4,r4,5664
    8bbc:	000b2180 	call	b218 <alt_avalon_spi_command>
    8bc0:	e0bff415 	stw	r2,-48(fp)
	pll_cfg.N_cnt = N_CNT_DIVBYP(rd_buf[1]); //(rd_buf[0] & 0x03) << 16;
    8bc4:	e0bfffc3 	ldbu	r2,-1(fp)
    8bc8:	10803fcc 	andi	r2,r2,255
    8bcc:	108000cc 	andi	r2,r2,3
    8bd0:	1004943a 	slli	r2,r2,16
    8bd4:	e0bff915 	stw	r2,-28(fp)
	pll_cfg.M_cnt = M_CNT_DIVBYP(rd_buf[1]); //(rd_buf[0] & 0x0C) << 14;
    8bd8:	e0bfffc3 	ldbu	r2,-1(fp)
    8bdc:	10803fcc 	andi	r2,r2,255
    8be0:	1080030c 	andi	r2,r2,12
    8be4:	100493ba 	slli	r2,r2,14
    8be8:	e0bff715 	stw	r2,-36(fp)

	// Set N_HCNT[15:8], N_LCNT[7:0]
	wr_buf[0] = 0x00;	// Command and Address
    8bec:	e03fff05 	stb	zero,-4(fp)
	wr_buf[1] = 0x2A;	// Command and Address
    8bf0:	00800a84 	movi	r2,42
    8bf4:	e0bfff45 	stb	r2,-3(fp)
	spirez = alt_avalon_spi_command(PLLCFG_SPI_BASE, 0, 2, wr_buf, 2, rd_buf, 0);
    8bf8:	e0ffff04 	addi	r3,fp,-4
    8bfc:	d8000215 	stw	zero,8(sp)
    8c00:	e0bfff84 	addi	r2,fp,-2
    8c04:	d8800115 	stw	r2,4(sp)
    8c08:	00800084 	movi	r2,2
    8c0c:	d8800015 	stw	r2,0(sp)
    8c10:	180f883a 	mov	r7,r3
    8c14:	01800084 	movi	r6,2
    8c18:	000b883a 	mov	r5,zero
    8c1c:	01000074 	movhi	r4,1
    8c20:	21058804 	addi	r4,r4,5664
    8c24:	000b2180 	call	b218 <alt_avalon_spi_command>
    8c28:	e0bff415 	stw	r2,-48(fp)
	pll_cfg.N_cnt = pll_cfg.N_cnt | N_CNT(rd_buf[0], rd_buf[1]); //pll_cfg.N_cnt | (rd_buf[1] << 8) | rd_buf[0];
    8c2c:	e0bff917 	ldw	r2,-28(fp)
    8c30:	e0ffff83 	ldbu	r3,-2(fp)
    8c34:	18c03fcc 	andi	r3,r3,255
    8c38:	1808923a 	slli	r4,r3,8
    8c3c:	e0ffffc3 	ldbu	r3,-1(fp)
    8c40:	18c03fcc 	andi	r3,r3,255
    8c44:	20c6b03a 	or	r3,r4,r3
    8c48:	10c4b03a 	or	r2,r2,r3
    8c4c:	e0bff915 	stw	r2,-28(fp)

	// Set M_HCNT[15:8], M_LCNT[7:0]
	wr_buf[0] = 0x00;	// Command and Address
    8c50:	e03fff05 	stb	zero,-4(fp)
	wr_buf[1] = 0x2B;	// Command and Address
    8c54:	00800ac4 	movi	r2,43
    8c58:	e0bfff45 	stb	r2,-3(fp)
	spirez = alt_avalon_spi_command(PLLCFG_SPI_BASE, 0, 2, wr_buf, 2, rd_buf, 0);
    8c5c:	e0ffff04 	addi	r3,fp,-4
    8c60:	d8000215 	stw	zero,8(sp)
    8c64:	e0bfff84 	addi	r2,fp,-2
    8c68:	d8800115 	stw	r2,4(sp)
    8c6c:	00800084 	movi	r2,2
    8c70:	d8800015 	stw	r2,0(sp)
    8c74:	180f883a 	mov	r7,r3
    8c78:	01800084 	movi	r6,2
    8c7c:	000b883a 	mov	r5,zero
    8c80:	01000074 	movhi	r4,1
    8c84:	21058804 	addi	r4,r4,5664
    8c88:	000b2180 	call	b218 <alt_avalon_spi_command>
    8c8c:	e0bff415 	stw	r2,-48(fp)
	pll_cfg.M_cnt = pll_cfg.M_cnt | M_CNT(rd_buf[0], rd_buf[1]); //pll_cfg.M_cnt | (rd_buf[1] << 8) | rd_buf[0];
    8c90:	e0bff717 	ldw	r2,-36(fp)
    8c94:	e0ffff83 	ldbu	r3,-2(fp)
    8c98:	18c03fcc 	andi	r3,r3,255
    8c9c:	1808923a 	slli	r4,r3,8
    8ca0:	e0ffffc3 	ldbu	r3,-1(fp)
    8ca4:	18c03fcc 	andi	r3,r3,255
    8ca8:	20c6b03a 	or	r3,r4,r3
    8cac:	10c4b03a 	or	r2,r2,r3
    8cb0:	e0bff715 	stw	r2,-36(fp)

	// Set M_FRAC[15:0]
	wr_buf[0] = 0x00;	// Command and Address
    8cb4:	e03fff05 	stb	zero,-4(fp)
	wr_buf[1] = 0x2C;	// Command and Address
    8cb8:	00800b04 	movi	r2,44
    8cbc:	e0bfff45 	stb	r2,-3(fp)
	spirez = alt_avalon_spi_command(PLLCFG_SPI_BASE, 0, 2, wr_buf, 2, rd_buf, 0);
    8cc0:	e0ffff04 	addi	r3,fp,-4
    8cc4:	d8000215 	stw	zero,8(sp)
    8cc8:	e0bfff84 	addi	r2,fp,-2
    8ccc:	d8800115 	stw	r2,4(sp)
    8cd0:	00800084 	movi	r2,2
    8cd4:	d8800015 	stw	r2,0(sp)
    8cd8:	180f883a 	mov	r7,r3
    8cdc:	01800084 	movi	r6,2
    8ce0:	000b883a 	mov	r5,zero
    8ce4:	01000074 	movhi	r4,1
    8ce8:	21058804 	addi	r4,r4,5664
    8cec:	000b2180 	call	b218 <alt_avalon_spi_command>
    8cf0:	e0bff415 	stw	r2,-48(fp)
	pll_cfg.MFrac_cnt = MFRAC_CNT_LSB(rd_buf[0], rd_buf[1]); //(rd_buf[1] << 8) | rd_buf[0];
    8cf4:	e0bfff83 	ldbu	r2,-2(fp)
    8cf8:	10803fcc 	andi	r2,r2,255
    8cfc:	1006923a 	slli	r3,r2,8
    8d00:	e0bfffc3 	ldbu	r2,-1(fp)
    8d04:	10803fcc 	andi	r2,r2,255
    8d08:	1884b03a 	or	r2,r3,r2
    8d0c:	e0bff815 	stw	r2,-32(fp)

	// Set M_FRAC[31:16]
	wr_buf[0] = 0x00;	// Command and Address
    8d10:	e03fff05 	stb	zero,-4(fp)
	wr_buf[1] = 0x2D;	// Command and Address
    8d14:	00800b44 	movi	r2,45
    8d18:	e0bfff45 	stb	r2,-3(fp)
	spirez = alt_avalon_spi_command(PLLCFG_SPI_BASE, 0, 2, wr_buf, 2, rd_buf, 0);
    8d1c:	e0ffff04 	addi	r3,fp,-4
    8d20:	d8000215 	stw	zero,8(sp)
    8d24:	e0bfff84 	addi	r2,fp,-2
    8d28:	d8800115 	stw	r2,4(sp)
    8d2c:	00800084 	movi	r2,2
    8d30:	d8800015 	stw	r2,0(sp)
    8d34:	180f883a 	mov	r7,r3
    8d38:	01800084 	movi	r6,2
    8d3c:	000b883a 	mov	r5,zero
    8d40:	01000074 	movhi	r4,1
    8d44:	21058804 	addi	r4,r4,5664
    8d48:	000b2180 	call	b218 <alt_avalon_spi_command>
    8d4c:	e0bff415 	stw	r2,-48(fp)
	pll_cfg.MFrac_cnt = pll_cfg.MFrac_cnt | MFRAC_CNT_MSB(rd_buf[0], rd_buf[1]); //pll_cfg.MFrac_cnt | ( ((rd_buf[1] << 8) | rd_buf[0]) << 16 );
    8d50:	e0bff817 	ldw	r2,-32(fp)
    8d54:	e0ffff83 	ldbu	r3,-2(fp)
    8d58:	18c03fcc 	andi	r3,r3,255
    8d5c:	1808923a 	slli	r4,r3,8
    8d60:	e0ffffc3 	ldbu	r3,-1(fp)
    8d64:	18c03fcc 	andi	r3,r3,255
    8d68:	20c6b03a 	or	r3,r4,r3
    8d6c:	1806943a 	slli	r3,r3,16
    8d70:	10c4b03a 	or	r2,r2,r3
    8d74:	e0bff815 	stw	r2,-32(fp)

	// Set PLLCFG_BS[3:0] (for Cyclone V), CHP_CURR[2:0], PLLCFG_VCODIV
	wr_buf[0] = 0x00;	// Command and Address
    8d78:	e03fff05 	stb	zero,-4(fp)
	wr_buf[1] = 0x25;	// Command and Address
    8d7c:	00800944 	movi	r2,37
    8d80:	e0bfff45 	stb	r2,-3(fp)
	spirez = alt_avalon_spi_command(PLLCFG_SPI_BASE, 0, 2, wr_buf, 2, rd_buf, 0);
    8d84:	e0ffff04 	addi	r3,fp,-4
    8d88:	d8000215 	stw	zero,8(sp)
    8d8c:	e0bfff84 	addi	r2,fp,-2
    8d90:	d8800115 	stw	r2,4(sp)
    8d94:	00800084 	movi	r2,2
    8d98:	d8800015 	stw	r2,0(sp)
    8d9c:	180f883a 	mov	r7,r3
    8da0:	01800084 	movi	r6,2
    8da4:	000b883a 	mov	r5,zero
    8da8:	01000074 	movhi	r4,1
    8dac:	21058804 	addi	r4,r4,5664
    8db0:	000b2180 	call	b218 <alt_avalon_spi_command>
    8db4:	e0bff415 	stw	r2,-48(fp)
	pll_cfg.BS_cnt = BS_CNT(rd_buf[0]); //(rd_buf[1] >> 3) & 0x0F;
    8db8:	e0bfff83 	ldbu	r2,-2(fp)
    8dbc:	10803fcc 	andi	r2,r2,255
    8dc0:	1004d0fa 	srli	r2,r2,3
    8dc4:	10803fcc 	andi	r2,r2,255
    8dc8:	108003cc 	andi	r2,r2,15
    8dcc:	e0bffc15 	stw	r2,-16(fp)
	pll_cfg.CPS_cnt = CPS_CNT(rd_buf[0]); //rd_buf[1] & 0x07;
    8dd0:	e0bfff83 	ldbu	r2,-2(fp)
    8dd4:	10803fcc 	andi	r2,r2,255
    8dd8:	108001cc 	andi	r2,r2,7
    8ddc:	e0bffd15 	stw	r2,-12(fp)
	pll_cfg.VCO_div = VCO_DIVSEL(rd_buf[1]); //(rd_buf[0] >> 7) & 0x01;
    8de0:	e0bfffc3 	ldbu	r2,-1(fp)
    8de4:	10803fcc 	andi	r2,r2,255
    8de8:	1004d1fa 	srli	r2,r2,7
    8dec:	10803fcc 	andi	r2,r2,255
    8df0:	1080004c 	andi	r2,r2,1
    8df4:	e0bffe15 	stw	r2,-8(fp)


	// Update PLL configuration;
	pllcfgrez = set_pll_config(PLL_BASE, &pll_cfg);
    8df8:	e0bff704 	addi	r2,fp,-36
    8dfc:	100b883a 	mov	r5,r2
    8e00:	e13ff517 	ldw	r4,-44(fp)
    8e04:	000aa1c0 	call	aa1c <set_pll_config>
    8e08:	e0bff605 	stb	r2,-40(fp)
	if(pllcfgrez) return pllcfgrez;
    8e0c:	e0bff603 	ldbu	r2,-40(fp)
    8e10:	10000226 	beq	r2,zero,8e1c <UpdatePLLCFG+0x330>
    8e14:	e0bff603 	ldbu	r2,-40(fp)
    8e18:	00005006 	br	8f5c <UpdatePLLCFG+0x470>


	//// Set Cx counters (first eight for now)

	// Read ODDDIV and BYP values for first 8 counters
	wr_buf[0] = 0x00;	// Command and Address
    8e1c:	e03fff05 	stb	zero,-4(fp)
	wr_buf[1] = 0x27;	// Command and Address
    8e20:	008009c4 	movi	r2,39
    8e24:	e0bfff45 	stb	r2,-3(fp)
	spirez = alt_avalon_spi_command(PLLCFG_SPI_BASE, 0, 2, wr_buf, 2, rd_buf, 0);
    8e28:	e0ffff04 	addi	r3,fp,-4
    8e2c:	d8000215 	stw	zero,8(sp)
    8e30:	e0bfff84 	addi	r2,fp,-2
    8e34:	d8800115 	stw	r2,4(sp)
    8e38:	00800084 	movi	r2,2
    8e3c:	d8800015 	stw	r2,0(sp)
    8e40:	180f883a 	mov	r7,r3
    8e44:	01800084 	movi	r6,2
    8e48:	000b883a 	mov	r5,zero
    8e4c:	01000074 	movhi	r4,1
    8e50:	21058804 	addi	r4,r4,5664
    8e54:	000b2180 	call	b218 <alt_avalon_spi_command>
    8e58:	e0bff415 	stw	r2,-48(fp)
	div_byp = CX_DIVBYP(rd_buf[0], rd_buf[1]); //(rd_buf[1] << 8) | rd_buf[0];
    8e5c:	e0bfff83 	ldbu	r2,-2(fp)
    8e60:	10803fcc 	andi	r2,r2,255
    8e64:	1004923a 	slli	r2,r2,8
    8e68:	1007883a 	mov	r3,r2
    8e6c:	e0bfffc3 	ldbu	r2,-1(fp)
    8e70:	10803fcc 	andi	r2,r2,255
    8e74:	1884b03a 	or	r2,r3,r2
    8e78:	e0bff68d 	sth	r2,-38(fp)


	for(i=0; i<8; i++)
    8e7c:	e03ff315 	stw	zero,-52(fp)
    8e80:	00002e06 	br	8f3c <UpdatePLLCFG+0x450>
	{
		// Read Cx value
		wr_buf[0] = 0x00;	// Command and Address
    8e84:	e03fff05 	stb	zero,-4(fp)
		wr_buf[1] = 0x2E + i;	// Command and Address
    8e88:	e0bff317 	ldw	r2,-52(fp)
    8e8c:	10800b84 	addi	r2,r2,46
    8e90:	e0bfff45 	stb	r2,-3(fp)
		spirez = alt_avalon_spi_command(PLLCFG_SPI_BASE, 0, 2, wr_buf, 2, rd_buf, 0);
    8e94:	e0ffff04 	addi	r3,fp,-4
    8e98:	d8000215 	stw	zero,8(sp)
    8e9c:	e0bfff84 	addi	r2,fp,-2
    8ea0:	d8800115 	stw	r2,4(sp)
    8ea4:	00800084 	movi	r2,2
    8ea8:	d8800015 	stw	r2,0(sp)
    8eac:	180f883a 	mov	r7,r3
    8eb0:	01800084 	movi	r6,2
    8eb4:	000b883a 	mov	r5,zero
    8eb8:	01000074 	movhi	r4,1
    8ebc:	21058804 	addi	r4,r4,5664
    8ec0:	000b2180 	call	b218 <alt_avalon_spi_command>
    8ec4:	e0bff415 	stw	r2,-48(fp)
		pll_cfg.C_cnt = (i << 18) | ( ((div_byp >> 2*i) & 0x03) << 16 ) | C_CNT(rd_buf[0], rd_buf[1]); //(rd_buf[1] << 8) | rd_buf[0];
    8ec8:	e0bff317 	ldw	r2,-52(fp)
    8ecc:	100694ba 	slli	r3,r2,18
    8ed0:	e13ff68b 	ldhu	r4,-38(fp)
    8ed4:	e0bff317 	ldw	r2,-52(fp)
    8ed8:	1085883a 	add	r2,r2,r2
    8edc:	2085d83a 	sra	r2,r4,r2
    8ee0:	108000cc 	andi	r2,r2,3
    8ee4:	1004943a 	slli	r2,r2,16
    8ee8:	1886b03a 	or	r3,r3,r2
    8eec:	e0bfff83 	ldbu	r2,-2(fp)
    8ef0:	10803fcc 	andi	r2,r2,255
    8ef4:	1008923a 	slli	r4,r2,8
    8ef8:	e0bfffc3 	ldbu	r2,-1(fp)
    8efc:	10803fcc 	andi	r2,r2,255
    8f00:	2084b03a 	or	r2,r4,r2
    8f04:	1884b03a 	or	r2,r3,r2
    8f08:	e0bffa15 	stw	r2,-24(fp)

		// Set Cx register
		pllcfgrez = set_CxCnt(PLL_BASE, pll_cfg.C_cnt);
    8f0c:	e0bffa17 	ldw	r2,-24(fp)
    8f10:	100b883a 	mov	r5,r2
    8f14:	e13ff517 	ldw	r4,-44(fp)
    8f18:	000aaa40 	call	aaa4 <set_CxCnt>
    8f1c:	e0bff605 	stb	r2,-40(fp)
		if(pllcfgrez) return pllcfgrez;
    8f20:	e0bff603 	ldbu	r2,-40(fp)
    8f24:	10000226 	beq	r2,zero,8f30 <UpdatePLLCFG+0x444>
    8f28:	e0bff603 	ldbu	r2,-40(fp)
    8f2c:	00000b06 	br	8f5c <UpdatePLLCFG+0x470>
	wr_buf[1] = 0x27;	// Command and Address
	spirez = alt_avalon_spi_command(PLLCFG_SPI_BASE, 0, 2, wr_buf, 2, rd_buf, 0);
	div_byp = CX_DIVBYP(rd_buf[0], rd_buf[1]); //(rd_buf[1] << 8) | rd_buf[0];


	for(i=0; i<8; i++)
    8f30:	e0bff317 	ldw	r2,-52(fp)
    8f34:	10800044 	addi	r2,r2,1
    8f38:	e0bff315 	stw	r2,-52(fp)
    8f3c:	e0bff317 	ldw	r2,-52(fp)
    8f40:	10800210 	cmplti	r2,r2,8
    8f44:	103fcf1e 	bne	r2,zero,8e84 <_gp+0xffff4940>
		//set_Phase(PLL_BASE, i, 0, 1);
		//if(pllcfgrez) return pllcfgrez;
	}

	// Apply PLL configuration
	pllcfgrez = start_Reconfig(PLL_BASE);
    8f48:	e13ff517 	ldw	r4,-44(fp)
    8f4c:	000ab5c0 	call	ab5c <start_Reconfig>
    8f50:	e0bff605 	stb	r2,-40(fp)

	ResetPLL();
    8f54:	00090a80 	call	90a8 <ResetPLL>

	return pllcfgrez;
    8f58:	e0bff603 	ldbu	r2,-40(fp)

}
    8f5c:	e037883a 	mov	sp,fp
    8f60:	dfc00117 	ldw	ra,4(sp)
    8f64:	df000017 	ldw	fp,0(sp)
    8f68:	dec00204 	addi	sp,sp,8
    8f6c:	f800283a 	ret

00008f70 <UpdatePHCFG>:

// Change PLL phase
uint8_t UpdatePHCFG(void)
{
    8f70:	defff404 	addi	sp,sp,-48
    8f74:	dfc00b15 	stw	ra,44(sp)
    8f78:	df000a15 	stw	fp,40(sp)
    8f7c:	df000a04 	addi	fp,sp,40
	uint8_t rd_buf[2];
	int spirez;
	uint8_t pllcfgrez;

	// Read
	wr_buf[0] = 0x00;	// Command and Address
    8f80:	e03ffe45 	stb	zero,-7(fp)
	wr_buf[1] = 0x23;	// Command and Address
    8f84:	008008c4 	movi	r2,35
    8f88:	e0bffe85 	stb	r2,-6(fp)
	spirez = alt_avalon_spi_command(PLLCFG_SPI_BASE, 0, 2, wr_buf, 2, rd_buf, 0);
    8f8c:	e0fffe44 	addi	r3,fp,-7
    8f90:	d8000215 	stw	zero,8(sp)
    8f94:	e0bffec4 	addi	r2,fp,-5
    8f98:	d8800115 	stw	r2,4(sp)
    8f9c:	00800084 	movi	r2,2
    8fa0:	d8800015 	stw	r2,0(sp)
    8fa4:	180f883a 	mov	r7,r3
    8fa8:	01800084 	movi	r6,2
    8fac:	000b883a 	mov	r5,zero
    8fb0:	01000074 	movhi	r4,1
    8fb4:	21058804 	addi	r4,r4,5664
    8fb8:	000b2180 	call	b218 <alt_avalon_spi_command>
    8fbc:	e0bff915 	stw	r2,-28(fp)

	// Get PLL base address
	PLL_BASE = GetPLLCFG_Base( PLL_IND(rd_buf[1]) );
    8fc0:	e0bfff03 	ldbu	r2,-4(fp)
    8fc4:	10803fcc 	andi	r2,r2,255
    8fc8:	1004d0fa 	srli	r2,r2,3
    8fcc:	10803fcc 	andi	r2,r2,255
    8fd0:	1009883a 	mov	r4,r2
    8fd4:	0008a440 	call	8a44 <GetPLLCFG_Base>
    8fd8:	e0bffa15 	stw	r2,-24(fp)

	//Write in Mode Register "0" for waitrequest mode, "1" for polling mode
	IOWR_32DIRECT(PLL_BASE, MODE, 0x01);
    8fdc:	e0bffa17 	ldw	r2,-24(fp)
    8fe0:	00c00044 	movi	r3,1
    8fe4:	10c00035 	stwio	r3,0(r2)

	// Set Up/Down
	Dir = PH_DIR(rd_buf[0]); //(rd_buf[1] >> 5) & 0x01;
    8fe8:	e0bffec3 	ldbu	r2,-5(fp)
    8fec:	10803fcc 	andi	r2,r2,255
    8ff0:	1004d17a 	srli	r2,r2,5
    8ff4:	10803fcc 	andi	r2,r2,255
    8ff8:	1080004c 	andi	r2,r2,1
    8ffc:	e0bffb15 	stw	r2,-20(fp)

	// Set Cx
	Cx = CX_IND(rd_buf[0]) - 2; //(rd_buf[1] & 0x1F);
    9000:	e0bffec3 	ldbu	r2,-5(fp)
    9004:	10803fcc 	andi	r2,r2,255
    9008:	108007cc 	andi	r2,r2,31
    900c:	10bfff84 	addi	r2,r2,-2
    9010:	e0bffc15 	stw	r2,-16(fp)

	// Set Phase Cnt
	wr_buf[0] = 0x00;	// Command and Address
    9014:	e03ffe45 	stb	zero,-7(fp)
	wr_buf[1] = 0x24;	// Command and Address
    9018:	00800904 	movi	r2,36
    901c:	e0bffe85 	stb	r2,-6(fp)
	spirez = alt_avalon_spi_command(PLLCFG_SPI_BASE, 0, 2, wr_buf, 2, rd_buf, 0);
    9020:	e0fffe44 	addi	r3,fp,-7
    9024:	d8000215 	stw	zero,8(sp)
    9028:	e0bffec4 	addi	r2,fp,-5
    902c:	d8800115 	stw	r2,4(sp)
    9030:	00800084 	movi	r2,2
    9034:	d8800015 	stw	r2,0(sp)
    9038:	180f883a 	mov	r7,r3
    903c:	01800084 	movi	r6,2
    9040:	000b883a 	mov	r5,zero
    9044:	01000074 	movhi	r4,1
    9048:	21058804 	addi	r4,r4,5664
    904c:	000b2180 	call	b218 <alt_avalon_spi_command>
    9050:	e0bff915 	stw	r2,-28(fp)
	Val = CX_PHASE(rd_buf[0], rd_buf[1]); //(rd_buf[1] << 8) | rd_buf[0];
    9054:	e0bffec3 	ldbu	r2,-5(fp)
    9058:	10803fcc 	andi	r2,r2,255
    905c:	1006923a 	slli	r3,r2,8
    9060:	e0bfff03 	ldbu	r2,-4(fp)
    9064:	10803fcc 	andi	r2,r2,255
    9068:	1884b03a 	or	r2,r3,r2
    906c:	e0bffd15 	stw	r2,-12(fp)

	// Set Phase shift register
	set_Phase(PLL_BASE, Cx, Val, Dir);
    9070:	e1fffb17 	ldw	r7,-20(fp)
    9074:	e1bffd17 	ldw	r6,-12(fp)
    9078:	e17ffc17 	ldw	r5,-16(fp)
    907c:	e13ffa17 	ldw	r4,-24(fp)
    9080:	000aae00 	call	aae0 <set_Phase>
	// Apply PLL configuration
	pllcfgrez = start_Reconfig(PLL_BASE);
    9084:	e13ffa17 	ldw	r4,-24(fp)
    9088:	000ab5c0 	call	ab5c <start_Reconfig>
    908c:	e0bffe05 	stb	r2,-8(fp)
	return pllcfgrez;
    9090:	e0bffe03 	ldbu	r2,-8(fp)
}
    9094:	e037883a 	mov	sp,fp
    9098:	dfc00117 	ldw	ra,4(sp)
    909c:	df000017 	ldw	fp,0(sp)
    90a0:	dec00204 	addi	sp,sp,8
    90a4:	f800283a 	ret

000090a8 <ResetPLL>:

//
void ResetPLL(void)
{
    90a8:	defff804 	addi	sp,sp,-32
    90ac:	dfc00715 	stw	ra,28(sp)
    90b0:	df000615 	stw	fp,24(sp)
    90b4:	df000604 	addi	fp,sp,24
	uint8_t wr_buf[2];
	uint8_t rd_buf[2];
	int pll_ind, spirez;

	// Read
	wr_buf[0] = 0x00;	// Command and Address
    90b8:	e03fff05 	stb	zero,-4(fp)
	wr_buf[1] = 0x23;	// Command and Address
    90bc:	008008c4 	movi	r2,35
    90c0:	e0bfff45 	stb	r2,-3(fp)
	spirez = alt_avalon_spi_command(PLLCFG_SPI_BASE, 0, 2, wr_buf, 2, rd_buf, 0);
    90c4:	e0ffff04 	addi	r3,fp,-4
    90c8:	d8000215 	stw	zero,8(sp)
    90cc:	e0bfff84 	addi	r2,fp,-2
    90d0:	d8800115 	stw	r2,4(sp)
    90d4:	00800084 	movi	r2,2
    90d8:	d8800015 	stw	r2,0(sp)
    90dc:	180f883a 	mov	r7,r3
    90e0:	01800084 	movi	r6,2
    90e4:	000b883a 	mov	r5,zero
    90e8:	01000074 	movhi	r4,1
    90ec:	21058804 	addi	r4,r4,5664
    90f0:	000b2180 	call	b218 <alt_avalon_spi_command>
    90f4:	e0bffd15 	stw	r2,-12(fp)

	// Get PLL index
	pll_ind = PLL_IND(rd_buf[1]); //(rd_buf[0] >> 3) & 0x3F;
    90f8:	e0bfffc3 	ldbu	r2,-1(fp)
    90fc:	10803fcc 	andi	r2,r2,255
    9100:	1004d0fa 	srli	r2,r2,3
    9104:	10803fcc 	andi	r2,r2,255
    9108:	108007cc 	andi	r2,r2,31
    910c:	e0bffe15 	stw	r2,-8(fp)

	// Toggle reset line of appropriate PLL
    IOWR(PLL_RST_BASE, 0x00, 0x01 << pll_ind);	//Set to 1
    9110:	00c00044 	movi	r3,1
    9114:	e0bffe17 	ldw	r2,-8(fp)
    9118:	1886983a 	sll	r3,r3,r2
    911c:	00800074 	movhi	r2,1
    9120:	1085a004 	addi	r2,r2,5760
    9124:	10c00035 	stwio	r3,0(r2)
    asm("nop"); asm("nop");
    9128:	0001883a 	nop
    912c:	0001883a 	nop
    IOWR(PLL_RST_BASE, 0x00, 0x00);	//Set to 0
    9130:	0007883a 	mov	r3,zero
    9134:	00800074 	movhi	r2,1
    9138:	1085a004 	addi	r2,r2,5760
    913c:	10c00035 	stwio	r3,0(r2)
}
    9140:	0001883a 	nop
    9144:	e037883a 	mov	sp,fp
    9148:	dfc00117 	ldw	ra,4(sp)
    914c:	df000017 	ldw	fp,0(sp)
    9150:	dec00204 	addi	sp,sp,8
    9154:	f800283a 	ret

00009158 <Modify_BRDSPI16_Reg_bits>:
 *	@param SPI_reg_addr register address
 *	@param MSB_bit MSB bit of range that will be modified
 *	@param LSB_bit LSB bit of range that will be modified
 */
void Modify_BRDSPI16_Reg_bits (unsigned short int SPI_reg_addr, unsigned char MSB_bit, unsigned char LSB_bit, unsigned short int new_bits_data)
{
    9158:	defff304 	addi	sp,sp,-52
    915c:	dfc00c15 	stw	ra,48(sp)
    9160:	df000b15 	stw	fp,44(sp)
    9164:	df000b04 	addi	fp,sp,44
    9168:	2011883a 	mov	r8,r4
    916c:	2809883a 	mov	r4,r5
    9170:	3007883a 	mov	r3,r6
    9174:	3805883a 	mov	r2,r7
    9178:	e23ffc0d 	sth	r8,-16(fp)
    917c:	e13ffd05 	stb	r4,-12(fp)
    9180:	e0fffe05 	stb	r3,-8(fp)
    9184:	e0bfff0d 	sth	r2,-4(fp)
	unsigned char RdBuff[2];
	int spirez;

	//**Reconfigure_SPI_for_LMS();

	bits_number = MSB_bit - LSB_bit + 1;
    9188:	e0fffd03 	ldbu	r3,-12(fp)
    918c:	e0bffe03 	ldbu	r2,-8(fp)
    9190:	1885c83a 	sub	r2,r3,r2
    9194:	10800044 	addi	r2,r2,1
    9198:	e0bff805 	stb	r2,-32(fp)

	mask = 0xFFFF;
    919c:	00bfffc4 	movi	r2,-1
    91a0:	e0bff88d 	sth	r2,-30(fp)

	//removing unnecessary bits from mask
	mask = mask << (16 - bits_number);
    91a4:	e0fff88b 	ldhu	r3,-30(fp)
    91a8:	e0bff803 	ldbu	r2,-32(fp)
    91ac:	01000404 	movi	r4,16
    91b0:	2085c83a 	sub	r2,r4,r2
    91b4:	1884983a 	sll	r2,r3,r2
    91b8:	e0bff88d 	sth	r2,-30(fp)
	mask = mask >> (16 - bits_number);
    91bc:	e0fff88b 	ldhu	r3,-30(fp)
    91c0:	e0bff803 	ldbu	r2,-32(fp)
    91c4:	01000404 	movi	r4,16
    91c8:	2085c83a 	sub	r2,r4,r2
    91cc:	1885d83a 	sra	r2,r3,r2
    91d0:	e0bff88d 	sth	r2,-30(fp)

	new_bits_data &= mask; //mask new data
    91d4:	e0ffff0b 	ldhu	r3,-4(fp)
    91d8:	e0bff88b 	ldhu	r2,-30(fp)
    91dc:	1884703a 	and	r2,r3,r2
    91e0:	e0bfff0d 	sth	r2,-4(fp)

	new_bits_data = new_bits_data << LSB_bit; //shift new data
    91e4:	e0ffff0b 	ldhu	r3,-4(fp)
    91e8:	e0bffe03 	ldbu	r2,-8(fp)
    91ec:	1884983a 	sll	r2,r3,r2
    91f0:	e0bfff0d 	sth	r2,-4(fp)

	mask = mask << LSB_bit; //shift mask
    91f4:	e0fff88b 	ldhu	r3,-30(fp)
    91f8:	e0bffe03 	ldbu	r2,-8(fp)
    91fc:	1884983a 	sll	r2,r3,r2
    9200:	e0bff88d 	sth	r2,-30(fp)
	mask =~ mask;//invert mask
    9204:	e0bff88b 	ldhu	r2,-30(fp)
    9208:	0084303a 	nor	r2,zero,r2
    920c:	e0bff88d 	sth	r2,-30(fp)

	// Read original data
	WrBuff[0] = (SPI_reg_addr >> 8 ) & 0xFF; //MSB_byte
    9210:	e0bffc0b 	ldhu	r2,-16(fp)
    9214:	1004d23a 	srli	r2,r2,8
    9218:	e0bffa85 	stb	r2,-22(fp)
	WrBuff[1] = SPI_reg_addr & 0xFF; //LSB_byte
    921c:	e0bffc0b 	ldhu	r2,-16(fp)
    9220:	e0bffac5 	stb	r2,-21(fp)
	cbi(WrBuff[0], 7);  //clear write bit
    9224:	e0bffa83 	ldbu	r2,-22(fp)
    9228:	10801fcc 	andi	r2,r2,127
    922c:	e0bffa85 	stb	r2,-22(fp)
	spirez = alt_avalon_spi_command(FPGA_SPI0_BASE, SPI_NR_FPGA, 2, WrBuff, 2, RdBuff, 0);
    9230:	e0fffa84 	addi	r3,fp,-22
    9234:	d8000215 	stw	zero,8(sp)
    9238:	e0bffb84 	addi	r2,fp,-18
    923c:	d8800115 	stw	r2,4(sp)
    9240:	00800084 	movi	r2,2
    9244:	d8800015 	stw	r2,0(sp)
    9248:	180f883a 	mov	r7,r3
    924c:	01800084 	movi	r6,2
    9250:	01400184 	movi	r5,6
    9254:	01000074 	movhi	r4,1
    9258:	21059004 	addi	r4,r4,5696
    925c:	000b2180 	call	b218 <alt_avalon_spi_command>
    9260:	e0bff915 	stw	r2,-28(fp)

	SPI_reg_data = (RdBuff[0] << 8) + RdBuff[1]; //read current SPI reg data
    9264:	e0bffb83 	ldbu	r2,-18(fp)
    9268:	10803fcc 	andi	r2,r2,255
    926c:	1004923a 	slli	r2,r2,8
    9270:	1007883a 	mov	r3,r2
    9274:	e0bffbc3 	ldbu	r2,-17(fp)
    9278:	10803fcc 	andi	r2,r2,255
    927c:	1885883a 	add	r2,r3,r2
    9280:	e0bffa0d 	sth	r2,-24(fp)

	//modify reg data
	SPI_reg_data &= mask;//clear bits
    9284:	e0fffa0b 	ldhu	r3,-24(fp)
    9288:	e0bff88b 	ldhu	r2,-30(fp)
    928c:	1884703a 	and	r2,r3,r2
    9290:	e0bffa0d 	sth	r2,-24(fp)
	SPI_reg_data |= new_bits_data; //set bits with new data
    9294:	e0fffa0b 	ldhu	r3,-24(fp)
    9298:	e0bfff0b 	ldhu	r2,-4(fp)
    929c:	1884b03a 	or	r2,r3,r2
    92a0:	e0bffa0d 	sth	r2,-24(fp)

	//write reg addr
	WrBuff[0] = (SPI_reg_addr >> 8 ) & 0xFF; //MSB_byte
    92a4:	e0bffc0b 	ldhu	r2,-16(fp)
    92a8:	1004d23a 	srli	r2,r2,8
    92ac:	e0bffa85 	stb	r2,-22(fp)
	WrBuff[1] = SPI_reg_addr & 0xFF; //LSB_byte
    92b0:	e0bffc0b 	ldhu	r2,-16(fp)
    92b4:	e0bffac5 	stb	r2,-21(fp)
	//modified data to be written to SPI reg
	WrBuff[2] = (SPI_reg_data >> 8 ) & 0xFF;
    92b8:	e0bffa0b 	ldhu	r2,-24(fp)
    92bc:	1004d23a 	srli	r2,r2,8
    92c0:	e0bffb05 	stb	r2,-20(fp)
	WrBuff[3] = SPI_reg_data & 0xFF;
    92c4:	e0bffa0b 	ldhu	r2,-24(fp)
    92c8:	e0bffb45 	stb	r2,-19(fp)
	sbi(WrBuff[0], 7); //set write bit
    92cc:	e0fffa83 	ldbu	r3,-22(fp)
    92d0:	00bfe004 	movi	r2,-128
    92d4:	1884b03a 	or	r2,r3,r2
    92d8:	e0bffa85 	stb	r2,-22(fp)
	spirez = alt_avalon_spi_command(FPGA_SPI0_BASE, SPI_NR_FPGA, 4, WrBuff, 0, NULL, 0);
    92dc:	e0bffa84 	addi	r2,fp,-22
    92e0:	d8000215 	stw	zero,8(sp)
    92e4:	d8000115 	stw	zero,4(sp)
    92e8:	d8000015 	stw	zero,0(sp)
    92ec:	100f883a 	mov	r7,r2
    92f0:	01800104 	movi	r6,4
    92f4:	01400184 	movi	r5,6
    92f8:	01000074 	movhi	r4,1
    92fc:	21059004 	addi	r4,r4,5696
    9300:	000b2180 	call	b218 <alt_avalon_spi_command>
    9304:	e0bff915 	stw	r2,-28(fp)
}
    9308:	0001883a 	nop
    930c:	e037883a 	mov	sp,fp
    9310:	dfc00117 	ldw	ra,4(sp)
    9314:	df000017 	ldw	fp,0(sp)
    9318:	dec00204 	addi	sp,sp,8
    931c:	f800283a 	ret

00009320 <main>:

int main(void)
{
    9320:	defff004 	addi	sp,sp,-64
    9324:	dfc00f15 	stw	ra,60(sp)
    9328:	df000e15 	stw	fp,56(sp)
    932c:	dc400d15 	stw	r17,52(sp)
    9330:	dc000c15 	stw	r16,48(sp)
    9334:	df000e04 	addi	fp,sp,56
	uint8_t pllcfgrez;

	uint8_t wr_buf[2];
	uint8_t rd_buf[2];
	int spirez;
	char cnt = 0;
    9338:	e03ff705 	stb	zero,-36(fp)
	uint32_t* dest = (uint32_t*)glEp0Buffer_Tx;
    933c:	00800074 	movhi	r2,1
    9340:	10b21904 	addi	r2,r2,-14236
    9344:	e0bff815 	stw	r2,-32(fp)
	unsigned char MCP_data[2];
	uint16_t wiper_pos[2];


    // I2C initialiazation
    I2C_init(I2C_OPENCORES_0_BASE, ALT_CPU_FREQ, 400000);
    9348:	018001b4 	movhi	r6,6
    934c:	3186a004 	addi	r6,r6,6784
    9350:	01417db4 	movhi	r5,1526
    9354:	29784004 	addi	r5,r5,-7936
    9358:	01000074 	movhi	r4,1
    935c:	21059804 	addi	r4,r4,5728
    9360:	000b4140 	call	b414 <I2C_init>

    // Configure LM75
    Configure_LM75();
    9364:	00081b00 	call	81b0 <Configure_LM75>


	// Initialize variables to detect PLL phase change and PLL config update request
	phcfg_start_old = 0; phcfg_start = 0;
    9368:	e03ff585 	stb	zero,-42(fp)
    936c:	e03ff5c5 	stb	zero,-41(fp)
	pllcfg_start_old = 0; pllcfg_start = 0;
    9370:	e03ff605 	stb	zero,-40(fp)
    9374:	e03ff645 	stb	zero,-39(fp)
	pllrst_start_old = 0; pllrst_start = 0;
    9378:	e03ff685 	stb	zero,-38(fp)
    937c:	e03ff6c5 	stb	zero,-37(fp)

	// Initialize PLL configuration status
	IOWR(PLLCFG_STATUS_BASE, 0x00, PLLCFG_DONE);
    9380:	00c00044 	movi	r3,1
    9384:	00800074 	movhi	r2,1
    9388:	1085a404 	addi	r2,r2,5776
    938c:	10c00035 	stwio	r3,0(r2)

	// Initialize ADC
	init_ADC();
    9390:	00082e00 	call	82e0 <init_ADC>

	//write default TCXO DAC value
	Control_TCXO_ADF (0, NULL); //set ADF4002 CP to three-state
    9394:	000b883a 	mov	r5,zero
    9398:	0009883a 	mov	r4,zero
    939c:	00088700 	call	8870 <Control_TCXO_ADF>
	dac_val = 125; //default DAC value
    93a0:	00801f44 	movi	r2,125
    93a4:	d0a00005 	stb	r2,-32768(gp)
	Control_TCXO_DAC (1, &dac_val); //enable DAC output, set new val
    93a8:	d1600004 	addi	r5,gp,-32768
    93ac:	01000044 	movi	r4,1
    93b0:	00087a80 	call	87a8 <Control_TCXO_DAC>

	//default dig pot wiper values
	wiper_pos[0] = wiper_pos[1] = 0x80;
    93b4:	00802004 	movi	r2,128
    93b8:	e0bffd0d 	sth	r2,-12(fp)
    93bc:	e0bffd0b 	ldhu	r2,-12(fp)
    93c0:	e0bffc8d 	sth	r2,-14(fp)

	// Initialize switch for ADC test pattern change detection
	sw2 = IORD(GPI_0_BASE, 0x00) & 0x01;
    93c4:	00800074 	movhi	r2,1
    93c8:	1085ac04 	addi	r2,r2,5808
    93cc:	10800037 	ldwio	r2,0(r2)
    93d0:	1080004c 	andi	r2,r2,1
    93d4:	e0bff545 	stb	r2,-43(fp)
	sw2_old = 0x00;
    93d8:	e03ff505 	stb	zero,-44(fp)

	//get_pll_config(PLL_RECONFIG_0_BASE, &pll_config);

    IOWR(AV_FIFO_INT_0_BASE, 3, 1);		// Toggle FIFO reset
    93dc:	00c00044 	movi	r3,1
    93e0:	00800074 	movhi	r2,1
    93e4:	1085b704 	addi	r2,r2,5852
    93e8:	10c00035 	stwio	r3,0(r2)
    IOWR(AV_FIFO_INT_0_BASE, 3, 0); // Toggle FIFO reset
    93ec:	0007883a 	mov	r3,zero
    93f0:	00800074 	movhi	r2,1
    93f4:	1085b704 	addi	r2,r2,5852
    93f8:	10c00035 	stwio	r3,0(r2)
	    IOWR(GPIO_0_BASE, 0x00, ui32_tmp & 0xFFFFFF7F);	//Set to 0
	    asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop");
	    asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop");
*/
	    // Check if ADC test pattern must be changed
	    if(sw2_old != sw2)
    93fc:	e0fff503 	ldbu	r3,-44(fp)
    9400:	e0bff543 	ldbu	r2,-43(fp)
    9404:	18800326 	beq	r3,r2,9414 <main+0xf4>
	    {
	    	change_ADC_tpat(sw2);
    9408:	e0bff543 	ldbu	r2,-43(fp)
    940c:	1009883a 	mov	r4,r2
    9410:	00089940 	call	8994 <change_ADC_tpat>
	    }

	    // Update switch status for ADC test pattern change detection
	    sw2_old = sw2;
    9414:	e0bff543 	ldbu	r2,-43(fp)
    9418:	e0bff505 	stb	r2,-44(fp)
	    sw2 = IORD(GPI_0_BASE, 0x00) & 0x01;
    941c:	00800074 	movhi	r2,1
    9420:	1085ac04 	addi	r2,r2,5808
    9424:	10800037 	ldwio	r2,0(r2)
    9428:	1080004c 	andi	r2,r2,1
    942c:	e0bff545 	stb	r2,-43(fp)


	    // Check if there is a request for PLL phase update
	    if((phcfg_start_old == 0) && (phcfg_start != 0))
    9430:	e0bff583 	ldbu	r2,-42(fp)
    9434:	10000f1e 	bne	r2,zero,9474 <main+0x154>
    9438:	e0bff5c3 	ldbu	r2,-41(fp)
    943c:	10000d26 	beq	r2,zero,9474 <main+0x154>
	    {
	    	IOWR(PLLCFG_STATUS_BASE, 0x00, PLLCFG_BUSY);
    9440:	00c00084 	movi	r3,2
    9444:	00800074 	movhi	r2,1
    9448:	1085a404 	addi	r2,r2,5776
    944c:	10c00035 	stwio	r3,0(r2)
	    	pllcfgrez = UpdatePHCFG();
    9450:	0008f700 	call	8f70 <UpdatePHCFG>
    9454:	e0bff905 	stb	r2,-28(fp)
	    	IOWR(PLLCFG_STATUS_BASE, 0x00, (pllcfgrez << 2) | PLLCFG_DONE);
    9458:	e0bff903 	ldbu	r2,-28(fp)
    945c:	1085883a 	add	r2,r2,r2
    9460:	1085883a 	add	r2,r2,r2
    9464:	10c00054 	ori	r3,r2,1
    9468:	00800074 	movhi	r2,1
    946c:	1085a404 	addi	r2,r2,5776
    9470:	10c00035 	stwio	r3,0(r2)
	    }

	    // Check if there is a request for PLL configuration update
	    if((pllcfg_start_old == 0) && (pllcfg_start != 0))
    9474:	e0bff603 	ldbu	r2,-40(fp)
    9478:	10000f1e 	bne	r2,zero,94b8 <main+0x198>
    947c:	e0bff643 	ldbu	r2,-39(fp)
    9480:	10000d26 	beq	r2,zero,94b8 <main+0x198>
	    {
	    	IOWR(PLLCFG_STATUS_BASE, 0x00, PLLCFG_BUSY);
    9484:	00c00084 	movi	r3,2
    9488:	00800074 	movhi	r2,1
    948c:	1085a404 	addi	r2,r2,5776
    9490:	10c00035 	stwio	r3,0(r2)
	    	pllcfgrez = UpdatePLLCFG();
    9494:	0008aec0 	call	8aec <UpdatePLLCFG>
    9498:	e0bff905 	stb	r2,-28(fp)
	    	IOWR(PLLCFG_STATUS_BASE, 0x00, (pllcfgrez << 2) | PLLCFG_DONE);
    949c:	e0bff903 	ldbu	r2,-28(fp)
    94a0:	1085883a 	add	r2,r2,r2
    94a4:	1085883a 	add	r2,r2,r2
    94a8:	10c00054 	ori	r3,r2,1
    94ac:	00800074 	movhi	r2,1
    94b0:	1085a404 	addi	r2,r2,5776
    94b4:	10c00035 	stwio	r3,0(r2)
	    }

	    // Check if there is a request for PLL configuration update
	    if((pllrst_start_old == 0) && (pllrst_start != 0))
    94b8:	e0bff683 	ldbu	r2,-38(fp)
    94bc:	10000b1e 	bne	r2,zero,94ec <main+0x1cc>
    94c0:	e0bff6c3 	ldbu	r2,-37(fp)
    94c4:	10000926 	beq	r2,zero,94ec <main+0x1cc>
	    {
	    	IOWR(PLLCFG_STATUS_BASE, 0x00, PLLCFG_BUSY);
    94c8:	00c00084 	movi	r3,2
    94cc:	00800074 	movhi	r2,1
    94d0:	1085a404 	addi	r2,r2,5776
    94d4:	10c00035 	stwio	r3,0(r2)
	    	ResetPLL();
    94d8:	00090a80 	call	90a8 <ResetPLL>
	    	IOWR(PLLCFG_STATUS_BASE, 0x00, PLLCFG_DONE);
    94dc:	00c00044 	movi	r3,1
    94e0:	00800074 	movhi	r2,1
    94e4:	1085a404 	addi	r2,r2,5776
    94e8:	10c00035 	stwio	r3,0(r2)
	    }

	    // Update PLL configuration command status
	    pllrst_start_old = pllrst_start;
    94ec:	e0bff6c3 	ldbu	r2,-37(fp)
    94f0:	e0bff685 	stb	r2,-38(fp)
	    pllrst_start = (IORD(PLLCFG_COMMAND_BASE, 0x00) & 0x04) >> 2;
    94f4:	00800074 	movhi	r2,1
    94f8:	1085a804 	addi	r2,r2,5792
    94fc:	10800037 	ldwio	r2,0(r2)
    9500:	1080010c 	andi	r2,r2,4
    9504:	1005d0ba 	srai	r2,r2,2
    9508:	e0bff6c5 	stb	r2,-37(fp)
	    phcfg_start_old = phcfg_start;
    950c:	e0bff5c3 	ldbu	r2,-41(fp)
    9510:	e0bff585 	stb	r2,-42(fp)
	    phcfg_start = (IORD(PLLCFG_COMMAND_BASE, 0x00) & 0x02) >> 1;
    9514:	00800074 	movhi	r2,1
    9518:	1085a804 	addi	r2,r2,5792
    951c:	10800037 	ldwio	r2,0(r2)
    9520:	1080008c 	andi	r2,r2,2
    9524:	1005d07a 	srai	r2,r2,1
    9528:	e0bff5c5 	stb	r2,-41(fp)
	    pllcfg_start_old = pllcfg_start;
    952c:	e0bff643 	ldbu	r2,-39(fp)
    9530:	e0bff605 	stb	r2,-40(fp)
	    pllcfg_start = IORD(PLLCFG_COMMAND_BASE, 0x00) & 0x01;
    9534:	00800074 	movhi	r2,1
    9538:	1085a804 	addi	r2,r2,5792
    953c:	10800037 	ldwio	r2,0(r2)
    9540:	1080004c 	andi	r2,r2,1
    9544:	e0bff645 	stb	r2,-39(fp)



        spirez = IORD(AV_FIFO_INT_0_BASE, 2);	// Read FIFO Status
    9548:	00800074 	movhi	r2,1
    954c:	1085b604 	addi	r2,r2,5848
    9550:	10800037 	ldwio	r2,0(r2)
    9554:	e0bffa15 	stw	r2,-24(fp)
        if(!(spirez & 0x01))
    9558:	e0bffa17 	ldw	r2,-24(fp)
    955c:	1080004c 	andi	r2,r2,1
    9560:	103fa61e 	bne	r2,zero,93fc <_gp+0xffff4eb8>
        {
            IOWR(AV_FIFO_INT_0_BASE, 3, 1);		// Toggle FIFO reset
    9564:	00c00044 	movi	r3,1
    9568:	00800074 	movhi	r2,1
    956c:	1085b704 	addi	r2,r2,5852
    9570:	10c00035 	stwio	r3,0(r2)
            IOWR(AV_FIFO_INT_0_BASE, 3, 0); // Toggle FIFO reset
    9574:	0007883a 	mov	r3,zero
    9578:	00800074 	movhi	r2,1
    957c:	1085b704 	addi	r2,r2,5852
    9580:	10c00035 	stwio	r3,0(r2)

        	getFifoData(glEp0Buffer_Rx, 64);
    9584:	01401004 	movi	r5,64
    9588:	01000074 	movhi	r4,1
    958c:	21322904 	addi	r4,r4,-14172
    9590:	00081280 	call	8128 <getFifoData>

         	memset (glEp0Buffer_Tx, 0, sizeof(glEp0Buffer_Tx)); //fill whole tx buffer with zeros
    9594:	01801004 	movi	r6,64
    9598:	000b883a 	mov	r5,zero
    959c:	01000074 	movhi	r4,1
    95a0:	21321904 	addi	r4,r4,-14236
    95a4:	000adac0 	call	adac <memset>
         	cmd_errors = 0;
    95a8:	d020c385 	stb	zero,-31986(gp)

     		LMS_Ctrl_Packet_Tx->Header.Command = LMS_Ctrl_Packet_Rx->Header.Command;
    95ac:	d0a00117 	ldw	r2,-32764(gp)
    95b0:	d0e00217 	ldw	r3,-32760(gp)
    95b4:	18c00003 	ldbu	r3,0(r3)
    95b8:	10c00005 	stb	r3,0(r2)
     		LMS_Ctrl_Packet_Tx->Header.Data_blocks = LMS_Ctrl_Packet_Rx->Header.Data_blocks;
    95bc:	d0a00117 	ldw	r2,-32764(gp)
    95c0:	d0e00217 	ldw	r3,-32760(gp)
    95c4:	18c00083 	ldbu	r3,2(r3)
    95c8:	10c00085 	stb	r3,2(r2)
     		LMS_Ctrl_Packet_Tx->Header.Periph_ID = LMS_Ctrl_Packet_Rx->Header.Periph_ID;
    95cc:	d0a00117 	ldw	r2,-32764(gp)
    95d0:	d0e00217 	ldw	r3,-32760(gp)
    95d4:	18c000c3 	ldbu	r3,3(r3)
    95d8:	10c000c5 	stb	r3,3(r2)
     		LMS_Ctrl_Packet_Tx->Header.Status = STATUS_BUSY_CMD;
    95dc:	d0a00117 	ldw	r2,-32764(gp)
    95e0:	00c000c4 	movi	r3,3
    95e4:	10c00045 	stb	r3,1(r2)


     		switch(LMS_Ctrl_Packet_Rx->Header.Command)
    95e8:	d0a00217 	ldw	r2,-32760(gp)
    95ec:	10800003 	ldbu	r2,0(r2)
    95f0:	10803fcc 	andi	r2,r2,255
    95f4:	10c018e8 	cmpgeui	r3,r2,99
    95f8:	1804a81e 	bne	r3,zero,a89c <main+0x157c>
    95fc:	100690ba 	slli	r3,r2,2
    9600:	00800074 	movhi	r2,1
    9604:	10a58504 	addi	r2,r2,-27116
    9608:	1885883a 	add	r2,r3,r2
    960c:	10800017 	ldw	r2,0(r2)
    9610:	1000683a 	jmp	r2
    9614:	000097a0 	cmpeqi	zero,zero,606
    9618:	0000a89c 	xori	zero,zero,674
    961c:	0000a89c 	xori	zero,zero,674
    9620:	0000a89c 	xori	zero,zero,674
    9624:	0000a89c 	xori	zero,zero,674
    9628:	0000a89c 	xori	zero,zero,674
    962c:	0000a89c 	xori	zero,zero,674
    9630:	0000a89c 	xori	zero,zero,674
    9634:	0000a89c 	xori	zero,zero,674
    9638:	0000a89c 	xori	zero,zero,674
    963c:	0000a89c 	xori	zero,zero,674
    9640:	0000a89c 	xori	zero,zero,674
    9644:	0000a89c 	xori	zero,zero,674
    9648:	0000a89c 	xori	zero,zero,674
    964c:	0000a89c 	xori	zero,zero,674
    9650:	0000a89c 	xori	zero,zero,674
    9654:	0000a89c 	xori	zero,zero,674
    9658:	0000a89c 	xori	zero,zero,674
    965c:	0000a89c 	xori	zero,zero,674
    9660:	0000a628 	cmpgeui	zero,zero,664
    9664:	0000a740 	call	a74 <__alt_mem_oc_mem-0x758c>
    9668:	0000a89c 	xori	zero,zero,674
    966c:	0000a89c 	xori	zero,zero,674
    9670:	0000a89c 	xori	zero,zero,674
    9674:	0000a89c 	xori	zero,zero,674
    9678:	0000a89c 	xori	zero,zero,674
    967c:	0000a89c 	xori	zero,zero,674
    9680:	0000a89c 	xori	zero,zero,674
    9684:	0000a89c 	xori	zero,zero,674
    9688:	0000a89c 	xori	zero,zero,674
    968c:	0000a89c 	xori	zero,zero,674
    9690:	0000a89c 	xori	zero,zero,674
    9694:	000097e8 	cmpgeui	zero,zero,607
    9698:	00009948 	cmpgei	zero,zero,613
    969c:	00009a5c 	xori	zero,zero,617
    96a0:	0000a89c 	xori	zero,zero,674
    96a4:	0000a89c 	xori	zero,zero,674
    96a8:	0000a89c 	xori	zero,zero,674
    96ac:	0000a89c 	xori	zero,zero,674
    96b0:	0000a89c 	xori	zero,zero,674
    96b4:	0000a89c 	xori	zero,zero,674
    96b8:	0000a89c 	xori	zero,zero,674
    96bc:	0000a89c 	xori	zero,zero,674
    96c0:	0000a89c 	xori	zero,zero,674
    96c4:	0000a89c 	xori	zero,zero,674
    96c8:	0000a89c 	xori	zero,zero,674
    96cc:	0000a89c 	xori	zero,zero,674
    96d0:	0000a89c 	xori	zero,zero,674
    96d4:	0000a89c 	xori	zero,zero,674
    96d8:	00009d38 	rdprs	zero,zero,628
    96dc:	0000a89c 	xori	zero,zero,674
    96e0:	0000a89c 	xori	zero,zero,674
    96e4:	0000a89c 	xori	zero,zero,674
    96e8:	0000a89c 	xori	zero,zero,674
    96ec:	0000a89c 	xori	zero,zero,674
    96f0:	0000a89c 	xori	zero,zero,674
    96f4:	0000a89c 	xori	zero,zero,674
    96f8:	0000a89c 	xori	zero,zero,674
    96fc:	0000a89c 	xori	zero,zero,674
    9700:	0000a89c 	xori	zero,zero,674
    9704:	0000a89c 	xori	zero,zero,674
    9708:	0000a89c 	xori	zero,zero,674
    970c:	0000a89c 	xori	zero,zero,674
    9710:	0000a89c 	xori	zero,zero,674
    9714:	0000a89c 	xori	zero,zero,674
    9718:	0000a89c 	xori	zero,zero,674
    971c:	0000a89c 	xori	zero,zero,674
    9720:	0000a89c 	xori	zero,zero,674
    9724:	0000a89c 	xori	zero,zero,674
    9728:	0000a89c 	xori	zero,zero,674
    972c:	0000a89c 	xori	zero,zero,674
    9730:	0000a89c 	xori	zero,zero,674
    9734:	0000a89c 	xori	zero,zero,674
    9738:	0000a89c 	xori	zero,zero,674
    973c:	0000a89c 	xori	zero,zero,674
    9740:	0000a89c 	xori	zero,zero,674
    9744:	0000a89c 	xori	zero,zero,674
    9748:	0000a89c 	xori	zero,zero,674
    974c:	0000a89c 	xori	zero,zero,674
    9750:	0000a89c 	xori	zero,zero,674
    9754:	0000a89c 	xori	zero,zero,674
    9758:	0000a89c 	xori	zero,zero,674
    975c:	0000a89c 	xori	zero,zero,674
    9760:	0000a89c 	xori	zero,zero,674
    9764:	0000a89c 	xori	zero,zero,674
    9768:	00009b64 	muli	zero,zero,621
    976c:	00009c44 	movi	zero,625
    9770:	0000a89c 	xori	zero,zero,674
    9774:	0000a89c 	xori	zero,zero,674
    9778:	0000a89c 	xori	zero,zero,674
    977c:	0000a89c 	xori	zero,zero,674
    9780:	0000a89c 	xori	zero,zero,674
    9784:	0000a89c 	xori	zero,zero,674
    9788:	0000a89c 	xori	zero,zero,674
    978c:	0000a89c 	xori	zero,zero,674
    9790:	0000a89c 	xori	zero,zero,674
    9794:	0000a89c 	xori	zero,zero,674
    9798:	0000a220 	cmpeqi	zero,zero,648
    979c:	00009dd8 	cmpnei	zero,zero,631
     		{
 				case CMD_GET_INFO:

 					LMS_Ctrl_Packet_Tx->Data_field[0] = FW_VER;
    97a0:	d0a00117 	ldw	r2,-32764(gp)
    97a4:	00c00084 	movi	r3,2
    97a8:	10c00205 	stb	r3,8(r2)
 					LMS_Ctrl_Packet_Tx->Data_field[1] = DEV_TYPE;
    97ac:	d0a00117 	ldw	r2,-32764(gp)
    97b0:	00c00404 	movi	r3,16
    97b4:	10c00245 	stb	r3,9(r2)
 					LMS_Ctrl_Packet_Tx->Data_field[2] = LMS_PROTOCOL_VER;
    97b8:	d0a00117 	ldw	r2,-32764(gp)
    97bc:	00c00044 	movi	r3,1
    97c0:	10c00285 	stb	r3,10(r2)
 					LMS_Ctrl_Packet_Tx->Data_field[3] = HW_VER;
    97c4:	d0a00117 	ldw	r2,-32764(gp)
    97c8:	100002c5 	stb	zero,11(r2)
 					LMS_Ctrl_Packet_Tx->Data_field[4] = EXP_BOARD;
    97cc:	d0a00117 	ldw	r2,-32764(gp)
    97d0:	00c00044 	movi	r3,1
    97d4:	10c00305 	stb	r3,12(r2)

 					LMS_Ctrl_Packet_Tx->Header.Status = STATUS_COMPLETED_CMD;
    97d8:	d0a00117 	ldw	r2,-32764(gp)
    97dc:	00c00044 	movi	r3,1
    97e0:	10c00045 	stb	r3,1(r2)
 				break;
    97e4:	00044406 	br	a8f8 <main+0x15d8>
				

 				case CMD_LMS_RST:

 					if(!Check_Periph_ID(MAX_ID_LMS7, LMS_Ctrl_Packet_Rx->Header.Periph_ID)) break;
    97e8:	d0a00217 	ldw	r2,-32760(gp)
    97ec:	108000c3 	ldbu	r2,3(r2)
    97f0:	10803fcc 	andi	r2,r2,255
    97f4:	100b883a 	mov	r5,r2
    97f8:	01000044 	movi	r4,1
    97fc:	00080d00 	call	80d0 <Check_Periph_ID>
    9800:	10803fcc 	andi	r2,r2,255
    9804:	10042926 	beq	r2,zero,a8ac <main+0x158c>

 					switch (LMS_Ctrl_Packet_Rx->Data_field[0])
    9808:	d0a00217 	ldw	r2,-32760(gp)
    980c:	10800203 	ldbu	r2,8(r2)
    9810:	10803fcc 	andi	r2,r2,255
    9814:	10c00060 	cmpeqi	r3,r2,1
    9818:	1800151e 	bne	r3,zero,9870 <main+0x550>
    981c:	10c000a0 	cmpeqi	r3,r2,2
    9820:	1800251e 	bne	r3,zero,98b8 <main+0x598>
    9824:	1000401e 	bne	r2,zero,9928 <main+0x608>
 					{
 						case LMS_RST_DEACTIVATE:

 		 					switch(LMS_Ctrl_Packet_Rx->Header.Periph_ID)
    9828:	d0a00217 	ldw	r2,-32760(gp)
    982c:	108000c3 	ldbu	r2,3(r2)
    9830:	10803fcc 	andi	r2,r2,255
    9834:	10800060 	cmpeqi	r2,r2,1
    9838:	1000061e 	bne	r2,zero,9854 <main+0x534>
 		 					{
 		 						default:
 		 						case 0:
 		 							Modify_BRDSPI16_Reg_bits (BRD_SPI_REG_LMS1_LMS2_CTRL, LMS1_RESET, LMS1_RESET, 1); //high level
    983c:	01c00044 	movi	r7,1
    9840:	01800044 	movi	r6,1
    9844:	01400044 	movi	r5,1
    9848:	010004c4 	movi	r4,19
    984c:	00091580 	call	9158 <Modify_BRDSPI16_Reg_bits>
 		 						break;
    9850:	00000606 	br	986c <main+0x54c>
 		 						case 1:
 		 							Modify_BRDSPI16_Reg_bits (BRD_SPI_REG_LMS1_LMS2_CTRL, LMS2_RESET, LMS2_RESET, 1); //high level
    9854:	01c00044 	movi	r7,1
    9858:	01800244 	movi	r6,9
    985c:	01400244 	movi	r5,9
    9860:	010004c4 	movi	r4,19
    9864:	00091580 	call	9158 <Modify_BRDSPI16_Reg_bits>
 		 						break;
    9868:	0001883a 	nop
 		 					}

 						break;
    986c:	00003206 	br	9938 <main+0x618>

 						case LMS_RST_ACTIVATE:

 		 					switch(LMS_Ctrl_Packet_Rx->Header.Periph_ID)
    9870:	d0a00217 	ldw	r2,-32760(gp)
    9874:	108000c3 	ldbu	r2,3(r2)
    9878:	10803fcc 	andi	r2,r2,255
    987c:	10800060 	cmpeqi	r2,r2,1
    9880:	1000061e 	bne	r2,zero,989c <main+0x57c>
 		 					{
 		 						default:
 		 						case 0:
 		 							Modify_BRDSPI16_Reg_bits (BRD_SPI_REG_LMS1_LMS2_CTRL, LMS1_RESET, LMS1_RESET, 0); //low level
    9884:	000f883a 	mov	r7,zero
    9888:	01800044 	movi	r6,1
    988c:	01400044 	movi	r5,1
    9890:	010004c4 	movi	r4,19
    9894:	00091580 	call	9158 <Modify_BRDSPI16_Reg_bits>
 		 						break;
    9898:	00000606 	br	98b4 <main+0x594>
 		 						case 1:
 		 							Modify_BRDSPI16_Reg_bits (BRD_SPI_REG_LMS1_LMS2_CTRL, LMS2_RESET, LMS2_RESET, 0); //low level
    989c:	000f883a 	mov	r7,zero
    98a0:	01800244 	movi	r6,9
    98a4:	01400244 	movi	r5,9
    98a8:	010004c4 	movi	r4,19
    98ac:	00091580 	call	9158 <Modify_BRDSPI16_Reg_bits>
 		 						break;
    98b0:	0001883a 	nop
 		 					}

 						break;
    98b4:	00002006 	br	9938 <main+0x618>

 						case LMS_RST_PULSE:
 		 					switch(LMS_Ctrl_Packet_Rx->Header.Periph_ID)
    98b8:	d0a00217 	ldw	r2,-32760(gp)
    98bc:	108000c3 	ldbu	r2,3(r2)
    98c0:	10803fcc 	andi	r2,r2,255
    98c4:	10800060 	cmpeqi	r2,r2,1
    98c8:	10000b1e 	bne	r2,zero,98f8 <main+0x5d8>
 		 					{
 		 						default:
 		 						case 0:
 		 							Modify_BRDSPI16_Reg_bits (BRD_SPI_REG_LMS1_LMS2_CTRL, LMS1_RESET, LMS1_RESET, 0); //low level
    98cc:	000f883a 	mov	r7,zero
    98d0:	01800044 	movi	r6,1
    98d4:	01400044 	movi	r5,1
    98d8:	010004c4 	movi	r4,19
    98dc:	00091580 	call	9158 <Modify_BRDSPI16_Reg_bits>
 		 							Modify_BRDSPI16_Reg_bits (BRD_SPI_REG_LMS1_LMS2_CTRL, LMS1_RESET, LMS1_RESET, 1); //high level
    98e0:	01c00044 	movi	r7,1
    98e4:	01800044 	movi	r6,1
    98e8:	01400044 	movi	r5,1
    98ec:	010004c4 	movi	r4,19
    98f0:	00091580 	call	9158 <Modify_BRDSPI16_Reg_bits>
 		 						break;
    98f4:	00000b06 	br	9924 <main+0x604>
 		 						case 1:
 		 							Modify_BRDSPI16_Reg_bits (BRD_SPI_REG_LMS1_LMS2_CTRL, LMS2_RESET, LMS2_RESET, 0); //low level
    98f8:	000f883a 	mov	r7,zero
    98fc:	01800244 	movi	r6,9
    9900:	01400244 	movi	r5,9
    9904:	010004c4 	movi	r4,19
    9908:	00091580 	call	9158 <Modify_BRDSPI16_Reg_bits>
 		 							Modify_BRDSPI16_Reg_bits (BRD_SPI_REG_LMS1_LMS2_CTRL, LMS2_RESET, LMS2_RESET, 1); //high level
    990c:	01c00044 	movi	r7,1
    9910:	01800244 	movi	r6,9
    9914:	01400244 	movi	r5,9
    9918:	010004c4 	movi	r4,19
    991c:	00091580 	call	9158 <Modify_BRDSPI16_Reg_bits>
 		 						break;
    9920:	0001883a 	nop
 		 					}

 						break;
    9924:	00000406 	br	9938 <main+0x618>

 						default:
 							cmd_errors++;
    9928:	d0a0c383 	ldbu	r2,-31986(gp)
    992c:	10800044 	addi	r2,r2,1
    9930:	d0a0c385 	stb	r2,-31986(gp)
 						break;
    9934:	0001883a 	nop
 					}

 					LMS_Ctrl_Packet_Tx->Header.Status = STATUS_COMPLETED_CMD;
    9938:	d0a00117 	ldw	r2,-32764(gp)
    993c:	00c00044 	movi	r3,1
    9940:	10c00045 	stb	r3,1(r2)
 				break;
    9944:	0003ec06 	br	a8f8 <main+0x15d8>


 				case CMD_LMS7002_WR:
 					if(!Check_Periph_ID(MAX_ID_LMS7, LMS_Ctrl_Packet_Rx->Header.Periph_ID)) break;
    9948:	d0a00217 	ldw	r2,-32760(gp)
    994c:	108000c3 	ldbu	r2,3(r2)
    9950:	10803fcc 	andi	r2,r2,255
    9954:	100b883a 	mov	r5,r2
    9958:	01000044 	movi	r4,1
    995c:	00080d00 	call	80d0 <Check_Periph_ID>
    9960:	10803fcc 	andi	r2,r2,255
    9964:	1003d326 	beq	r2,zero,a8b4 <main+0x1594>
 					if(Check_many_blocks (4)) break;
    9968:	01000104 	movi	r4,4
    996c:	000805c0 	call	805c <Check_many_blocks>
    9970:	10803fcc 	andi	r2,r2,255
    9974:	1003d11e 	bne	r2,zero,a8bc <main+0x159c>

 					for(block = 0; block < LMS_Ctrl_Packet_Rx->Header.Data_blocks; block++)
    9978:	d020c305 	stb	zero,-31988(gp)
    997c:	00002d06 	br	9a34 <main+0x714>
 					{
 						//Write LMS7 register
 						sbi(LMS_Ctrl_Packet_Rx->Data_field[0 + (block * 4)], 7); //set write bit
    9980:	d0e00217 	ldw	r3,-32760(gp)
    9984:	d0a0c303 	ldbu	r2,-31988(gp)
    9988:	10803fcc 	andi	r2,r2,255
    998c:	1085883a 	add	r2,r2,r2
    9990:	1085883a 	add	r2,r2,r2
    9994:	100b883a 	mov	r5,r2
    9998:	d1200217 	ldw	r4,-32760(gp)
    999c:	d0a0c303 	ldbu	r2,-31988(gp)
    99a0:	10803fcc 	andi	r2,r2,255
    99a4:	1085883a 	add	r2,r2,r2
    99a8:	1085883a 	add	r2,r2,r2
    99ac:	2085883a 	add	r2,r4,r2
    99b0:	10800204 	addi	r2,r2,8
    99b4:	11000003 	ldbu	r4,0(r2)
    99b8:	00bfe004 	movi	r2,-128
    99bc:	2084b03a 	or	r2,r4,r2
    99c0:	1009883a 	mov	r4,r2
    99c4:	1945883a 	add	r2,r3,r5
    99c8:	10800204 	addi	r2,r2,8
    99cc:	11000005 	stb	r4,0(r2)
 						spirez = alt_avalon_spi_command(FPGA_SPI0_BASE, LMS_Ctrl_Packet_Rx->Header.Periph_ID == 1 ? SPI_NR_LMS7002M_1 : SPI_NR_LMS7002M_0,
    99d0:	d0a00217 	ldw	r2,-32760(gp)
    99d4:	108000c3 	ldbu	r2,3(r2)
    99d8:	10803fcc 	andi	r2,r2,255
    99dc:	10800060 	cmpeqi	r2,r2,1
    99e0:	11003fcc 	andi	r4,r2,255
 								4, &LMS_Ctrl_Packet_Rx->Data_field[0 + (block * 4)], 0, NULL, 0);
    99e4:	d0e00217 	ldw	r3,-32760(gp)
    99e8:	d0a0c303 	ldbu	r2,-31988(gp)
    99ec:	10803fcc 	andi	r2,r2,255
    99f0:	1085883a 	add	r2,r2,r2
    99f4:	1085883a 	add	r2,r2,r2
    99f8:	10800204 	addi	r2,r2,8
    99fc:	1885883a 	add	r2,r3,r2

 					for(block = 0; block < LMS_Ctrl_Packet_Rx->Header.Data_blocks; block++)
 					{
 						//Write LMS7 register
 						sbi(LMS_Ctrl_Packet_Rx->Data_field[0 + (block * 4)], 7); //set write bit
 						spirez = alt_avalon_spi_command(FPGA_SPI0_BASE, LMS_Ctrl_Packet_Rx->Header.Periph_ID == 1 ? SPI_NR_LMS7002M_1 : SPI_NR_LMS7002M_0,
    9a00:	d8000215 	stw	zero,8(sp)
    9a04:	d8000115 	stw	zero,4(sp)
    9a08:	d8000015 	stw	zero,0(sp)
    9a0c:	100f883a 	mov	r7,r2
    9a10:	01800104 	movi	r6,4
    9a14:	200b883a 	mov	r5,r4
    9a18:	01000074 	movhi	r4,1
    9a1c:	21059004 	addi	r4,r4,5696
    9a20:	000b2180 	call	b218 <alt_avalon_spi_command>
    9a24:	e0bffa15 	stw	r2,-24(fp)

 				case CMD_LMS7002_WR:
 					if(!Check_Periph_ID(MAX_ID_LMS7, LMS_Ctrl_Packet_Rx->Header.Periph_ID)) break;
 					if(Check_many_blocks (4)) break;

 					for(block = 0; block < LMS_Ctrl_Packet_Rx->Header.Data_blocks; block++)
    9a28:	d0a0c303 	ldbu	r2,-31988(gp)
    9a2c:	10800044 	addi	r2,r2,1
    9a30:	d0a0c305 	stb	r2,-31988(gp)
    9a34:	d0a00217 	ldw	r2,-32760(gp)
    9a38:	10800083 	ldbu	r2,2(r2)
    9a3c:	d0e0c303 	ldbu	r3,-31988(gp)
    9a40:	10803fcc 	andi	r2,r2,255
    9a44:	18c03fcc 	andi	r3,r3,255
    9a48:	18bfcd36 	bltu	r3,r2,9980 <_gp+0xffff543c>
 						sbi(LMS_Ctrl_Packet_Rx->Data_field[0 + (block * 4)], 7); //set write bit
 						spirez = alt_avalon_spi_command(FPGA_SPI0_BASE, LMS_Ctrl_Packet_Rx->Header.Periph_ID == 1 ? SPI_NR_LMS7002M_1 : SPI_NR_LMS7002M_0,
 								4, &LMS_Ctrl_Packet_Rx->Data_field[0 + (block * 4)], 0, NULL, 0);
 					}

 					LMS_Ctrl_Packet_Tx->Header.Status = STATUS_COMPLETED_CMD;
    9a4c:	d0a00117 	ldw	r2,-32764(gp)
    9a50:	00c00044 	movi	r3,1
    9a54:	10c00045 	stb	r3,1(r2)
 				break;
    9a58:	0003a706 	br	a8f8 <main+0x15d8>


 				case CMD_LMS7002_RD:
 					if(Check_many_blocks (4)) break;
    9a5c:	01000104 	movi	r4,4
    9a60:	000805c0 	call	805c <Check_many_blocks>
    9a64:	10803fcc 	andi	r2,r2,255
    9a68:	1003961e 	bne	r2,zero,a8c4 <main+0x15a4>

 					for(block = 0; block < LMS_Ctrl_Packet_Rx->Header.Data_blocks; block++)
    9a6c:	d020c305 	stb	zero,-31988(gp)
    9a70:	00003206 	br	9b3c <main+0x81c>
 					{
 						//Read LMS7 register
 						cbi(LMS_Ctrl_Packet_Rx->Data_field[0 + (block * 2)], 7);  //clear write bit
    9a74:	d0e00217 	ldw	r3,-32760(gp)
    9a78:	d0a0c303 	ldbu	r2,-31988(gp)
    9a7c:	10803fcc 	andi	r2,r2,255
    9a80:	1085883a 	add	r2,r2,r2
    9a84:	100b883a 	mov	r5,r2
    9a88:	d1200217 	ldw	r4,-32760(gp)
    9a8c:	d0a0c303 	ldbu	r2,-31988(gp)
    9a90:	10803fcc 	andi	r2,r2,255
    9a94:	1085883a 	add	r2,r2,r2
    9a98:	2085883a 	add	r2,r4,r2
    9a9c:	10800204 	addi	r2,r2,8
    9aa0:	10800003 	ldbu	r2,0(r2)
    9aa4:	10801fcc 	andi	r2,r2,127
    9aa8:	1009883a 	mov	r4,r2
    9aac:	1945883a 	add	r2,r3,r5
    9ab0:	10800204 	addi	r2,r2,8
    9ab4:	11000005 	stb	r4,0(r2)
 						spirez = alt_avalon_spi_command(FPGA_SPI0_BASE, LMS_Ctrl_Packet_Rx->Header.Periph_ID == 1 ? SPI_NR_LMS7002M_1 : SPI_NR_LMS7002M_0,
    9ab8:	d0a00217 	ldw	r2,-32760(gp)
    9abc:	108000c3 	ldbu	r2,3(r2)
    9ac0:	10803fcc 	andi	r2,r2,255
    9ac4:	10800060 	cmpeqi	r2,r2,1
    9ac8:	11003fcc 	andi	r4,r2,255
 								2, &LMS_Ctrl_Packet_Rx->Data_field[0 + (block * 2)], 2, &LMS_Ctrl_Packet_Tx->Data_field[2 + (block * 4)], 0);
    9acc:	d0e00217 	ldw	r3,-32760(gp)
    9ad0:	d0a0c303 	ldbu	r2,-31988(gp)
    9ad4:	10803fcc 	andi	r2,r2,255
    9ad8:	1085883a 	add	r2,r2,r2
    9adc:	10800204 	addi	r2,r2,8
    9ae0:	188b883a 	add	r5,r3,r2
    9ae4:	d0e00117 	ldw	r3,-32764(gp)
    9ae8:	d0a0c303 	ldbu	r2,-31988(gp)
    9aec:	10803fcc 	andi	r2,r2,255
    9af0:	1085883a 	add	r2,r2,r2
    9af4:	1085883a 	add	r2,r2,r2
    9af8:	10800084 	addi	r2,r2,2
    9afc:	10800204 	addi	r2,r2,8
    9b00:	1885883a 	add	r2,r3,r2

 					for(block = 0; block < LMS_Ctrl_Packet_Rx->Header.Data_blocks; block++)
 					{
 						//Read LMS7 register
 						cbi(LMS_Ctrl_Packet_Rx->Data_field[0 + (block * 2)], 7);  //clear write bit
 						spirez = alt_avalon_spi_command(FPGA_SPI0_BASE, LMS_Ctrl_Packet_Rx->Header.Periph_ID == 1 ? SPI_NR_LMS7002M_1 : SPI_NR_LMS7002M_0,
    9b04:	d8000215 	stw	zero,8(sp)
    9b08:	d8800115 	stw	r2,4(sp)
    9b0c:	00800084 	movi	r2,2
    9b10:	d8800015 	stw	r2,0(sp)
    9b14:	280f883a 	mov	r7,r5
    9b18:	01800084 	movi	r6,2
    9b1c:	200b883a 	mov	r5,r4
    9b20:	01000074 	movhi	r4,1
    9b24:	21059004 	addi	r4,r4,5696
    9b28:	000b2180 	call	b218 <alt_avalon_spi_command>
    9b2c:	e0bffa15 	stw	r2,-24(fp)


 				case CMD_LMS7002_RD:
 					if(Check_many_blocks (4)) break;

 					for(block = 0; block < LMS_Ctrl_Packet_Rx->Header.Data_blocks; block++)
    9b30:	d0a0c303 	ldbu	r2,-31988(gp)
    9b34:	10800044 	addi	r2,r2,1
    9b38:	d0a0c305 	stb	r2,-31988(gp)
    9b3c:	d0a00217 	ldw	r2,-32760(gp)
    9b40:	10800083 	ldbu	r2,2(r2)
    9b44:	d0e0c303 	ldbu	r3,-31988(gp)
    9b48:	10803fcc 	andi	r2,r2,255
    9b4c:	18c03fcc 	andi	r3,r3,255
    9b50:	18bfc836 	bltu	r3,r2,9a74 <_gp+0xffff5530>
 						cbi(LMS_Ctrl_Packet_Rx->Data_field[0 + (block * 2)], 7);  //clear write bit
 						spirez = alt_avalon_spi_command(FPGA_SPI0_BASE, LMS_Ctrl_Packet_Rx->Header.Periph_ID == 1 ? SPI_NR_LMS7002M_1 : SPI_NR_LMS7002M_0,
 								2, &LMS_Ctrl_Packet_Rx->Data_field[0 + (block * 2)], 2, &LMS_Ctrl_Packet_Tx->Data_field[2 + (block * 4)], 0);
 					}

 					LMS_Ctrl_Packet_Tx->Header.Status = STATUS_COMPLETED_CMD;
    9b54:	d0a00117 	ldw	r2,-32764(gp)
    9b58:	00c00044 	movi	r3,1
    9b5c:	10c00045 	stb	r3,1(r2)
 				break;
    9b60:	00036506 	br	a8f8 <main+0x15d8>


 	 			case CMD_BRDSPI16_WR:
 	 				if(Check_many_blocks (4)) break;
    9b64:	01000104 	movi	r4,4
    9b68:	000805c0 	call	805c <Check_many_blocks>
    9b6c:	10803fcc 	andi	r2,r2,255
    9b70:	1003561e 	bne	r2,zero,a8cc <main+0x15ac>

 	 				for(block = 0; block < LMS_Ctrl_Packet_Rx->Header.Data_blocks; block++)
    9b74:	d020c305 	stb	zero,-31988(gp)
    9b78:	00002806 	br	9c1c <main+0x8fc>
 	 				{
 	 					//write reg addr
 	 					sbi(LMS_Ctrl_Packet_Rx->Data_field[0 + (block * 4)], 7); //set write bit
    9b7c:	d0e00217 	ldw	r3,-32760(gp)
    9b80:	d0a0c303 	ldbu	r2,-31988(gp)
    9b84:	10803fcc 	andi	r2,r2,255
    9b88:	1085883a 	add	r2,r2,r2
    9b8c:	1085883a 	add	r2,r2,r2
    9b90:	100b883a 	mov	r5,r2
    9b94:	d1200217 	ldw	r4,-32760(gp)
    9b98:	d0a0c303 	ldbu	r2,-31988(gp)
    9b9c:	10803fcc 	andi	r2,r2,255
    9ba0:	1085883a 	add	r2,r2,r2
    9ba4:	1085883a 	add	r2,r2,r2
    9ba8:	2085883a 	add	r2,r4,r2
    9bac:	10800204 	addi	r2,r2,8
    9bb0:	11000003 	ldbu	r4,0(r2)
    9bb4:	00bfe004 	movi	r2,-128
    9bb8:	2084b03a 	or	r2,r4,r2
    9bbc:	1009883a 	mov	r4,r2
    9bc0:	1945883a 	add	r2,r3,r5
    9bc4:	10800204 	addi	r2,r2,8
    9bc8:	11000005 	stb	r4,0(r2)

 	 					spirez = alt_avalon_spi_command(FPGA_SPI0_BASE, SPI_NR_FPGA, 4, &LMS_Ctrl_Packet_Rx->Data_field[0 + (block * 4)], 0, NULL, 0);
    9bcc:	d0e00217 	ldw	r3,-32760(gp)
    9bd0:	d0a0c303 	ldbu	r2,-31988(gp)
    9bd4:	10803fcc 	andi	r2,r2,255
    9bd8:	1085883a 	add	r2,r2,r2
    9bdc:	1085883a 	add	r2,r2,r2
    9be0:	10800204 	addi	r2,r2,8
    9be4:	1885883a 	add	r2,r3,r2
    9be8:	d8000215 	stw	zero,8(sp)
    9bec:	d8000115 	stw	zero,4(sp)
    9bf0:	d8000015 	stw	zero,0(sp)
    9bf4:	100f883a 	mov	r7,r2
    9bf8:	01800104 	movi	r6,4
    9bfc:	01400184 	movi	r5,6
    9c00:	01000074 	movhi	r4,1
    9c04:	21059004 	addi	r4,r4,5696
    9c08:	000b2180 	call	b218 <alt_avalon_spi_command>
    9c0c:	e0bffa15 	stw	r2,-24(fp)


 	 			case CMD_BRDSPI16_WR:
 	 				if(Check_many_blocks (4)) break;

 	 				for(block = 0; block < LMS_Ctrl_Packet_Rx->Header.Data_blocks; block++)
    9c10:	d0a0c303 	ldbu	r2,-31988(gp)
    9c14:	10800044 	addi	r2,r2,1
    9c18:	d0a0c305 	stb	r2,-31988(gp)
    9c1c:	d0a00217 	ldw	r2,-32760(gp)
    9c20:	10800083 	ldbu	r2,2(r2)
    9c24:	d0e0c303 	ldbu	r3,-31988(gp)
    9c28:	10803fcc 	andi	r2,r2,255
    9c2c:	18c03fcc 	andi	r3,r3,255
    9c30:	18bfd236 	bltu	r3,r2,9b7c <_gp+0xffff5638>
 	 					sbi(LMS_Ctrl_Packet_Rx->Data_field[0 + (block * 4)], 7); //set write bit

 	 					spirez = alt_avalon_spi_command(FPGA_SPI0_BASE, SPI_NR_FPGA, 4, &LMS_Ctrl_Packet_Rx->Data_field[0 + (block * 4)], 0, NULL, 0);
 	 				}

 	 				LMS_Ctrl_Packet_Tx->Header.Status = STATUS_COMPLETED_CMD;
    9c34:	d0a00117 	ldw	r2,-32764(gp)
    9c38:	00c00044 	movi	r3,1
    9c3c:	10c00045 	stb	r3,1(r2)
 	 			break;
    9c40:	00032d06 	br	a8f8 <main+0x15d8>


 				case CMD_BRDSPI16_RD:
 					if(Check_many_blocks (4)) break;
    9c44:	01000104 	movi	r4,4
    9c48:	000805c0 	call	805c <Check_many_blocks>
    9c4c:	10803fcc 	andi	r2,r2,255
    9c50:	1003201e 	bne	r2,zero,a8d4 <main+0x15b4>

 					for(block = 0; block < LMS_Ctrl_Packet_Rx->Header.Data_blocks; block++)
    9c54:	d020c305 	stb	zero,-31988(gp)
    9c58:	00002d06 	br	9d10 <main+0x9f0>
 					{

 						//write reg addr
 						cbi(LMS_Ctrl_Packet_Rx->Data_field[0 + (block * 2)], 7);  //clear write bit
    9c5c:	d0e00217 	ldw	r3,-32760(gp)
    9c60:	d0a0c303 	ldbu	r2,-31988(gp)
    9c64:	10803fcc 	andi	r2,r2,255
    9c68:	1085883a 	add	r2,r2,r2
    9c6c:	100b883a 	mov	r5,r2
    9c70:	d1200217 	ldw	r4,-32760(gp)
    9c74:	d0a0c303 	ldbu	r2,-31988(gp)
    9c78:	10803fcc 	andi	r2,r2,255
    9c7c:	1085883a 	add	r2,r2,r2
    9c80:	2085883a 	add	r2,r4,r2
    9c84:	10800204 	addi	r2,r2,8
    9c88:	10800003 	ldbu	r2,0(r2)
    9c8c:	10801fcc 	andi	r2,r2,127
    9c90:	1009883a 	mov	r4,r2
    9c94:	1945883a 	add	r2,r3,r5
    9c98:	10800204 	addi	r2,r2,8
    9c9c:	11000005 	stb	r4,0(r2)

 						spirez = alt_avalon_spi_command(FPGA_SPI0_BASE, SPI_NR_FPGA, 2, &LMS_Ctrl_Packet_Rx->Data_field[0 + (block * 2)], 2, &LMS_Ctrl_Packet_Tx->Data_field[2 + (block * 4)], 0);
    9ca0:	d0e00217 	ldw	r3,-32760(gp)
    9ca4:	d0a0c303 	ldbu	r2,-31988(gp)
    9ca8:	10803fcc 	andi	r2,r2,255
    9cac:	1085883a 	add	r2,r2,r2
    9cb0:	10800204 	addi	r2,r2,8
    9cb4:	1889883a 	add	r4,r3,r2
    9cb8:	d0e00117 	ldw	r3,-32764(gp)
    9cbc:	d0a0c303 	ldbu	r2,-31988(gp)
    9cc0:	10803fcc 	andi	r2,r2,255
    9cc4:	1085883a 	add	r2,r2,r2
    9cc8:	1085883a 	add	r2,r2,r2
    9ccc:	10800084 	addi	r2,r2,2
    9cd0:	10800204 	addi	r2,r2,8
    9cd4:	1885883a 	add	r2,r3,r2
    9cd8:	d8000215 	stw	zero,8(sp)
    9cdc:	d8800115 	stw	r2,4(sp)
    9ce0:	00800084 	movi	r2,2
    9ce4:	d8800015 	stw	r2,0(sp)
    9ce8:	200f883a 	mov	r7,r4
    9cec:	01800084 	movi	r6,2
    9cf0:	01400184 	movi	r5,6
    9cf4:	01000074 	movhi	r4,1
    9cf8:	21059004 	addi	r4,r4,5696
    9cfc:	000b2180 	call	b218 <alt_avalon_spi_command>
    9d00:	e0bffa15 	stw	r2,-24(fp)


 				case CMD_BRDSPI16_RD:
 					if(Check_many_blocks (4)) break;

 					for(block = 0; block < LMS_Ctrl_Packet_Rx->Header.Data_blocks; block++)
    9d04:	d0a0c303 	ldbu	r2,-31988(gp)
    9d08:	10800044 	addi	r2,r2,1
    9d0c:	d0a0c305 	stb	r2,-31988(gp)
    9d10:	d0a00217 	ldw	r2,-32760(gp)
    9d14:	10800083 	ldbu	r2,2(r2)
    9d18:	d0e0c303 	ldbu	r3,-31988(gp)
    9d1c:	10803fcc 	andi	r2,r2,255
    9d20:	18c03fcc 	andi	r3,r3,255
    9d24:	18bfcd36 	bltu	r3,r2,9c5c <_gp+0xffff5718>
 						cbi(LMS_Ctrl_Packet_Rx->Data_field[0 + (block * 2)], 7);  //clear write bit

 						spirez = alt_avalon_spi_command(FPGA_SPI0_BASE, SPI_NR_FPGA, 2, &LMS_Ctrl_Packet_Rx->Data_field[0 + (block * 2)], 2, &LMS_Ctrl_Packet_Tx->Data_field[2 + (block * 4)], 0);
 					}

 					LMS_Ctrl_Packet_Tx->Header.Status = STATUS_COMPLETED_CMD;
    9d28:	d0a00117 	ldw	r2,-32764(gp)
    9d2c:	00c00044 	movi	r3,1
    9d30:	10c00045 	stb	r3,1(r2)
 				break;
    9d34:	0002f006 	br	a8f8 <main+0x15d8>


 				case CMD_ADF4002_WR:
 					if(Check_many_blocks (3)) break;
    9d38:	010000c4 	movi	r4,3
    9d3c:	000805c0 	call	805c <Check_many_blocks>
    9d40:	10803fcc 	andi	r2,r2,255
    9d44:	1002e51e 	bne	r2,zero,a8dc <main+0x15bc>

 					Control_TCXO_DAC (0, NULL); //set DAC out to three-state
    9d48:	000b883a 	mov	r5,zero
    9d4c:	0009883a 	mov	r4,zero
    9d50:	00087a80 	call	87a8 <Control_TCXO_DAC>

 					for(block = 0; block < LMS_Ctrl_Packet_Rx->Header.Data_blocks; block++)
    9d54:	d020c305 	stb	zero,-31988(gp)
    9d58:	00000e06 	br	9d94 <main+0xa74>
 					{
 						Control_TCXO_ADF (1, &LMS_Ctrl_Packet_Rx->Data_field[0 + (block*3)]); //write data to ADF
    9d5c:	d1200217 	ldw	r4,-32760(gp)
    9d60:	d0a0c303 	ldbu	r2,-31988(gp)
    9d64:	10c03fcc 	andi	r3,r2,255
    9d68:	1805883a 	mov	r2,r3
    9d6c:	1085883a 	add	r2,r2,r2
    9d70:	10c5883a 	add	r2,r2,r3
    9d74:	10800204 	addi	r2,r2,8
    9d78:	2085883a 	add	r2,r4,r2
    9d7c:	100b883a 	mov	r5,r2
    9d80:	01000044 	movi	r4,1
    9d84:	00088700 	call	8870 <Control_TCXO_ADF>
 				case CMD_ADF4002_WR:
 					if(Check_many_blocks (3)) break;

 					Control_TCXO_DAC (0, NULL); //set DAC out to three-state

 					for(block = 0; block < LMS_Ctrl_Packet_Rx->Header.Data_blocks; block++)
    9d88:	d0a0c303 	ldbu	r2,-31988(gp)
    9d8c:	10800044 	addi	r2,r2,1
    9d90:	d0a0c305 	stb	r2,-31988(gp)
    9d94:	d0a00217 	ldw	r2,-32760(gp)
    9d98:	10800083 	ldbu	r2,2(r2)
    9d9c:	d0e0c303 	ldbu	r3,-31988(gp)
    9da0:	10803fcc 	andi	r2,r2,255
    9da4:	18c03fcc 	andi	r3,r3,255
    9da8:	18bfec36 	bltu	r3,r2,9d5c <_gp+0xffff5818>
 					{
 						Control_TCXO_ADF (1, &LMS_Ctrl_Packet_Rx->Data_field[0 + (block*3)]); //write data to ADF
 					}

 					if(cmd_errors) LMS_Ctrl_Packet_Tx->Header.Status = STATUS_INVALID_PERIPH_ID_CMD;
    9dac:	d0a0c383 	ldbu	r2,-31986(gp)
    9db0:	10803fcc 	andi	r2,r2,255
    9db4:	10000426 	beq	r2,zero,9dc8 <main+0xaa8>
    9db8:	d0a00117 	ldw	r2,-32764(gp)
    9dbc:	00c00204 	movi	r3,8
    9dc0:	10c00045 	stb	r3,1(r2)
 					else LMS_Ctrl_Packet_Tx->Header.Status = STATUS_COMPLETED_CMD;
 				break;
    9dc4:	0002cc06 	br	a8f8 <main+0x15d8>
 					{
 						Control_TCXO_ADF (1, &LMS_Ctrl_Packet_Rx->Data_field[0 + (block*3)]); //write data to ADF
 					}

 					if(cmd_errors) LMS_Ctrl_Packet_Tx->Header.Status = STATUS_INVALID_PERIPH_ID_CMD;
 					else LMS_Ctrl_Packet_Tx->Header.Status = STATUS_COMPLETED_CMD;
    9dc8:	d0a00117 	ldw	r2,-32764(gp)
    9dcc:	00c00044 	movi	r3,1
    9dd0:	10c00045 	stb	r3,1(r2)
 				break;
    9dd4:	0002c806 	br	a8f8 <main+0x15d8>


				case CMD_ANALOG_VAL_RD:

					for(block = 0; block < LMS_Ctrl_Packet_Rx->Header.Data_blocks; block++)
    9dd8:	d020c305 	stb	zero,-31988(gp)
    9ddc:	00010606 	br	a1f8 <main+0xed8>
					{
						switch (LMS_Ctrl_Packet_Rx->Data_field[0 + (block)])//ch
    9de0:	d0e00217 	ldw	r3,-32760(gp)
    9de4:	d0a0c303 	ldbu	r2,-31988(gp)
    9de8:	10803fcc 	andi	r2,r2,255
    9dec:	1885883a 	add	r2,r3,r2
    9df0:	10800204 	addi	r2,r2,8
    9df4:	10800003 	ldbu	r2,0(r2)
    9df8:	10803fcc 	andi	r2,r2,255
    9dfc:	10c00060 	cmpeqi	r3,r2,1
    9e00:	1800351e 	bne	r3,zero,9ed8 <main+0xbb8>
    9e04:	10c00088 	cmpgei	r3,r2,2
    9e08:	1800021e 	bne	r3,zero,9e14 <main+0xaf4>
    9e0c:	10000626 	beq	r2,zero,9e28 <main+0xb08>
    9e10:	0000f206 	br	a1dc <main+0xebc>
    9e14:	10c000a0 	cmpeqi	r3,r2,2
    9e18:	1800921e 	bne	r3,zero,a064 <main+0xd44>
    9e1c:	108000e0 	cmpeqi	r2,r2,3
    9e20:	1000bf1e 	bne	r2,zero,a120 <main+0xe00>
    9e24:	0000ed06 	br	a1dc <main+0xebc>
						{
							case 0://dac val

								LMS_Ctrl_Packet_Tx->Data_field[0 + (block * 4)] = LMS_Ctrl_Packet_Rx->Data_field[block]; //ch
    9e28:	d1200117 	ldw	r4,-32764(gp)
    9e2c:	d0a0c303 	ldbu	r2,-31988(gp)
    9e30:	10803fcc 	andi	r2,r2,255
    9e34:	1085883a 	add	r2,r2,r2
    9e38:	1085883a 	add	r2,r2,r2
    9e3c:	100b883a 	mov	r5,r2
    9e40:	d0e00217 	ldw	r3,-32760(gp)
    9e44:	d0a0c303 	ldbu	r2,-31988(gp)
    9e48:	10803fcc 	andi	r2,r2,255
    9e4c:	1885883a 	add	r2,r3,r2
    9e50:	10800204 	addi	r2,r2,8
    9e54:	10c00003 	ldbu	r3,0(r2)
    9e58:	2145883a 	add	r2,r4,r5
    9e5c:	10800204 	addi	r2,r2,8
    9e60:	10c00005 	stb	r3,0(r2)
								LMS_Ctrl_Packet_Tx->Data_field[1 + (block * 4)] = 0x00; //RAW //unit, power
    9e64:	d0e00117 	ldw	r3,-32764(gp)
    9e68:	d0a0c303 	ldbu	r2,-31988(gp)
    9e6c:	10803fcc 	andi	r2,r2,255
    9e70:	1085883a 	add	r2,r2,r2
    9e74:	1085883a 	add	r2,r2,r2
    9e78:	10800044 	addi	r2,r2,1
    9e7c:	1885883a 	add	r2,r3,r2
    9e80:	10800204 	addi	r2,r2,8
    9e84:	10000005 	stb	zero,0(r2)

								LMS_Ctrl_Packet_Tx->Data_field[2 + (block * 4)] = 0; //signed val, MSB byte
    9e88:	d0e00117 	ldw	r3,-32764(gp)
    9e8c:	d0a0c303 	ldbu	r2,-31988(gp)
    9e90:	10803fcc 	andi	r2,r2,255
    9e94:	1085883a 	add	r2,r2,r2
    9e98:	1085883a 	add	r2,r2,r2
    9e9c:	10800084 	addi	r2,r2,2
    9ea0:	1885883a 	add	r2,r3,r2
    9ea4:	10800204 	addi	r2,r2,8
    9ea8:	10000005 	stb	zero,0(r2)
								LMS_Ctrl_Packet_Tx->Data_field[3 + (block * 4)] = dac_val; //signed val, LSB byte
    9eac:	d1200117 	ldw	r4,-32764(gp)
    9eb0:	d0a0c303 	ldbu	r2,-31988(gp)
    9eb4:	10803fcc 	andi	r2,r2,255
    9eb8:	1085883a 	add	r2,r2,r2
    9ebc:	1085883a 	add	r2,r2,r2
    9ec0:	108000c4 	addi	r2,r2,3
    9ec4:	d0e00003 	ldbu	r3,-32768(gp)
    9ec8:	2085883a 	add	r2,r4,r2
    9ecc:	10800204 	addi	r2,r2,8
    9ed0:	10c00005 	stb	r3,0(r2)
							break;
    9ed4:	0000c506 	br	a1ec <main+0xecc>

							case 1: //temperature

								spirez = I2C_start(I2C_OPENCORES_0_BASE, LM75_I2C_ADDR, 0);
    9ed8:	000d883a 	mov	r6,zero
    9edc:	01401204 	movi	r5,72
    9ee0:	01000074 	movhi	r4,1
    9ee4:	21059804 	addi	r4,r4,5728
    9ee8:	000b4cc0 	call	b4cc <I2C_start>
    9eec:	e0bffa15 	stw	r2,-24(fp)
								spirez = I2C_write(I2C_OPENCORES_0_BASE, 0x00, 1);				// Pointer = temperature register
    9ef0:	01800044 	movi	r6,1
    9ef4:	000b883a 	mov	r5,zero
    9ef8:	01000074 	movhi	r4,1
    9efc:	21059804 	addi	r4,r4,5728
    9f00:	000b6200 	call	b620 <I2C_write>
    9f04:	e0bffa15 	stw	r2,-24(fp)
								spirez = I2C_start(I2C_OPENCORES_0_BASE, LM75_I2C_ADDR, 1);
    9f08:	01800044 	movi	r6,1
    9f0c:	01401204 	movi	r5,72
    9f10:	01000074 	movhi	r4,1
    9f14:	21059804 	addi	r4,r4,5728
    9f18:	000b4cc0 	call	b4cc <I2C_start>
    9f1c:	e0bffa15 	stw	r2,-24(fp)

								// Read temperature and recalculate
								converted_val = (signed short int)I2C_read(I2C_OPENCORES_0_BASE, 0);
    9f20:	000b883a 	mov	r5,zero
    9f24:	01000074 	movhi	r4,1
    9f28:	21059804 	addi	r4,r4,5728
    9f2c:	000b58c0 	call	b58c <I2C_read>
    9f30:	d0a0008d 	sth	r2,-32766(gp)
								converted_val = converted_val << 8;
    9f34:	d0a0008b 	ldhu	r2,-32766(gp)
    9f38:	10bfffcc 	andi	r2,r2,65535
    9f3c:	10a0001c 	xori	r2,r2,32768
    9f40:	10a00004 	addi	r2,r2,-32768
    9f44:	1004923a 	slli	r2,r2,8
    9f48:	d0a0008d 	sth	r2,-32766(gp)
								converted_val = 10 * (converted_val >> 8);
    9f4c:	d0a0008b 	ldhu	r2,-32766(gp)
    9f50:	10bfffcc 	andi	r2,r2,65535
    9f54:	10a0001c 	xori	r2,r2,32768
    9f58:	10a00004 	addi	r2,r2,-32768
    9f5c:	1005d23a 	srai	r2,r2,8
    9f60:	01400284 	movi	r5,10
    9f64:	1009883a 	mov	r4,r2
    9f68:	000ad840 	call	ad84 <__mulsi3>
    9f6c:	d0a0008d 	sth	r2,-32766(gp)
								spirez = I2C_read(I2C_OPENCORES_0_BASE, 1);
    9f70:	01400044 	movi	r5,1
    9f74:	01000074 	movhi	r4,1
    9f78:	21059804 	addi	r4,r4,5728
    9f7c:	000b58c0 	call	b58c <I2C_read>
    9f80:	e0bffa15 	stw	r2,-24(fp)
								if(spirez & 0x80) converted_val = converted_val + 5;
    9f84:	e0bffa17 	ldw	r2,-24(fp)
    9f88:	1080200c 	andi	r2,r2,128
    9f8c:	10000326 	beq	r2,zero,9f9c <main+0xc7c>
    9f90:	d0a0008b 	ldhu	r2,-32766(gp)
    9f94:	10800144 	addi	r2,r2,5
    9f98:	d0a0008d 	sth	r2,-32766(gp)

								LMS_Ctrl_Packet_Tx->Data_field[0 + (block * 4)] = LMS_Ctrl_Packet_Rx->Data_field[block]; //ch
    9f9c:	d1200117 	ldw	r4,-32764(gp)
    9fa0:	d0a0c303 	ldbu	r2,-31988(gp)
    9fa4:	10803fcc 	andi	r2,r2,255
    9fa8:	1085883a 	add	r2,r2,r2
    9fac:	1085883a 	add	r2,r2,r2
    9fb0:	100b883a 	mov	r5,r2
    9fb4:	d0e00217 	ldw	r3,-32760(gp)
    9fb8:	d0a0c303 	ldbu	r2,-31988(gp)
    9fbc:	10803fcc 	andi	r2,r2,255
    9fc0:	1885883a 	add	r2,r3,r2
    9fc4:	10800204 	addi	r2,r2,8
    9fc8:	10c00003 	ldbu	r3,0(r2)
    9fcc:	2145883a 	add	r2,r4,r5
    9fd0:	10800204 	addi	r2,r2,8
    9fd4:	10c00005 	stb	r3,0(r2)
								LMS_Ctrl_Packet_Tx->Data_field[1 + (block * 4)] = 0x50; //mC //unit, power
    9fd8:	d0e00117 	ldw	r3,-32764(gp)
    9fdc:	d0a0c303 	ldbu	r2,-31988(gp)
    9fe0:	10803fcc 	andi	r2,r2,255
    9fe4:	1085883a 	add	r2,r2,r2
    9fe8:	1085883a 	add	r2,r2,r2
    9fec:	10800044 	addi	r2,r2,1
    9ff0:	1885883a 	add	r2,r3,r2
    9ff4:	10800204 	addi	r2,r2,8
    9ff8:	00c01404 	movi	r3,80
    9ffc:	10c00005 	stb	r3,0(r2)

								LMS_Ctrl_Packet_Tx->Data_field[2 + (block * 4)] = (converted_val >> 8); //signed val, MSB byte
    a000:	d0e00117 	ldw	r3,-32764(gp)
    a004:	d0a0c303 	ldbu	r2,-31988(gp)
    a008:	10803fcc 	andi	r2,r2,255
    a00c:	1085883a 	add	r2,r2,r2
    a010:	1085883a 	add	r2,r2,r2
    a014:	10800084 	addi	r2,r2,2
    a018:	d120008b 	ldhu	r4,-32766(gp)
    a01c:	213fffcc 	andi	r4,r4,65535
    a020:	2120001c 	xori	r4,r4,32768
    a024:	21200004 	addi	r4,r4,-32768
    a028:	2009d23a 	srai	r4,r4,8
    a02c:	1885883a 	add	r2,r3,r2
    a030:	10800204 	addi	r2,r2,8
    a034:	11000005 	stb	r4,0(r2)
								LMS_Ctrl_Packet_Tx->Data_field[3 + (block * 4)] = converted_val; //signed val, LSB byte
    a038:	d0e00117 	ldw	r3,-32764(gp)
    a03c:	d0a0c303 	ldbu	r2,-31988(gp)
    a040:	10803fcc 	andi	r2,r2,255
    a044:	1085883a 	add	r2,r2,r2
    a048:	1085883a 	add	r2,r2,r2
    a04c:	108000c4 	addi	r2,r2,3
    a050:	d120008b 	ldhu	r4,-32766(gp)
    a054:	1885883a 	add	r2,r3,r2
    a058:	10800204 	addi	r2,r2,8
    a05c:	11000005 	stb	r4,0(r2)

							break;
    a060:	00006206 	br	a1ec <main+0xecc>

							case 2://wiper 0 position
								LMS_Ctrl_Packet_Tx->Data_field[0 + (block * 4)] = LMS_Ctrl_Packet_Rx->Data_field[block]; //ch
    a064:	d1200117 	ldw	r4,-32764(gp)
    a068:	d0a0c303 	ldbu	r2,-31988(gp)
    a06c:	10803fcc 	andi	r2,r2,255
    a070:	1085883a 	add	r2,r2,r2
    a074:	1085883a 	add	r2,r2,r2
    a078:	100b883a 	mov	r5,r2
    a07c:	d0e00217 	ldw	r3,-32760(gp)
    a080:	d0a0c303 	ldbu	r2,-31988(gp)
    a084:	10803fcc 	andi	r2,r2,255
    a088:	1885883a 	add	r2,r3,r2
    a08c:	10800204 	addi	r2,r2,8
    a090:	10c00003 	ldbu	r3,0(r2)
    a094:	2145883a 	add	r2,r4,r5
    a098:	10800204 	addi	r2,r2,8
    a09c:	10c00005 	stb	r3,0(r2)
								LMS_Ctrl_Packet_Tx->Data_field[1 + (block * 4)] = 0x00; //RAW //unit, power
    a0a0:	d0e00117 	ldw	r3,-32764(gp)
    a0a4:	d0a0c303 	ldbu	r2,-31988(gp)
    a0a8:	10803fcc 	andi	r2,r2,255
    a0ac:	1085883a 	add	r2,r2,r2
    a0b0:	1085883a 	add	r2,r2,r2
    a0b4:	10800044 	addi	r2,r2,1
    a0b8:	1885883a 	add	r2,r3,r2
    a0bc:	10800204 	addi	r2,r2,8
    a0c0:	10000005 	stb	zero,0(r2)

								LMS_Ctrl_Packet_Tx->Data_field[2 + (block * 4)] = (wiper_pos[0] >> 8) & 0xFF; //signed val, MSB byte
    a0c4:	d0e00117 	ldw	r3,-32764(gp)
    a0c8:	d0a0c303 	ldbu	r2,-31988(gp)
    a0cc:	10803fcc 	andi	r2,r2,255
    a0d0:	1085883a 	add	r2,r2,r2
    a0d4:	1085883a 	add	r2,r2,r2
    a0d8:	10800084 	addi	r2,r2,2
    a0dc:	e13ffc8b 	ldhu	r4,-14(fp)
    a0e0:	213fffcc 	andi	r4,r4,65535
    a0e4:	2008d23a 	srli	r4,r4,8
    a0e8:	1885883a 	add	r2,r3,r2
    a0ec:	10800204 	addi	r2,r2,8
    a0f0:	11000005 	stb	r4,0(r2)
								LMS_Ctrl_Packet_Tx->Data_field[3 + (block * 4)] = wiper_pos[0] & 0xFF; //signed val, LSB byte
    a0f4:	d0e00117 	ldw	r3,-32764(gp)
    a0f8:	d0a0c303 	ldbu	r2,-31988(gp)
    a0fc:	10803fcc 	andi	r2,r2,255
    a100:	1085883a 	add	r2,r2,r2
    a104:	1085883a 	add	r2,r2,r2
    a108:	108000c4 	addi	r2,r2,3
    a10c:	e13ffc8b 	ldhu	r4,-14(fp)
    a110:	1885883a 	add	r2,r3,r2
    a114:	10800204 	addi	r2,r2,8
    a118:	11000005 	stb	r4,0(r2)
							break;
    a11c:	00003306 	br	a1ec <main+0xecc>

							case 3://wiper 1 position
								LMS_Ctrl_Packet_Tx->Data_field[0 + (block * 4)] = LMS_Ctrl_Packet_Rx->Data_field[block]; //ch
    a120:	d1200117 	ldw	r4,-32764(gp)
    a124:	d0a0c303 	ldbu	r2,-31988(gp)
    a128:	10803fcc 	andi	r2,r2,255
    a12c:	1085883a 	add	r2,r2,r2
    a130:	1085883a 	add	r2,r2,r2
    a134:	100b883a 	mov	r5,r2
    a138:	d0e00217 	ldw	r3,-32760(gp)
    a13c:	d0a0c303 	ldbu	r2,-31988(gp)
    a140:	10803fcc 	andi	r2,r2,255
    a144:	1885883a 	add	r2,r3,r2
    a148:	10800204 	addi	r2,r2,8
    a14c:	10c00003 	ldbu	r3,0(r2)
    a150:	2145883a 	add	r2,r4,r5
    a154:	10800204 	addi	r2,r2,8
    a158:	10c00005 	stb	r3,0(r2)
								LMS_Ctrl_Packet_Tx->Data_field[1 + (block * 4)] = 0x00; //RAW //unit, power
    a15c:	d0e00117 	ldw	r3,-32764(gp)
    a160:	d0a0c303 	ldbu	r2,-31988(gp)
    a164:	10803fcc 	andi	r2,r2,255
    a168:	1085883a 	add	r2,r2,r2
    a16c:	1085883a 	add	r2,r2,r2
    a170:	10800044 	addi	r2,r2,1
    a174:	1885883a 	add	r2,r3,r2
    a178:	10800204 	addi	r2,r2,8
    a17c:	10000005 	stb	zero,0(r2)

								LMS_Ctrl_Packet_Tx->Data_field[2 + (block * 4)] = (wiper_pos[1] >> 8) & 0xFF; //signed val, MSB byte
    a180:	d0e00117 	ldw	r3,-32764(gp)
    a184:	d0a0c303 	ldbu	r2,-31988(gp)
    a188:	10803fcc 	andi	r2,r2,255
    a18c:	1085883a 	add	r2,r2,r2
    a190:	1085883a 	add	r2,r2,r2
    a194:	10800084 	addi	r2,r2,2
    a198:	e13ffd0b 	ldhu	r4,-12(fp)
    a19c:	213fffcc 	andi	r4,r4,65535
    a1a0:	2008d23a 	srli	r4,r4,8
    a1a4:	1885883a 	add	r2,r3,r2
    a1a8:	10800204 	addi	r2,r2,8
    a1ac:	11000005 	stb	r4,0(r2)
								LMS_Ctrl_Packet_Tx->Data_field[3 + (block * 4)] = wiper_pos[1] & 0xFF; //signed val, LSB byte
    a1b0:	d0e00117 	ldw	r3,-32764(gp)
    a1b4:	d0a0c303 	ldbu	r2,-31988(gp)
    a1b8:	10803fcc 	andi	r2,r2,255
    a1bc:	1085883a 	add	r2,r2,r2
    a1c0:	1085883a 	add	r2,r2,r2
    a1c4:	108000c4 	addi	r2,r2,3
    a1c8:	e13ffd0b 	ldhu	r4,-12(fp)
    a1cc:	1885883a 	add	r2,r3,r2
    a1d0:	10800204 	addi	r2,r2,8
    a1d4:	11000005 	stb	r4,0(r2)
							break;
    a1d8:	00000406 	br	a1ec <main+0xecc>

							default:
								cmd_errors++;
    a1dc:	d0a0c383 	ldbu	r2,-31986(gp)
    a1e0:	10800044 	addi	r2,r2,1
    a1e4:	d0a0c385 	stb	r2,-31986(gp)
							break;
    a1e8:	0001883a 	nop
 				break;


				case CMD_ANALOG_VAL_RD:

					for(block = 0; block < LMS_Ctrl_Packet_Rx->Header.Data_blocks; block++)
    a1ec:	d0a0c303 	ldbu	r2,-31988(gp)
    a1f0:	10800044 	addi	r2,r2,1
    a1f4:	d0a0c305 	stb	r2,-31988(gp)
    a1f8:	d0a00217 	ldw	r2,-32760(gp)
    a1fc:	10800083 	ldbu	r2,2(r2)
    a200:	d0e0c303 	ldbu	r3,-31988(gp)
    a204:	10803fcc 	andi	r2,r2,255
    a208:	18c03fcc 	andi	r3,r3,255
    a20c:	18bef436 	bltu	r3,r2,9de0 <_gp+0xffff589c>
								cmd_errors++;
							break;
						}
					}

					LMS_Ctrl_Packet_Tx->Header.Status = STATUS_COMPLETED_CMD;
    a210:	d0a00117 	ldw	r2,-32764(gp)
    a214:	00c00044 	movi	r3,1
    a218:	10c00045 	stb	r3,1(r2)

				break;
    a21c:	0001b606 	br	a8f8 <main+0x15d8>


				case CMD_ANALOG_VAL_WR:
					if(Check_many_blocks (4)) break;
    a220:	01000104 	movi	r4,4
    a224:	000805c0 	call	805c <Check_many_blocks>
    a228:	10803fcc 	andi	r2,r2,255
    a22c:	1001ad1e 	bne	r2,zero,a8e4 <main+0x15c4>

					for(block = 0; block < LMS_Ctrl_Packet_Rx->Header.Data_blocks; block++)
    a230:	d020c305 	stb	zero,-31988(gp)
    a234:	0000eb06 	br	a5e4 <main+0x12c4>
					{
						switch (LMS_Ctrl_Packet_Rx->Data_field[0 + (block * 4)]) //do something according to channel
    a238:	d0e00217 	ldw	r3,-32760(gp)
    a23c:	d0a0c303 	ldbu	r2,-31988(gp)
    a240:	10803fcc 	andi	r2,r2,255
    a244:	1085883a 	add	r2,r2,r2
    a248:	1085883a 	add	r2,r2,r2
    a24c:	1885883a 	add	r2,r3,r2
    a250:	10800204 	addi	r2,r2,8
    a254:	10800003 	ldbu	r2,0(r2)
    a258:	10803fcc 	andi	r2,r2,255
    a25c:	10c000a0 	cmpeqi	r3,r2,2
    a260:	1800321e 	bne	r3,zero,a32c <main+0x100c>
    a264:	10c000e0 	cmpeqi	r3,r2,3
    a268:	1800831e 	bne	r3,zero,a478 <main+0x1158>
    a26c:	1000d61e 	bne	r2,zero,a5c8 <main+0x12a8>
						{
							case 0: //TCXO DAC
								if (LMS_Ctrl_Packet_Rx->Data_field[1 + (block * 4)] == 0) //RAW units?
    a270:	d0e00217 	ldw	r3,-32760(gp)
    a274:	d0a0c303 	ldbu	r2,-31988(gp)
    a278:	10803fcc 	andi	r2,r2,255
    a27c:	1085883a 	add	r2,r2,r2
    a280:	1085883a 	add	r2,r2,r2
    a284:	10800044 	addi	r2,r2,1
    a288:	1885883a 	add	r2,r3,r2
    a28c:	10800204 	addi	r2,r2,8
    a290:	10800003 	ldbu	r2,0(r2)
    a294:	10803fcc 	andi	r2,r2,255
    a298:	1000201e 	bne	r2,zero,a31c <main+0xffc>
								{
									if(LMS_Ctrl_Packet_Rx->Data_field[2 + (block * 4)] == 0) //MSB byte empty?
    a29c:	d0e00217 	ldw	r3,-32760(gp)
    a2a0:	d0a0c303 	ldbu	r2,-31988(gp)
    a2a4:	10803fcc 	andi	r2,r2,255
    a2a8:	1085883a 	add	r2,r2,r2
    a2ac:	1085883a 	add	r2,r2,r2
    a2b0:	10800084 	addi	r2,r2,2
    a2b4:	1885883a 	add	r2,r3,r2
    a2b8:	10800204 	addi	r2,r2,8
    a2bc:	10800003 	ldbu	r2,0(r2)
    a2c0:	10803fcc 	andi	r2,r2,255
    a2c4:	1000111e 	bne	r2,zero,a30c <main+0xfec>
									{
										Control_TCXO_ADF(0, NULL); //set ADF4002 CP to three-state
    a2c8:	000b883a 	mov	r5,zero
    a2cc:	0009883a 	mov	r4,zero
    a2d0:	00088700 	call	8870 <Control_TCXO_ADF>

										//write data to DAC
										dac_val = LMS_Ctrl_Packet_Rx->Data_field[3 + (block * 4)];
    a2d4:	d0e00217 	ldw	r3,-32760(gp)
    a2d8:	d0a0c303 	ldbu	r2,-31988(gp)
    a2dc:	10803fcc 	andi	r2,r2,255
    a2e0:	1085883a 	add	r2,r2,r2
    a2e4:	1085883a 	add	r2,r2,r2
    a2e8:	108000c4 	addi	r2,r2,3
    a2ec:	1885883a 	add	r2,r3,r2
    a2f0:	10800204 	addi	r2,r2,8
    a2f4:	10800003 	ldbu	r2,0(r2)
    a2f8:	d0a00005 	stb	r2,-32768(gp)
										Control_TCXO_DAC(1, &dac_val); //enable DAC output, set new val
    a2fc:	d1600004 	addi	r5,gp,-32768
    a300:	01000044 	movi	r4,1
    a304:	00087a80 	call	87a8 <Control_TCXO_DAC>
									}
									else cmd_errors++;
								}
								else cmd_errors++;

							break;
    a308:	0000b306 	br	a5d8 <main+0x12b8>

										//write data to DAC
										dac_val = LMS_Ctrl_Packet_Rx->Data_field[3 + (block * 4)];
										Control_TCXO_DAC(1, &dac_val); //enable DAC output, set new val
									}
									else cmd_errors++;
    a30c:	d0a0c383 	ldbu	r2,-31986(gp)
    a310:	10800044 	addi	r2,r2,1
    a314:	d0a0c385 	stb	r2,-31986(gp)
								}
								else cmd_errors++;

							break;
    a318:	0000af06 	br	a5d8 <main+0x12b8>
										dac_val = LMS_Ctrl_Packet_Rx->Data_field[3 + (block * 4)];
										Control_TCXO_DAC(1, &dac_val); //enable DAC output, set new val
									}
									else cmd_errors++;
								}
								else cmd_errors++;
    a31c:	d0a0c383 	ldbu	r2,-31986(gp)
    a320:	10800044 	addi	r2,r2,1
    a324:	d0a0c385 	stb	r2,-31986(gp)

							break;
    a328:	0000ab06 	br	a5d8 <main+0x12b8>

							case 2: //MCP4261 wiper 0 control

								if (LMS_Ctrl_Packet_Rx->Data_field[1 + (block * 4)] == 0) //RAW units?
    a32c:	d0e00217 	ldw	r3,-32760(gp)
    a330:	d0a0c303 	ldbu	r2,-31988(gp)
    a334:	10803fcc 	andi	r2,r2,255
    a338:	1085883a 	add	r2,r2,r2
    a33c:	1085883a 	add	r2,r2,r2
    a340:	10800044 	addi	r2,r2,1
    a344:	1885883a 	add	r2,r3,r2
    a348:	10800204 	addi	r2,r2,8
    a34c:	10800003 	ldbu	r2,0(r2)
    a350:	10803fcc 	andi	r2,r2,255
    a354:	1000441e 	bne	r2,zero,a468 <main+0x1148>
								{
									wiper_pos[0] = (LMS_Ctrl_Packet_Rx->Data_field[2 + (block * 4)] << 8) + LMS_Ctrl_Packet_Rx->Data_field[3 + (block * 4)];
    a358:	d0e00217 	ldw	r3,-32760(gp)
    a35c:	d0a0c303 	ldbu	r2,-31988(gp)
    a360:	10803fcc 	andi	r2,r2,255
    a364:	1085883a 	add	r2,r2,r2
    a368:	1085883a 	add	r2,r2,r2
    a36c:	10800084 	addi	r2,r2,2
    a370:	1885883a 	add	r2,r3,r2
    a374:	10800204 	addi	r2,r2,8
    a378:	10800003 	ldbu	r2,0(r2)
    a37c:	10803fcc 	andi	r2,r2,255
    a380:	1004923a 	slli	r2,r2,8
    a384:	1009883a 	mov	r4,r2
    a388:	d0e00217 	ldw	r3,-32760(gp)
    a38c:	d0a0c303 	ldbu	r2,-31988(gp)
    a390:	10803fcc 	andi	r2,r2,255
    a394:	1085883a 	add	r2,r2,r2
    a398:	1085883a 	add	r2,r2,r2
    a39c:	108000c4 	addi	r2,r2,3
    a3a0:	1885883a 	add	r2,r3,r2
    a3a4:	10800204 	addi	r2,r2,8
    a3a8:	10800003 	ldbu	r2,0(r2)
    a3ac:	10803fcc 	andi	r2,r2,255
    a3b0:	2085883a 	add	r2,r4,r2
    a3b4:	e0bffc8d 	sth	r2,-14(fp)
									if(wiper_pos[0] <= 256)
    a3b8:	e0bffc8b 	ldhu	r2,-14(fp)
    a3bc:	10bfffcc 	andi	r2,r2,65535
    a3c0:	10804068 	cmpgeui	r2,r2,257
    a3c4:	1000241e 	bne	r2,zero,a458 <main+0x1138>
									{
										MCP_data[0] = MCP_data[1] = 0;
    a3c8:	e03ffc45 	stb	zero,-15(fp)
    a3cc:	e0bffc43 	ldbu	r2,-15(fp)
    a3d0:	e0bffc05 	stb	r2,-16(fp)

										MCP_data[0] |= (0x00 << 4); //Memory addr [16:13] = Volatile Wiper 0 (0x00)
    a3d4:	e0bffc03 	ldbu	r2,-16(fp)
    a3d8:	e0bffc05 	stb	r2,-16(fp)
										MCP_data[0] |= (0x00 << 2); //Command bits [11:10] = CMD  Write data (0x00)
    a3dc:	e0bffc03 	ldbu	r2,-16(fp)
    a3e0:	e0bffc05 	stb	r2,-16(fp)

										if (wiper_pos[0] > 255)	MCP_data[0] |= (0x01); //Full Scale (W = A)
    a3e4:	e0bffc8b 	ldhu	r2,-14(fp)
    a3e8:	10bfffcc 	andi	r2,r2,65535
    a3ec:	10804030 	cmpltui	r2,r2,256
    a3f0:	1000031e 	bne	r2,zero,a400 <main+0x10e0>
    a3f4:	e0bffc03 	ldbu	r2,-16(fp)
    a3f8:	10800054 	ori	r2,r2,1
    a3fc:	e0bffc05 	stb	r2,-16(fp)

										MCP_data[1] = LMS_Ctrl_Packet_Rx->Data_field[3 + (block * 4)];
    a400:	d0e00217 	ldw	r3,-32760(gp)
    a404:	d0a0c303 	ldbu	r2,-31988(gp)
    a408:	10803fcc 	andi	r2,r2,255
    a40c:	1085883a 	add	r2,r2,r2
    a410:	1085883a 	add	r2,r2,r2
    a414:	108000c4 	addi	r2,r2,3
    a418:	1885883a 	add	r2,r3,r2
    a41c:	10800204 	addi	r2,r2,8
    a420:	10800003 	ldbu	r2,0(r2)
    a424:	e0bffc45 	stb	r2,-15(fp)

										spirez = alt_avalon_spi_command(FPGA_SPI0_BASE, SPI_NR_POT, 2, MCP_data, 0, NULL, 0);
    a428:	e0bffc04 	addi	r2,fp,-16
    a42c:	d8000215 	stw	zero,8(sp)
    a430:	d8000115 	stw	zero,4(sp)
    a434:	d8000015 	stw	zero,0(sp)
    a438:	100f883a 	mov	r7,r2
    a43c:	01800084 	movi	r6,2
    a440:	01400104 	movi	r5,4
    a444:	01000074 	movhi	r4,1
    a448:	21059004 	addi	r4,r4,5696
    a44c:	000b2180 	call	b218 <alt_avalon_spi_command>
    a450:	e0bffa15 	stw	r2,-24(fp)
									}
									else cmd_errors++;
								}
								else cmd_errors++;
							break;
    a454:	00006006 	br	a5d8 <main+0x12b8>

										MCP_data[1] = LMS_Ctrl_Packet_Rx->Data_field[3 + (block * 4)];

										spirez = alt_avalon_spi_command(FPGA_SPI0_BASE, SPI_NR_POT, 2, MCP_data, 0, NULL, 0);
									}
									else cmd_errors++;
    a458:	d0a0c383 	ldbu	r2,-31986(gp)
    a45c:	10800044 	addi	r2,r2,1
    a460:	d0a0c385 	stb	r2,-31986(gp)
								}
								else cmd_errors++;
							break;
    a464:	00005c06 	br	a5d8 <main+0x12b8>

										spirez = alt_avalon_spi_command(FPGA_SPI0_BASE, SPI_NR_POT, 2, MCP_data, 0, NULL, 0);
									}
									else cmd_errors++;
								}
								else cmd_errors++;
    a468:	d0a0c383 	ldbu	r2,-31986(gp)
    a46c:	10800044 	addi	r2,r2,1
    a470:	d0a0c385 	stb	r2,-31986(gp)
							break;
    a474:	00005806 	br	a5d8 <main+0x12b8>

							case 3: //MCP4261 wiper 1 control

								if (LMS_Ctrl_Packet_Rx->Data_field[1 + (block * 4)] == 0) //RAW units?
    a478:	d0e00217 	ldw	r3,-32760(gp)
    a47c:	d0a0c303 	ldbu	r2,-31988(gp)
    a480:	10803fcc 	andi	r2,r2,255
    a484:	1085883a 	add	r2,r2,r2
    a488:	1085883a 	add	r2,r2,r2
    a48c:	10800044 	addi	r2,r2,1
    a490:	1885883a 	add	r2,r3,r2
    a494:	10800204 	addi	r2,r2,8
    a498:	10800003 	ldbu	r2,0(r2)
    a49c:	10803fcc 	andi	r2,r2,255
    a4a0:	1000451e 	bne	r2,zero,a5b8 <main+0x1298>
								{
									wiper_pos[1] = (LMS_Ctrl_Packet_Rx->Data_field[2 + (block * 4)] << 8) + LMS_Ctrl_Packet_Rx->Data_field[3 + (block * 4)];
    a4a4:	d0e00217 	ldw	r3,-32760(gp)
    a4a8:	d0a0c303 	ldbu	r2,-31988(gp)
    a4ac:	10803fcc 	andi	r2,r2,255
    a4b0:	1085883a 	add	r2,r2,r2
    a4b4:	1085883a 	add	r2,r2,r2
    a4b8:	10800084 	addi	r2,r2,2
    a4bc:	1885883a 	add	r2,r3,r2
    a4c0:	10800204 	addi	r2,r2,8
    a4c4:	10800003 	ldbu	r2,0(r2)
    a4c8:	10803fcc 	andi	r2,r2,255
    a4cc:	1004923a 	slli	r2,r2,8
    a4d0:	1009883a 	mov	r4,r2
    a4d4:	d0e00217 	ldw	r3,-32760(gp)
    a4d8:	d0a0c303 	ldbu	r2,-31988(gp)
    a4dc:	10803fcc 	andi	r2,r2,255
    a4e0:	1085883a 	add	r2,r2,r2
    a4e4:	1085883a 	add	r2,r2,r2
    a4e8:	108000c4 	addi	r2,r2,3
    a4ec:	1885883a 	add	r2,r3,r2
    a4f0:	10800204 	addi	r2,r2,8
    a4f4:	10800003 	ldbu	r2,0(r2)
    a4f8:	10803fcc 	andi	r2,r2,255
    a4fc:	2085883a 	add	r2,r4,r2
    a500:	e0bffd0d 	sth	r2,-12(fp)
									if(wiper_pos[1] <= 256)
    a504:	e0bffd0b 	ldhu	r2,-12(fp)
    a508:	10bfffcc 	andi	r2,r2,65535
    a50c:	10804068 	cmpgeui	r2,r2,257
    a510:	1000251e 	bne	r2,zero,a5a8 <main+0x1288>
									{
										MCP_data[0] = MCP_data[1] = 0;
    a514:	e03ffc45 	stb	zero,-15(fp)
    a518:	e0bffc43 	ldbu	r2,-15(fp)
    a51c:	e0bffc05 	stb	r2,-16(fp)

										MCP_data[0] |= (0x01 << 4); //Memory addr [16:13] = Volatile Wiper 1 (0x01)
    a520:	e0bffc03 	ldbu	r2,-16(fp)
    a524:	10800414 	ori	r2,r2,16
    a528:	e0bffc05 	stb	r2,-16(fp)
										MCP_data[0] |= (0x00 << 2); //Command bits [11:10] = CMD  Write data (0x00)
    a52c:	e0bffc03 	ldbu	r2,-16(fp)
    a530:	e0bffc05 	stb	r2,-16(fp)

										if (wiper_pos[1] > 255)	MCP_data[0] |= (0x01); //Full Scale (W = A)
    a534:	e0bffd0b 	ldhu	r2,-12(fp)
    a538:	10bfffcc 	andi	r2,r2,65535
    a53c:	10804030 	cmpltui	r2,r2,256
    a540:	1000031e 	bne	r2,zero,a550 <main+0x1230>
    a544:	e0bffc03 	ldbu	r2,-16(fp)
    a548:	10800054 	ori	r2,r2,1
    a54c:	e0bffc05 	stb	r2,-16(fp)

										MCP_data[1] = LMS_Ctrl_Packet_Rx->Data_field[3 + (block * 4)];
    a550:	d0e00217 	ldw	r3,-32760(gp)
    a554:	d0a0c303 	ldbu	r2,-31988(gp)
    a558:	10803fcc 	andi	r2,r2,255
    a55c:	1085883a 	add	r2,r2,r2
    a560:	1085883a 	add	r2,r2,r2
    a564:	108000c4 	addi	r2,r2,3
    a568:	1885883a 	add	r2,r3,r2
    a56c:	10800204 	addi	r2,r2,8
    a570:	10800003 	ldbu	r2,0(r2)
    a574:	e0bffc45 	stb	r2,-15(fp)

										spirez = alt_avalon_spi_command(FPGA_SPI0_BASE, SPI_NR_POT, 2, MCP_data, 0, NULL, 0);
    a578:	e0bffc04 	addi	r2,fp,-16
    a57c:	d8000215 	stw	zero,8(sp)
    a580:	d8000115 	stw	zero,4(sp)
    a584:	d8000015 	stw	zero,0(sp)
    a588:	100f883a 	mov	r7,r2
    a58c:	01800084 	movi	r6,2
    a590:	01400104 	movi	r5,4
    a594:	01000074 	movhi	r4,1
    a598:	21059004 	addi	r4,r4,5696
    a59c:	000b2180 	call	b218 <alt_avalon_spi_command>
    a5a0:	e0bffa15 	stw	r2,-24(fp)
									}
									else cmd_errors++;
								}
								else cmd_errors++;
							break;
    a5a4:	00000c06 	br	a5d8 <main+0x12b8>

										MCP_data[1] = LMS_Ctrl_Packet_Rx->Data_field[3 + (block * 4)];

										spirez = alt_avalon_spi_command(FPGA_SPI0_BASE, SPI_NR_POT, 2, MCP_data, 0, NULL, 0);
									}
									else cmd_errors++;
    a5a8:	d0a0c383 	ldbu	r2,-31986(gp)
    a5ac:	10800044 	addi	r2,r2,1
    a5b0:	d0a0c385 	stb	r2,-31986(gp)
								}
								else cmd_errors++;
							break;
    a5b4:	00000806 	br	a5d8 <main+0x12b8>

										spirez = alt_avalon_spi_command(FPGA_SPI0_BASE, SPI_NR_POT, 2, MCP_data, 0, NULL, 0);
									}
									else cmd_errors++;
								}
								else cmd_errors++;
    a5b8:	d0a0c383 	ldbu	r2,-31986(gp)
    a5bc:	10800044 	addi	r2,r2,1
    a5c0:	d0a0c385 	stb	r2,-31986(gp)
							break;
    a5c4:	00000406 	br	a5d8 <main+0x12b8>

							default:
								cmd_errors++;
    a5c8:	d0a0c383 	ldbu	r2,-31986(gp)
    a5cc:	10800044 	addi	r2,r2,1
    a5d0:	d0a0c385 	stb	r2,-31986(gp)
							break;
    a5d4:	0001883a 	nop


				case CMD_ANALOG_VAL_WR:
					if(Check_many_blocks (4)) break;

					for(block = 0; block < LMS_Ctrl_Packet_Rx->Header.Data_blocks; block++)
    a5d8:	d0a0c303 	ldbu	r2,-31988(gp)
    a5dc:	10800044 	addi	r2,r2,1
    a5e0:	d0a0c305 	stb	r2,-31988(gp)
    a5e4:	d0a00217 	ldw	r2,-32760(gp)
    a5e8:	10800083 	ldbu	r2,2(r2)
    a5ec:	d0e0c303 	ldbu	r3,-31988(gp)
    a5f0:	10803fcc 	andi	r2,r2,255
    a5f4:	18c03fcc 	andi	r3,r3,255
    a5f8:	18bf0f36 	bltu	r3,r2,a238 <_gp+0xffff5cf4>
								cmd_errors++;
							break;
						}
					}

					if(cmd_errors) LMS_Ctrl_Packet_Tx->Header.Status = STATUS_ERROR_CMD;
    a5fc:	d0a0c383 	ldbu	r2,-31986(gp)
    a600:	10803fcc 	andi	r2,r2,255
    a604:	10000426 	beq	r2,zero,a618 <main+0x12f8>
    a608:	d0a00117 	ldw	r2,-32764(gp)
    a60c:	00c00144 	movi	r3,5
    a610:	10c00045 	stb	r3,1(r2)
					else LMS_Ctrl_Packet_Tx->Header.Status = STATUS_COMPLETED_CMD;

				break;
    a614:	0000b806 	br	a8f8 <main+0x15d8>
							break;
						}
					}

					if(cmd_errors) LMS_Ctrl_Packet_Tx->Header.Status = STATUS_ERROR_CMD;
					else LMS_Ctrl_Packet_Tx->Header.Status = STATUS_COMPLETED_CMD;
    a618:	d0a00117 	ldw	r2,-32764(gp)
    a61c:	00c00044 	movi	r3,1
    a620:	10c00045 	stb	r3,1(r2)

				break;
    a624:	0000b406 	br	a8f8 <main+0x15d8>


	 			case CMD_SI5351_WR:
	 				if(Check_many_blocks(2)) break;
    a628:	01000084 	movi	r4,2
    a62c:	000805c0 	call	805c <Check_many_blocks>
    a630:	10803fcc 	andi	r2,r2,255
    a634:	1000ad1e 	bne	r2,zero,a8ec <main+0x15cc>

	 				for(block = 0; block < LMS_Ctrl_Packet_Rx->Header.Data_blocks; block++)
    a638:	d020c305 	stb	zero,-31988(gp)
    a63c:	00002f06 	br	a6fc <main+0x13dc>
	 				{
	 					cmd_errors += I2C_start(I2C_OPENCORES_0_BASE, SI5351_I2C_ADDR, 0);
    a640:	000d883a 	mov	r6,zero
    a644:	01401804 	movi	r5,96
    a648:	01000074 	movhi	r4,1
    a64c:	21059804 	addi	r4,r4,5728
    a650:	000b4cc0 	call	b4cc <I2C_start>
    a654:	1007883a 	mov	r3,r2
    a658:	d0a0c383 	ldbu	r2,-31986(gp)
    a65c:	1885883a 	add	r2,r3,r2
    a660:	d0a0c385 	stb	r2,-31986(gp)
	 					cmd_errors += I2C_write(I2C_OPENCORES_0_BASE, LMS_Ctrl_Packet_Rx->Data_field[block * 2    ], 0);
    a664:	d0e00217 	ldw	r3,-32760(gp)
    a668:	d0a0c303 	ldbu	r2,-31988(gp)
    a66c:	10803fcc 	andi	r2,r2,255
    a670:	1085883a 	add	r2,r2,r2
    a674:	1885883a 	add	r2,r3,r2
    a678:	10800204 	addi	r2,r2,8
    a67c:	10800003 	ldbu	r2,0(r2)
    a680:	10803fcc 	andi	r2,r2,255
    a684:	000d883a 	mov	r6,zero
    a688:	100b883a 	mov	r5,r2
    a68c:	01000074 	movhi	r4,1
    a690:	21059804 	addi	r4,r4,5728
    a694:	000b6200 	call	b620 <I2C_write>
    a698:	1007883a 	mov	r3,r2
    a69c:	d0a0c383 	ldbu	r2,-31986(gp)
    a6a0:	1885883a 	add	r2,r3,r2
    a6a4:	d0a0c385 	stb	r2,-31986(gp)
	 					cmd_errors += I2C_write(I2C_OPENCORES_0_BASE, LMS_Ctrl_Packet_Rx->Data_field[block * 2 + 1], 1);
    a6a8:	d0e00217 	ldw	r3,-32760(gp)
    a6ac:	d0a0c303 	ldbu	r2,-31988(gp)
    a6b0:	10803fcc 	andi	r2,r2,255
    a6b4:	1085883a 	add	r2,r2,r2
    a6b8:	10800044 	addi	r2,r2,1
    a6bc:	1885883a 	add	r2,r3,r2
    a6c0:	10800204 	addi	r2,r2,8
    a6c4:	10800003 	ldbu	r2,0(r2)
    a6c8:	10803fcc 	andi	r2,r2,255
    a6cc:	01800044 	movi	r6,1
    a6d0:	100b883a 	mov	r5,r2
    a6d4:	01000074 	movhi	r4,1
    a6d8:	21059804 	addi	r4,r4,5728
    a6dc:	000b6200 	call	b620 <I2C_write>
    a6e0:	1007883a 	mov	r3,r2
    a6e4:	d0a0c383 	ldbu	r2,-31986(gp)
    a6e8:	1885883a 	add	r2,r3,r2
    a6ec:	d0a0c385 	stb	r2,-31986(gp)


	 			case CMD_SI5351_WR:
	 				if(Check_many_blocks(2)) break;

	 				for(block = 0; block < LMS_Ctrl_Packet_Rx->Header.Data_blocks; block++)
    a6f0:	d0a0c303 	ldbu	r2,-31988(gp)
    a6f4:	10800044 	addi	r2,r2,1
    a6f8:	d0a0c305 	stb	r2,-31988(gp)
    a6fc:	d0a00217 	ldw	r2,-32760(gp)
    a700:	10800083 	ldbu	r2,2(r2)
    a704:	d0e0c303 	ldbu	r3,-31988(gp)
    a708:	10803fcc 	andi	r2,r2,255
    a70c:	18c03fcc 	andi	r3,r3,255
    a710:	18bfcb36 	bltu	r3,r2,a640 <_gp+0xffff60fc>
	 					cmd_errors += I2C_start(I2C_OPENCORES_0_BASE, SI5351_I2C_ADDR, 0);
	 					cmd_errors += I2C_write(I2C_OPENCORES_0_BASE, LMS_Ctrl_Packet_Rx->Data_field[block * 2    ], 0);
	 					cmd_errors += I2C_write(I2C_OPENCORES_0_BASE, LMS_Ctrl_Packet_Rx->Data_field[block * 2 + 1], 1);
	 				}

	 				if(cmd_errors) LMS_Ctrl_Packet_Tx->Header.Status = STATUS_ERROR_CMD;
    a714:	d0a0c383 	ldbu	r2,-31986(gp)
    a718:	10803fcc 	andi	r2,r2,255
    a71c:	10000426 	beq	r2,zero,a730 <main+0x1410>
    a720:	d0a00117 	ldw	r2,-32764(gp)
    a724:	00c00144 	movi	r3,5
    a728:	10c00045 	stb	r3,1(r2)
	 				else LMS_Ctrl_Packet_Tx->Header.Status = STATUS_COMPLETED_CMD;

	 			break;
    a72c:	00007206 	br	a8f8 <main+0x15d8>
	 					cmd_errors += I2C_write(I2C_OPENCORES_0_BASE, LMS_Ctrl_Packet_Rx->Data_field[block * 2    ], 0);
	 					cmd_errors += I2C_write(I2C_OPENCORES_0_BASE, LMS_Ctrl_Packet_Rx->Data_field[block * 2 + 1], 1);
	 				}

	 				if(cmd_errors) LMS_Ctrl_Packet_Tx->Header.Status = STATUS_ERROR_CMD;
	 				else LMS_Ctrl_Packet_Tx->Header.Status = STATUS_COMPLETED_CMD;
    a730:	d0a00117 	ldw	r2,-32764(gp)
    a734:	00c00044 	movi	r3,1
    a738:	10c00045 	stb	r3,1(r2)

	 			break;
    a73c:	00006e06 	br	a8f8 <main+0x15d8>


 				case CMD_SI5351_RD:
 					if(Check_many_blocks (2)) break;
    a740:	01000084 	movi	r4,2
    a744:	000805c0 	call	805c <Check_many_blocks>
    a748:	10803fcc 	andi	r2,r2,255
    a74c:	1000691e 	bne	r2,zero,a8f4 <main+0x15d4>

 					for(block = 0; block < LMS_Ctrl_Packet_Rx->Header.Data_blocks; block++)
    a750:	d020c305 	stb	zero,-31988(gp)
    a754:	00004006 	br	a858 <main+0x1538>
 					{
 						cmd_errors += I2C_start(I2C_OPENCORES_0_BASE, SI5351_I2C_ADDR, 0);
    a758:	000d883a 	mov	r6,zero
    a75c:	01401804 	movi	r5,96
    a760:	01000074 	movhi	r4,1
    a764:	21059804 	addi	r4,r4,5728
    a768:	000b4cc0 	call	b4cc <I2C_start>
    a76c:	1007883a 	mov	r3,r2
    a770:	d0a0c383 	ldbu	r2,-31986(gp)
    a774:	1885883a 	add	r2,r3,r2
    a778:	d0a0c385 	stb	r2,-31986(gp)
 						cmd_errors += I2C_write(I2C_OPENCORES_0_BASE, LMS_Ctrl_Packet_Rx->Data_field[block], 1);
    a77c:	d0e00217 	ldw	r3,-32760(gp)
    a780:	d0a0c303 	ldbu	r2,-31988(gp)
    a784:	10803fcc 	andi	r2,r2,255
    a788:	1885883a 	add	r2,r3,r2
    a78c:	10800204 	addi	r2,r2,8
    a790:	10800003 	ldbu	r2,0(r2)
    a794:	10803fcc 	andi	r2,r2,255
    a798:	01800044 	movi	r6,1
    a79c:	100b883a 	mov	r5,r2
    a7a0:	01000074 	movhi	r4,1
    a7a4:	21059804 	addi	r4,r4,5728
    a7a8:	000b6200 	call	b620 <I2C_write>
    a7ac:	1007883a 	mov	r3,r2
    a7b0:	d0a0c383 	ldbu	r2,-31986(gp)
    a7b4:	1885883a 	add	r2,r3,r2
    a7b8:	d0a0c385 	stb	r2,-31986(gp)
 						cmd_errors += I2C_start(I2C_OPENCORES_0_BASE, SI5351_I2C_ADDR, 1);
    a7bc:	01800044 	movi	r6,1
    a7c0:	01401804 	movi	r5,96
    a7c4:	01000074 	movhi	r4,1
    a7c8:	21059804 	addi	r4,r4,5728
    a7cc:	000b4cc0 	call	b4cc <I2C_start>
    a7d0:	1007883a 	mov	r3,r2
    a7d4:	d0a0c383 	ldbu	r2,-31986(gp)
    a7d8:	1885883a 	add	r2,r3,r2
    a7dc:	d0a0c385 	stb	r2,-31986(gp)

 						LMS_Ctrl_Packet_Tx->Data_field[block * 2    ] = LMS_Ctrl_Packet_Rx->Data_field[block];
    a7e0:	d1200117 	ldw	r4,-32764(gp)
    a7e4:	d0a0c303 	ldbu	r2,-31988(gp)
    a7e8:	10803fcc 	andi	r2,r2,255
    a7ec:	1085883a 	add	r2,r2,r2
    a7f0:	100b883a 	mov	r5,r2
    a7f4:	d0e00217 	ldw	r3,-32760(gp)
    a7f8:	d0a0c303 	ldbu	r2,-31988(gp)
    a7fc:	10803fcc 	andi	r2,r2,255
    a800:	1885883a 	add	r2,r3,r2
    a804:	10800204 	addi	r2,r2,8
    a808:	10c00003 	ldbu	r3,0(r2)
    a80c:	2145883a 	add	r2,r4,r5
    a810:	10800204 	addi	r2,r2,8
    a814:	10c00005 	stb	r3,0(r2)
 						LMS_Ctrl_Packet_Tx->Data_field[block * 2 + 1] = I2C_read(I2C_OPENCORES_0_BASE, 1);
    a818:	d4600117 	ldw	r17,-32764(gp)
    a81c:	d0a0c303 	ldbu	r2,-31988(gp)
    a820:	10803fcc 	andi	r2,r2,255
    a824:	1085883a 	add	r2,r2,r2
    a828:	14000044 	addi	r16,r2,1
    a82c:	01400044 	movi	r5,1
    a830:	01000074 	movhi	r4,1
    a834:	21059804 	addi	r4,r4,5728
    a838:	000b58c0 	call	b58c <I2C_read>
    a83c:	1007883a 	mov	r3,r2
    a840:	8c05883a 	add	r2,r17,r16
    a844:	10800204 	addi	r2,r2,8
    a848:	10c00005 	stb	r3,0(r2)


 				case CMD_SI5351_RD:
 					if(Check_many_blocks (2)) break;

 					for(block = 0; block < LMS_Ctrl_Packet_Rx->Header.Data_blocks; block++)
    a84c:	d0a0c303 	ldbu	r2,-31988(gp)
    a850:	10800044 	addi	r2,r2,1
    a854:	d0a0c305 	stb	r2,-31988(gp)
    a858:	d0a00217 	ldw	r2,-32760(gp)
    a85c:	10800083 	ldbu	r2,2(r2)
    a860:	d0e0c303 	ldbu	r3,-31988(gp)
    a864:	10803fcc 	andi	r2,r2,255
    a868:	18c03fcc 	andi	r3,r3,255
    a86c:	18bfba36 	bltu	r3,r2,a758 <_gp+0xffff6214>

 						LMS_Ctrl_Packet_Tx->Data_field[block * 2    ] = LMS_Ctrl_Packet_Rx->Data_field[block];
 						LMS_Ctrl_Packet_Tx->Data_field[block * 2 + 1] = I2C_read(I2C_OPENCORES_0_BASE, 1);
 					}

 					if(cmd_errors) LMS_Ctrl_Packet_Tx->Header.Status = STATUS_ERROR_CMD;
    a870:	d0a0c383 	ldbu	r2,-31986(gp)
    a874:	10803fcc 	andi	r2,r2,255
    a878:	10000426 	beq	r2,zero,a88c <main+0x156c>
    a87c:	d0a00117 	ldw	r2,-32764(gp)
    a880:	00c00144 	movi	r3,5
    a884:	10c00045 	stb	r3,1(r2)
 					else LMS_Ctrl_Packet_Tx->Header.Status = STATUS_COMPLETED_CMD;

 				break;
    a888:	00001b06 	br	a8f8 <main+0x15d8>
 						LMS_Ctrl_Packet_Tx->Data_field[block * 2    ] = LMS_Ctrl_Packet_Rx->Data_field[block];
 						LMS_Ctrl_Packet_Tx->Data_field[block * 2 + 1] = I2C_read(I2C_OPENCORES_0_BASE, 1);
 					}

 					if(cmd_errors) LMS_Ctrl_Packet_Tx->Header.Status = STATUS_ERROR_CMD;
 					else LMS_Ctrl_Packet_Tx->Header.Status = STATUS_COMPLETED_CMD;
    a88c:	d0a00117 	ldw	r2,-32764(gp)
    a890:	00c00044 	movi	r3,1
    a894:	10c00045 	stb	r3,1(r2)

 				break;
    a898:	00001706 	br	a8f8 <main+0x15d8>


 				default:
 					/* This is unknown request. */
 					//isHandled = CyFalse;
 					LMS_Ctrl_Packet_Tx->Header.Status = STATUS_UNKNOWN_CMD;
    a89c:	d0a00117 	ldw	r2,-32764(gp)
    a8a0:	00c00084 	movi	r3,2
    a8a4:	10c00045 	stb	r3,1(r2)
 				break;
    a8a8:	00001306 	br	a8f8 <main+0x15d8>
 				break;
				

 				case CMD_LMS_RST:

 					if(!Check_Periph_ID(MAX_ID_LMS7, LMS_Ctrl_Packet_Rx->Header.Periph_ID)) break;
    a8ac:	0001883a 	nop
    a8b0:	00001106 	br	a8f8 <main+0x15d8>
 					LMS_Ctrl_Packet_Tx->Header.Status = STATUS_COMPLETED_CMD;
 				break;


 				case CMD_LMS7002_WR:
 					if(!Check_Periph_ID(MAX_ID_LMS7, LMS_Ctrl_Packet_Rx->Header.Periph_ID)) break;
    a8b4:	0001883a 	nop
    a8b8:	00000f06 	br	a8f8 <main+0x15d8>
 					if(Check_many_blocks (4)) break;
    a8bc:	0001883a 	nop
    a8c0:	00000d06 	br	a8f8 <main+0x15d8>
 					LMS_Ctrl_Packet_Tx->Header.Status = STATUS_COMPLETED_CMD;
 				break;


 				case CMD_LMS7002_RD:
 					if(Check_many_blocks (4)) break;
    a8c4:	0001883a 	nop
    a8c8:	00000b06 	br	a8f8 <main+0x15d8>
 					LMS_Ctrl_Packet_Tx->Header.Status = STATUS_COMPLETED_CMD;
 				break;


 	 			case CMD_BRDSPI16_WR:
 	 				if(Check_many_blocks (4)) break;
    a8cc:	0001883a 	nop
    a8d0:	00000906 	br	a8f8 <main+0x15d8>
 	 				LMS_Ctrl_Packet_Tx->Header.Status = STATUS_COMPLETED_CMD;
 	 			break;


 				case CMD_BRDSPI16_RD:
 					if(Check_many_blocks (4)) break;
    a8d4:	0001883a 	nop
    a8d8:	00000706 	br	a8f8 <main+0x15d8>
 					LMS_Ctrl_Packet_Tx->Header.Status = STATUS_COMPLETED_CMD;
 				break;


 				case CMD_ADF4002_WR:
 					if(Check_many_blocks (3)) break;
    a8dc:	0001883a 	nop
    a8e0:	00000506 	br	a8f8 <main+0x15d8>

				break;


				case CMD_ANALOG_VAL_WR:
					if(Check_many_blocks (4)) break;
    a8e4:	0001883a 	nop
    a8e8:	00000306 	br	a8f8 <main+0x15d8>

				break;


	 			case CMD_SI5351_WR:
	 				if(Check_many_blocks(2)) break;
    a8ec:	0001883a 	nop
    a8f0:	00000106 	br	a8f8 <main+0x15d8>

	 			break;


 				case CMD_SI5351_RD:
 					if(Check_many_blocks (2)) break;
    a8f4:	0001883a 	nop
			};



     		//Send response to the command
        	for(cnt=0; cnt<64/sizeof(uint32_t); ++cnt)
    a8f8:	e03ff705 	stb	zero,-36(fp)
    a8fc:	00000e06 	br	a938 <main+0x1618>
        	{
        		IOWR(AV_FIFO_INT_0_BASE, 0, dest[cnt]);
    a900:	e0bff707 	ldb	r2,-36(fp)
    a904:	1085883a 	add	r2,r2,r2
    a908:	1085883a 	add	r2,r2,r2
    a90c:	1007883a 	mov	r3,r2
    a910:	e0bff817 	ldw	r2,-32(fp)
    a914:	10c5883a 	add	r2,r2,r3
    a918:	10800017 	ldw	r2,0(r2)
    a91c:	1007883a 	mov	r3,r2
    a920:	00800074 	movhi	r2,1
    a924:	1085b404 	addi	r2,r2,5840
    a928:	10c00035 	stwio	r3,0(r2)
			};



     		//Send response to the command
        	for(cnt=0; cnt<64/sizeof(uint32_t); ++cnt)
    a92c:	e0bff703 	ldbu	r2,-36(fp)
    a930:	10800044 	addi	r2,r2,1
    a934:	e0bff705 	stb	r2,-36(fp)
    a938:	e0bff703 	ldbu	r2,-36(fp)
    a93c:	10803fcc 	andi	r2,r2,255
    a940:	10800430 	cmpltui	r2,r2,16
    a944:	103fee1e 	bne	r2,zero,a900 <_gp+0xffff63bc>
	    	spirez = alt_avalon_spi_command(PLLCFG_SPI_BASE, 0, 2, wr_buf, 2, rd_buf, 0);
	    }
*/


	}
    a948:	003aac06 	br	93fc <_gp+0xffff4eb8>

0000a94c <get_pll_config>:
#include "pll_rcfg.h"
#include "system.h"

// Reads main PLL configuration
void get_pll_config(uint32_t PLL_BASE, tPLL_CFG *pll_cfg)
{
    a94c:	defffd04 	addi	sp,sp,-12
    a950:	df000215 	stw	fp,8(sp)
    a954:	df000204 	addi	fp,sp,8
    a958:	e13ffe15 	stw	r4,-8(fp)
    a95c:	e17fff15 	stw	r5,-4(fp)
	pll_cfg->M_cnt = IORD_32DIRECT(PLL_BASE, M_COUNTER);
    a960:	e0bffe17 	ldw	r2,-8(fp)
    a964:	10800404 	addi	r2,r2,16
    a968:	10800037 	ldwio	r2,0(r2)
    a96c:	1007883a 	mov	r3,r2
    a970:	e0bfff17 	ldw	r2,-4(fp)
    a974:	10c00015 	stw	r3,0(r2)

	pll_cfg->MFrac_cnt = IORD_32DIRECT(PLL_BASE, FRAC_COUNTER);
    a978:	e0bffe17 	ldw	r2,-8(fp)
    a97c:	10800704 	addi	r2,r2,28
    a980:	10800037 	ldwio	r2,0(r2)
    a984:	1007883a 	mov	r3,r2
    a988:	e0bfff17 	ldw	r2,-4(fp)
    a98c:	10c00115 	stw	r3,4(r2)

	pll_cfg->N_cnt = IORD_32DIRECT(PLL_BASE, N_COUNTER);
    a990:	e0bffe17 	ldw	r2,-8(fp)
    a994:	10800304 	addi	r2,r2,12
    a998:	10800037 	ldwio	r2,0(r2)
    a99c:	1007883a 	mov	r3,r2
    a9a0:	e0bfff17 	ldw	r2,-4(fp)
    a9a4:	10c00215 	stw	r3,8(r2)

	pll_cfg->DPS_cnt = IORD_32DIRECT(PLL_BASE, DPS_COUNTER);
    a9a8:	e0bffe17 	ldw	r2,-8(fp)
    a9ac:	10800604 	addi	r2,r2,24
    a9b0:	10800037 	ldwio	r2,0(r2)
    a9b4:	1007883a 	mov	r3,r2
    a9b8:	e0bfff17 	ldw	r2,-4(fp)
    a9bc:	10c00415 	stw	r3,16(r2)

	pll_cfg->BS_cnt = IORD_32DIRECT(PLL_BASE, BS_COUNTER);
    a9c0:	e0bffe17 	ldw	r2,-8(fp)
    a9c4:	10800804 	addi	r2,r2,32
    a9c8:	10800037 	ldwio	r2,0(r2)
    a9cc:	1007883a 	mov	r3,r2
    a9d0:	e0bfff17 	ldw	r2,-4(fp)
    a9d4:	10c00515 	stw	r3,20(r2)

	pll_cfg->CPS_cnt = IORD_32DIRECT(PLL_BASE, CPS_COUNTER);
    a9d8:	e0bffe17 	ldw	r2,-8(fp)
    a9dc:	10800904 	addi	r2,r2,36
    a9e0:	10800037 	ldwio	r2,0(r2)
    a9e4:	1007883a 	mov	r3,r2
    a9e8:	e0bfff17 	ldw	r2,-4(fp)
    a9ec:	10c00615 	stw	r3,24(r2)

	pll_cfg->VCO_div = IORD_32DIRECT(PLL_BASE, VCO_DIV);
    a9f0:	e0bffe17 	ldw	r2,-8(fp)
    a9f4:	10801c04 	addi	r2,r2,112
    a9f8:	10800037 	ldwio	r2,0(r2)
    a9fc:	1007883a 	mov	r3,r2
    aa00:	e0bfff17 	ldw	r2,-4(fp)
    aa04:	10c00715 	stw	r3,28(r2)
}
    aa08:	0001883a 	nop
    aa0c:	e037883a 	mov	sp,fp
    aa10:	df000017 	ldw	fp,0(sp)
    aa14:	dec00104 	addi	sp,sp,4
    aa18:	f800283a 	ret

0000aa1c <set_pll_config>:

// Writes main PLL configuration
uint8_t set_pll_config(uint32_t PLL_BASE, tPLL_CFG *pll_cfg)
{
    aa1c:	defffd04 	addi	sp,sp,-12
    aa20:	df000215 	stw	fp,8(sp)
    aa24:	df000204 	addi	fp,sp,8
    aa28:	e13ffe15 	stw	r4,-8(fp)
    aa2c:	e17fff15 	stw	r5,-4(fp)

	//printf(" \n Full Reconfiguration Selected \n");

	//M
	IOWR_32DIRECT(PLL_BASE, M_COUNTER, pll_cfg->M_cnt);
    aa30:	e0bffe17 	ldw	r2,-8(fp)
    aa34:	10800404 	addi	r2,r2,16
    aa38:	1007883a 	mov	r3,r2
    aa3c:	e0bfff17 	ldw	r2,-4(fp)
    aa40:	10800017 	ldw	r2,0(r2)
    aa44:	18800035 	stwio	r2,0(r3)

	//MFrac
	IOWR_32DIRECT(PLL_BASE, FRAC_COUNTER, pll_cfg->MFrac_cnt);
    aa48:	e0bffe17 	ldw	r2,-8(fp)
    aa4c:	10800704 	addi	r2,r2,28
    aa50:	1007883a 	mov	r3,r2
    aa54:	e0bfff17 	ldw	r2,-4(fp)
    aa58:	10800117 	ldw	r2,4(r2)
    aa5c:	18800035 	stwio	r2,0(r3)

	//N
	IOWR_32DIRECT(PLL_BASE, N_COUNTER, pll_cfg->N_cnt);
    aa60:	e0bffe17 	ldw	r2,-8(fp)
    aa64:	10800304 	addi	r2,r2,12
    aa68:	1007883a 	mov	r3,r2
    aa6c:	e0bfff17 	ldw	r2,-4(fp)
    aa70:	10800217 	ldw	r2,8(r2)
    aa74:	18800035 	stwio	r2,0(r3)

	//Charge Pump Setting
	//IOWR_32DIRECT(PLL_BASE, CPS_COUNTER, pll_cfg->CPS_cnt);

	//
	IOWR_32DIRECT(PLL_BASE, VCO_DIV, pll_cfg->VCO_div);
    aa78:	e0bffe17 	ldw	r2,-8(fp)
    aa7c:	10801c04 	addi	r2,r2,112
    aa80:	1007883a 	mov	r3,r2
    aa84:	e0bfff17 	ldw	r2,-4(fp)
    aa88:	10800717 	ldw	r2,28(r2)
    aa8c:	18800035 	stwio	r2,0(r3)


	return PLLCFG_NOERR; //start_Reconfig(PLL_BASE);
    aa90:	0005883a 	mov	r2,zero

	//printf(" \n Full configuration is completed !! Verify with Scope \n");
}
    aa94:	e037883a 	mov	sp,fp
    aa98:	df000017 	ldw	fp,0(sp)
    aa9c:	dec00104 	addi	sp,sp,4
    aaa0:	f800283a 	ret

0000aaa4 <set_CxCnt>:


uint8_t set_CxCnt(uint32_t PLL_BASE, uint32_t CxVal)
{
    aaa4:	defffd04 	addi	sp,sp,-12
    aaa8:	df000215 	stw	fp,8(sp)
    aaac:	df000204 	addi	fp,sp,8
    aab0:	e13ffe15 	stw	r4,-8(fp)
    aab4:	e17fff15 	stw	r5,-4(fp)

 	//IOWR_32DIRECT(PLL_BASE, C_COUNTER, val | (Cx << 18));
	IOWR_32DIRECT(PLL_BASE, C_COUNTER, CxVal);
    aab8:	e0bffe17 	ldw	r2,-8(fp)
    aabc:	10800504 	addi	r2,r2,20
    aac0:	1007883a 	mov	r3,r2
    aac4:	e0bfff17 	ldw	r2,-4(fp)
    aac8:	18800035 	stwio	r2,0(r3)

	return PLLCFG_NOERR;
    aacc:	0005883a 	mov	r2,zero
}
    aad0:	e037883a 	mov	sp,fp
    aad4:	df000017 	ldw	fp,0(sp)
    aad8:	dec00104 	addi	sp,sp,4
    aadc:	f800283a 	ret

0000aae0 <set_Phase>:

uint8_t set_Phase(uint32_t PLL_BASE, uint32_t Cx, uint32_t val, uint32_t dir)
{
    aae0:	defffa04 	addi	sp,sp,-24
    aae4:	df000515 	stw	fp,20(sp)
    aae8:	df000504 	addi	fp,sp,20
    aaec:	e13ffc15 	stw	r4,-16(fp)
    aaf0:	e17ffd15 	stw	r5,-12(fp)
    aaf4:	e1bffe15 	stw	r6,-8(fp)
    aaf8:	e1ffff15 	stw	r7,-4(fp)
	uint32_t dps;

	dps = val;
    aafc:	e0bffe17 	ldw	r2,-8(fp)
    ab00:	e0bffb15 	stw	r2,-20(fp)
	dps = dps | ((Cx & 0x1F) << 16);
    ab04:	e0bffd17 	ldw	r2,-12(fp)
    ab08:	108007cc 	andi	r2,r2,31
    ab0c:	1004943a 	slli	r2,r2,16
    ab10:	e0fffb17 	ldw	r3,-20(fp)
    ab14:	1884b03a 	or	r2,r3,r2
    ab18:	e0bffb15 	stw	r2,-20(fp)
	dps = dps | ((dir & 0x01) << 21);
    ab1c:	e0bfff17 	ldw	r2,-4(fp)
    ab20:	1080004c 	andi	r2,r2,1
    ab24:	1004957a 	slli	r2,r2,21
    ab28:	e0fffb17 	ldw	r3,-20(fp)
    ab2c:	1884b03a 	or	r2,r3,r2
    ab30:	e0bffb15 	stw	r2,-20(fp)

 	IOWR_32DIRECT(PLL_BASE, DPS_COUNTER, dps);
    ab34:	e0bffc17 	ldw	r2,-16(fp)
    ab38:	10800604 	addi	r2,r2,24
    ab3c:	1007883a 	mov	r3,r2
    ab40:	e0bffb17 	ldw	r2,-20(fp)
    ab44:	18800035 	stwio	r2,0(r3)

	return PLLCFG_NOERR;
    ab48:	0005883a 	mov	r2,zero
}
    ab4c:	e037883a 	mov	sp,fp
    ab50:	df000017 	ldw	fp,0(sp)
    ab54:	dec00104 	addi	sp,sp,4
    ab58:	f800283a 	ret

0000ab5c <start_Reconfig>:

uint8_t start_Reconfig(uint32_t PLL_BASE)
{
    ab5c:	defffc04 	addi	sp,sp,-16
    ab60:	df000315 	stw	fp,12(sp)
    ab64:	df000304 	addi	fp,sp,12
    ab68:	e13fff15 	stw	r4,-4(fp)
	unsigned int status_reconfig, timeout;

	//Write anything to Start Register to Reconfiguration
	IOWR_32DIRECT(PLL_BASE, START, 0x01);
    ab6c:	e0bfff17 	ldw	r2,-4(fp)
    ab70:	10800204 	addi	r2,r2,8
    ab74:	1007883a 	mov	r3,r2
    ab78:	00800044 	movi	r2,1
    ab7c:	18800035 	stwio	r2,0(r3)

	timeout = 0;
    ab80:	e03ffd15 	stw	zero,-12(fp)
	do
	{
	  	status_reconfig = IORD_32DIRECT(PLL_BASE, STATUS);
    ab84:	e0bfff17 	ldw	r2,-4(fp)
    ab88:	10800104 	addi	r2,r2,4
    ab8c:	10800037 	ldwio	r2,0(r2)
    ab90:	e0bffe15 	stw	r2,-8(fp)
	  	if (timeout++ > PLLCFG_TIMEOUT) return PLLCFG_CX_TIMEOUT;
    ab94:	e0fffd17 	ldw	r3,-12(fp)
    ab98:	18800044 	addi	r2,r3,1
    ab9c:	e0bffd15 	stw	r2,-12(fp)
    aba0:	008000b4 	movhi	r2,2
    aba4:	10a1a804 	addi	r2,r2,-31072
    aba8:	10c0022e 	bgeu	r2,r3,abb4 <start_Reconfig+0x58>
    abac:	00800284 	movi	r2,10
    abb0:	00000306 	br	abc0 <start_Reconfig+0x64>
	}
	while ((!status_reconfig) & 0x01);
    abb4:	e0bffe17 	ldw	r2,-8(fp)
    abb8:	103ff226 	beq	r2,zero,ab84 <_gp+0xffff6640>

	return PLLCFG_NOERR;
    abbc:	0005883a 	mov	r2,zero
}
    abc0:	e037883a 	mov	sp,fp
    abc4:	df000017 	ldw	fp,0(sp)
    abc8:	dec00104 	addi	sp,sp,4
    abcc:	f800283a 	ret

0000abd0 <__divsi3>:
    abd0:	20001b16 	blt	r4,zero,ac40 <__divsi3+0x70>
    abd4:	000f883a 	mov	r7,zero
    abd8:	28001616 	blt	r5,zero,ac34 <__divsi3+0x64>
    abdc:	200d883a 	mov	r6,r4
    abe0:	29001a2e 	bgeu	r5,r4,ac4c <__divsi3+0x7c>
    abe4:	00800804 	movi	r2,32
    abe8:	00c00044 	movi	r3,1
    abec:	00000106 	br	abf4 <__divsi3+0x24>
    abf0:	10000d26 	beq	r2,zero,ac28 <__divsi3+0x58>
    abf4:	294b883a 	add	r5,r5,r5
    abf8:	10bfffc4 	addi	r2,r2,-1
    abfc:	18c7883a 	add	r3,r3,r3
    ac00:	293ffb36 	bltu	r5,r4,abf0 <_gp+0xffff66ac>
    ac04:	0005883a 	mov	r2,zero
    ac08:	18000726 	beq	r3,zero,ac28 <__divsi3+0x58>
    ac0c:	0005883a 	mov	r2,zero
    ac10:	31400236 	bltu	r6,r5,ac1c <__divsi3+0x4c>
    ac14:	314dc83a 	sub	r6,r6,r5
    ac18:	10c4b03a 	or	r2,r2,r3
    ac1c:	1806d07a 	srli	r3,r3,1
    ac20:	280ad07a 	srli	r5,r5,1
    ac24:	183ffa1e 	bne	r3,zero,ac10 <_gp+0xffff66cc>
    ac28:	38000126 	beq	r7,zero,ac30 <__divsi3+0x60>
    ac2c:	0085c83a 	sub	r2,zero,r2
    ac30:	f800283a 	ret
    ac34:	014bc83a 	sub	r5,zero,r5
    ac38:	39c0005c 	xori	r7,r7,1
    ac3c:	003fe706 	br	abdc <_gp+0xffff6698>
    ac40:	0109c83a 	sub	r4,zero,r4
    ac44:	01c00044 	movi	r7,1
    ac48:	003fe306 	br	abd8 <_gp+0xffff6694>
    ac4c:	00c00044 	movi	r3,1
    ac50:	003fee06 	br	ac0c <_gp+0xffff66c8>

0000ac54 <__modsi3>:
    ac54:	20001716 	blt	r4,zero,acb4 <__modsi3+0x60>
    ac58:	000f883a 	mov	r7,zero
    ac5c:	2005883a 	mov	r2,r4
    ac60:	28001216 	blt	r5,zero,acac <__modsi3+0x58>
    ac64:	2900162e 	bgeu	r5,r4,acc0 <__modsi3+0x6c>
    ac68:	01800804 	movi	r6,32
    ac6c:	00c00044 	movi	r3,1
    ac70:	00000106 	br	ac78 <__modsi3+0x24>
    ac74:	30000a26 	beq	r6,zero,aca0 <__modsi3+0x4c>
    ac78:	294b883a 	add	r5,r5,r5
    ac7c:	31bfffc4 	addi	r6,r6,-1
    ac80:	18c7883a 	add	r3,r3,r3
    ac84:	293ffb36 	bltu	r5,r4,ac74 <_gp+0xffff6730>
    ac88:	18000526 	beq	r3,zero,aca0 <__modsi3+0x4c>
    ac8c:	1806d07a 	srli	r3,r3,1
    ac90:	11400136 	bltu	r2,r5,ac98 <__modsi3+0x44>
    ac94:	1145c83a 	sub	r2,r2,r5
    ac98:	280ad07a 	srli	r5,r5,1
    ac9c:	183ffb1e 	bne	r3,zero,ac8c <_gp+0xffff6748>
    aca0:	38000126 	beq	r7,zero,aca8 <__modsi3+0x54>
    aca4:	0085c83a 	sub	r2,zero,r2
    aca8:	f800283a 	ret
    acac:	014bc83a 	sub	r5,zero,r5
    acb0:	003fec06 	br	ac64 <_gp+0xffff6720>
    acb4:	0109c83a 	sub	r4,zero,r4
    acb8:	01c00044 	movi	r7,1
    acbc:	003fe706 	br	ac5c <_gp+0xffff6718>
    acc0:	00c00044 	movi	r3,1
    acc4:	003ff106 	br	ac8c <_gp+0xffff6748>

0000acc8 <__udivsi3>:
    acc8:	200d883a 	mov	r6,r4
    accc:	2900152e 	bgeu	r5,r4,ad24 <__udivsi3+0x5c>
    acd0:	28001416 	blt	r5,zero,ad24 <__udivsi3+0x5c>
    acd4:	00800804 	movi	r2,32
    acd8:	00c00044 	movi	r3,1
    acdc:	00000206 	br	ace8 <__udivsi3+0x20>
    ace0:	10000e26 	beq	r2,zero,ad1c <__udivsi3+0x54>
    ace4:	28000516 	blt	r5,zero,acfc <__udivsi3+0x34>
    ace8:	294b883a 	add	r5,r5,r5
    acec:	10bfffc4 	addi	r2,r2,-1
    acf0:	18c7883a 	add	r3,r3,r3
    acf4:	293ffa36 	bltu	r5,r4,ace0 <_gp+0xffff679c>
    acf8:	18000826 	beq	r3,zero,ad1c <__udivsi3+0x54>
    acfc:	0005883a 	mov	r2,zero
    ad00:	31400236 	bltu	r6,r5,ad0c <__udivsi3+0x44>
    ad04:	314dc83a 	sub	r6,r6,r5
    ad08:	10c4b03a 	or	r2,r2,r3
    ad0c:	1806d07a 	srli	r3,r3,1
    ad10:	280ad07a 	srli	r5,r5,1
    ad14:	183ffa1e 	bne	r3,zero,ad00 <_gp+0xffff67bc>
    ad18:	f800283a 	ret
    ad1c:	0005883a 	mov	r2,zero
    ad20:	f800283a 	ret
    ad24:	00c00044 	movi	r3,1
    ad28:	003ff406 	br	acfc <_gp+0xffff67b8>

0000ad2c <__umodsi3>:
    ad2c:	2005883a 	mov	r2,r4
    ad30:	2900122e 	bgeu	r5,r4,ad7c <__umodsi3+0x50>
    ad34:	28001116 	blt	r5,zero,ad7c <__umodsi3+0x50>
    ad38:	01800804 	movi	r6,32
    ad3c:	00c00044 	movi	r3,1
    ad40:	00000206 	br	ad4c <__umodsi3+0x20>
    ad44:	30000c26 	beq	r6,zero,ad78 <__umodsi3+0x4c>
    ad48:	28000516 	blt	r5,zero,ad60 <__umodsi3+0x34>
    ad4c:	294b883a 	add	r5,r5,r5
    ad50:	31bfffc4 	addi	r6,r6,-1
    ad54:	18c7883a 	add	r3,r3,r3
    ad58:	293ffa36 	bltu	r5,r4,ad44 <_gp+0xffff6800>
    ad5c:	18000626 	beq	r3,zero,ad78 <__umodsi3+0x4c>
    ad60:	1806d07a 	srli	r3,r3,1
    ad64:	11400136 	bltu	r2,r5,ad6c <__umodsi3+0x40>
    ad68:	1145c83a 	sub	r2,r2,r5
    ad6c:	280ad07a 	srli	r5,r5,1
    ad70:	183ffb1e 	bne	r3,zero,ad60 <_gp+0xffff681c>
    ad74:	f800283a 	ret
    ad78:	f800283a 	ret
    ad7c:	00c00044 	movi	r3,1
    ad80:	003ff706 	br	ad60 <_gp+0xffff681c>

0000ad84 <__mulsi3>:
    ad84:	0005883a 	mov	r2,zero
    ad88:	20000726 	beq	r4,zero,ada8 <__mulsi3+0x24>
    ad8c:	20c0004c 	andi	r3,r4,1
    ad90:	2008d07a 	srli	r4,r4,1
    ad94:	18000126 	beq	r3,zero,ad9c <__mulsi3+0x18>
    ad98:	1145883a 	add	r2,r2,r5
    ad9c:	294b883a 	add	r5,r5,r5
    ada0:	203ffa1e 	bne	r4,zero,ad8c <_gp+0xffff6848>
    ada4:	f800283a 	ret
    ada8:	f800283a 	ret

0000adac <memset>:
    adac:	2005883a 	mov	r2,r4
    adb0:	2007883a 	mov	r3,r4
    adb4:	218d883a 	add	r6,r4,r6
    adb8:	19800326 	beq	r3,r6,adc8 <memset+0x1c>
    adbc:	19400005 	stb	r5,0(r3)
    adc0:	18c00044 	addi	r3,r3,1
    adc4:	003ffc06 	br	adb8 <_gp+0xffff6874>
    adc8:	f800283a 	ret

0000adcc <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    adcc:	defffc04 	addi	sp,sp,-16
    add0:	df000315 	stw	fp,12(sp)
    add4:	df000304 	addi	fp,sp,12
    add8:	e13ffd15 	stw	r4,-12(fp)
    addc:	e17ffe15 	stw	r5,-8(fp)
    ade0:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    ade4:	e0fffe17 	ldw	r3,-8(fp)
    ade8:	e0bffd17 	ldw	r2,-12(fp)
    adec:	18800c26 	beq	r3,r2,ae20 <alt_load_section+0x54>
  {
    while( to != end )
    adf0:	00000806 	br	ae14 <alt_load_section+0x48>
    {
      *to++ = *from++;
    adf4:	e0bffe17 	ldw	r2,-8(fp)
    adf8:	10c00104 	addi	r3,r2,4
    adfc:	e0fffe15 	stw	r3,-8(fp)
    ae00:	e0fffd17 	ldw	r3,-12(fp)
    ae04:	19000104 	addi	r4,r3,4
    ae08:	e13ffd15 	stw	r4,-12(fp)
    ae0c:	18c00017 	ldw	r3,0(r3)
    ae10:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    ae14:	e0fffe17 	ldw	r3,-8(fp)
    ae18:	e0bfff17 	ldw	r2,-4(fp)
    ae1c:	18bff51e 	bne	r3,r2,adf4 <_gp+0xffff68b0>
    {
      *to++ = *from++;
    }
  }
}
    ae20:	0001883a 	nop
    ae24:	e037883a 	mov	sp,fp
    ae28:	df000017 	ldw	fp,0(sp)
    ae2c:	dec00104 	addi	sp,sp,4
    ae30:	f800283a 	ret

0000ae34 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    ae34:	defffe04 	addi	sp,sp,-8
    ae38:	dfc00115 	stw	ra,4(sp)
    ae3c:	df000015 	stw	fp,0(sp)
    ae40:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    ae44:	01800074 	movhi	r6,1
    ae48:	31b15c04 	addi	r6,r6,-14992
    ae4c:	01400074 	movhi	r5,1
    ae50:	2970a404 	addi	r5,r5,-15728
    ae54:	01000074 	movhi	r4,1
    ae58:	21315c04 	addi	r4,r4,-14992
    ae5c:	000adcc0 	call	adcc <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    ae60:	01800074 	movhi	r6,1
    ae64:	31a00804 	addi	r6,r6,-32736
    ae68:	01400074 	movhi	r5,1
    ae6c:	29600804 	addi	r5,r5,-32736
    ae70:	01000074 	movhi	r4,1
    ae74:	21200804 	addi	r4,r4,-32736
    ae78:	000adcc0 	call	adcc <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    ae7c:	01800074 	movhi	r6,1
    ae80:	31b0a404 	addi	r6,r6,-15728
    ae84:	01400074 	movhi	r5,1
    ae88:	29709704 	addi	r5,r5,-15780
    ae8c:	01000074 	movhi	r4,1
    ae90:	21309704 	addi	r4,r4,-15780
    ae94:	000adcc0 	call	adcc <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    ae98:	000b7f80 	call	b7f8 <alt_dcache_flush_all>
  alt_icache_flush_all();
    ae9c:	000b9240 	call	b924 <alt_icache_flush_all>
}
    aea0:	0001883a 	nop
    aea4:	e037883a 	mov	sp,fp
    aea8:	dfc00117 	ldw	ra,4(sp)
    aeac:	df000017 	ldw	fp,0(sp)
    aeb0:	dec00204 	addi	sp,sp,8
    aeb4:	f800283a 	ret

0000aeb8 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    aeb8:	defffd04 	addi	sp,sp,-12
    aebc:	dfc00215 	stw	ra,8(sp)
    aec0:	df000115 	stw	fp,4(sp)
    aec4:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    aec8:	0009883a 	mov	r4,zero
    aecc:	000af580 	call	af58 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    aed0:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    aed4:	000af900 	call	af90 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    aed8:	01800074 	movhi	r6,1
    aedc:	31b09704 	addi	r6,r6,-15780
    aee0:	01400074 	movhi	r5,1
    aee4:	29709704 	addi	r5,r5,-15780
    aee8:	01000074 	movhi	r4,1
    aeec:	21309704 	addi	r4,r4,-15780
    aef0:	000ba280 	call	ba28 <alt_io_redirect>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    aef4:	d0a0c417 	ldw	r2,-31984(gp)
    aef8:	d0e0c517 	ldw	r3,-31980(gp)
    aefc:	d120c617 	ldw	r4,-31976(gp)
    af00:	200d883a 	mov	r6,r4
    af04:	180b883a 	mov	r5,r3
    af08:	1009883a 	mov	r4,r2
    af0c:	00093200 	call	9320 <main>
    af10:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    af14:	01000044 	movi	r4,1
    af18:	000b7200 	call	b720 <close>
  exit (result);
    af1c:	e13fff17 	ldw	r4,-4(fp)
    af20:	000c02c0 	call	c02c <exit>

0000af24 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    af24:	defffd04 	addi	sp,sp,-12
    af28:	dfc00215 	stw	ra,8(sp)
    af2c:	df000115 	stw	fp,4(sp)
    af30:	df000104 	addi	fp,sp,4
    af34:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    af38:	d1600504 	addi	r5,gp,-32748
    af3c:	e13fff17 	ldw	r4,-4(fp)
    af40:	000b8800 	call	b880 <alt_dev_llist_insert>
}
    af44:	e037883a 	mov	sp,fp
    af48:	dfc00117 	ldw	ra,4(sp)
    af4c:	df000017 	ldw	fp,0(sp)
    af50:	dec00204 	addi	sp,sp,8
    af54:	f800283a 	ret

0000af58 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    af58:	defffd04 	addi	sp,sp,-12
    af5c:	dfc00215 	stw	ra,8(sp)
    af60:	df000115 	stw	fp,4(sp)
    af64:	df000104 	addi	fp,sp,4
    af68:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_CPU, nios2_cpu);
    af6c:	000bdac0 	call	bdac <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    af70:	00800044 	movi	r2,1
    af74:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    af78:	0001883a 	nop
    af7c:	e037883a 	mov	sp,fp
    af80:	dfc00117 	ldw	ra,4(sp)
    af84:	df000017 	ldw	fp,0(sp)
    af88:	dec00204 	addi	sp,sp,8
    af8c:	f800283a 	ret

0000af90 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    af90:	defffe04 	addi	sp,sp,-8
    af94:	dfc00115 	stw	ra,4(sp)
    af98:	df000015 	stw	fp,0(sp)
    af9c:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
    afa0:	01000074 	movhi	r4,1
    afa4:	2130a404 	addi	r4,r4,-15728
    afa8:	000af240 	call	af24 <alt_dev_reg>
    ALTERA_AVALON_SPI_INIT ( DAC_SPI1, dac_spi1);
    afac:	0001883a 	nop
    ALTERA_AVALON_SPI_INIT ( FPGA_SPI0, fpga_spi0);
    afb0:	0001883a 	nop
    ALTERA_AVALON_SPI_INIT ( PLLCFG_SPI, PLLCFG_SPI);
    afb4:	0001883a 	nop
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
    afb8:	0001883a 	nop
    I2C_OPENCORES_INIT ( I2C_OPENCORES_0, i2c_opencores_0);
    afbc:	0001883a 	nop
}
    afc0:	0001883a 	nop
    afc4:	e037883a 	mov	sp,fp
    afc8:	dfc00117 	ldw	ra,4(sp)
    afcc:	df000017 	ldw	fp,0(sp)
    afd0:	dec00204 	addi	sp,sp,8
    afd4:	f800283a 	ret

0000afd8 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    afd8:	defffa04 	addi	sp,sp,-24
    afdc:	dfc00515 	stw	ra,20(sp)
    afe0:	df000415 	stw	fp,16(sp)
    afe4:	df000404 	addi	fp,sp,16
    afe8:	e13ffd15 	stw	r4,-12(fp)
    afec:	e17ffe15 	stw	r5,-8(fp)
    aff0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    aff4:	e0bffd17 	ldw	r2,-12(fp)
    aff8:	10800017 	ldw	r2,0(r2)
    affc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    b000:	e0bffc17 	ldw	r2,-16(fp)
    b004:	10c00a04 	addi	r3,r2,40
    b008:	e0bffd17 	ldw	r2,-12(fp)
    b00c:	10800217 	ldw	r2,8(r2)
    b010:	100f883a 	mov	r7,r2
    b014:	e1bfff17 	ldw	r6,-4(fp)
    b018:	e17ffe17 	ldw	r5,-8(fp)
    b01c:	1809883a 	mov	r4,r3
    b020:	000b0980 	call	b098 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    b024:	e037883a 	mov	sp,fp
    b028:	dfc00117 	ldw	ra,4(sp)
    b02c:	df000017 	ldw	fp,0(sp)
    b030:	dec00204 	addi	sp,sp,8
    b034:	f800283a 	ret

0000b038 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    b038:	defffa04 	addi	sp,sp,-24
    b03c:	dfc00515 	stw	ra,20(sp)
    b040:	df000415 	stw	fp,16(sp)
    b044:	df000404 	addi	fp,sp,16
    b048:	e13ffd15 	stw	r4,-12(fp)
    b04c:	e17ffe15 	stw	r5,-8(fp)
    b050:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    b054:	e0bffd17 	ldw	r2,-12(fp)
    b058:	10800017 	ldw	r2,0(r2)
    b05c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    b060:	e0bffc17 	ldw	r2,-16(fp)
    b064:	10c00a04 	addi	r3,r2,40
    b068:	e0bffd17 	ldw	r2,-12(fp)
    b06c:	10800217 	ldw	r2,8(r2)
    b070:	100f883a 	mov	r7,r2
    b074:	e1bfff17 	ldw	r6,-4(fp)
    b078:	e17ffe17 	ldw	r5,-8(fp)
    b07c:	1809883a 	mov	r4,r3
    b080:	000b1840 	call	b184 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    b084:	e037883a 	mov	sp,fp
    b088:	dfc00117 	ldw	ra,4(sp)
    b08c:	df000017 	ldw	fp,0(sp)
    b090:	dec00204 	addi	sp,sp,8
    b094:	f800283a 	ret

0000b098 <altera_avalon_jtag_uart_read>:
 */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
    b098:	defff704 	addi	sp,sp,-36
    b09c:	df000815 	stw	fp,32(sp)
    b0a0:	df000804 	addi	fp,sp,32
    b0a4:	e13ffc15 	stw	r4,-16(fp)
    b0a8:	e17ffd15 	stw	r5,-12(fp)
    b0ac:	e1bffe15 	stw	r6,-8(fp)
    b0b0:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
    b0b4:	e0bffc17 	ldw	r2,-16(fp)
    b0b8:	10800017 	ldw	r2,0(r2)
    b0bc:	e0bff915 	stw	r2,-28(fp)

  char * ptr = buffer;
    b0c0:	e0bffd17 	ldw	r2,-12(fp)
    b0c4:	e0bff815 	stw	r2,-32(fp)
  char * end = buffer + space;
    b0c8:	e0bffe17 	ldw	r2,-8(fp)
    b0cc:	e0fffd17 	ldw	r3,-12(fp)
    b0d0:	1885883a 	add	r2,r3,r2
    b0d4:	e0bffa15 	stw	r2,-24(fp)

  while (ptr < end)
    b0d8:	00001206 	br	b124 <altera_avalon_jtag_uart_read+0x8c>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    b0dc:	e0bff917 	ldw	r2,-28(fp)
    b0e0:	10800037 	ldwio	r2,0(r2)
    b0e4:	e0bffb15 	stw	r2,-20(fp)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
    b0e8:	e0bffb17 	ldw	r2,-20(fp)
    b0ec:	10a0000c 	andi	r2,r2,32768
    b0f0:	10000626 	beq	r2,zero,b10c <altera_avalon_jtag_uart_read+0x74>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    b0f4:	e0bff817 	ldw	r2,-32(fp)
    b0f8:	10c00044 	addi	r3,r2,1
    b0fc:	e0fff815 	stw	r3,-32(fp)
    b100:	e0fffb17 	ldw	r3,-20(fp)
    b104:	10c00005 	stb	r3,0(r2)
    b108:	00000606 	br	b124 <altera_avalon_jtag_uart_read+0x8c>
    else if (ptr != buffer)
    b10c:	e0fff817 	ldw	r3,-32(fp)
    b110:	e0bffd17 	ldw	r2,-12(fp)
    b114:	1880071e 	bne	r3,r2,b134 <altera_avalon_jtag_uart_read+0x9c>
      break;
    else if(flags & O_NONBLOCK)
    b118:	e0bfff17 	ldw	r2,-4(fp)
    b11c:	1090000c 	andi	r2,r2,16384
    b120:	1000061e 	bne	r2,zero,b13c <altera_avalon_jtag_uart_read+0xa4>
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
    b124:	e0fff817 	ldw	r3,-32(fp)
    b128:	e0bffa17 	ldw	r2,-24(fp)
    b12c:	18bfeb36 	bltu	r3,r2,b0dc <_gp+0xffff6b98>
    b130:	00000306 	br	b140 <altera_avalon_jtag_uart_read+0xa8>
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
    b134:	0001883a 	nop
    b138:	00000106 	br	b140 <altera_avalon_jtag_uart_read+0xa8>
    else if(flags & O_NONBLOCK)
      break;   
    b13c:	0001883a 	nop
    
  }

  if (ptr != buffer)
    b140:	e0fff817 	ldw	r3,-32(fp)
    b144:	e0bffd17 	ldw	r2,-12(fp)
    b148:	18800426 	beq	r3,r2,b15c <altera_avalon_jtag_uart_read+0xc4>
    return ptr - buffer;
    b14c:	e0fff817 	ldw	r3,-32(fp)
    b150:	e0bffd17 	ldw	r2,-12(fp)
    b154:	1885c83a 	sub	r2,r3,r2
    b158:	00000606 	br	b174 <altera_avalon_jtag_uart_read+0xdc>
  else if (flags & O_NONBLOCK)
    b15c:	e0bfff17 	ldw	r2,-4(fp)
    b160:	1090000c 	andi	r2,r2,16384
    b164:	10000226 	beq	r2,zero,b170 <altera_avalon_jtag_uart_read+0xd8>
    return -EWOULDBLOCK;
    b168:	00bffd44 	movi	r2,-11
    b16c:	00000106 	br	b174 <altera_avalon_jtag_uart_read+0xdc>
  else
    return -EIO;
    b170:	00bffec4 	movi	r2,-5
}
    b174:	e037883a 	mov	sp,fp
    b178:	df000017 	ldw	fp,0(sp)
    b17c:	dec00104 	addi	sp,sp,4
    b180:	f800283a 	ret

0000b184 <altera_avalon_jtag_uart_write>:
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    b184:	defff904 	addi	sp,sp,-28
    b188:	df000615 	stw	fp,24(sp)
    b18c:	df000604 	addi	fp,sp,24
    b190:	e13ffc15 	stw	r4,-16(fp)
    b194:	e17ffd15 	stw	r5,-12(fp)
    b198:	e1bffe15 	stw	r6,-8(fp)
    b19c:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
    b1a0:	e0bffc17 	ldw	r2,-16(fp)
    b1a4:	10800017 	ldw	r2,0(r2)
    b1a8:	e0bffa15 	stw	r2,-24(fp)

  const char * end = ptr + count;
    b1ac:	e0bffe17 	ldw	r2,-8(fp)
    b1b0:	e0fffd17 	ldw	r3,-12(fp)
    b1b4:	1885883a 	add	r2,r3,r2
    b1b8:	e0bffb15 	stw	r2,-20(fp)

  while (ptr < end)
    b1bc:	00000e06 	br	b1f8 <altera_avalon_jtag_uart_write+0x74>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    b1c0:	e0bffa17 	ldw	r2,-24(fp)
    b1c4:	10800104 	addi	r2,r2,4
    b1c8:	10800037 	ldwio	r2,0(r2)
    b1cc:	10bfffec 	andhi	r2,r2,65535
    b1d0:	10000926 	beq	r2,zero,b1f8 <altera_avalon_jtag_uart_write+0x74>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    b1d4:	e0fffa17 	ldw	r3,-24(fp)
    b1d8:	e0bffd17 	ldw	r2,-12(fp)
    b1dc:	11000044 	addi	r4,r2,1
    b1e0:	e13ffd15 	stw	r4,-12(fp)
    b1e4:	10800003 	ldbu	r2,0(r2)
    b1e8:	10803fcc 	andi	r2,r2,255
    b1ec:	1080201c 	xori	r2,r2,128
    b1f0:	10bfe004 	addi	r2,r2,-128
    b1f4:	18800035 	stwio	r2,0(r3)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
    b1f8:	e0fffd17 	ldw	r3,-12(fp)
    b1fc:	e0bffb17 	ldw	r2,-20(fp)
    b200:	18bfef36 	bltu	r3,r2,b1c0 <_gp+0xffff6c7c>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
    b204:	e0bffe17 	ldw	r2,-8(fp)
}
    b208:	e037883a 	mov	sp,fp
    b20c:	df000017 	ldw	fp,0(sp)
    b210:	dec00104 	addi	sp,sp,4
    b214:	f800283a 	ret

0000b218 <alt_avalon_spi_command>:

int alt_avalon_spi_command(alt_u32 base, alt_u32 slave,
                           alt_u32 write_length, const alt_u8 * write_data,
                           alt_u32 read_length, alt_u8 * read_data,
                           alt_u32 flags)
{
    b218:	defff404 	addi	sp,sp,-48
    b21c:	df000b15 	stw	fp,44(sp)
    b220:	df000b04 	addi	fp,sp,44
    b224:	e13ffc15 	stw	r4,-16(fp)
    b228:	e17ffd15 	stw	r5,-12(fp)
    b22c:	e1bffe15 	stw	r6,-8(fp)
    b230:	e1ffff15 	stw	r7,-4(fp)
  const alt_u8 * write_end = write_data + write_length;
    b234:	e0ffff17 	ldw	r3,-4(fp)
    b238:	e0bffe17 	ldw	r2,-8(fp)
    b23c:	1885883a 	add	r2,r3,r2
    b240:	e0bff815 	stw	r2,-32(fp)
  alt_u8 * read_end = read_data + read_length;
    b244:	e0c00217 	ldw	r3,8(fp)
    b248:	e0800117 	ldw	r2,4(fp)
    b24c:	1885883a 	add	r2,r3,r2
    b250:	e0bff915 	stw	r2,-28(fp)

  alt_u32 write_zeros = read_length;
    b254:	e0800117 	ldw	r2,4(fp)
    b258:	e0bff515 	stw	r2,-44(fp)
  alt_u32 read_ignore = write_length;
    b25c:	e0bffe17 	ldw	r2,-8(fp)
    b260:	e0bff615 	stw	r2,-40(fp)

  /* We must not send more than two bytes to the target before it has
   * returned any as otherwise it will overflow. */
  /* Unfortunately the hardware does not seem to work with credits > 1,
   * leave it at 1 for now. */
  alt_32 credits = 1;
    b264:	00800044 	movi	r2,1
    b268:	e0bff715 	stw	r2,-36(fp)
  /* Warning: this function is not currently safe if called in a multi-threaded
   * environment, something above must perform locking to make it safe if more
   * than one thread intends to use it.
   */

  IOWR_ALTERA_AVALON_SPI_SLAVE_SEL(base, 1 << slave);
    b26c:	e0bffc17 	ldw	r2,-16(fp)
    b270:	10800504 	addi	r2,r2,20
    b274:	1009883a 	mov	r4,r2
    b278:	00c00044 	movi	r3,1
    b27c:	e0bffd17 	ldw	r2,-12(fp)
    b280:	1884983a 	sll	r2,r3,r2
    b284:	20800035 	stwio	r2,0(r4)
  
  /* Set the SSO bit (force chipselect) only if the toggle flag is not set */
  if ((flags & ALT_AVALON_SPI_COMMAND_TOGGLE_SS_N) == 0) {
    b288:	e0800317 	ldw	r2,12(fp)
    b28c:	1080008c 	andi	r2,r2,2
    b290:	1000051e 	bne	r2,zero,b2a8 <alt_avalon_spi_command+0x90>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, ALTERA_AVALON_SPI_CONTROL_SSO_MSK);
    b294:	e0bffc17 	ldw	r2,-16(fp)
    b298:	10800304 	addi	r2,r2,12
    b29c:	1007883a 	mov	r3,r2
    b2a0:	00810004 	movi	r2,1024
    b2a4:	18800035 	stwio	r2,0(r3)
  /*
   * Discard any stale data present in the RXDATA register, in case
   * previous communication was interrupted and stale data was left
   * behind.
   */
  IORD_ALTERA_AVALON_SPI_RXDATA(base);
    b2a8:	e0bffc17 	ldw	r2,-16(fp)
    b2ac:	10800037 	ldwio	r2,0(r2)
  for ( ; ; )
  {
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    b2b0:	e0bffc17 	ldw	r2,-16(fp)
    b2b4:	10800204 	addi	r2,r2,8
    b2b8:	10800037 	ldwio	r2,0(r2)
    b2bc:	e0bffa15 	stw	r2,-24(fp)
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
    b2c0:	e0bffa17 	ldw	r2,-24(fp)
    b2c4:	1080100c 	andi	r2,r2,64
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
    b2c8:	10000226 	beq	r2,zero,b2d4 <alt_avalon_spi_command+0xbc>
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
    b2cc:	e0bff717 	ldw	r2,-36(fp)
    b2d0:	1000031e 	bne	r2,zero,b2e0 <alt_avalon_spi_command+0xc8>
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
    b2d4:	e0bffa17 	ldw	r2,-24(fp)
    b2d8:	1080200c 	andi	r2,r2,128
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
    b2dc:	103ff426 	beq	r2,zero,b2b0 <_gp+0xffff6d6c>
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);

    if ((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) != 0 && credits > 0)
    b2e0:	e0bffa17 	ldw	r2,-24(fp)
    b2e4:	1080100c 	andi	r2,r2,64
    b2e8:	10001e26 	beq	r2,zero,b364 <alt_avalon_spi_command+0x14c>
    b2ec:	e0bff717 	ldw	r2,-36(fp)
    b2f0:	00801c0e 	bge	zero,r2,b364 <alt_avalon_spi_command+0x14c>
    {
      credits--;
    b2f4:	e0bff717 	ldw	r2,-36(fp)
    b2f8:	10bfffc4 	addi	r2,r2,-1
    b2fc:	e0bff715 	stw	r2,-36(fp)

      if (write_data < write_end)
    b300:	e0ffff17 	ldw	r3,-4(fp)
    b304:	e0bff817 	ldw	r2,-32(fp)
    b308:	18800a2e 	bgeu	r3,r2,b334 <alt_avalon_spi_command+0x11c>
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, *write_data++);
    b30c:	e0bffc17 	ldw	r2,-16(fp)
    b310:	10800104 	addi	r2,r2,4
    b314:	1009883a 	mov	r4,r2
    b318:	e0bfff17 	ldw	r2,-4(fp)
    b31c:	10c00044 	addi	r3,r2,1
    b320:	e0ffff15 	stw	r3,-4(fp)
    b324:	10800003 	ldbu	r2,0(r2)
    b328:	10803fcc 	andi	r2,r2,255
    b32c:	20800035 	stwio	r2,0(r4)
    b330:	00000c06 	br	b364 <alt_avalon_spi_command+0x14c>
      else if (write_zeros > 0)
    b334:	e0bff517 	ldw	r2,-44(fp)
    b338:	10000826 	beq	r2,zero,b35c <alt_avalon_spi_command+0x144>
      {
        write_zeros--;
    b33c:	e0bff517 	ldw	r2,-44(fp)
    b340:	10bfffc4 	addi	r2,r2,-1
    b344:	e0bff515 	stw	r2,-44(fp)
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, 0);
    b348:	e0bffc17 	ldw	r2,-16(fp)
    b34c:	10800104 	addi	r2,r2,4
    b350:	0007883a 	mov	r3,zero
    b354:	10c00035 	stwio	r3,0(r2)
    b358:	00000206 	br	b364 <alt_avalon_spi_command+0x14c>
      }
      else
        credits = -1024;
    b35c:	00bf0004 	movi	r2,-1024
    b360:	e0bff715 	stw	r2,-36(fp)
    };

    if ((status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) != 0)
    b364:	e0bffa17 	ldw	r2,-24(fp)
    b368:	1080200c 	andi	r2,r2,128
    b36c:	103fd026 	beq	r2,zero,b2b0 <_gp+0xffff6d6c>
    {
      alt_u32 rxdata = IORD_ALTERA_AVALON_SPI_RXDATA(base);
    b370:	e0bffc17 	ldw	r2,-16(fp)
    b374:	10800037 	ldwio	r2,0(r2)
    b378:	e0bffb15 	stw	r2,-20(fp)

      if (read_ignore > 0)
    b37c:	e0bff617 	ldw	r2,-40(fp)
    b380:	10000426 	beq	r2,zero,b394 <alt_avalon_spi_command+0x17c>
        read_ignore--;
    b384:	e0bff617 	ldw	r2,-40(fp)
    b388:	10bfffc4 	addi	r2,r2,-1
    b38c:	e0bff615 	stw	r2,-40(fp)
    b390:	00000506 	br	b3a8 <alt_avalon_spi_command+0x190>
      else
        *read_data++ = (alt_u8)rxdata;
    b394:	e0800217 	ldw	r2,8(fp)
    b398:	10c00044 	addi	r3,r2,1
    b39c:	e0c00215 	stw	r3,8(fp)
    b3a0:	e0fffb17 	ldw	r3,-20(fp)
    b3a4:	10c00005 	stb	r3,0(r2)
      credits++;
    b3a8:	e0bff717 	ldw	r2,-36(fp)
    b3ac:	10800044 	addi	r2,r2,1
    b3b0:	e0bff715 	stw	r2,-36(fp)

      if (read_ignore == 0 && read_data == read_end)
    b3b4:	e0bff617 	ldw	r2,-40(fp)
    b3b8:	103fbd1e 	bne	r2,zero,b2b0 <_gp+0xffff6d6c>
    b3bc:	e0c00217 	ldw	r3,8(fp)
    b3c0:	e0bff917 	ldw	r2,-28(fp)
    b3c4:	18bfba1e 	bne	r3,r2,b2b0 <_gp+0xffff6d6c>
  }

  /* Wait until the interface has finished transmitting */
  do
  {
    status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    b3c8:	e0bffc17 	ldw	r2,-16(fp)
    b3cc:	10800204 	addi	r2,r2,8
    b3d0:	10800037 	ldwio	r2,0(r2)
    b3d4:	e0bffa15 	stw	r2,-24(fp)
  }
  while ((status & ALTERA_AVALON_SPI_STATUS_TMT_MSK) == 0);
    b3d8:	e0bffa17 	ldw	r2,-24(fp)
    b3dc:	1080080c 	andi	r2,r2,32
    b3e0:	103ff926 	beq	r2,zero,b3c8 <_gp+0xffff6e84>

  /* Clear SSO (release chipselect) unless the caller is going to
   * keep using this chip
   */
  if ((flags & ALT_AVALON_SPI_COMMAND_MERGE) == 0)
    b3e4:	e0800317 	ldw	r2,12(fp)
    b3e8:	1080004c 	andi	r2,r2,1
    b3ec:	1000041e 	bne	r2,zero,b400 <alt_avalon_spi_command+0x1e8>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, 0);
    b3f0:	e0bffc17 	ldw	r2,-16(fp)
    b3f4:	10800304 	addi	r2,r2,12
    b3f8:	0007883a 	mov	r3,zero
    b3fc:	10c00035 	stwio	r3,0(r2)

  return read_length;
    b400:	e0800117 	ldw	r2,4(fp)
}
    b404:	e037883a 	mov	sp,fp
    b408:	df000017 	ldw	fp,0(sp)
    b40c:	dec00104 	addi	sp,sp,4
    b410:	f800283a 	ret

0000b414 <I2C_init>:
      clk = freuqency of the clock driving this component  ( in Hz)
      speed = SCL speed ie 100K, 400K ...            (in Hz)
15-OCT-07 initial release
*****************************************************************/
void I2C_init(alt_u32 base,alt_u32 clk,alt_u32 speed)
{
    b414:	defffa04 	addi	sp,sp,-24
    b418:	dfc00515 	stw	ra,20(sp)
    b41c:	df000415 	stw	fp,16(sp)
    b420:	df000404 	addi	fp,sp,16
    b424:	e13ffd15 	stw	r4,-12(fp)
    b428:	e17ffe15 	stw	r5,-8(fp)
    b42c:	e1bfff15 	stw	r6,-4(fp)
  alt_u32 prescale = (clk/( 5 * speed))-1;
    b430:	01400144 	movi	r5,5
    b434:	e13fff17 	ldw	r4,-4(fp)
    b438:	000ad840 	call	ad84 <__mulsi3>
    b43c:	100b883a 	mov	r5,r2
    b440:	e13ffe17 	ldw	r4,-8(fp)
    b444:	000acc80 	call	acc8 <__udivsi3>
    b448:	10bfffc4 	addi	r2,r2,-1
    b44c:	e0bffc15 	stw	r2,-16(fp)
#ifdef  I2C_DEBUG
        printf(" Initializing  I2C at 0x%x, \n\twith clock speed 0x%x \n\tand SCL speed 0x%x \n\tand prescale 0x%x\n",base,clk,speed,prescale);
#endif
  IOWR_I2C_OPENCORES_CTR(base, 0x00); /* turn off the core*/
    b450:	e0bffd17 	ldw	r2,-12(fp)
    b454:	10800204 	addi	r2,r2,8
    b458:	0007883a 	mov	r3,zero
    b45c:	10c00035 	stwio	r3,0(r2)

  IOWR_I2C_OPENCORES_CR(base, I2C_OPENCORES_CR_IACK_MSK); /* clearn any pening IRQ*/
    b460:	e0bffd17 	ldw	r2,-12(fp)
    b464:	10800404 	addi	r2,r2,16
    b468:	1007883a 	mov	r3,r2
    b46c:	00800044 	movi	r2,1
    b470:	18800035 	stwio	r2,0(r3)

  IOWR_I2C_OPENCORES_PRERLO(base, (0xff & prescale));  /* load low presacle bit*/
    b474:	e0bffd17 	ldw	r2,-12(fp)
    b478:	e0fffc17 	ldw	r3,-16(fp)
    b47c:	18c03fcc 	andi	r3,r3,255
    b480:	10c00035 	stwio	r3,0(r2)

  IOWR_I2C_OPENCORES_PRERHI(base, (0xff & (prescale>>8)));  /* load upper prescale bit */
    b484:	e0bffd17 	ldw	r2,-12(fp)
    b488:	10800104 	addi	r2,r2,4
    b48c:	1007883a 	mov	r3,r2
    b490:	e0bffc17 	ldw	r2,-16(fp)
    b494:	1004d23a 	srli	r2,r2,8
    b498:	10803fcc 	andi	r2,r2,255
    b49c:	18800035 	stwio	r2,0(r3)

  IOWR_I2C_OPENCORES_CTR(base, I2C_OPENCORES_CTR_EN_MSK); /* turn on the core*/
    b4a0:	e0bffd17 	ldw	r2,-12(fp)
    b4a4:	10800204 	addi	r2,r2,8
    b4a8:	1007883a 	mov	r3,r2
    b4ac:	00802004 	movi	r2,128
    b4b0:	18800035 	stwio	r2,0(r3)

}
    b4b4:	0001883a 	nop
    b4b8:	e037883a 	mov	sp,fp
    b4bc:	dfc00117 	ldw	ra,4(sp)
    b4c0:	df000017 	ldw	fp,0(sp)
    b4c4:	dec00204 	addi	sp,sp,8
    b4c8:	f800283a 	ret

0000b4cc <I2C_start>:
       0 if address is acknowledged
       1 if address was not acknowledged
15-OCT-07 initial release
*****************************************************************/
int I2C_start(alt_u32 base, alt_u32 add, alt_u32 read)
{
    b4cc:	defffb04 	addi	sp,sp,-20
    b4d0:	df000415 	stw	fp,16(sp)
    b4d4:	df000404 	addi	fp,sp,16
    b4d8:	e13ffd15 	stw	r4,-12(fp)
    b4dc:	e17ffe15 	stw	r5,-8(fp)
    b4e0:	e1bfff15 	stw	r6,-4(fp)
	int retries = 0;
    b4e4:	e03ffc15 	stw	zero,-16(fp)
#ifdef  I2C_DEBUG
        printf(" Start  I2C at 0x%x, \n\twith address 0x%x \n\tand read 0x%x \n\tand prescale 0x%x\n",base,add,read);
#endif

          /* transmit the address shifted by one and the read/write bit*/
  IOWR_I2C_OPENCORES_TXR(base, ((add<<1) + (0x1 & read)));
    b4e8:	e0bffd17 	ldw	r2,-12(fp)
    b4ec:	10800304 	addi	r2,r2,12
    b4f0:	1007883a 	mov	r3,r2
    b4f4:	e0bffe17 	ldw	r2,-8(fp)
    b4f8:	1085883a 	add	r2,r2,r2
    b4fc:	1009883a 	mov	r4,r2
    b500:	e0bfff17 	ldw	r2,-4(fp)
    b504:	1080004c 	andi	r2,r2,1
    b508:	2085883a 	add	r2,r4,r2
    b50c:	18800035 	stwio	r2,0(r3)

          /* set start and write  bits which will start the transaction*/
  IOWR_I2C_OPENCORES_CR(base, I2C_OPENCORES_CR_STA_MSK | I2C_OPENCORES_CR_WR_MSK );
    b510:	e0bffd17 	ldw	r2,-12(fp)
    b514:	10800404 	addi	r2,r2,16
    b518:	1007883a 	mov	r3,r2
    b51c:	00802404 	movi	r2,144
    b520:	18800035 	stwio	r2,0(r3)

          /* wait for the trnasaction to be over.*/
  while( (IORD_I2C_OPENCORES_SR(base) & I2C_OPENCORES_SR_TIP_MSK) && (retries++ < MAX_RETRIES));
    b524:	0001883a 	nop
    b528:	e0bffd17 	ldw	r2,-12(fp)
    b52c:	10800404 	addi	r2,r2,16
    b530:	10800037 	ldwio	r2,0(r2)
    b534:	1080008c 	andi	r2,r2,2
    b538:	10000526 	beq	r2,zero,b550 <I2C_start+0x84>
    b53c:	e0bffc17 	ldw	r2,-16(fp)
    b540:	10c00044 	addi	r3,r2,1
    b544:	e0fffc15 	stw	r3,-16(fp)
    b548:	1080fa10 	cmplti	r2,r2,1000
    b54c:	103ff61e 	bne	r2,zero,b528 <_gp+0xffff6fe4>

         /* now check to see if the address was acknowledged */
   if((IORD_I2C_OPENCORES_SR(base) & I2C_OPENCORES_SR_RXNACK_MSK) || retries >= MAX_RETRIES)
    b550:	e0bffd17 	ldw	r2,-12(fp)
    b554:	10800404 	addi	r2,r2,16
    b558:	10800037 	ldwio	r2,0(r2)
    b55c:	1080200c 	andi	r2,r2,128
    b560:	1000031e 	bne	r2,zero,b570 <I2C_start+0xa4>
    b564:	e0bffc17 	ldw	r2,-16(fp)
    b568:	1080fa10 	cmplti	r2,r2,1000
    b56c:	1000021e 	bne	r2,zero,b578 <I2C_start+0xac>
   {
#ifdef  I2C_DEBUG
        printf("\tNOACK\n");
#endif
        return (I2C_NOACK);
    b570:	00800044 	movi	r2,1
    b574:	00000106 	br	b57c <I2C_start+0xb0>
   else
   {
#ifdef  I2C_DEBUG
        printf("\tACK\n");
#endif
       return (I2C_ACK);
    b578:	0005883a 	mov	r2,zero
   }
}
    b57c:	e037883a 	mov	sp,fp
    b580:	df000017 	ldw	fp,0(sp)
    b584:	dec00104 	addi	sp,sp,4
    b588:	f800283a 	ret

0000b58c <I2C_read>:
return value
       byte read back.
15-OCT-07 initial release
*****************************************************************/
alt_u32 I2C_read(alt_u32 base,alt_u32 last)
{
    b58c:	defffc04 	addi	sp,sp,-16
    b590:	df000315 	stw	fp,12(sp)
    b594:	df000304 	addi	fp,sp,12
    b598:	e13ffe15 	stw	r4,-8(fp)
    b59c:	e17fff15 	stw	r5,-4(fp)
	int retries = 0;
    b5a0:	e03ffd15 	stw	zero,-12(fp)
#ifdef  I2C_DEBUG
        printf(" Read I2C at 0x%x, \n\twith last0x%x\n",base,last);
#endif
  if( last)
    b5a4:	e0bfff17 	ldw	r2,-4(fp)
    b5a8:	10000626 	beq	r2,zero,b5c4 <I2C_read+0x38>
  {
               /* start a read and no ack and stop bit*/
           IOWR_I2C_OPENCORES_CR(base, I2C_OPENCORES_CR_RD_MSK |
    b5ac:	e0bffe17 	ldw	r2,-8(fp)
    b5b0:	10800404 	addi	r2,r2,16
    b5b4:	1007883a 	mov	r3,r2
    b5b8:	00801a04 	movi	r2,104
    b5bc:	18800035 	stwio	r2,0(r3)
    b5c0:	00000506 	br	b5d8 <I2C_read+0x4c>
               I2C_OPENCORES_CR_NACK_MSK | I2C_OPENCORES_CR_STO_MSK);
  }
  else
  {
          /* start read*/
          IOWR_I2C_OPENCORES_CR(base, I2C_OPENCORES_CR_RD_MSK );
    b5c4:	e0bffe17 	ldw	r2,-8(fp)
    b5c8:	10800404 	addi	r2,r2,16
    b5cc:	1007883a 	mov	r3,r2
    b5d0:	00800804 	movi	r2,32
    b5d4:	18800035 	stwio	r2,0(r3)
  }
          /* wait for the trnasaction to be over.*/
  while( (IORD_I2C_OPENCORES_SR(base) & I2C_OPENCORES_SR_TIP_MSK) && (retries++ < MAX_RETRIES));
    b5d8:	0001883a 	nop
    b5dc:	e0bffe17 	ldw	r2,-8(fp)
    b5e0:	10800404 	addi	r2,r2,16
    b5e4:	10800037 	ldwio	r2,0(r2)
    b5e8:	1080008c 	andi	r2,r2,2
    b5ec:	10000526 	beq	r2,zero,b604 <I2C_read+0x78>
    b5f0:	e0bffd17 	ldw	r2,-12(fp)
    b5f4:	10c00044 	addi	r3,r2,1
    b5f8:	e0fffd15 	stw	r3,-12(fp)
    b5fc:	1080fa10 	cmplti	r2,r2,1000
    b600:	103ff61e 	bne	r2,zero,b5dc <_gp+0xffff7098>

         /* now read the data */
        return (IORD_I2C_OPENCORES_RXR(base));
    b604:	e0bffe17 	ldw	r2,-8(fp)
    b608:	10800304 	addi	r2,r2,12
    b60c:	10800037 	ldwio	r2,0(r2)

}
    b610:	e037883a 	mov	sp,fp
    b614:	df000017 	ldw	fp,0(sp)
    b618:	dec00104 	addi	sp,sp,4
    b61c:	f800283a 	ret

0000b620 <I2C_write>:
       0 if address is acknowledged
       1 if address was not acknowledged
15-OCT-07 initial release
*****************************************************************/
alt_u32 I2C_write(alt_u32 base,alt_u8 data, alt_u32 last)
{
    b620:	defffb04 	addi	sp,sp,-20
    b624:	df000415 	stw	fp,16(sp)
    b628:	df000404 	addi	fp,sp,16
    b62c:	e13ffd15 	stw	r4,-12(fp)
    b630:	2805883a 	mov	r2,r5
    b634:	e1bfff15 	stw	r6,-4(fp)
    b638:	e0bffe05 	stb	r2,-8(fp)
	int retries = 0;
    b63c:	e03ffc15 	stw	zero,-16(fp)
  #ifdef  I2C_DEBUG
        printf(" Read I2C at 0x%x, \n\twith data 0x%x,\n\twith last0x%x\n",base,data,last);
#endif
                 /* transmit the data*/
  IOWR_I2C_OPENCORES_TXR(base, data);
    b640:	e0bffd17 	ldw	r2,-12(fp)
    b644:	10800304 	addi	r2,r2,12
    b648:	1007883a 	mov	r3,r2
    b64c:	e0bffe03 	ldbu	r2,-8(fp)
    b650:	18800035 	stwio	r2,0(r3)

  if( last)
    b654:	e0bfff17 	ldw	r2,-4(fp)
    b658:	10000626 	beq	r2,zero,b674 <I2C_write+0x54>
  {
               /* start a read and no ack and stop bit*/
           IOWR_I2C_OPENCORES_CR(base, I2C_OPENCORES_CR_WR_MSK |
    b65c:	e0bffd17 	ldw	r2,-12(fp)
    b660:	10800404 	addi	r2,r2,16
    b664:	1007883a 	mov	r3,r2
    b668:	00801404 	movi	r2,80
    b66c:	18800035 	stwio	r2,0(r3)
    b670:	00000506 	br	b688 <I2C_write+0x68>
               I2C_OPENCORES_CR_STO_MSK);
  }
  else
  {
          /* start read*/
          IOWR_I2C_OPENCORES_CR(base, I2C_OPENCORES_CR_WR_MSK );
    b674:	e0bffd17 	ldw	r2,-12(fp)
    b678:	10800404 	addi	r2,r2,16
    b67c:	1007883a 	mov	r3,r2
    b680:	00800404 	movi	r2,16
    b684:	18800035 	stwio	r2,0(r3)
  }
           /* wait for the trnasaction to be over.*/
  while( (IORD_I2C_OPENCORES_SR(base) & I2C_OPENCORES_SR_TIP_MSK) && (retries++ < MAX_RETRIES));
    b688:	0001883a 	nop
    b68c:	e0bffd17 	ldw	r2,-12(fp)
    b690:	10800404 	addi	r2,r2,16
    b694:	10800037 	ldwio	r2,0(r2)
    b698:	1080008c 	andi	r2,r2,2
    b69c:	10000526 	beq	r2,zero,b6b4 <I2C_write+0x94>
    b6a0:	e0bffc17 	ldw	r2,-16(fp)
    b6a4:	10c00044 	addi	r3,r2,1
    b6a8:	e0fffc15 	stw	r3,-16(fp)
    b6ac:	1080fa10 	cmplti	r2,r2,1000
    b6b0:	103ff61e 	bne	r2,zero,b68c <_gp+0xffff7148>

         /* now check to see if the address was acknowledged */
   if(IORD_I2C_OPENCORES_SR(base) & I2C_OPENCORES_SR_RXNACK_MSK)
    b6b4:	e0bffd17 	ldw	r2,-12(fp)
    b6b8:	10800404 	addi	r2,r2,16
    b6bc:	10800037 	ldwio	r2,0(r2)
    b6c0:	1080200c 	andi	r2,r2,128
    b6c4:	10000226 	beq	r2,zero,b6d0 <I2C_write+0xb0>
   {
#ifdef  I2C_DEBUG
        printf("\tNOACK\n");
#endif
        return (I2C_NOACK);
    b6c8:	00800044 	movi	r2,1
    b6cc:	00000106 	br	b6d4 <I2C_write+0xb4>
   else
   {
#ifdef  I2C_DEBUG
        printf("\tACK\n");
#endif
       return (I2C_ACK);
    b6d0:	0005883a 	mov	r2,zero
   }

}
    b6d4:	e037883a 	mov	sp,fp
    b6d8:	df000017 	ldw	fp,0(sp)
    b6dc:	dec00104 	addi	sp,sp,4
    b6e0:	f800283a 	ret

0000b6e4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    b6e4:	defffe04 	addi	sp,sp,-8
    b6e8:	dfc00115 	stw	ra,4(sp)
    b6ec:	df000015 	stw	fp,0(sp)
    b6f0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    b6f4:	d0a00817 	ldw	r2,-32736(gp)
    b6f8:	10000326 	beq	r2,zero,b708 <alt_get_errno+0x24>
    b6fc:	d0a00817 	ldw	r2,-32736(gp)
    b700:	103ee83a 	callr	r2
    b704:	00000106 	br	b70c <alt_get_errno+0x28>
    b708:	d0a0c704 	addi	r2,gp,-31972
}
    b70c:	e037883a 	mov	sp,fp
    b710:	dfc00117 	ldw	ra,4(sp)
    b714:	df000017 	ldw	fp,0(sp)
    b718:	dec00204 	addi	sp,sp,8
    b71c:	f800283a 	ret

0000b720 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    b720:	defffb04 	addi	sp,sp,-20
    b724:	dfc00415 	stw	ra,16(sp)
    b728:	df000315 	stw	fp,12(sp)
    b72c:	df000304 	addi	fp,sp,12
    b730:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    b734:	e0bfff17 	ldw	r2,-4(fp)
    b738:	10000816 	blt	r2,zero,b75c <close+0x3c>
    b73c:	01400304 	movi	r5,12
    b740:	e13fff17 	ldw	r4,-4(fp)
    b744:	000ad840 	call	ad84 <__mulsi3>
    b748:	1007883a 	mov	r3,r2
    b74c:	00800074 	movhi	r2,1
    b750:	10b0b904 	addi	r2,r2,-15644
    b754:	1885883a 	add	r2,r3,r2
    b758:	00000106 	br	b760 <close+0x40>
    b75c:	0005883a 	mov	r2,zero
    b760:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
    b764:	e0bffd17 	ldw	r2,-12(fp)
    b768:	10001926 	beq	r2,zero,b7d0 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    b76c:	e0bffd17 	ldw	r2,-12(fp)
    b770:	10800017 	ldw	r2,0(r2)
    b774:	10800417 	ldw	r2,16(r2)
    b778:	10000626 	beq	r2,zero,b794 <close+0x74>
    b77c:	e0bffd17 	ldw	r2,-12(fp)
    b780:	10800017 	ldw	r2,0(r2)
    b784:	10800417 	ldw	r2,16(r2)
    b788:	e13ffd17 	ldw	r4,-12(fp)
    b78c:	103ee83a 	callr	r2
    b790:	00000106 	br	b798 <close+0x78>
    b794:	0005883a 	mov	r2,zero
    b798:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    b79c:	e13fff17 	ldw	r4,-4(fp)
    b7a0:	000bd280 	call	bd28 <alt_release_fd>
    if (rval < 0)
    b7a4:	e0bffe17 	ldw	r2,-8(fp)
    b7a8:	1000070e 	bge	r2,zero,b7c8 <close+0xa8>
    {
      ALT_ERRNO = -rval;
    b7ac:	000b6e40 	call	b6e4 <alt_get_errno>
    b7b0:	1007883a 	mov	r3,r2
    b7b4:	e0bffe17 	ldw	r2,-8(fp)
    b7b8:	0085c83a 	sub	r2,zero,r2
    b7bc:	18800015 	stw	r2,0(r3)
      return -1;
    b7c0:	00bfffc4 	movi	r2,-1
    b7c4:	00000706 	br	b7e4 <close+0xc4>
    }
    return 0;
    b7c8:	0005883a 	mov	r2,zero
    b7cc:	00000506 	br	b7e4 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    b7d0:	000b6e40 	call	b6e4 <alt_get_errno>
    b7d4:	1007883a 	mov	r3,r2
    b7d8:	00801444 	movi	r2,81
    b7dc:	18800015 	stw	r2,0(r3)
    return -1;
    b7e0:	00bfffc4 	movi	r2,-1
  }
}
    b7e4:	e037883a 	mov	sp,fp
    b7e8:	dfc00117 	ldw	ra,4(sp)
    b7ec:	df000017 	ldw	fp,0(sp)
    b7f0:	dec00204 	addi	sp,sp,8
    b7f4:	f800283a 	ret

0000b7f8 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    b7f8:	deffff04 	addi	sp,sp,-4
    b7fc:	df000015 	stw	fp,0(sp)
    b800:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    b804:	0001883a 	nop
    b808:	e037883a 	mov	sp,fp
    b80c:	df000017 	ldw	fp,0(sp)
    b810:	dec00104 	addi	sp,sp,4
    b814:	f800283a 	ret

0000b818 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    b818:	defffc04 	addi	sp,sp,-16
    b81c:	df000315 	stw	fp,12(sp)
    b820:	df000304 	addi	fp,sp,12
    b824:	e13ffd15 	stw	r4,-12(fp)
    b828:	e17ffe15 	stw	r5,-8(fp)
    b82c:	e1bfff15 	stw	r6,-4(fp)
  return len;
    b830:	e0bfff17 	ldw	r2,-4(fp)
}
    b834:	e037883a 	mov	sp,fp
    b838:	df000017 	ldw	fp,0(sp)
    b83c:	dec00104 	addi	sp,sp,4
    b840:	f800283a 	ret

0000b844 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    b844:	defffe04 	addi	sp,sp,-8
    b848:	dfc00115 	stw	ra,4(sp)
    b84c:	df000015 	stw	fp,0(sp)
    b850:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    b854:	d0a00817 	ldw	r2,-32736(gp)
    b858:	10000326 	beq	r2,zero,b868 <alt_get_errno+0x24>
    b85c:	d0a00817 	ldw	r2,-32736(gp)
    b860:	103ee83a 	callr	r2
    b864:	00000106 	br	b86c <alt_get_errno+0x28>
    b868:	d0a0c704 	addi	r2,gp,-31972
}
    b86c:	e037883a 	mov	sp,fp
    b870:	dfc00117 	ldw	ra,4(sp)
    b874:	df000017 	ldw	fp,0(sp)
    b878:	dec00204 	addi	sp,sp,8
    b87c:	f800283a 	ret

0000b880 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    b880:	defffa04 	addi	sp,sp,-24
    b884:	dfc00515 	stw	ra,20(sp)
    b888:	df000415 	stw	fp,16(sp)
    b88c:	df000404 	addi	fp,sp,16
    b890:	e13ffe15 	stw	r4,-8(fp)
    b894:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    b898:	e0bffe17 	ldw	r2,-8(fp)
    b89c:	10000326 	beq	r2,zero,b8ac <alt_dev_llist_insert+0x2c>
    b8a0:	e0bffe17 	ldw	r2,-8(fp)
    b8a4:	10800217 	ldw	r2,8(r2)
    b8a8:	1000061e 	bne	r2,zero,b8c4 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
    b8ac:	000b8440 	call	b844 <alt_get_errno>
    b8b0:	1007883a 	mov	r3,r2
    b8b4:	00800584 	movi	r2,22
    b8b8:	18800015 	stw	r2,0(r3)
    return -EINVAL;
    b8bc:	00bffa84 	movi	r2,-22
    b8c0:	00001306 	br	b910 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    b8c4:	e0bffe17 	ldw	r2,-8(fp)
    b8c8:	e0ffff17 	ldw	r3,-4(fp)
    b8cc:	e0fffc15 	stw	r3,-16(fp)
    b8d0:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    b8d4:	e0bffd17 	ldw	r2,-12(fp)
    b8d8:	e0fffc17 	ldw	r3,-16(fp)
    b8dc:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    b8e0:	e0bffc17 	ldw	r2,-16(fp)
    b8e4:	10c00017 	ldw	r3,0(r2)
    b8e8:	e0bffd17 	ldw	r2,-12(fp)
    b8ec:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    b8f0:	e0bffc17 	ldw	r2,-16(fp)
    b8f4:	10800017 	ldw	r2,0(r2)
    b8f8:	e0fffd17 	ldw	r3,-12(fp)
    b8fc:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    b900:	e0bffc17 	ldw	r2,-16(fp)
    b904:	e0fffd17 	ldw	r3,-12(fp)
    b908:	10c00015 	stw	r3,0(r2)

  return 0;  
    b90c:	0005883a 	mov	r2,zero
}
    b910:	e037883a 	mov	sp,fp
    b914:	dfc00117 	ldw	ra,4(sp)
    b918:	df000017 	ldw	fp,0(sp)
    b91c:	dec00204 	addi	sp,sp,8
    b920:	f800283a 	ret

0000b924 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    b924:	deffff04 	addi	sp,sp,-4
    b928:	df000015 	stw	fp,0(sp)
    b92c:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
    b930:	0001883a 	nop
    b934:	e037883a 	mov	sp,fp
    b938:	df000017 	ldw	fp,0(sp)
    b93c:	dec00104 	addi	sp,sp,4
    b940:	f800283a 	ret

0000b944 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    b944:	defff804 	addi	sp,sp,-32
    b948:	dfc00715 	stw	ra,28(sp)
    b94c:	df000615 	stw	fp,24(sp)
    b950:	dc000515 	stw	r16,20(sp)
    b954:	df000604 	addi	fp,sp,24
    b958:	e13ffb15 	stw	r4,-20(fp)
    b95c:	e17ffc15 	stw	r5,-16(fp)
    b960:	e1bffd15 	stw	r6,-12(fp)
    b964:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
    b968:	e1bffe17 	ldw	r6,-8(fp)
    b96c:	e17ffd17 	ldw	r5,-12(fp)
    b970:	e13ffc17 	ldw	r4,-16(fp)
    b974:	000bbcc0 	call	bbcc <open>
    b978:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
    b97c:	e0bffa17 	ldw	r2,-24(fp)
    b980:	10002216 	blt	r2,zero,ba0c <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
    b984:	04000074 	movhi	r16,1
    b988:	8430b904 	addi	r16,r16,-15644
    b98c:	e0bffa17 	ldw	r2,-24(fp)
    b990:	01400304 	movi	r5,12
    b994:	1009883a 	mov	r4,r2
    b998:	000ad840 	call	ad84 <__mulsi3>
    b99c:	8085883a 	add	r2,r16,r2
    b9a0:	10c00017 	ldw	r3,0(r2)
    b9a4:	e0bffb17 	ldw	r2,-20(fp)
    b9a8:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    b9ac:	04000074 	movhi	r16,1
    b9b0:	8430b904 	addi	r16,r16,-15644
    b9b4:	e0bffa17 	ldw	r2,-24(fp)
    b9b8:	01400304 	movi	r5,12
    b9bc:	1009883a 	mov	r4,r2
    b9c0:	000ad840 	call	ad84 <__mulsi3>
    b9c4:	8085883a 	add	r2,r16,r2
    b9c8:	10800104 	addi	r2,r2,4
    b9cc:	10c00017 	ldw	r3,0(r2)
    b9d0:	e0bffb17 	ldw	r2,-20(fp)
    b9d4:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    b9d8:	04000074 	movhi	r16,1
    b9dc:	8430b904 	addi	r16,r16,-15644
    b9e0:	e0bffa17 	ldw	r2,-24(fp)
    b9e4:	01400304 	movi	r5,12
    b9e8:	1009883a 	mov	r4,r2
    b9ec:	000ad840 	call	ad84 <__mulsi3>
    b9f0:	8085883a 	add	r2,r16,r2
    b9f4:	10800204 	addi	r2,r2,8
    b9f8:	10c00017 	ldw	r3,0(r2)
    b9fc:	e0bffb17 	ldw	r2,-20(fp)
    ba00:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    ba04:	e13ffa17 	ldw	r4,-24(fp)
    ba08:	000bd280 	call	bd28 <alt_release_fd>
  }
} 
    ba0c:	0001883a 	nop
    ba10:	e6ffff04 	addi	sp,fp,-4
    ba14:	dfc00217 	ldw	ra,8(sp)
    ba18:	df000117 	ldw	fp,4(sp)
    ba1c:	dc000017 	ldw	r16,0(sp)
    ba20:	dec00304 	addi	sp,sp,12
    ba24:	f800283a 	ret

0000ba28 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    ba28:	defffb04 	addi	sp,sp,-20
    ba2c:	dfc00415 	stw	ra,16(sp)
    ba30:	df000315 	stw	fp,12(sp)
    ba34:	df000304 	addi	fp,sp,12
    ba38:	e13ffd15 	stw	r4,-12(fp)
    ba3c:	e17ffe15 	stw	r5,-8(fp)
    ba40:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    ba44:	01c07fc4 	movi	r7,511
    ba48:	01800044 	movi	r6,1
    ba4c:	e17ffd17 	ldw	r5,-12(fp)
    ba50:	01000074 	movhi	r4,1
    ba54:	2130bc04 	addi	r4,r4,-15632
    ba58:	000b9440 	call	b944 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    ba5c:	01c07fc4 	movi	r7,511
    ba60:	000d883a 	mov	r6,zero
    ba64:	e17ffe17 	ldw	r5,-8(fp)
    ba68:	01000074 	movhi	r4,1
    ba6c:	2130b904 	addi	r4,r4,-15644
    ba70:	000b9440 	call	b944 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    ba74:	01c07fc4 	movi	r7,511
    ba78:	01800044 	movi	r6,1
    ba7c:	e17fff17 	ldw	r5,-4(fp)
    ba80:	01000074 	movhi	r4,1
    ba84:	2130bf04 	addi	r4,r4,-15620
    ba88:	000b9440 	call	b944 <alt_open_fd>
}  
    ba8c:	0001883a 	nop
    ba90:	e037883a 	mov	sp,fp
    ba94:	dfc00117 	ldw	ra,4(sp)
    ba98:	df000017 	ldw	fp,0(sp)
    ba9c:	dec00204 	addi	sp,sp,8
    baa0:	f800283a 	ret

0000baa4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    baa4:	defffe04 	addi	sp,sp,-8
    baa8:	dfc00115 	stw	ra,4(sp)
    baac:	df000015 	stw	fp,0(sp)
    bab0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    bab4:	d0a00817 	ldw	r2,-32736(gp)
    bab8:	10000326 	beq	r2,zero,bac8 <alt_get_errno+0x24>
    babc:	d0a00817 	ldw	r2,-32736(gp)
    bac0:	103ee83a 	callr	r2
    bac4:	00000106 	br	bacc <alt_get_errno+0x28>
    bac8:	d0a0c704 	addi	r2,gp,-31972
}
    bacc:	e037883a 	mov	sp,fp
    bad0:	dfc00117 	ldw	ra,4(sp)
    bad4:	df000017 	ldw	fp,0(sp)
    bad8:	dec00204 	addi	sp,sp,8
    badc:	f800283a 	ret

0000bae0 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    bae0:	defffb04 	addi	sp,sp,-20
    bae4:	dfc00415 	stw	ra,16(sp)
    bae8:	df000315 	stw	fp,12(sp)
    baec:	dc000215 	stw	r16,8(sp)
    baf0:	df000304 	addi	fp,sp,12
    baf4:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    baf8:	e0bffe17 	ldw	r2,-8(fp)
    bafc:	10800217 	ldw	r2,8(r2)
    bb00:	10d00034 	orhi	r3,r2,16384
    bb04:	e0bffe17 	ldw	r2,-8(fp)
    bb08:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    bb0c:	e03ffd15 	stw	zero,-12(fp)
    bb10:	00002306 	br	bba0 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    bb14:	04000074 	movhi	r16,1
    bb18:	8430b904 	addi	r16,r16,-15644
    bb1c:	e0bffd17 	ldw	r2,-12(fp)
    bb20:	01400304 	movi	r5,12
    bb24:	1009883a 	mov	r4,r2
    bb28:	000ad840 	call	ad84 <__mulsi3>
    bb2c:	8085883a 	add	r2,r16,r2
    bb30:	10c00017 	ldw	r3,0(r2)
    bb34:	e0bffe17 	ldw	r2,-8(fp)
    bb38:	10800017 	ldw	r2,0(r2)
    bb3c:	1880151e 	bne	r3,r2,bb94 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    bb40:	04000074 	movhi	r16,1
    bb44:	8430b904 	addi	r16,r16,-15644
    bb48:	e0bffd17 	ldw	r2,-12(fp)
    bb4c:	01400304 	movi	r5,12
    bb50:	1009883a 	mov	r4,r2
    bb54:	000ad840 	call	ad84 <__mulsi3>
    bb58:	8085883a 	add	r2,r16,r2
    bb5c:	10800204 	addi	r2,r2,8
    bb60:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    bb64:	10000b0e 	bge	r2,zero,bb94 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    bb68:	01400304 	movi	r5,12
    bb6c:	e13ffd17 	ldw	r4,-12(fp)
    bb70:	000ad840 	call	ad84 <__mulsi3>
    bb74:	1007883a 	mov	r3,r2
    bb78:	00800074 	movhi	r2,1
    bb7c:	10b0b904 	addi	r2,r2,-15644
    bb80:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    bb84:	e0bffe17 	ldw	r2,-8(fp)
    bb88:	18800226 	beq	r3,r2,bb94 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
    bb8c:	00bffcc4 	movi	r2,-13
    bb90:	00000806 	br	bbb4 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    bb94:	e0bffd17 	ldw	r2,-12(fp)
    bb98:	10800044 	addi	r2,r2,1
    bb9c:	e0bffd15 	stw	r2,-12(fp)
    bba0:	d0a00717 	ldw	r2,-32740(gp)
    bba4:	1007883a 	mov	r3,r2
    bba8:	e0bffd17 	ldw	r2,-12(fp)
    bbac:	18bfd92e 	bgeu	r3,r2,bb14 <_gp+0xffff75d0>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    bbb0:	0005883a 	mov	r2,zero
}
    bbb4:	e6ffff04 	addi	sp,fp,-4
    bbb8:	dfc00217 	ldw	ra,8(sp)
    bbbc:	df000117 	ldw	fp,4(sp)
    bbc0:	dc000017 	ldw	r16,0(sp)
    bbc4:	dec00304 	addi	sp,sp,12
    bbc8:	f800283a 	ret

0000bbcc <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    bbcc:	defff604 	addi	sp,sp,-40
    bbd0:	dfc00915 	stw	ra,36(sp)
    bbd4:	df000815 	stw	fp,32(sp)
    bbd8:	df000804 	addi	fp,sp,32
    bbdc:	e13ffd15 	stw	r4,-12(fp)
    bbe0:	e17ffe15 	stw	r5,-8(fp)
    bbe4:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    bbe8:	00bfffc4 	movi	r2,-1
    bbec:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
    bbf0:	00bffb44 	movi	r2,-19
    bbf4:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
    bbf8:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    bbfc:	d1600504 	addi	r5,gp,-32748
    bc00:	e13ffd17 	ldw	r4,-12(fp)
    bc04:	000bdd00 	call	bdd0 <alt_find_dev>
    bc08:	e0bff815 	stw	r2,-32(fp)
    bc0c:	e0bff817 	ldw	r2,-32(fp)
    bc10:	1000051e 	bne	r2,zero,bc28 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    bc14:	e13ffd17 	ldw	r4,-12(fp)
    bc18:	000be600 	call	be60 <alt_find_file>
    bc1c:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
    bc20:	00800044 	movi	r2,1
    bc24:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    bc28:	e0bff817 	ldw	r2,-32(fp)
    bc2c:	10002b26 	beq	r2,zero,bcdc <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
    bc30:	e13ff817 	ldw	r4,-32(fp)
    bc34:	000bf680 	call	bf68 <alt_get_fd>
    bc38:	e0bff915 	stw	r2,-28(fp)
    bc3c:	e0bff917 	ldw	r2,-28(fp)
    bc40:	1000030e 	bge	r2,zero,bc50 <open+0x84>
    {
      status = index;
    bc44:	e0bff917 	ldw	r2,-28(fp)
    bc48:	e0bffa15 	stw	r2,-24(fp)
    bc4c:	00002506 	br	bce4 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
    bc50:	01400304 	movi	r5,12
    bc54:	e13ff917 	ldw	r4,-28(fp)
    bc58:	000ad840 	call	ad84 <__mulsi3>
    bc5c:	1007883a 	mov	r3,r2
    bc60:	00800074 	movhi	r2,1
    bc64:	10b0b904 	addi	r2,r2,-15644
    bc68:	1885883a 	add	r2,r3,r2
    bc6c:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    bc70:	e0fffe17 	ldw	r3,-8(fp)
    bc74:	00900034 	movhi	r2,16384
    bc78:	10bfffc4 	addi	r2,r2,-1
    bc7c:	1886703a 	and	r3,r3,r2
    bc80:	e0bffc17 	ldw	r2,-16(fp)
    bc84:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    bc88:	e0bffb17 	ldw	r2,-20(fp)
    bc8c:	1000051e 	bne	r2,zero,bca4 <open+0xd8>
    bc90:	e13ffc17 	ldw	r4,-16(fp)
    bc94:	000bae00 	call	bae0 <alt_file_locked>
    bc98:	e0bffa15 	stw	r2,-24(fp)
    bc9c:	e0bffa17 	ldw	r2,-24(fp)
    bca0:	10001016 	blt	r2,zero,bce4 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    bca4:	e0bff817 	ldw	r2,-32(fp)
    bca8:	10800317 	ldw	r2,12(r2)
    bcac:	10000826 	beq	r2,zero,bcd0 <open+0x104>
    bcb0:	e0bff817 	ldw	r2,-32(fp)
    bcb4:	10800317 	ldw	r2,12(r2)
    bcb8:	e1ffff17 	ldw	r7,-4(fp)
    bcbc:	e1bffe17 	ldw	r6,-8(fp)
    bcc0:	e17ffd17 	ldw	r5,-12(fp)
    bcc4:	e13ffc17 	ldw	r4,-16(fp)
    bcc8:	103ee83a 	callr	r2
    bccc:	00000106 	br	bcd4 <open+0x108>
    bcd0:	0005883a 	mov	r2,zero
    bcd4:	e0bffa15 	stw	r2,-24(fp)
    bcd8:	00000206 	br	bce4 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
    bcdc:	00bffb44 	movi	r2,-19
    bce0:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    bce4:	e0bffa17 	ldw	r2,-24(fp)
    bce8:	1000090e 	bge	r2,zero,bd10 <open+0x144>
  {
    alt_release_fd (index);  
    bcec:	e13ff917 	ldw	r4,-28(fp)
    bcf0:	000bd280 	call	bd28 <alt_release_fd>
    ALT_ERRNO = -status;
    bcf4:	000baa40 	call	baa4 <alt_get_errno>
    bcf8:	1007883a 	mov	r3,r2
    bcfc:	e0bffa17 	ldw	r2,-24(fp)
    bd00:	0085c83a 	sub	r2,zero,r2
    bd04:	18800015 	stw	r2,0(r3)
    return -1;
    bd08:	00bfffc4 	movi	r2,-1
    bd0c:	00000106 	br	bd14 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
    bd10:	e0bff917 	ldw	r2,-28(fp)
}
    bd14:	e037883a 	mov	sp,fp
    bd18:	dfc00117 	ldw	ra,4(sp)
    bd1c:	df000017 	ldw	fp,0(sp)
    bd20:	dec00204 	addi	sp,sp,8
    bd24:	f800283a 	ret

0000bd28 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    bd28:	defffc04 	addi	sp,sp,-16
    bd2c:	dfc00315 	stw	ra,12(sp)
    bd30:	df000215 	stw	fp,8(sp)
    bd34:	dc000115 	stw	r16,4(sp)
    bd38:	df000204 	addi	fp,sp,8
    bd3c:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
    bd40:	e0bffe17 	ldw	r2,-8(fp)
    bd44:	108000d0 	cmplti	r2,r2,3
    bd48:	1000111e 	bne	r2,zero,bd90 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
    bd4c:	04000074 	movhi	r16,1
    bd50:	8430b904 	addi	r16,r16,-15644
    bd54:	e0bffe17 	ldw	r2,-8(fp)
    bd58:	01400304 	movi	r5,12
    bd5c:	1009883a 	mov	r4,r2
    bd60:	000ad840 	call	ad84 <__mulsi3>
    bd64:	8085883a 	add	r2,r16,r2
    bd68:	10800204 	addi	r2,r2,8
    bd6c:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    bd70:	04000074 	movhi	r16,1
    bd74:	8430b904 	addi	r16,r16,-15644
    bd78:	e0bffe17 	ldw	r2,-8(fp)
    bd7c:	01400304 	movi	r5,12
    bd80:	1009883a 	mov	r4,r2
    bd84:	000ad840 	call	ad84 <__mulsi3>
    bd88:	8085883a 	add	r2,r16,r2
    bd8c:	10000015 	stw	zero,0(r2)
  }
}
    bd90:	0001883a 	nop
    bd94:	e6ffff04 	addi	sp,fp,-4
    bd98:	dfc00217 	ldw	ra,8(sp)
    bd9c:	df000117 	ldw	fp,4(sp)
    bda0:	dc000017 	ldw	r16,0(sp)
    bda4:	dec00304 	addi	sp,sp,12
    bda8:	f800283a 	ret

0000bdac <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    bdac:	deffff04 	addi	sp,sp,-4
    bdb0:	df000015 	stw	fp,0(sp)
    bdb4:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    bdb8:	000170fa 	wrctl	ienable,zero
}
    bdbc:	0001883a 	nop
    bdc0:	e037883a 	mov	sp,fp
    bdc4:	df000017 	ldw	fp,0(sp)
    bdc8:	dec00104 	addi	sp,sp,4
    bdcc:	f800283a 	ret

0000bdd0 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    bdd0:	defffa04 	addi	sp,sp,-24
    bdd4:	dfc00515 	stw	ra,20(sp)
    bdd8:	df000415 	stw	fp,16(sp)
    bddc:	df000404 	addi	fp,sp,16
    bde0:	e13ffe15 	stw	r4,-8(fp)
    bde4:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
    bde8:	e0bfff17 	ldw	r2,-4(fp)
    bdec:	10800017 	ldw	r2,0(r2)
    bdf0:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    bdf4:	e13ffe17 	ldw	r4,-8(fp)
    bdf8:	000c07c0 	call	c07c <strlen>
    bdfc:	10800044 	addi	r2,r2,1
    be00:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    be04:	00000d06 	br	be3c <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    be08:	e0bffc17 	ldw	r2,-16(fp)
    be0c:	10800217 	ldw	r2,8(r2)
    be10:	e0fffd17 	ldw	r3,-12(fp)
    be14:	180d883a 	mov	r6,r3
    be18:	e17ffe17 	ldw	r5,-8(fp)
    be1c:	1009883a 	mov	r4,r2
    be20:	000c04c0 	call	c04c <memcmp>
    be24:	1000021e 	bne	r2,zero,be30 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    be28:	e0bffc17 	ldw	r2,-16(fp)
    be2c:	00000706 	br	be4c <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    be30:	e0bffc17 	ldw	r2,-16(fp)
    be34:	10800017 	ldw	r2,0(r2)
    be38:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    be3c:	e0fffc17 	ldw	r3,-16(fp)
    be40:	e0bfff17 	ldw	r2,-4(fp)
    be44:	18bff01e 	bne	r3,r2,be08 <_gp+0xffff78c4>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    be48:	0005883a 	mov	r2,zero
}
    be4c:	e037883a 	mov	sp,fp
    be50:	dfc00117 	ldw	ra,4(sp)
    be54:	df000017 	ldw	fp,0(sp)
    be58:	dec00204 	addi	sp,sp,8
    be5c:	f800283a 	ret

0000be60 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    be60:	defffb04 	addi	sp,sp,-20
    be64:	dfc00415 	stw	ra,16(sp)
    be68:	df000315 	stw	fp,12(sp)
    be6c:	df000304 	addi	fp,sp,12
    be70:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    be74:	d0a00317 	ldw	r2,-32756(gp)
    be78:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    be7c:	00003106 	br	bf44 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
    be80:	e0bffd17 	ldw	r2,-12(fp)
    be84:	10800217 	ldw	r2,8(r2)
    be88:	1009883a 	mov	r4,r2
    be8c:	000c07c0 	call	c07c <strlen>
    be90:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
    be94:	e0bffd17 	ldw	r2,-12(fp)
    be98:	10c00217 	ldw	r3,8(r2)
    be9c:	e0bffe17 	ldw	r2,-8(fp)
    bea0:	10bfffc4 	addi	r2,r2,-1
    bea4:	1885883a 	add	r2,r3,r2
    bea8:	10800003 	ldbu	r2,0(r2)
    beac:	10803fcc 	andi	r2,r2,255
    beb0:	1080201c 	xori	r2,r2,128
    beb4:	10bfe004 	addi	r2,r2,-128
    beb8:	10800bd8 	cmpnei	r2,r2,47
    bebc:	1000031e 	bne	r2,zero,becc <alt_find_file+0x6c>
    {
      len -= 1;
    bec0:	e0bffe17 	ldw	r2,-8(fp)
    bec4:	10bfffc4 	addi	r2,r2,-1
    bec8:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    becc:	e0bffe17 	ldw	r2,-8(fp)
    bed0:	e0ffff17 	ldw	r3,-4(fp)
    bed4:	1885883a 	add	r2,r3,r2
    bed8:	10800003 	ldbu	r2,0(r2)
    bedc:	10803fcc 	andi	r2,r2,255
    bee0:	1080201c 	xori	r2,r2,128
    bee4:	10bfe004 	addi	r2,r2,-128
    bee8:	10800be0 	cmpeqi	r2,r2,47
    beec:	1000081e 	bne	r2,zero,bf10 <alt_find_file+0xb0>
    bef0:	e0bffe17 	ldw	r2,-8(fp)
    bef4:	e0ffff17 	ldw	r3,-4(fp)
    bef8:	1885883a 	add	r2,r3,r2
    befc:	10800003 	ldbu	r2,0(r2)
    bf00:	10803fcc 	andi	r2,r2,255
    bf04:	1080201c 	xori	r2,r2,128
    bf08:	10bfe004 	addi	r2,r2,-128
    bf0c:	10000a1e 	bne	r2,zero,bf38 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    bf10:	e0bffd17 	ldw	r2,-12(fp)
    bf14:	10800217 	ldw	r2,8(r2)
    bf18:	e0fffe17 	ldw	r3,-8(fp)
    bf1c:	180d883a 	mov	r6,r3
    bf20:	e17fff17 	ldw	r5,-4(fp)
    bf24:	1009883a 	mov	r4,r2
    bf28:	000c04c0 	call	c04c <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    bf2c:	1000021e 	bne	r2,zero,bf38 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
    bf30:	e0bffd17 	ldw	r2,-12(fp)
    bf34:	00000706 	br	bf54 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
    bf38:	e0bffd17 	ldw	r2,-12(fp)
    bf3c:	10800017 	ldw	r2,0(r2)
    bf40:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    bf44:	e0fffd17 	ldw	r3,-12(fp)
    bf48:	d0a00304 	addi	r2,gp,-32756
    bf4c:	18bfcc1e 	bne	r3,r2,be80 <_gp+0xffff793c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
    bf50:	0005883a 	mov	r2,zero
}
    bf54:	e037883a 	mov	sp,fp
    bf58:	dfc00117 	ldw	ra,4(sp)
    bf5c:	df000017 	ldw	fp,0(sp)
    bf60:	dec00204 	addi	sp,sp,8
    bf64:	f800283a 	ret

0000bf68 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    bf68:	defffa04 	addi	sp,sp,-24
    bf6c:	dfc00515 	stw	ra,20(sp)
    bf70:	df000415 	stw	fp,16(sp)
    bf74:	dc000315 	stw	r16,12(sp)
    bf78:	df000404 	addi	fp,sp,16
    bf7c:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
    bf80:	00bffa04 	movi	r2,-24
    bf84:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    bf88:	e03ffc15 	stw	zero,-16(fp)
    bf8c:	00001d06 	br	c004 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
    bf90:	04000074 	movhi	r16,1
    bf94:	8430b904 	addi	r16,r16,-15644
    bf98:	e0bffc17 	ldw	r2,-16(fp)
    bf9c:	01400304 	movi	r5,12
    bfa0:	1009883a 	mov	r4,r2
    bfa4:	000ad840 	call	ad84 <__mulsi3>
    bfa8:	8085883a 	add	r2,r16,r2
    bfac:	10800017 	ldw	r2,0(r2)
    bfb0:	1000111e 	bne	r2,zero,bff8 <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
    bfb4:	04000074 	movhi	r16,1
    bfb8:	8430b904 	addi	r16,r16,-15644
    bfbc:	e0bffc17 	ldw	r2,-16(fp)
    bfc0:	01400304 	movi	r5,12
    bfc4:	1009883a 	mov	r4,r2
    bfc8:	000ad840 	call	ad84 <__mulsi3>
    bfcc:	8085883a 	add	r2,r16,r2
    bfd0:	e0fffe17 	ldw	r3,-8(fp)
    bfd4:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
    bfd8:	d0e00717 	ldw	r3,-32740(gp)
    bfdc:	e0bffc17 	ldw	r2,-16(fp)
    bfe0:	1880020e 	bge	r3,r2,bfec <alt_get_fd+0x84>
      {
        alt_max_fd = i;
    bfe4:	e0bffc17 	ldw	r2,-16(fp)
    bfe8:	d0a00715 	stw	r2,-32740(gp)
      }
      rc = i;
    bfec:	e0bffc17 	ldw	r2,-16(fp)
    bff0:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
    bff4:	00000606 	br	c010 <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    bff8:	e0bffc17 	ldw	r2,-16(fp)
    bffc:	10800044 	addi	r2,r2,1
    c000:	e0bffc15 	stw	r2,-16(fp)
    c004:	e0bffc17 	ldw	r2,-16(fp)
    c008:	10800810 	cmplti	r2,r2,32
    c00c:	103fe01e 	bne	r2,zero,bf90 <_gp+0xffff7a4c>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
    c010:	e0bffd17 	ldw	r2,-12(fp)
}
    c014:	e6ffff04 	addi	sp,fp,-4
    c018:	dfc00217 	ldw	ra,8(sp)
    c01c:	df000117 	ldw	fp,4(sp)
    c020:	dc000017 	ldw	r16,0(sp)
    c024:	dec00304 	addi	sp,sp,12
    c028:	f800283a 	ret

0000c02c <exit>:
    c02c:	defffe04 	addi	sp,sp,-8
    c030:	000b883a 	mov	r5,zero
    c034:	dc000015 	stw	r16,0(sp)
    c038:	dfc00115 	stw	ra,4(sp)
    c03c:	2021883a 	mov	r16,r4
    c040:	000c0980 	call	c098 <__call_exitprocs>
    c044:	8009883a 	mov	r4,r16
    c048:	000c2280 	call	c228 <_exit>

0000c04c <memcmp>:
    c04c:	218d883a 	add	r6,r4,r6
    c050:	21800826 	beq	r4,r6,c074 <memcmp+0x28>
    c054:	20800003 	ldbu	r2,0(r4)
    c058:	28c00003 	ldbu	r3,0(r5)
    c05c:	10c00226 	beq	r2,r3,c068 <memcmp+0x1c>
    c060:	10c5c83a 	sub	r2,r2,r3
    c064:	f800283a 	ret
    c068:	21000044 	addi	r4,r4,1
    c06c:	29400044 	addi	r5,r5,1
    c070:	003ff706 	br	c050 <_gp+0xffff7b0c>
    c074:	0005883a 	mov	r2,zero
    c078:	f800283a 	ret

0000c07c <strlen>:
    c07c:	2005883a 	mov	r2,r4
    c080:	10c00007 	ldb	r3,0(r2)
    c084:	18000226 	beq	r3,zero,c090 <strlen+0x14>
    c088:	10800044 	addi	r2,r2,1
    c08c:	003ffc06 	br	c080 <_gp+0xffff7b3c>
    c090:	1105c83a 	sub	r2,r2,r4
    c094:	f800283a 	ret

0000c098 <__call_exitprocs>:
    c098:	defff504 	addi	sp,sp,-44
    c09c:	dd000515 	stw	r20,20(sp)
    c0a0:	05000074 	movhi	r20,1
    c0a4:	dc800315 	stw	r18,12(sp)
    c0a8:	dfc00a15 	stw	ra,40(sp)
    c0ac:	df000915 	stw	fp,36(sp)
    c0b0:	ddc00815 	stw	r23,32(sp)
    c0b4:	dd800715 	stw	r22,28(sp)
    c0b8:	dd400615 	stw	r21,24(sp)
    c0bc:	dcc00415 	stw	r19,16(sp)
    c0c0:	dc400215 	stw	r17,8(sp)
    c0c4:	dc000115 	stw	r16,4(sp)
    c0c8:	d9000015 	stw	r4,0(sp)
    c0cc:	2825883a 	mov	r18,r5
    c0d0:	a5315a04 	addi	r20,r20,-15000
    c0d4:	a4400017 	ldw	r17,0(r20)
    c0d8:	8cc00c17 	ldw	r19,48(r17)
    c0dc:	8c400c04 	addi	r17,r17,48
    c0e0:	98004526 	beq	r19,zero,c1f8 <__call_exitprocs+0x160>
    c0e4:	9c000117 	ldw	r16,4(r19)
    c0e8:	00900034 	movhi	r2,16384
    c0ec:	10bfffc4 	addi	r2,r2,-1
    c0f0:	9d402217 	ldw	r21,136(r19)
    c0f4:	85bfffc4 	addi	r22,r16,-1
    c0f8:	80a1883a 	add	r16,r16,r2
    c0fc:	8421883a 	add	r16,r16,r16
    c100:	8421883a 	add	r16,r16,r16
    c104:	ac2f883a 	add	r23,r21,r16
    c108:	84000204 	addi	r16,r16,8
    c10c:	9c21883a 	add	r16,r19,r16
    c110:	b0002716 	blt	r22,zero,c1b0 <__call_exitprocs+0x118>
    c114:	90000726 	beq	r18,zero,c134 <__call_exitprocs+0x9c>
    c118:	a800041e 	bne	r21,zero,c12c <__call_exitprocs+0x94>
    c11c:	b5bfffc4 	addi	r22,r22,-1
    c120:	bdffff04 	addi	r23,r23,-4
    c124:	843fff04 	addi	r16,r16,-4
    c128:	003ff906 	br	c110 <_gp+0xffff7bcc>
    c12c:	b9002017 	ldw	r4,128(r23)
    c130:	913ffa1e 	bne	r18,r4,c11c <_gp+0xffff7bd8>
    c134:	99000117 	ldw	r4,4(r19)
    c138:	82000017 	ldw	r8,0(r16)
    c13c:	213fffc4 	addi	r4,r4,-1
    c140:	b100021e 	bne	r22,r4,c14c <__call_exitprocs+0xb4>
    c144:	9d800115 	stw	r22,4(r19)
    c148:	00000106 	br	c150 <__call_exitprocs+0xb8>
    c14c:	80000015 	stw	zero,0(r16)
    c150:	403ff226 	beq	r8,zero,c11c <_gp+0xffff7bd8>
    c154:	9f000117 	ldw	fp,4(r19)
    c158:	a8000526 	beq	r21,zero,c170 <__call_exitprocs+0xd8>
    c15c:	00800044 	movi	r2,1
    c160:	1592983a 	sll	r9,r2,r22
    c164:	a9404017 	ldw	r5,256(r21)
    c168:	494a703a 	and	r5,r9,r5
    c16c:	2800021e 	bne	r5,zero,c178 <__call_exitprocs+0xe0>
    c170:	403ee83a 	callr	r8
    c174:	00000906 	br	c19c <__call_exitprocs+0x104>
    c178:	a9004117 	ldw	r4,260(r21)
    c17c:	4908703a 	and	r4,r9,r4
    c180:	2000041e 	bne	r4,zero,c194 <__call_exitprocs+0xfc>
    c184:	b9400017 	ldw	r5,0(r23)
    c188:	d9000017 	ldw	r4,0(sp)
    c18c:	403ee83a 	callr	r8
    c190:	00000206 	br	c19c <__call_exitprocs+0x104>
    c194:	b9000017 	ldw	r4,0(r23)
    c198:	403ee83a 	callr	r8
    c19c:	99000117 	ldw	r4,4(r19)
    c1a0:	e13fcc1e 	bne	fp,r4,c0d4 <_gp+0xffff7b90>
    c1a4:	89000017 	ldw	r4,0(r17)
    c1a8:	993fdc26 	beq	r19,r4,c11c <_gp+0xffff7bd8>
    c1ac:	003fc906 	br	c0d4 <_gp+0xffff7b90>
    c1b0:	00800034 	movhi	r2,0
    c1b4:	10800004 	addi	r2,r2,0
    c1b8:	10000f26 	beq	r2,zero,c1f8 <__call_exitprocs+0x160>
    c1bc:	99400117 	ldw	r5,4(r19)
    c1c0:	99000017 	ldw	r4,0(r19)
    c1c4:	2800091e 	bne	r5,zero,c1ec <__call_exitprocs+0x154>
    c1c8:	20000826 	beq	r4,zero,c1ec <__call_exitprocs+0x154>
    c1cc:	89000015 	stw	r4,0(r17)
    c1d0:	a8000226 	beq	r21,zero,c1dc <__call_exitprocs+0x144>
    c1d4:	a809883a 	mov	r4,r21
    c1d8:	00000000 	call	0 <__alt_mem_oc_mem-0x8000>
    c1dc:	9809883a 	mov	r4,r19
    c1e0:	00000000 	call	0 <__alt_mem_oc_mem-0x8000>
    c1e4:	8cc00017 	ldw	r19,0(r17)
    c1e8:	003fbd06 	br	c0e0 <_gp+0xffff7b9c>
    c1ec:	9823883a 	mov	r17,r19
    c1f0:	2027883a 	mov	r19,r4
    c1f4:	003fba06 	br	c0e0 <_gp+0xffff7b9c>
    c1f8:	dfc00a17 	ldw	ra,40(sp)
    c1fc:	df000917 	ldw	fp,36(sp)
    c200:	ddc00817 	ldw	r23,32(sp)
    c204:	dd800717 	ldw	r22,28(sp)
    c208:	dd400617 	ldw	r21,24(sp)
    c20c:	dd000517 	ldw	r20,20(sp)
    c210:	dcc00417 	ldw	r19,16(sp)
    c214:	dc800317 	ldw	r18,12(sp)
    c218:	dc400217 	ldw	r17,8(sp)
    c21c:	dc000117 	ldw	r16,4(sp)
    c220:	dec00b04 	addi	sp,sp,44
    c224:	f800283a 	ret

0000c228 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    c228:	defffd04 	addi	sp,sp,-12
    c22c:	df000215 	stw	fp,8(sp)
    c230:	df000204 	addi	fp,sp,8
    c234:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
    c238:	0001883a 	nop
    c23c:	e0bfff17 	ldw	r2,-4(fp)
    c240:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
    c244:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    c248:	10000226 	beq	r2,zero,c254 <_exit+0x2c>
    ALT_SIM_FAIL();
    c24c:	002af070 	cmpltui	zero,zero,43969
    c250:	00000106 	br	c258 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
    c254:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    c258:	003fff06 	br	c258 <_gp+0xffff7d14>
